package com.pacytology.pcs;/*    PENNSYLVANIA CYTOLOGY SERVICES    LABORATORY INFORMATION SYSTEM V1.0    Copyright (C) 2001 by John Cardella    All Rights Reserved        File:       CarrierDbOps.java    Created By: John Cardella, Software Engineer        Function:   Database operations for payers screen.        MODIFICATIONS ----------------------------------    Date/Staff      Description:*/import java.lang.*;import java.sql.*;public class CarrierDbOps implements Runnable{    Thread dbThread;    int tMode;    final int INIT = (-1);    final int NULLVAL = (-1);    final int GETSEQ = 200;    final int ZIP = 201;    CarrierForm parent;        public CarrierDbOps(CarrierForm p) { parent=p; }        public void carrierFormInit() {        tMode=INIT;        parent.dbThreadRunning=true;        dbThread = new Thread(this);        dbThread.setPriority(Thread.MAX_PRIORITY);        dbThread.start();    }        public void getNextID() {        tMode=GETSEQ;        parent.dbThreadRunning=true;        dbThread = new Thread(this);        dbThread.setPriority(Thread.MAX_PRIORITY);        dbThread.start();    }        String zip5 = null;    public void getZipInfo(String zip5) {        this.zip5=zip5;        tMode=ZIP;        dbThread = new Thread(this);        dbThread.start();    }        public synchronized void run() {        if (tMode==GETSEQ) {            int newID = generateID();            parent.cIDNum.setText(Integer.toString(newID));        }        else if (tMode==ZIP) {            queryZip(zip5);        }        parent.dbThreadRunning=false;    }    public boolean add() {        boolean exitStatus=true;        try  {            String SQL =                 "INSERT INTO pcs.carriers \n"+                "   (name,address1,address2,city,state, \n"+                "    zip,phone,fax,billing_choice, \n"+                "    e_billing,id_number,carrier_id,tpp, \n"+                "    payer_id,provider_id,card_type,enroll, \n"+                "    services,active_status) \n"+                "VALUES (?,?,?,?,?,?,?,?,?,?,?, \n"+                "    pcs.carriers_seq.nextval,?,?,?,?,?,?,?)\n";            PreparedStatement pstmt = dbConnection.process().prepareStatement(SQL);            pstmt.setString(1,parent.cRec.name);            pstmt.setString(2,parent.cRec.address1);            pstmt.setString(3,parent.cRec.address2);            pstmt.setString(4,parent.cRec.city);            pstmt.setString(5,parent.cRec.state);            pstmt.setString(6,parent.cRec.zip);            pstmt.setString(7,parent.cRec.phone);            pstmt.setString(8,parent.cRec.fax);            pstmt.setInt(9,parent.cRec.billing_choice);            pstmt.setString(10,parent.cRec.e_billing);            pstmt.setInt(11,parent.cRec.id_number);            pstmt.setString(12,parent.cRec.tpp);            pstmt.setString(13,parent.cRec.payer_id);            pstmt.setString(14,parent.cRec.provider_id);            pstmt.setString(15,parent.cRec.card_type);            pstmt.setString(16,parent.cRec.enroll);            pstmt.setString(17,parent.cRec.services);            pstmt.setString(18,parent.cRec.active_status);            int rs = pstmt.executeUpdate();            if (rs>0) {                SQL =                     "SELECT carrier_id FROM pcs.carriers \n"+                    "WHERE id_number="+parent.cRec.id_number+"\n ";                Statement stmt = dbConnection.process().createStatement();                ResultSet rs2 = stmt.executeQuery(SQL);                while (rs2.next()) { parent.cRec.carrier_id=rs2.getInt(1); }                if (!Utils.isNull(parent.cRec.comment_text)) {                    SQL =                         "INSERT INTO pcs.carrier_comments \n"+                        "VALUES ("+parent.cRec.carrier_id+                        ",'"+parent.cRec.comment_text+"') \n";                    stmt=dbConnection.process().createStatement();                    rs=stmt.executeUpdate(SQL);                }                try { rs2.close(); stmt.close(); }                catch (SQLException e) { parent.log.write(e); }            }            else { exitStatus=false; }            try { pstmt.close(); }            catch (SQLException e) {                 parent.log.write(e);                 exitStatus=false;             }        }        catch (Exception e) {            parent.log.write("add carrier");            parent.log.write(e);            exitStatus=false;        }        return(exitStatus);                }                public boolean merge()    {        boolean exitStatus=true;        CallableStatement cstmt = null;        try {            cstmt=dbConnection.process().prepareCall("{call pcs.payer_merge(?,?)}");            cstmt.setInt(1,parent.remove);            cstmt.setInt(2,parent.retain);            cstmt.executeUpdate();            try { cstmt.close(); }            catch (SQLException e) { parent.log.write(e); exitStatus=false; }        }         catch (Exception e) { parent.log.write(e); exitStatus=false; }        return (exitStatus);    }    public boolean update() {        boolean exitStatus=true;        try  {            String SQL =                 "UPDATE pcs.carriers SET \n"+                "    name = ?, \n"+                "    address1 = ?, \n"+                "    address2 = ?, \n"+                "    city = ?, \n"+                "    state = ?, \n"+                "    zip = ?, \n"+                "    phone = ?, \n"+                "    fax = ?, \n"+                "    billing_choice = ?, \n"+                "    e_billing = ?, \n"+                "    id_number = ?, \n"+                "    tpp = ?, \n"+                "    payer_id = ?, \n"+                "    provider_id = ?, \n"+                "    card_type = ?, \n"+                "    enroll = ?, \n"+                "    services = ?, \n"+                "    active_status = ? \n"+                "WHERE carrier_id = ? \n";            PreparedStatement pstmt = dbConnection.process().prepareStatement(SQL);            pstmt.setString(1,parent.cRec.name);            pstmt.setString(2,parent.cRec.address1);            pstmt.setString(3,parent.cRec.address2);            pstmt.setString(4,parent.cRec.city);            pstmt.setString(5,parent.cRec.state);            pstmt.setString(6,parent.cRec.zip);            pstmt.setString(7,parent.cRec.phone);            pstmt.setString(8,parent.cRec.fax);            pstmt.setInt(9,parent.cRec.billing_choice);            pstmt.setString(10,parent.cRec.e_billing);            pstmt.setInt(11,parent.cRec.id_number);            pstmt.setString(12,parent.cRec.tpp);            pstmt.setString(13,parent.cRec.payer_id);            pstmt.setString(14,parent.cRec.provider_id);            pstmt.setString(15,parent.cRec.card_type);            pstmt.setString(16,parent.cRec.enroll);            pstmt.setString(17,parent.cRec.services);            pstmt.setString(18,parent.cRec.active_status);            pstmt.setInt(19,parent.cRec.carrier_id);                        int rs = pstmt.executeUpdate();            if (rs>0) {                if (!Utils.isNull(parent.cRec.comment_text)) {                    SQL =                         "SELECT count(*) from pcs.carrier_comments \n"+                        "WHERE carrier_id="+parent.cRec.carrier_id+" \n";                                            Statement stmt = dbConnection.process().createStatement();                    ResultSet rs2 = stmt.executeQuery(SQL);                    int rcnt = 0;                    while (rs2.next()) { rcnt=rs2.getInt(1); }                    if (rcnt>0) {                        SQL =                             "UPDATE pcs.carrier_comments \n"+                            "SET comment_text = ? \n"+                            "WHERE carrier_id = ? \n";                    }                    else {                        SQL =                             "INSERT INTO pcs.carrier_comments \n"+                            "(comment_text,carrier_id) VALUES (?,?) \n";                    }                    pstmt=dbConnection.process().prepareStatement(SQL);                    pstmt.setString(1,parent.cRec.comment_text);                    pstmt.setInt(2,parent.cRec.carrier_id);                    rs = pstmt.executeUpdate();                    try { rs2.close(); stmt.close(); }                    catch (SQLException e) { parent.log.write(e); }                }            }            else { exitStatus=false; }            try { pstmt.close(); }            catch (SQLException e) { parent.log.write(e); exitStatus=false; }                        }        catch (Exception e) {            parent.log.write("update carrier");            parent.log.write(e);            exitStatus=false;        }        return(exitStatus);                }            public boolean query()  {        boolean exitStatus=true;        try  {            String SQL =                 "SELECT \n"+                "   a.carrier_id,a.name,a.address1, \n"+                "   a.address2,a.city,a.state,a.zip, \n"+                "   a.phone,a.fax,a.billing_choice, \n"+                "   a.e_billing,a.id_number, \n"+                "   b.comment_text,a.tpp,a.card_type, \n"+                "   a.enroll,a.services,a.payer_id, \n"+                "   a.provider_id,a.active_status \n"+                "FROM \n"+                "   pcs.carriers a, pcs.carrier_comments b, pcs.billing_choices bc \n"+                "WHERE \n"+                "   a.billing_choice=bc.billing_choice and \n"+                "   a.carrier_id=b.carrier_id(+) \n";                        if (parent.autoQuery) {                SQL=SQL+"   and a.carrier_id="+                    parent.cRec.carrier_id+" \n";                parent.autoQuery=false;                                }            else if (parent.currMode==Lab.MERGE) {                SQL=SQL+"   and a.id_number IN ("+                    parent.mergeRetain.getText()+","+                    parent.mergeRemove.getText()+") \n";            }            else {                if (!Utils.isNull(parent.cIDNum.getText())) {                    int idNum = (int)Integer.parseInt(parent.cIDNum.getText());                    SQL=SQL+"   and a.id_number="+idNum+" \n";                }                if (!Utils.isNull(parent.cName.getText())) {                    String nm = (String)parent.cName.getText();                    SQL=SQL+"   and a.name like '"+nm+"%' \n";                }                if (!Utils.isNull(parent.cPayerID.getText())) {                    String pid = (String)parent.cPayerID.getText();                    SQL=SQL+"   and a.payer_id='"+pid+"' \n";                }                if (parent.hasParent) {                    SQL=SQL+"   and bc.choice_code='OI' \n";                }            }            Statement stmt = dbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(SQL);            int rowsReturned=0;            while (rs.next()) {                CarrierRec data = new CarrierRec(                    rs.getInt(1),rs.getString(2),rs.getString(3),rs.getString(4),                    rs.getString(5),rs.getString(6),rs.getString(7),rs.getString(8),                    rs.getString(9),rs.getInt(10),rs.getString(11),rs.getInt(12),                    rs.getString(13),rs.getString(14),rs.getString(15),rs.getString(16),                    rs.getString(17),rs.getString(18),rs.getString(19),rs.getString(20));                parent.cRecVect.addElement(data);                                }                   parent.cVectSize=parent.cRecVect.size();            if (parent.cVectSize<1) {                 exitStatus=false;                Utils.createErrMsg("No Data Returned");            }            try { rs.close(); stmt.close(); }            catch (SQLException e) { parent.log.write(e); exitStatus=false; }                        }        catch (Exception e) {            exitStatus=false;            parent.log.write(e);            parent.msgLabel.setText("Operation Failed");        }        return(exitStatus);                }     public int generateID()  {        int next_id = 0;        try  {            String SQL =                 "SELECT pcs.pcs_payer_seq.nextval FROM dual \n";            Statement stmt = dbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(SQL);            while (rs.next()) { next_id = rs.getInt(1); }            try { rs.close(); stmt.close(); }            catch (SQLException e) { parent.log.write(e);  }                        }        catch (Exception e) {            parent.log.write("generateID");            parent.log.write(e);             parent.msgLabel.setText("Operation Failed");        }        return (next_id);                }     public boolean queryZip(String zip5) {        boolean exitStatus=true;        try  {            String SQL =                 "SELECT city,state FROM pcs.zipcodes WHERE zip='"+zip5+"' \n";            Statement stmt = dbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(SQL);            int rcnt=0;            while (rs.next()) {                parent.cCity.setText(rs.getString(1));                parent.cState.setText(rs.getString(2));                rcnt++;            }                   if (rcnt==0) {                 Utils.createErrMsg("City/State not found for "+zip5);                exitStatus=false;             }            else {                  parent.cRec.zip=Utils.stripZipMask(parent.cZip.getText());                parent.cRec.city=parent.cCity.getText();                parent.cRec.state=parent.cState.getText();            }            try { rs.close(); stmt.close(); }            catch (SQLException e) { parent.log.write(e); exitStatus=false; }                        }        catch (Exception e) {            exitStatus=false;            parent.log.write(e);             parent.msgLabel.setText("Operation Failed");        }        return(exitStatus);                }        public void close()    {    }    }
