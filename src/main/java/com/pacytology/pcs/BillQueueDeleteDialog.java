/*
    PENNSYLVANIA CYTOLOGY SERVICES
    LABORATORY INFORMATION SYSTEM V1.0
    Copyright (C) 2001 by John Cardella
    All Rights Reserved
    
    File:       BillQueueDeleteDialog.java
    Created By: John Cardella, Software Engineer
    
    Function:   Manually deletes a lab from the billing queue
    
    MODIFICATIONS ----------------------------------
    Date/Staff      Description:
*/

import java.awt.*;
import javax.swing.*;
import java.sql.*;
import java.awt.Toolkit;
import java.awt.Window;
import java.util.Properties;
import java.util.Vector;
import java.awt.Font;

public class BillQueueDeleteDialog extends javax.swing.JDialog
{
    Login dbLogin;
    LogFile log;
    Vector labList;
    boolean special=false;
    String grandTotal;
    Frame f;
    
    final boolean BILLING_QUEUE = true;
    final boolean LETTER_QUEUE = false;
    boolean QUEUE;
    
	public BillQueueDeleteDialog()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Billing Queue Removal");
		setModal(true);
		setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(230,74);
		setVisible(false);
		JLabel11.setText("Enter Lab Number:");
		getContentPane().add(JLabel11);
		JLabel11.setForeground(java.awt.Color.black);
		JLabel11.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel11.setBounds(20,16,110,14);
		getContentPane().add(labNumber);
		labNumber.setFont(new Font("SansSerif", Font.BOLD, 12));
		labNumber.setBounds(130,14,80,20);
		printButton.setText("Retrieve");
		printButton.setActionCommand("Print");
		printButton.setEnabled(false);
		getContentPane().add(printButton);
		printButton.setFont(new Font("Dialog", Font.BOLD, 12));
		printButton.setBounds(130,44,82,24);
		printButton.setVisible(false);
		resetClaim.setText("Reset Claim");
		getContentPane().add(resetClaim);
		resetClaim.setBounds(20,24,86,40);
		//}}
		
		labNumber.setDisabledTextColor(Color.black);
		
		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		labNumber.addKeyListener(aSymKey);
		SymAction lSymAction = new SymAction();
		printButton.addActionListener(lSymAction);
		//}}
	}
	
	public BillQueueDeleteDialog(Login dbLogin, boolean queue)
	{
	    this();
	    this.dbLogin=dbLogin;
	    if (queue==BILLING_QUEUE) {
	        QUEUE=queue;
            this.log = new LogFile(
                dbLogin.logPath,"BillQueueDeleteDialog",
                dbLogin.dateToday,dbLogin.userName);
        }
        else if (queue==LETTER_QUEUE) {
            QUEUE=queue;
            this.setTitle("Fax Letter Removal");
            this.log = new LogFile(
                dbLogin.logPath,"LetterQueueDeleteDialog",
                dbLogin.dateToday,dbLogin.userName);
        }
	}
	
	public BillQueueDeleteDialog(Login dbLogin,Frame f)
	{
	    this();
	    this.dbLogin=dbLogin;
        this.log = new LogFile(
            dbLogin.logPath,"SpecialTasks",
            dbLogin.dateToday,dbLogin.userName);
        printButton.setVisible(true);
        printButton.setEnabled(true);
        this.special=true;
        this.f=f;
        labList = new Vector();
	}

	public void setVisible(boolean b)
	{
		if (b) setLocation(50,50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new BillQueueDeleteDialog()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JLabel JLabel11 = new javax.swing.JLabel();
	javax.swing.JTextField labNumber = new javax.swing.JTextField();
	javax.swing.JButton printButton = new javax.swing.JButton();
	javax.swing.JCheckBox resetClaim = new javax.swing.JCheckBox();
	//}}


	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == BillQueueDeleteDialog.this)
				BillQueueDeleteDialog_windowClosing(event);
		}

		public void windowOpened(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == BillQueueDeleteDialog.this)
				BillQueueDeleteDialog_windowOpened(event);
		}
	}

	void BillQueueDeleteDialog_windowOpened(java.awt.event.WindowEvent event)
	{
        labNumber.requestFocus();
	}

	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == labNumber)
				labNumber_keyTyped(event);
		}

		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == BillQueueDeleteDialog.this)
				BillQueueDeleteDialog_keyPressed(event);
			else if (object == labNumber)
				labNumber_keyPressed(event);
		}
	}

	void BillQueueDeleteDialog_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_F9) closingActions();
	}

	void labNumber_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event);
	}

	void labNumber_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (special) {
		        labList.addElement(labNumber.getText());
		        labNumber.setText(null);
		    }
		    else if (Utils.required(labNumber,"Lab Number")) {
		        int LN = Integer.parseInt(labNumber.getText());
		        if (QUEUE==BILLING_QUEUE)
		            removeFromBillingQueue(LN);
		        else if (QUEUE==LETTER_QUEUE)
		            removeFromLetterQueue(LN);
		    }
		}
	}
	
    void removeFromBillingQueue(int lab_number) {
        try  {
            Class.forName(dbLogin.driver);
            String SQL =
                "SELECT rebilling, billing_type \n"+
                "FROM pcs.billing_queue \n"+
                "WHERE lab_number = ? \n";
            PreparedStatement pstmt = dbConnection.process().prepareStatement(SQL);
            pstmt.setInt(1,lab_number);
            ResultSet rs = pstmt.executeQuery();
            int rebilling = -1;
            String b_type = null;
            while (rs.next()) { rebilling=rs.getInt(1); b_type=rs.getString(2); }
            if (rebilling==(-1)) {
                Utils.createErrMsg(
                    "LAB #"+lab_number+" is NOT in the billing queue.");
                log.write(
                    "LAB "+lab_number+" NOT in therefore removed from billing queue");
            }
            else {
                int claim_id = -1;
                SQL =
                    "DELETE from pcs.billing_queue \n"+
                    "WHERE lab_number = ? \n";
                pstmt=dbConnection.process().prepareStatement(SQL);
                pstmt.setInt(1,lab_number);
                pstmt.execute();
                log.write(
                    "LAB "+lab_number+" removed from billing queue");
                if (resetClaim.isSelected()) {
                    SQL =  
                        "SELECT MAX(claim_id) from pcs.lab_claims \n"+
                        "WHERE lab_number = ? \n";
                    pstmt=dbConnection.process().prepareStatement(SQL);
                    pstmt.setInt(1,lab_number);
                    rs=pstmt.executeQuery();
                    while (rs.next()) { claim_id=rs.getInt(1); }
                    if (claim_id>0) {
                        SQL =
                            "UPDATE pcs.lab_claims \n"+
                            "SET claim_status = 'S' \n"+
                            "WHERE lab_number = ? \n";
                        pstmt=dbConnection.process().prepareStatement(SQL);
                        pstmt.setInt(1,lab_number);
                        pstmt.execute();
                    }
                }
            }
            try { rs.close(); pstmt.close(); }
            catch (SQLException e) { log.write(e.toString()); }                
            catch (Exception e) { log.write(e.toString()); }
        }
        catch (SQLException e) { log.write(e.toString()); }
        catch (Exception e) { log.write(e.toString()); }
        finally { closingActions(); }
    }

    void removeFromLetterQueue(int lab_number) {
        try  {
            Class.forName(dbLogin.driver);
            String SQL =
                "SELECT in_queue,letter_type \n"+
                "FROM pcs.fax_letters \n"+
                "WHERE lab_number = ? \n";
            PreparedStatement pstmt = dbConnection.process().prepareStatement(SQL);
            pstmt.setInt(1,lab_number);
            ResultSet rs = pstmt.executeQuery();
            int in_queue = -1;
            String l_type = null;
            while (rs.next()) { in_queue=rs.getInt(1); l_type=rs.getString(2); }
            if (in_queue==(-1)) {
                Utils.createErrMsg(
                    "LAB #"+lab_number+" is NOT in the fax letter queue.");
                log.write(
                    "LAB "+lab_number+" NOT in therefore removed from fax letter queue");
            }
            else {
                SQL =
                    "DELETE from pcs.fax_letters \n"+
                    "WHERE lab_number = ? \n";
                pstmt=dbConnection.process().prepareStatement(SQL);
                pstmt.setInt(1,lab_number);
                pstmt.execute();
                log.write(
                    "LAB "+lab_number+" removed from fax letter queue");
                CallableStatement cstmt;
	            cstmt=dbConnection.process().prepareCall(
	                "{call pcs.calculate_cost(?)}");
                cstmt.setInt(1,lab_number);
                cstmt.executeUpdate();
                cstmt.close();
            }
            try { pstmt.close(); }
            catch (SQLException e) { log.write(e.toString()); }                
            catch (Exception e) { log.write(e.toString()); }
        }
        catch (SQLException e) { log.write(e.toString()); }
        catch (Exception e) { log.write(e.toString()); }
        finally { closingActions(); }
    }
    
	void BillQueueDeleteDialog_windowClosing(java.awt.event.WindowEvent event)
	{
		closingActions();
	}
	
	void closingActions()
	{
	    log.stop();
	    this.dispose();
	}
	
	/*****************************************************/
	/* SPECIAL TASKS                                     */
	/*****************************************************/

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == printButton)
				printButton_actionPerformed(event);
		}
	}

	void printButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		if (labList.size()==0) Utils.createErrMsg("No Lab Numbers Entered!");
		else {
		    retrieveData();
		    printCreditMemo();
		}
	}
	
	void retrieveData()
	{
	    String SQL =
	        "SELECT TO_CHAR(A.lab_number)||' '||RPAD(SUBSTR(B.lname||', '||B.fname,1,26),28)|| \n"+
	        "   TO_CHAR(A.date_collected,'MM/DD/YYYY')|| \n"+
	        "   '  '||RPAD(NVL(A.patient_id,' '),16)||RPAD(SUBSTR(C.name,1,28),30)|| \n"+
	        "   '  '||TO_CHAR(E.discount_price,'990.00') \n"+
	        "FROM pcs.lab_requisitions A, pcs.patients B, pcs.practices C, pcs.lab_billing_items D, pcs.price_code_details E \n"+
	        "WHERE A.lab_number=D.lab_number and A.patient=B.patient and A.practice=C.practice and D.price_code=E.price_code and D.procedure_code=E.procedure_code \n"+
	        "AND D.procedure_code in ('88142','87621','G0123') \n"+
	        "AND A.lab_number in (\n";
	        
        String SUM_SQL =
	        "SELECT TO_CHAR(SUM(discount_price),'99,999.00') \n"+
	        "FROM pcs.lab_requisitions A, pcs.patients B, pcs.practices C, pcs.lab_billing_items D, pcs.price_code_details E\n"+
	        "WHERE A.lab_number=D.lab_number and A.patient=B.patient and A.practice=C.practice and D.price_code=E.price_code and D.procedure_code=E.procedure_code \n"+
	        "AND D.procedure_code in ('88142','87621','G0123') \n"+
	        "AND A.lab_number in (\n";

	    for (int i=0; i<labList.size(); i++) {
	        String s = (String)labList.elementAt(i);
	        if (i==labList.size()-1) {
	            SQL+="2006"+s+") \n";
	            SUM_SQL+="2006"+s+") \n";
	        }
	        else { 
	            SQL+="2006"+s+", \n";
	            SUM_SQL+="2006"+s+", \n";
	        }
	    }
	    SQL+="ORDER BY A.date_collected,A.lab_number \n";
	    
	    log.write(SQL);
	    log.write(SUM_SQL);
	    
        try  {
            Class.forName(dbLogin.driver);
            labList = new Vector();
            Statement stmt = dbConnection.process().createStatement();
            ResultSet rs = stmt.executeQuery(SQL);
            while (rs.next()) { String s = rs.getString(1); labList.addElement(s); }
            try { stmt.close(); rs.close(); }
            catch (SQLException e) { log.write(e.toString()); }                
            catch (Exception e) { log.write(e.toString()); }
            stmt = dbConnection.process().createStatement();
            rs = stmt.executeQuery(SUM_SQL);
            while (rs.next()) { grandTotal=rs.getString(1); }
            try { stmt.close(); rs.close(); }
            catch (SQLException e) { log.write(e.toString()); }                
            catch (Exception e) { log.write(e.toString()); }
        }
        catch (SQLException e) { log.write(e.toString()); }
        catch (Exception e) { log.write(e.toString()); }
	}
	
	void printCreditMemo() 
	{
        PrintJob pjob;
        Properties p = new java.util.Properties();
        Graphics pgraphics;
        String name = new String("Special Tasks");
        pjob=getToolkit().getPrintJob(f,name,p);
        if (pjob!=null) {
            double maxPerPage = 60;
            int numPages = (int)Math.ceil(labList.size()/maxPerPage);
            int startNdx=0, endNdx=(int)maxPerPage;
            if (endNdx>=labList.size()) endNdx=labList.size();
            for (int currPage=1; currPage<=numPages; currPage++) {
                pgraphics=pjob.getGraphics();
                if (pgraphics!=null) {
	                int x=30,y=46;
                    pgraphics.setFont(new Font("SansSerif",Font.BOLD,14));
                    pgraphics.drawString("PENNSYLVANIA CYTOLOGY SERVICES",x,y);
                    pgraphics.setFont(new Font("SansSerif",Font.PLAIN,12));
                    x=500;
                    pgraphics.drawString("Page "+currPage,x,y);
                    x=30;
                    y+=14;
                    pgraphics.drawString("339 Old Haymaker Road",x,y);
                    y+=12;
                    pgraphics.drawString("Parkway Building, Suite 1700",x,y);
                    y+=12;
                    pgraphics.drawString("Monroeville, PA  15146",x,y);
                    y+=12;
                    pgraphics.setFont(new Font("SansSerif",Font.PLAIN,10));
                    pgraphics.drawString("Phone: 412.373.8300   Fax: 412.373.7027",x,y);
                    pgraphics.drawLine(30,y,574,y);
                    y+=20;
                    pgraphics.setFont(new Font("SansSerif",Font.PLAIN,12));
                    String s = "The following credits were a result of payment from the patient's insurance carrier:";
                    pgraphics.drawString(s,x,y);
                    y+=14;
                    pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,8));
                    String dotted = "-----------------------------------------------------------------------------------------------------------";
                    String heading = "LAB#:      PATIENT:                    SVC DATE:   PT ID#:         LOCATION:                         AMT: ";                                         
                    pgraphics.drawString(dotted,x,y);
                    y+=10;
                    pgraphics.drawString(heading,x,y);
                    y+=10;
                    pgraphics.drawString(dotted,x,y);
                    y+=10;
                    for (int i=startNdx; i<endNdx; i++) {
                        s=(String)labList.elementAt(i);
                        pgraphics.drawString(s,x,y);
                        y+=10;
                    }
                    pgraphics.drawString(dotted,x,y);
                    y+=10;
                    pgraphics.drawLine(30,y,574,y);
                    if (currPage==numPages) {
                        x=418; y+=10;
                        pgraphics.drawString("TOTAL CREDITS: "+grandTotal,x,y);
                    }
                    pgraphics.dispose();
                }
                startNdx=endNdx;
                endNdx+=(int)maxPerPage;
                if (endNdx>=labList.size()) endNdx=labList.size();

            }
        }
        pjob.end();
	}
	
}
