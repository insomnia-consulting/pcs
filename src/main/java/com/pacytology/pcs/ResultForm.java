package com.pacytology.pcs;
/*
    PENNSYLVANIA CYTOLOGY SERVICES
    LABORATORY INFORMATION SYSTEM V1.0
    Copyright (C) 2001 by John Cardella
    All Rights Reserved
    
    File:       ResultForm.java
    Created By: John Cardella, Software Engineer
    
    Function:   Data entry form for entering lab results
    
    MODIFICATIONS ----------------------------------
    Date/Staff      Description:
*/

import java.awt.*;
import java.awt.event.KeyEvent;

import javax.swing.*;

import com.pacytology.pcs.ui.Square;
import java.util.Vector;
import javax.swing.table.*;
import com.pacytology.pcs.ui.Square;
import javax.swing.border.TitledBorder;

public class ResultForm extends javax.swing.JFrame
{
    Login dbLogin;
    Vector labResults = new Vector();
    Vector qcResults = new Vector();
    Vector pathResults = new Vector();
    FunctionKeyControl fKeys = new FunctionKeyControl();
    final int REVERSE=(-101);
    public boolean QC=false;
    public boolean hasQC=false;
    public boolean PC=false;
    public boolean hasPC=false;
    public int currMode=Lab.IDLE;
    ResultRec resultRec = new ResultRec();
    public int NUM_RESULTS=0;
    public int MAX_TECHS=0;
    public TechRec[] techs;
    public int MAX_PATHS=0;
    public PathRec[] paths;
    public ResultCodeRec[] resultCodes;
    public int MAX_RESULT_CODES=0;
    public int matIndexRequested=0;
    final int NO_PRINT=0;
    public static final int DRAFT = 1;
    public static final int FINAL = 2;
    public static final int DRAFT_COPY = 3;
    public static final int FINAL_COPY = 4;
    ResultDbOps resDbOps;
    boolean dbThreadRunning=false;
    boolean completedFlag=false;
    boolean ctFlag=false;
    String resCompletedSave;
    String resCytoTechSave;
    public ResultTableData rData;
    public JTable resultTable; 
    public boolean editResRemarks = false;
    public JTableHeader header;
    public JScrollPane resultScrollPane;
    public LogFile log;
	//public JTextArea labComments = new javax.swing.JTextArea();
    
    String newCode;
    String oldCode;
    String addCode;
    int oldCodeNdx;
    int ndx;
    
    int numSCR=0;
    int numQC=0;
    int numPATH=0;
    
    boolean hxOverride=true;

	final int CONFIRM_PRINT = 900;
	final int CONFIRM_MI = 901;
	public int buttonMode = Lab.IDLE;
	
	final int dateWindow = 30;
	
	public ResultForm()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(790,502);
		setVisible(false);
		patientPanel.setBorder(titledBorder2);
		patientPanel.setLayout(null);
		getContentPane().add(patientPanel);
		patientPanel.setBounds(248,64,528,144);
		resLabNumber.setEnabled(false);
		patientPanel.add(resLabNumber);
		resLabNumber.setFont(new Font("DialogInput", Font.BOLD, 12));
		resLabNumber.setBounds(52,32,76,20);
		resPrevLabNum.setEnabled(false);
		patientPanel.add(resPrevLabNum);
		resPrevLabNum.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resPrevLabNum.setBounds(166,32,76,20);
		resDateCollected.setEnabled(false);
		patientPanel.add(resDateCollected);
		resDateCollected.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resDateCollected.setBounds(310,32,76,20);
		resPatient.setEnabled(false);
		patientPanel.add(resPatient);
		resPatient.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resPatient.setBounds(70,58,170,20);
		resDOB.setEnabled(false);
		patientPanel.add(resDOB);
		resDOB.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resDOB.setBounds(438,58,76,20);
		resAddress.setEnabled(false);
		patientPanel.add(resAddress);
		resAddress.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resAddress.setBounds(70,84,270,20);
		resDoctor.setEnabled(false);
		patientPanel.add(resDoctor);
		resDoctor.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resDoctor.setBounds(170,112,210,20);
		resPractice.setEnabled(false);
		patientPanel.add(resPractice);
		resPractice.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resPractice.setBounds(482,112,30,20);
		resBilling.setEnabled(false);
		patientPanel.add(resBilling);
		resBilling.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resBilling.setBounds(70,112,32,20);
		JLabel1.setText("Patient");
		patientPanel.add(JLabel1);
		JLabel1.setBounds(16,60,70,12);
		labSSNLbl.setText("SSN");
		patientPanel.add(labSSNLbl);
		labSSNLbl.setBounds(260,60,40,12);
		labAddrLbl.setText("Address");
		patientPanel.add(labAddrLbl);
		labAddrLbl.setForeground(new java.awt.Color(102,102,153));
		labAddrLbl.setBounds(16,86,70,12);
		labCollDateLbl.setText("Collected");
		patientPanel.add(labCollDateLbl);
		labCollDateLbl.setBounds(252,34,58,12);
		JLabel6.setText("Prev");
		patientPanel.add(JLabel6);
		JLabel6.setBackground(new java.awt.Color(204,204,204));
		JLabel6.setBounds(136,34,32,12);
		labNumLbl.setText("Lab #");
		patientPanel.add(labNumLbl);
		labNumLbl.setBounds(16,34,42,12);
		labPracticeLbl.setText("Account");
		patientPanel.add(labPracticeLbl);
		labPracticeLbl.setForeground(new java.awt.Color(102,102,153));
		labPracticeLbl.setBounds(420,114,56,12);
		JLabel2.setText("Doctor");
		patientPanel.add(JLabel2);
		JLabel2.setForeground(new java.awt.Color(102,102,153));
		JLabel2.setBounds(126,114,40,12);
		resPhoneLbl.setText("Phone");
		patientPanel.add(resPhoneLbl);
		resPhoneLbl.setBounds(360,86,48,12);
		resDOBLbl.setText("DOB");
		patientPanel.add(resDOBLbl);
		resDOBLbl.setBounds(400,60,30,12);
		JLabel3.setText("Billing");
		patientPanel.add(JLabel3);
		JLabel3.setForeground(new java.awt.Color(102,102,153));
		JLabel3.setBounds(18,114,40,12);
		resPracticeName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		patientPanel.add(resPracticeName);
		resPracticeName.setForeground(new java.awt.Color(102,102,153));
		resPracticeName.setFont(new Font("Dialog", Font.BOLD, 10));
		resPracticeName.setBounds(102,12,306,12);
		resDateReceived.setEnabled(false);
		patientPanel.add(resDateReceived);
		resDateReceived.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resDateReceived.setBounds(438,32,76,20);
		JLabel4.setText("Recv\'d");
		patientPanel.add(JLabel4);
		JLabel4.setBounds(394,34,50,12);
		resSSN.setEnabled(false);
		patientPanel.add(resSSN);
		resSSN.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resSSN.setBounds(290,58,86,20);
		resPhone.setEnabled(false);
		patientPanel.add(resPhone);
		resPhone.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resPhone.setBounds(406,84,108,20);
		patientPanel.add(prepLbl);
		prepLbl.setBounds(16,12,102,12);
		patientPanel.add(pracType);
		pracType.setBounds(432,12,82,12);
		screeningPanel.setBorder(titledBorder1);
		screeningPanel.setLayout(null);
		getContentPane().add(screeningPanel);
		screeningPanel.setBounds(20,64,208,108);
		resCompleted.setEnabled(false);
		screeningPanel.add(resCompleted);
		resCompleted.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resCompleted.setBounds(120,24,76,20);
		resCytoTech.setEnabled(false);
		screeningPanel.add(resCytoTech);
		resCytoTech.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resCytoTech.setBounds(120,46,76,20);
		resultCode.setEnabled(false);
		screeningPanel.add(resultCode);
		resultCode.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resultCode.setBounds(120,68,76,20);
		resCytoTechLbl.setText("Cytotechnologist");
		screeningPanel.add(resCytoTechLbl);
		resCytoTechLbl.setBounds(16,48,100,16);
		resultCodeLbl.setText("Result Code");
		screeningPanel.add(resultCodeLbl);
		resultCodeLbl.setBounds(16,70,90,12);
		resCompletedLbl.setText("Date Completed");
		screeningPanel.add(resCompletedLbl);
		resCompletedLbl.setBounds(16,26,90,12);
		MIPanel.setBorder(titledBorder6);
		MIPanel.setLayout(null);
		getContentPane().add(MIPanel);
		MIPanel.setBounds(20,176,208,108);
		resSuper.setText("0");
		resSuper.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		resSuper.setEnabled(false);
		MIPanel.add(resSuper);
		resSuper.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resSuper.setBounds(120,20,76,20);
		resInter.setText("0");
		resInter.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		resInter.setEnabled(false);
		MIPanel.add(resInter);
		resInter.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resInter.setBounds(120,42,76,20);
		resPara.setText("0");
		resPara.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		resPara.setEnabled(false);
		MIPanel.add(resPara);
		resPara.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resPara.setBounds(120,64,76,20);
		JLabel7.setText("Superficial");
		MIPanel.add(JLabel7);
		JLabel7.setBounds(16,22,70,12);
		JLabel8.setText("Intermediate");
		MIPanel.add(JLabel8);
		JLabel8.setBounds(16,44,80,12);
		JLabel9.setText("Parabasal");
		MIPanel.add(JLabel9);
		JLabel9.setBounds(16,66,60,12);
		QCPanel.setBorder(titledBorder3);
		QCPanel.setLayout(null);
		getContentPane().add(QCPanel);
		QCPanel.setBounds(20,290,208,108);
		qcCompleted.setEnabled(false);
		QCPanel.add(qcCompleted);
		qcCompleted.setFont(new Font("DialogInput", Font.PLAIN, 12));
		qcCompleted.setBounds(120,24,76,20);
		qcCytoTech.setEnabled(false);
		QCPanel.add(qcCytoTech);
		qcCytoTech.setFont(new Font("DialogInput", Font.PLAIN, 12));
		qcCytoTech.setBounds(120,46,76,20);
		qcResultCode.setEnabled(false);
		QCPanel.add(qcResultCode);
		qcResultCode.setFont(new Font("DialogInput", Font.PLAIN, 12));
		qcResultCode.setBounds(120,68,76,20);
		JLabel16.setText("Result Code");
		QCPanel.add(JLabel16);
		JLabel16.setBounds(16,70,90,16);
		JLabel14.setText("Date Completed");
		QCPanel.add(JLabel14);
		JLabel14.setBounds(16,26,90,12);
		JLabel15.setText("Cytotechnologist");
		QCPanel.add(JLabel15);
		JLabel15.setBounds(16,48,100,12);
		pathologistPanel.setBorder(titledBorder4);
		pathologistPanel.setLayout(null);
		getContentPane().add(pathologistPanel);
		pathologistPanel.setBounds(248,344,208,108);
		pathCompleted.setEnabled(false);
		pathologistPanel.add(pathCompleted);
		pathCompleted.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pathCompleted.setBounds(120,24,76,20);
		resPathologist.setEnabled(false);
		pathologistPanel.add(resPathologist);
		resPathologist.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resPathologist.setBounds(120,46,76,20);
		pathCode.setEnabled(false);
		pathologistPanel.add(pathCode);
		pathCode.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pathCode.setBounds(120,68,76,20);
		JLabel12.setText("Date Completed");
		pathologistPanel.add(JLabel12);
		JLabel12.setBounds(16,26,90,12);
		JLabel17.setText("Pathologist");
		pathologistPanel.add(JLabel17);
		JLabel17.setBounds(16,48,100,12);
		JLabel18.setText("Result Code");
		pathologistPanel.add(JLabel18);
		JLabel18.setBounds(16,70,90,12);
		remarksPanel.setBorder(titledBorder5);
		remarksPanel.setLayout(null);
		getContentPane().add(remarksPanel);
		remarksPanel.setBounds(476,344,298,108);
		JScrollPane1.setOpaque(true);
		remarksPanel.add(JScrollPane1);
		JScrollPane1.setBounds(15,20,268,77);
		resRemarks.setLineWrap(true);
		resRemarks.setWrapStyleWord(true);
		resRemarks.setEnabled(false);
		JScrollPane1.getViewport().add(resRemarks);
		resRemarks.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resRemarks.setBounds(0,0,265,74);
		getContentPane().add(F1sq);
		F1sq.setBounds(25,6,20,20);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F1");
		getContentPane().add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(29,6,20,20);
		getContentPane().add(F2sq);
		F2sq.setBounds(77,6,20,20);
		F2lbl.setRequestFocusEnabled(false);
		F2lbl.setText("F2");
		getContentPane().add(F2lbl);
		F2lbl.setForeground(java.awt.Color.black);
		F2lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F2lbl.setBounds(81,6,20,20);
		getContentPane().add(F3sq);
		F3sq.setBounds(129,6,20,20);
		F3lbl.setRequestFocusEnabled(false);
		F3lbl.setText("F3");
		getContentPane().add(F3lbl);
		F3lbl.setForeground(java.awt.Color.black);
		F3lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F3lbl.setBounds(133,6,20,20);
		getContentPane().add(F4sq);
		F4sq.setBounds(181,6,20,20);
		F4lbl.setRequestFocusEnabled(false);
		F4lbl.setText("F4");
		getContentPane().add(F4lbl);
		F4lbl.setForeground(java.awt.Color.black);
		F4lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F4lbl.setBounds(185,6,25,18);
		getContentPane().add(F9sq);
		F9sq.setBounds(337,6,20,20);
		F9lbl.setRequestFocusEnabled(false);
		F9lbl.setText("F10");
		getContentPane().add(F9lbl);
		F9lbl.setForeground(java.awt.Color.black);
		F9lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F9lbl.setBounds(339,6,20,20);
		getContentPane().add(F12sq);
		F12sq.setBounds(389,6,20,20);
		F12lbl.setRequestFocusEnabled(false);
		F12lbl.setText("F12");
		getContentPane().add(F12lbl);
		F12lbl.setForeground(java.awt.Color.black);
		F12lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F12lbl.setBounds(390,6,20,20);
		F2action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F2action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F2action.setText("Add");
		getContentPane().add(F2action);
		F2action.setForeground(java.awt.Color.black);
		F2action.setBounds(62,30,50,16);
		F3action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F3action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F3action.setText("Update");
		getContentPane().add(F3action);
		F3action.setForeground(java.awt.Color.black);
		F3action.setBounds(114,30,50,16);
		F4action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F4action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F4action.setText("Pending");
		getContentPane().add(F4action);
		F4action.setForeground(java.awt.Color.black);
		F4action.setBounds(166,30,50,16);
		F9action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F9action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F9action.setText("Reports");
		getContentPane().add(F9action);
		F9action.setForeground(java.awt.Color.black);
		F9action.setBounds(322,30,50,16);
		F12action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F12action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F12action.setText("Submit");
		getContentPane().add(F12action);
		F12action.setForeground(java.awt.Color.black);
		F12action.setBounds(374,30,50,16);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("Query");
		getContentPane().add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(10,30,50,16);
		getContentPane().add(F5sq);
		F5sq.setBounds(285,6,20,20);
		getContentPane().add(F6sq);
		F6sq.setBounds(233,6,20,20);
		F5lbl.setRequestFocusEnabled(false);
		F5lbl.setText("F9");
		getContentPane().add(F5lbl);
		F5lbl.setForeground(java.awt.Color.black);
		F5lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F5lbl.setBounds(289,6,20,20);
		F5action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F5action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F5action.setText("Exit");
		getContentPane().add(F5action);
		F5action.setForeground(java.awt.Color.black);
		F5action.setBounds(270,30,50,16);
		getContentPane().add(msgLabel);
		msgLabel.setForeground(java.awt.Color.red);
		msgLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		msgLabel.setBounds(430,6,260,48);
		titledBorder1.setTitle("SCREENING");
		//$$ titledBorder1.move(136,512);
		titledBorder3.setTitle("F6 - QUALITY CONTROL");
		//$$ titledBorder3.move(180,540);
		hxPopUp.setOptionType(javax.swing.JOptionPane.YES_NO_OPTION);
		//$$ hxPopUp.move(128,512);
		titledBorder4.setTitle("F7 - PATHOLOGIST");
		//$$ titledBorder4.move(0,528);
		titledBorder5.setTitle("F11 - REMARKS");
		//$$ titledBorder5.move(24,520);
		titledBorder6.setTitle("MI PERCENTAGES");
		//$$ titledBorder6.move(48,528);
		titledBorder2.setTitle("PATIENT INFORMATION");
		//$$ titledBorder2.move(80,512);
		noButton.setText("No");
		noButton.setActionCommand("No");
		noButton.setEnabled(false);
		getContentPane().add(noButton);
		noButton.setFont(new Font("Dialog", Font.PLAIN, 11));
		noButton.setBounds(700,4,72,19);
		noButton.setVisible(false);
		yesButton.setText("Yes");
		yesButton.setActionCommand("Yes");
		yesButton.setEnabled(false);
		getContentPane().add(yesButton);
		yesButton.setFont(new Font("Dialog", Font.PLAIN, 11));
		yesButton.setBounds(700,24,72,19);
		yesButton.setVisible(false);
		cancelButton.setText("Cancel");
		cancelButton.setActionCommand("Cancel");
		cancelButton.setEnabled(false);
		getContentPane().add(cancelButton);
		cancelButton.setFont(new Font("Dialog", Font.PLAIN, 11));
		cancelButton.setBounds(700,44,72,19);
		cancelButton.setVisible(false);
		JPanel1.setBorder(titledBorder7);
		JPanel1.setLayout(null);
		getContentPane().add(JPanel1);
		JPanel1.setBounds(20,405,208,46);
		createdLbl.setText("Created:");
		JPanel1.add(createdLbl);
		createdLbl.setForeground(java.awt.Color.darkGray);
		createdLbl.setFont(new Font("Dialog", Font.BOLD, 10));
		createdLbl.setBounds(4,4,200,14);
		changedLbl.setText("Updated:");
		JPanel1.add(changedLbl);
		changedLbl.setForeground(java.awt.Color.darkGray);
		changedLbl.setFont(new Font("Dialog", Font.BOLD, 10));
		changedLbl.setBounds(4,24,200,14);
		//$$ titledBorder7.move(104,512);
		getContentPane().add(F6sq);
		F6lbl.setRequestFocusEnabled(false);
		F6lbl.setText("F5");
		getContentPane().add(F6lbl);
		F6lbl.setForeground(java.awt.Color.black);
		F6lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F6lbl.setBounds(238,6,20,20);
		F6action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F6action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F6action.setText("Holds");
		getContentPane().add(F6action);
		F6action.setForeground(java.awt.Color.black);
		F6action.setBounds(218,30,50,16);
		HPVinfo.setText("HPV");
		getContentPane().add(HPVinfo);
		HPVinfo.setBounds(22,460,500,14);
		PClass.setText("PClass");
		getContentPane().add(PClass);
		PClass.setBounds(22,480,700,14);
		//$$ titledBorder8.move(128,512);
		//$$ JOptionPane1.move(128,512);
		//}}

        titledBorder1.setTitleColor(Color.white);
        titledBorder2.setTitleColor(Color.white);
        titledBorder3.setTitleColor(Color.white);
        titledBorder4.setTitleColor(Color.white);
        titledBorder5.setTitleColor(Color.white);
        titledBorder6.setTitleColor(Color.white);
		titledBorder1.setTitleFont(new java.awt.Font("Dialog",java.awt.Font.BOLD,12));
		titledBorder2.setTitleFont(new java.awt.Font("Dialog",java.awt.Font.BOLD,12));
		titledBorder3.setTitleFont(new java.awt.Font("Dialog",java.awt.Font.BOLD,12));
		titledBorder4.setTitleFont(new java.awt.Font("Dialog",java.awt.Font.BOLD,12));
		titledBorder5.setTitleFont(new java.awt.Font("Dialog",java.awt.Font.BOLD,12));
		titledBorder6.setTitleFont(new java.awt.Font("Dialog",java.awt.Font.BOLD,12));
        

        fKeys.off();
        fKeys.keyOn(fKeys.F1);
        fKeys.keyOn(fKeys.F2);
        fKeys.keyOn(fKeys.F9);
        fKeys.keyOn(fKeys.F5);
        //resDbOps = new ResultDbOps(this);        

		rData = new ResultTableData();
		resultTable = new JTable();
		resultTable.setEnabled(false);
		resultTable.setAutoCreateColumnsFromModel(false);
		resultTable.setModel(rData);

		for (int k=0;k<ResultTableData.columns.length;k++) {
		    DefaultTableCellRenderer renderer = new
		        DefaultTableCellRenderer();
            renderer.setHorizontalAlignment(
                ResultTableData.columns[k].alignment);
            renderer.setFont(
                ResultTableData.columns[k].font);
            TableColumn column = new TableColumn(k,
                ResultTableData.columns[k].width,renderer,null);
            resultTable.addColumn(column);
		}
		
		header = resultTable.getTableHeader();
		header.setFont(new Font("Dialog",Font.BOLD, 12));
	
		resultScrollPane = new JScrollPane();
		resultScrollPane.getViewport().add(resultTable);
		getContentPane().add(resultScrollPane);
		resultScrollPane.setBounds(250,216,526,120);
        resultScrollPane.setAutoscrolls(true);
        resultScrollPane.setEnabled(false);
		
		resultTable.setFont(new Font("SansSerif", Font.PLAIN, 11));
		resultTable.setBounds(0,0,523,117);
        resultTable.setRowHeight(12);
        resultTable.setCellSelectionEnabled(false);
        
        setTitle("Lab Results");
        
		//{{INIT_MENUS
		//}}
	
		//{{REGISTER_LISTENERS
		SymKey aSymKey = new SymKey();
		resultCode.addKeyListener(aSymKey);
		this.addKeyListener(aSymKey);
		resLabNumber.addKeyListener(aSymKey);
		qcResultCode.addKeyListener(aSymKey);
		resCytoTech.addKeyListener(aSymKey);
		resCompleted.addKeyListener(aSymKey);
		resPathologist.addKeyListener(aSymKey);
		qcCytoTech.addKeyListener(aSymKey);
		qcCompleted.addKeyListener(aSymKey);
		resRemarks.addKeyListener(aSymKey);
		SymAction lSymAction = new SymAction();
		resSuper.addKeyListener(aSymKey);
		resInter.addKeyListener(aSymKey);
		resPara.addKeyListener(aSymKey);
		pathCompleted.addKeyListener(aSymKey);
		pathCode.addKeyListener(aSymKey);
		SymFocus aSymFocus = new SymFocus();
		resSuper.addFocusListener(aSymFocus);
		resInter.addFocusListener(aSymFocus);
		resPara.addFocusListener(aSymFocus);
		resLabNumber.addFocusListener(aSymFocus);
		resCytoTech.addFocusListener(aSymFocus);
		resCompleted.addFocusListener(aSymFocus);
		resPathologist.addFocusListener(aSymFocus);
		resultCode.addFocusListener(aSymFocus);
		qcCytoTech.addFocusListener(aSymFocus);
		qcResultCode.addFocusListener(aSymFocus);
		pathCode.addFocusListener(aSymFocus);
		yesButton.addActionListener(lSymAction);
		noButton.addActionListener(lSymAction);
		cancelButton.addActionListener(lSymAction);
		yesButton.addKeyListener(aSymKey);
		noButton.addKeyListener(aSymKey);
		cancelButton.addKeyListener(aSymKey);
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		qcCompleted.addFocusListener(aSymFocus);
		pathCompleted.addFocusListener(aSymFocus);
		resRemarks.addFocusListener(aSymFocus);
		//}}
	}

	public ResultForm(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

    public ResultForm(Login dbLogin)  {
        this();
        this.dbLogin=dbLogin;
        this.log = new LogFile(
            dbLogin.logPath,"ResultForm",dbLogin.dateToday,dbLogin.userName);
        this.resDbOps = new ResultDbOps(this);
        this.resDbOps.resultFormInit();
        this.resetResultForm();
    }        

	@Override
	public void setVisible(boolean b)
	{
		if (b) setLocation(0,0);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new ResultForm()).setVisible(true);
	}

	@Override
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		Insets insets = getInsets();
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JPanel patientPanel = new javax.swing.JPanel();
	javax.swing.JTextField resLabNumber = new javax.swing.JTextField();
	javax.swing.JTextField resPrevLabNum = new javax.swing.JTextField();
	javax.swing.JTextField resDateCollected = new javax.swing.JTextField();
	javax.swing.JTextField resPatient = new javax.swing.JTextField();
	javax.swing.JTextField resDOB = new javax.swing.JTextField();
	javax.swing.JTextField resAddress = new javax.swing.JTextField();
	javax.swing.JTextField resDoctor = new javax.swing.JTextField();
	javax.swing.JTextField resPractice = new javax.swing.JTextField();
	javax.swing.JTextField resBilling = new javax.swing.JTextField();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JLabel labSSNLbl = new javax.swing.JLabel();
	javax.swing.JLabel labAddrLbl = new javax.swing.JLabel();
	javax.swing.JLabel labCollDateLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel6 = new javax.swing.JLabel();
	javax.swing.JLabel labNumLbl = new javax.swing.JLabel();
	javax.swing.JLabel labPracticeLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JLabel resPhoneLbl = new javax.swing.JLabel();
	javax.swing.JLabel resDOBLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	javax.swing.JLabel resPracticeName = new javax.swing.JLabel();
	javax.swing.JTextField resDateReceived = new javax.swing.JTextField();
	javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
	javax.swing.JTextField resSSN = new javax.swing.JTextField();
	javax.swing.JTextField resPhone = new javax.swing.JTextField();
	javax.swing.JLabel prepLbl = new javax.swing.JLabel();
	javax.swing.JLabel pracType = new javax.swing.JLabel();
	javax.swing.JPanel screeningPanel = new javax.swing.JPanel();
	javax.swing.JTextField resCompleted = new javax.swing.JTextField();
	javax.swing.JTextField resCytoTech = new javax.swing.JTextField();
	javax.swing.JTextField resultCode = new javax.swing.JTextField();
	javax.swing.JLabel resCytoTechLbl = new javax.swing.JLabel();
	javax.swing.JLabel resultCodeLbl = new javax.swing.JLabel();
	javax.swing.JLabel resCompletedLbl = new javax.swing.JLabel();
	javax.swing.JPanel MIPanel = new javax.swing.JPanel();
	javax.swing.JTextField resSuper = new javax.swing.JTextField();
	javax.swing.JTextField resInter = new javax.swing.JTextField();
	javax.swing.JTextField resPara = new javax.swing.JTextField();
	javax.swing.JLabel JLabel7 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel8 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel9 = new javax.swing.JLabel();
	javax.swing.JPanel QCPanel = new javax.swing.JPanel();
	javax.swing.JTextField qcCompleted = new javax.swing.JTextField();
	javax.swing.JTextField qcCytoTech = new javax.swing.JTextField();
	javax.swing.JTextField qcResultCode = new javax.swing.JTextField();
	javax.swing.JLabel JLabel16 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel14 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel15 = new javax.swing.JLabel();
	javax.swing.JPanel pathologistPanel = new javax.swing.JPanel();
	javax.swing.JTextField pathCompleted = new javax.swing.JTextField();
	javax.swing.JTextField resPathologist = new javax.swing.JTextField();
	javax.swing.JTextField pathCode = new javax.swing.JTextField();
	javax.swing.JLabel JLabel12 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel17 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel18 = new javax.swing.JLabel();
	javax.swing.JPanel remarksPanel = new javax.swing.JPanel();
	javax.swing.JScrollPane JScrollPane1 = new javax.swing.JScrollPane();
	javax.swing.JTextArea resRemarks = new javax.swing.JTextArea();
	Square F1sq = new Square();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	Square F2sq = new Square();
	javax.swing.JLabel F2lbl = new javax.swing.JLabel();
	Square F3sq = new Square();
	javax.swing.JLabel F3lbl = new javax.swing.JLabel();
	Square F4sq = new Square();
	javax.swing.JLabel F4lbl = new javax.swing.JLabel();
	Square F9sq = new Square();
	javax.swing.JLabel F9lbl = new javax.swing.JLabel();
	Square F12sq = new Square();
	javax.swing.JLabel F12lbl = new javax.swing.JLabel();
	javax.swing.JLabel F2action = new javax.swing.JLabel();
	javax.swing.JLabel F3action = new javax.swing.JLabel();
	javax.swing.JLabel F4action = new javax.swing.JLabel();
	javax.swing.JLabel F9action = new javax.swing.JLabel();
	javax.swing.JLabel F12action = new javax.swing.JLabel();
	javax.swing.JLabel F1action = new javax.swing.JLabel();
	Square F5sq = new Square();
	javax.swing.JLabel F5lbl = new javax.swing.JLabel();
	javax.swing.JLabel F5action = new javax.swing.JLabel();
	JLabel msgLabel = new JLabel();
	javax.swing.border.TitledBorder titledBorder1 = new javax.swing.border.TitledBorder("");
	javax.swing.border.TitledBorder titledBorder3 = new javax.swing.border.TitledBorder("");
	javax.swing.JOptionPane hxPopUp = new javax.swing.JOptionPane();
	javax.swing.border.TitledBorder titledBorder4 = new javax.swing.border.TitledBorder("");
	javax.swing.border.TitledBorder titledBorder5 = new javax.swing.border.TitledBorder("");
	javax.swing.border.TitledBorder titledBorder6 = new javax.swing.border.TitledBorder("");
	javax.swing.border.TitledBorder titledBorder2 = new javax.swing.border.TitledBorder("");
	javax.swing.JButton noButton = new javax.swing.JButton();
	javax.swing.JButton yesButton = new javax.swing.JButton();
	javax.swing.JButton cancelButton = new javax.swing.JButton();
	javax.swing.JPanel JPanel1 = new javax.swing.JPanel();
	javax.swing.JLabel createdLbl = new javax.swing.JLabel();
	javax.swing.JLabel changedLbl = new javax.swing.JLabel();
	javax.swing.border.TitledBorder titledBorder7 = new javax.swing.border.TitledBorder("");
	Square F6sq = new Square();
	javax.swing.JLabel F6lbl = new javax.swing.JLabel();
	javax.swing.JLabel F6action = new javax.swing.JLabel();
	javax.swing.JLabel HPVinfo = new javax.swing.JLabel();
	javax.swing.JLabel PClass = new javax.swing.JLabel();
	javax.swing.border.TitledBorder titledBorder8 = new javax.swing.border.TitledBorder("");
	//}}

	//{{DECLARE_MENUS
	//}}
	
    public void setEnableAllFields(boolean eVal) {
	    resPatient.setEnabled(eVal);
	    resAddress.setEnabled(eVal);
	    resSSN.setEnabled(eVal);
	    resDateCollected.setEnabled(eVal);
	    resPrevLabNum.setEnabled(eVal);
	    resLabNumber.setEnabled(eVal);
	    resPractice.setEnabled(eVal);
	    resPhone.setEnabled(eVal);
	    resDOB.setEnabled(eVal);
	    resDoctor.setEnabled(eVal);
	    resBilling.setEnabled(eVal);
	    setEnableScreening(eVal);
	    setEnableQC(eVal);
	    setEnablePathologist(eVal);
	    setEnableMI(eVal);
    }
    
    public void clearForm() {
        PClass.setText(null);
	    resPatient.setText(null);
	    resAddress.setText(null);
	    resDateCollected.setText(null);
	    resDateReceived.setText(null);
	    resPrevLabNum.setText(null);
	    resLabNumber.setText(null);
	    resPractice.setText(null);
	    resPhone.setText(null);
	    resDOB.setText(null);
	    resSSN.setText(null);
	    resDoctor.setText(null);
	    resBilling.setText(null);
	    if (!completedFlag) resCompleted.setText(null);
	    if (!ctFlag) resCytoTech.setText(null);
	    resPathologist.setText(null);
	    resultCode.setText(null);
	    qcCompleted.setText(null);
	    qcCytoTech.setText(null);
	    qcResultCode.setText(null);
	    resPracticeName.setText(null);
	    pracType.setText(null);
	    resRemarks.setText(null);
	    resSuper.setText("0");
	    resInter.setText("0");
	    resPara.setText("0");
	    pathCompleted.setText(null);
	    pathCode.setText(null);
	    prepLbl.setText(null);
    }

    public void resetColors() 
    {
        Utils.setColors(this.getContentPane());
        resPracticeName.setForeground(Color.white);
        msgLabel.setForeground(Color.green);
        createdLbl.setForeground(Color.white);
        changedLbl.setForeground(Color.white);
        PClass.setForeground(Color.red.brighter());
        resPracticeName.setFont(new Font("Dialog", Font.BOLD, 10));
        createdLbl.setFont(new Font("Dialog", Font.BOLD, 10));
        changedLbl.setFont(new Font("Dialog", Font.BOLD, 10));
        prepLbl.setFont(new Font("MonoSpaced", Font.BOLD, 11));
        prepLbl.setForeground(Color.green);
        this.repaint();
    }
    
	public void queryActions() {
        currMode=Lab.QUERY;
        fKeys.off();
        fKeys.keyOn(fKeys.F12);
        setEnableAllFields(false);
        resLabNumber.setEnabled(true);
        resLabNumber.setBackground(Color.white);
        resLabNumber.setForeground(Color.black);
        resLabNumber.requestFocus();
	}
	
    public void addActions() 
    {
        currMode=Lab.ADD;
        fKeys.off();
        fKeys.keyOn(fKeys.F8);
        setEnableAllFields(false);
        resLabNumber.setEnabled(true);
        resLabNumber.setBackground(Color.red);
        resLabNumber.setForeground(Color.white);
        resLabNumber.requestFocus();
    }

	public void updatePathHolds() {
        (new PathHoldsForm(resultCodes)).setVisible(true);	        
	}
    
	class SymKey extends java.awt.event.KeyAdapter
	{
		@Override
		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == resLabNumber)
				resLabNumber_keyTyped(event);
			else if (object == resCompleted)
				resCompleted_keyTyped(event);
			else if (object == resCytoTech)
				resCytoTech_keyTyped(event);
			else if (object == resPathologist)
				resPathologist_keyTyped(event);
			else if (object == resultCode)
				resultCode_keyTyped(event);
			else if (object == qcCompleted)
				qcCompleted_keyTyped(event);
			else if (object == qcCytoTech)
				qcCytoTech_keyTyped(event);
			else if (object == qcResultCode)
				qcResultCode_keyTyped(event);
			else if (object == pathCompleted)
				pathCompleted_keyTyped(event);
			if (object == pathCode)
				pathCode_keyTyped(event);
			else if (object == resSuper)
				resSuper_keyTyped(event);
			else if (object == resInter)
				resInter_keyTyped(event);
			else if (object == resPara)
				resPara_keyTyped(event);
			else if (object == resRemarks)
				resRemarks_keyTyped(event);
		}

		@Override
		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == resultCode)
				resultCode_keyPressed(event);
			else if (object == ResultForm.this)
				ResultForm_keyPressed(event);
			else if (object == resLabNumber)
				resLabNumber_keyPressed(event);
			else if (object == qcResultCode)
				qcResultCode_keyPressed(event);
			else if (object == resRemarks)
				resRemarks_keyPressed(event);
			else if (object == resCompleted)
				resCompleted_keyPressed(event);
			else if (object == resCytoTech)
				resCytoTech_keyPressed(event);
			else if (object == resPathologist)
				resPathologist_keyPressed(event);
			else if (object == qcCompleted)
				qcCompleted_keyPressed(event);
			else if (object == qcCytoTech)
				qcCytoTech_keyPressed(event);
			else if (object == pathCompleted)
				pathCompleted_keyPressed(event);
			if (object == pathCode)
				pathCode_keyPressed(event);
			else if (object == resSuper)
				resSuper_keyPressed(event);
			else if (object == resInter)
				resInter_keyPressed(event);
			else if (object == resPara)
				resPara_keyPressed(event);
			else if (object == yesButton)
				yesButton_keyPressed(event);
			else if (object == noButton)
				noButton_keyPressed(event);
			else if (object == cancelButton)
				cancelButton_keyPressed(event);
		}
	}

	public boolean resultCodeExists(String code) {
	    boolean rv = false;
	    int ndx=(-1);
	    for (int i=0;i<MAX_RESULT_CODES;i++) {
	        if (resultCodes[i].bethesda_code.equals(code)) {
	            ndx=i;
	            rv=true;
	            break;
	        }
	    }
	    if (!rv) {
	        String msg="Result Code "+code+" does not exist";
	        Utils.createErrMsg(msg);
	    }
	    return (rv);
	}
	

	void resultCode_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==KeyEvent.VK_ENTER) {
		    if (Utils.isNull(resultCode.getText())) {
		        resultCode.transferFocus();
		        return;
		    }
		    if (Utils.length(resultCode.getText())<1) return;
            String nextCode=resultCode.getText();		    
            if (rData.resultEntered(nextCode,0)) {}
            else {
                boolean addCode = resultCodeExists(nextCode);
                // commented; prior code, don't want to erase yet
                /*
                if (resultCode.getText().equals("850")
                && (!Utils.isNull(resultRec.Hx_comment))) {
                    Utils.createRedErrMsg("   ");
                    if (displayHxPopUp()!=hxPopUp.YES_OPTION) {
                        resultCode.setText(null);
                        hxOverride=false;
                        return;
                    }
                }
                */
                String bethesdaCode = resultCode.getText();
                if (bethesdaCode.equals("705")
                ||  bethesdaCode.equals("710")
                ||  bethesdaCode.equals("715")) {
                    if (resultRec.preparation!=Lab.IMAGED_SLIDE) {
                        resultCode.setText(null);
                        Utils.createErrMsg("Result Code "+bethesdaCode+
                            " valid ONLY with Imaged Slides!");
                        return;
                    }
                }
                if (bethesdaCode.equals("850")) {
                    if (!Utils.isNull(resultRec.Hx_comment) 
                    || !Utils.isNull(resultRec.LMP)) {
                        if (displayHxPopUp()!=JOptionPane.YES_OPTION) {
                            resultCode.setText(null);
                            hxOverride=false;
                            return;
                        }
                    }
                }
                // added for Alabama Dept. of Public Health
                else if (resultRec.practice_type.equals("ADPH")) {
                    if (bethesdaCode.substring(0,1).equals("9")) {
                        if (!bethesdaCode.equals("920")) {
                            resultCode.setText(null);
                            Utils.createErrMsg("Only valid '900' code for ADPH is 920");
                            return;
                        }
                    }
                }
                // added to disable 920 code from being used with accounts
                // other than ADPH accounts
                else if (bethesdaCode.equals("920")) {
                    if (!resultRec.practice_type.equals("ADPH")) {
                        resultCode.setText(null);
                        Utils.createErrMsg("Code 920 valid only for ADPH accounts");
                        return;
                    }
                }
                if (addCode) {
                    numSCR++;
                    if (rData.getRowCount()>=numSCR) {
                        rData.setValueAt(nextCode,(numSCR-1),0);
                        rData.setValueAt(getCodeDescription(nextCode),(numSCR-1),3);
                    }
                    else {
                        rData.addRow(nextCode,null,null,(getCodeDescription(nextCode)));
                    }
                    refreshResultTable(numSCR-1);
                }
            }
            updateNumResults();
            resultCode.setText(null);
		}
		else if (event.getKeyCode()==KeyEvent.VK_DELETE) {
            String nextCode=resultCode.getText();	
            numSCR=rData.removeSCR(nextCode,numSCR);
            removeBlankRows();
            resultCode.setText(null);
            for (int i=0; i<rData.getRowCount(); i++)
                refreshResultTable(i);
            updateNumResults();                
		}
	}
	
	public void removeBlankRows()
	{
	    boolean blankRows = true;
	    while (blankRows) {
	        String s = null;
	        boolean isBlank = false;
	        for (int i=0; i<rData.getRowCount(); i++) {
	            isBlank = Utils.isNull((String)rData.getValueAt(i,0));
	            if (isBlank)
	                isBlank = Utils.isNull((String)rData.getValueAt(i,1));
	            if (isBlank)
	                isBlank = Utils.isNull((String)rData.getValueAt(i,2));
	            if (isBlank) {
	                rData.removeRow(i);
	                break;
	            }
	        }
            if (!isBlank) blankRows=false;
	    }
	    resultTable.repaint();
	    resultTable.revalidate();
	}
	
	public void updateNumResults()
	{
	    int max = numSCR;
	    if (numQC>max) max=numQC;
	    if (numPATH>max) max=numPATH;
	    NUM_RESULTS=max;
	}
	
	void updateActions() 
	{
        if (resultRec.finished==2) {
            setMsgLabel("Update will not affect billing as status is SUBMITTED");
        }
	    else if (resultRec.finished==3) {
	        setMsgLabel("Update will not affect billing as status is PENDING");
	    }
	    else if (resultRec.finished>3) {
	        setMsgLabel("Update will not affect billing as status is FINISHED");
	    }
        setEnableAllFields(false);
        setEnableScreening(true);
        if (matIndexRequested>0) 
            setEnableMI(true);
        resCompleted.requestFocus();
        fKeys.keyOn(fKeys.F6);
        fKeys.keyOn(fKeys.F7);
        fKeys.keyOn(fKeys.F12);
	    currMode=Lab.UPDATE;
	}
	
	void ResultForm_keyPressed(java.awt.event.KeyEvent event)
	{
		int key=event.getKeyCode();
		switch (key) {
		    case KeyEvent.VK_F1:
		        if (fKeys.isOn(fKeys.F1)) queryActions();
		        break;
		    case KeyEvent.VK_F2:
		        if (fKeys.isOn(fKeys.F2)) addActions();
		        break;
		    case KeyEvent.VK_F3:
		        if (fKeys.isOn(fKeys.F3)) updateActions();
		        break;
		    case KeyEvent.VK_F4:
                if (currMode==Lab.IDLE) {
		            Vector v = new Vector();
                    setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
                    setMsgLabel("Retrieving pending lab list ...");
		            resDbOps.getPending(v);
		            setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
		            setMsgLabel(" ");
		            if (v.size()>0) {
		                String buf[] = new String [v.size()];
		                for (int i=0;i<v.size();i++) 
		                    buf[i]=(String)v.elementAt(i);
                        (new PickList("Results Pending",
                            60,20,600,500,v.size(),buf)).setVisible(true);
                    }
		            else Utils.createErrMsg("No Pending Labs");
                }
                break;
		    case KeyEvent.VK_F5:
		        if (fKeys.isOn(fKeys.F5)) updatePathHolds();
		        break;
		    case KeyEvent.VK_F8:
		        if (fKeys.isOn(fKeys.F8)) {
		            if (resCytoTech.hasFocus()) {
		                String buf[] = new String [MAX_TECHS];
		                String buf2[] = new String [MAX_TECHS];
		                for (int i=0;i<MAX_TECHS;i++) {
		                    buf[i]=
		                        techs[i].cytotech_code+"   "+
		                        techs[i].lname+", "+
		                        techs[i].fname;
                            buf2[i]=techs[i].cytotech_code;
                        }
                        (new PickList("Cytotechnologists",
                              200,50,220,200,
                              MAX_TECHS,buf,buf2,
                              resCytoTech)).setVisible(true);
		            }
		            else if (qcCytoTech.hasFocus()) {
		                String buf[] = new String [MAX_TECHS];
		                String buf2[] = new String [MAX_TECHS];
		                for (int i=0;i<MAX_TECHS;i++) {
		                    buf[i]=
		                        techs[i].cytotech_code+"   "+
		                        techs[i].lname+", "+
		                        techs[i].fname;
                            buf2[i]=techs[i].cytotech_code;
                        }
                        (new PickList("Cytotechnologists",
                              200,50,220,200,
                              MAX_TECHS,buf,buf2,
                              qcCytoTech)).setVisible(true);
		            }
		            else if (resPathologist.hasFocus()) {
		                String buf[] = new String [MAX_PATHS];
		                String buf2[] = new String [MAX_PATHS];
		                for (int i=0;i<MAX_PATHS;i++) {
		                    buf[i]=
		                        paths[i].pathologist_code+"   "+
		                        paths[i].lname+", "+
		                        paths[i].fname;
                            buf2[i]=paths[i].pathologist_code;
                        }
                        (new PickList("Pathologists",
                              200,50,220,200,
                              MAX_PATHS,buf,buf2,
                              resPathologist)).setVisible(true);
		            }
		            else if (resPathologist.hasFocus()) {
		                String buf[] = new String [MAX_PATHS];
		                String buf2[] = new String [MAX_PATHS];
		                for (int i=0;i<MAX_PATHS;i++) {
		                    buf[i]=
		                        paths[i].pathologist_code+"   "+
		                        paths[i].lname+", "+
		                        paths[i].fname;
                            buf2[i]=paths[i].pathologist_code;
                        }
                        (new PickList("Pathologists",
                              200,50,220,200,
                              MAX_PATHS,buf,buf2,
                              resPathologist)).setVisible(true);
		            }
		            else if (resultCode.hasFocus()) {
		                String buf[] = new String [MAX_RESULT_CODES];
		                String buf2[] = new String [MAX_RESULT_CODES];
		                for (int i=0;i<MAX_RESULT_CODES;i++) {
		                    buf[i]=
		                        resultCodes[i].bethesda_code+"   "+
		                        resultCodes[i].description;
                            buf2[i]=resultCodes[i].bethesda_code;
                        }
                        (new PickList("Result Codes",
                              200,40,320,360,
                              MAX_RESULT_CODES,buf,buf2,
                              resultCode)).setVisible(true);
		            }
		            else if (qcResultCode.hasFocus()) {
		                String buf[] = new String [MAX_RESULT_CODES];
		                String buf2[] = new String [MAX_RESULT_CODES];
		                for (int i=0;i<MAX_RESULT_CODES;i++) {
		                    buf[i]=
		                        resultCodes[i].bethesda_code+"   "+
		                        resultCodes[i].description;
                            buf2[i]=resultCodes[i].bethesda_code;
                        }
                        (new PickList("Result Codes",
                              200,40,320,360,
                              MAX_RESULT_CODES,buf,buf2,
                              qcResultCode)).setVisible(true);
		            }
		            else if (pathCode.hasFocus()) {
		                String buf[] = new String [MAX_RESULT_CODES];
		                String buf2[] = new String [MAX_RESULT_CODES];
		                for (int i=0;i<MAX_RESULT_CODES;i++) {
		                    buf[i]=
		                        resultCodes[i].bethesda_code+"   "+
		                        resultCodes[i].description;
                            buf2[i]=resultCodes[i].bethesda_code;
                        }
                        (new PickList("Result Codes",
                              200,40,320,360,
                              MAX_RESULT_CODES,buf,buf2,
                              pathCode)).setVisible(true);
		            }
		        }
		        break;
		    case KeyEvent.VK_F9:
		        closingActions();
		        break;
		    case KeyEvent.VK_F6:
		        if (fKeys.isOn(fKeys.F6)) {
		            if (event.isShiftDown()) {
		                removeQC();
		                break;
		            }
                    qualityControl();
                }
		        break;
		    case KeyEvent.VK_F7:
		        if (fKeys.isOn(fKeys.F7)) {
		            if (event.isShiftDown()) {
		                removePathologist();
		                break;
		            }
                    pathologistControl();
                }
		        break;
		    case KeyEvent.VK_F10:
		        if (currMode!=Lab.ADD) printHistory(); 
		        break;
		    case KeyEvent.VK_F11:
		        commentEntry();
		        break;
		    case KeyEvent.VK_F12:
		        if (fKeys.isOn(fKeys.F12)) finalActions();
		        break;
            case KeyEvent.VK_ESCAPE:
                completedFlag=false;
                ctFlag=false;
                resetResultForm();
                break;
            case KeyEvent.VK_INSERT:
                displayComments();
                break;
		    case KeyEvent.VK_DOWN:
		        if (currMode!=Lab.IDLE && buttonMode==Lab.IDLE)
		            incrementResult();
                break;
		    case KeyEvent.VK_UP:
		        if (currMode!=Lab.IDLE && buttonMode==Lab.IDLE) 
		            decrementResult();
                break;
            case KeyEvent.VK_CONTROL:
                ((JTextField)getFocusOwner()).setText(null);
                break;
		}
	}
	
	void commentEntry()
	{
		        if (((currMode==Lab.ADD)||(currMode==Lab.UPDATE))) {
		            if (!editResRemarks) {
		                setMsgLabel("Separate individual remarks with semi-colon");
		                editResRemarks=true;
		                resRemarks.setEnabled(true);
		                resRemarks.requestFocus();
		            }
		            else {
		                setMsgLabel(" ");
		                resRemarks.setEnabled(false);
		                editResRemarks=false;
		            }
		        }
	}
	

    public void setEnableQC(boolean eVal) 
    {
        qcCompleted.setEnabled(eVal);
        qcCytoTech.setEnabled(eVal);
        qcResultCode.setEnabled(eVal);
        if (eVal) qcCompleted.requestFocus();
    }
    
    public void setEnablePathologist(boolean eVal)
    {
        pathCompleted.setEnabled(eVal);
        resPathologist.setEnabled(eVal);
        pathCode.setEnabled(eVal);
        if (eVal) pathCompleted.requestFocus();
    }
    
    public void setEnableScreening(boolean eVal)
    {
        if (eVal) { QC=false; PC=false; }
        resCompleted.setEnabled(eVal);
        resCytoTech.setEnabled(eVal);
        resultCode.setEnabled(eVal);
        if (eVal) resCompleted.requestFocus();
    }
   
    public void setEnableMI(boolean eVal) 
    {
        resSuper.setEnabled(eVal);
        resPara.setEnabled(eVal);
        resInter.setEnabled(eVal);
    }

    public void setEnableConfirmButtons(boolean eVal)
    {
        yesButton.setVisible(eVal);
        yesButton.setEnabled(eVal);
        noButton.setVisible(eVal);
        noButton.setEnabled(eVal);
        cancelButton.setVisible(eVal);
        cancelButton.setEnabled(eVal);
		noButton.setFont(new Font("Dialog", Font.BOLD, 11));
		yesButton.setFont(new Font("Dialog", Font.PLAIN, 11));
		cancelButton.setFont(new Font("Dialog", Font.PLAIN, 11));
		noButton.setForeground(Utils.LABEL_FOREGROUND);
		yesButton.setForeground(Utils.BUTTON_FOREGROUND);
		cancelButton.setForeground(Utils.BUTTON_FOREGROUND);
    }
    
    public void removeQC()
    {
        QC=false;
        hasQC=false;
		resultRec.qc_status = new String("N");
		resultRec.qc_date = new String();
		resultRec.qc_cytotech_code = new String();
		resultRec.qc_cytotech=0;
		qcCompleted.setText(null);
		qcCompleted.setEnabled(false);
		qcCytoTech.setText(null);
		qcCytoTech.setEnabled(false);
		qcResultCode.setText(null);
		qcResultCode.setEnabled(false);
        for (int i=0; i<numQC; i++)
		    rData.setValueAt(null,i,1);
        refreshResultTable(0);
        refreshResultDescription(resultTable.getSelectedRow());
        setEnableQC(false);
        setEnablePathologist(false);
        setEnableScreening(true);
        numQC=0;
    }
    
    public void removePathologist()
    {
        resultRec.path_status = new String("N");
		resultRec.path_date = new String();
		pathCompleted.setText(null);
		pathCompleted.setEnabled(false);
		resPathologist.setText(null);
		resPathologist.setEnabled(false);
		pathCode.setText(null);
		pathCode.setEnabled(false);
        for (int i=0; i<numPATH; i++)
		    rData.setValueAt(null,i,2);
        refreshResultTable(0);
        pathologistControl();
        refreshResultDescription(resultTable.getSelectedRow());
        setEnableQC(false);
        setEnablePathologist(false);
        setEnableScreening(true);
        numPATH=0;
    }
    
	void resLabNumber_keyPressed(java.awt.event.KeyEvent event)
	{
	    if (event.getKeyCode()==KeyEvent.VK_ENTER) {
	        if (currMode==Lab.ADD) {
	            setMsgLabel(" ");
	            resultRec.lab_number=Integer.parseInt(resLabNumber.getText());
                boolean result=resDbOps.query(resultRec.lab_number);
                if (result) {
                    if (resultRec.finished==(-1)) {
                        Utils.createErrMsg("Lab #"+resLabNumber.getText()+
                            " was an EXPIRED specimen - cannot add results.");
                        resetResultForm();                            
                        addActions();
                    }
                    if (resultRec.preparation==Lab.SURGICAL) {
                        Utils.createErrMsg("Lab #"+
                            resLabNumber.getText()+
                            " is a tissue biopsy");
                        resetResultForm();
                        addActions();
                    }
                    else if (resultRec.finished>0) {
                        Utils.createErrMsg("Results for Lab #"+
                            resLabNumber.getText()+
                            " have already been added");
                        resetResultForm();
                        addActions();
                    }
                    else if (Utils.isNull(resultRec.receive_date)) {
                        Utils.createErrMsg("No Receive Date for Lab #"+
                            resLabNumber.getText());
                        resetResultForm();
                        addActions();
                    }
                    else {
                        resetColors();
                        setEnableAllFields(false);
                        setEnableScreening(true);
                        if (matIndexRequested>0) 
                            setEnableMI(true);
                        fillForm();
                        fKeys.keyOn(fKeys.F6);
                        fKeys.keyOn(fKeys.F7);
                        fKeys.keyOn(fKeys.F12);
                    }
                }
                else {
                    Utils.createErrMsg("No Data Located for Lab #"+resLabNumber.getText());
                    resetResultForm();
                    addActions();
                    log.write("Query failed on lab #"+resLabNumber.getText());
                }
            }
            else if (currMode==Lab.QUERY) finalActions();
	    }
	}

	void resLabNumber_keyTyped(java.awt.event.KeyEvent event)
	{
	    setMsgLabel(" ");
		Utils.forceDigits(event,10);
	}

	void resCompleted_keyTyped(java.awt.event.KeyEvent event)
	{
	    setMsgLabel(" ");
	    Utils.buildDateMask(event);
	}

	void resCompleted_keyPressed(java.awt.event.KeyEvent event)
	{
	    if (event.getKeyCode()==KeyEvent.VK_ENTER) {
	        if (!Utils.requiredField(resCompleted,"Date Completed")) 
	            return;
	        if (!Utils.dateVerify(resCompleted))
	            return;
	        if (Utils.afterToday(resCompleted.getText())) {
	            Utils.createErrMsg(resCompleted.getText()+" is a date in the future");
	            resCompleted.setText(null);
	            return;
	        }
	        if (Utils.beforeDate(resCompleted.getText(),dateWindow)) {
	            if (displayDatePopUp(resCompleted.getText())==JOptionPane.NO_OPTION) {
	                resCompleted.setText(null);
	                return;
	            }
	        }
	        resCompleted.transferFocus();
	    }
	}

	void resCytoTech_keyTyped(java.awt.event.KeyEvent event)
	{
	    setMsgLabel(" ");
		Utils.forceUpper(event,3);
	}

	void resCytoTech_keyPressed(java.awt.event.KeyEvent event)
	{
	    if (event.getKeyCode()==KeyEvent.VK_ENTER) {
	        if (!Utils.requiredField(resCytoTech,"Cytotech")) 
	            return;
	        if (!cytoTechExists(resCytoTech.getText()))
	            return;
	        resCytoTech.transferFocus();
	    }
	}

	void resPathologist_keyTyped(java.awt.event.KeyEvent event)
	{
	    setMsgLabel(" ");
		Utils.forceUpper(event,3);
	}

	void resPathologist_keyPressed(java.awt.event.KeyEvent event)
	{
	    if (event.getKeyCode()==KeyEvent.VK_ENTER) {
	        if (!Utils.isNull(resPathologist.getText()) && 
	            !pathExists(resPathologist.getText()))
	            return;
	        resPathologist.setText(resPathologist.getText());
	        resPathologist.transferFocus();
	    }
	}

	void resultCode_keyTyped(java.awt.event.KeyEvent event)
	{
	    setMsgLabel(" ");
		Utils.forceUpper(event,3);
	}
	
	void finalActions() 
	{
	    boolean status=false;
	    boolean codeExists=false;
	    if (currMode==Lab.ADD) {
	        int rCnt=rData.getRowCount();
	        if (rCnt<1) {
	            Utils.createErrMsg("No Result Codes Entered");
	            return;
	        }
	        if (Utils.isNull(resPathologist.getText())) {
	            if (!confirmPathRequired()) return;
	        }
	        /* 01/30/2012: Whenever codes 858 or 875 have been entered
	           then the resRemarks text area must be populated. Do this
	           check and display error message if needed.
	        */
	        codeExists=hasCode("858");
	        if (!codeExists) codeExists=hasCode("875");
	        if (codeExists) {
System.out.println("one of the codes exists");	            
	            String s = resRemarks.getText();
	            if (Utils.isNull(s)) {
	                Utils.createErrMsg("Must enter REMARKS whenever an 858 or 875 "+
	                    "code has been entered!");
	                return;
	            }
	        }
	        if (matIndexRequested>0 && !checkMI()) return;
	        else if (matIndexRequested==REVERSE) {
	            String s = resRemarks.getText();
	            if (Utils.isNull(s)) {
	                Utils.createErrMsg(
	                    "Must enter reason MI could not be performed");
	                editResRemarks=false;
	                commentEntry();
	                setMsgLabel("ENTER REASON MI COULD NOT BE PERFORMED. "+
	                    msgLabel.getText());
	                return;
	            }
	        }
	        if (!Utils.isNull(resultCode.getText())) {
	            Utils.createErrMsg("Screening code "+resultCode.getText()+
	                " not entered");
	            resultCode.requestFocus();
                return;	                
	        }
	        if (!Utils.isNull(qcResultCode.getText())) {
	            Utils.createErrMsg("QC result code "+resultCode.getText()+
	                " not entered");
                return;	                
	        }
	        if (!Utils.isNull(pathCode.getText())) {
	            Utils.createErrMsg("Pathologist result code "+resultCode.getText()+
	                " not entered");
                return;	                
	        }
	        String msg="Print final report for Lab #"+resultRec.lab_number+" ?  "+
	            "Please select an option.";
            setMsgLabel(msg);
            setEnableConfirmButtons(true);
            buttonMode=CONFIRM_PRINT;
            noButton.requestFocus();
	    }
	    else if (currMode==Lab.QUERY) {
            boolean rv = Utils.requiredField(resLabNumber,"Lab Number");	            
            if (rv) {
	            int labNum=Integer.parseInt(resLabNumber.getText());
	            resultRec.lab_number=labNum;
	            rv=resDbOps.query(labNum);
	            if (rv) {
	                fillForm();
	                currMode=Lab.IDLE;
	                for (int i=0; i<rData.getRowCount(); i++)
	                    refreshResultTable(i);
	                resetColors();
	                setEnableAllFields(false);
	                fKeys.off();
	                fKeys.keyOn(fKeys.F9);
	                fKeys.keyOn(fKeys.F3);
	                msgLabel.requestFocus();
	            }
	            else {
	                resetResultForm();
	                setMsgLabel("No Data Located");
	            }
	        }
	        else resetResultForm();
	    }
	    else if (currMode==Lab.UPDATE) {
	        int rCnt=rData.getRowCount();
	        if (rCnt<1) {
	            Utils.createErrMsg("No Result Codes Entered");
	            return;
	        }
	        if (Utils.isNull(resPathologist.getText())) {
	            if (!confirmPathRequired()) return;
	        }
	        /* 01/30/2012: Whenever codes 858 or 875 have been entered
	           then the resRemarks text area must be populated. Do this
	           check and display error message if needed.
	        */
	        codeExists=hasCode("858");
	        if (!codeExists) codeExists=hasCode("875");
	        if (codeExists) {
	            String s = resRemarks.getText();
	            if (Utils.isNull(s)) {
	                Utils.createErrMsg("Must enter REMARKS whenever an 858 or 875 "+
	                    "code has been entered!");
	                return;
	            }
	        }
	        if (matIndexRequested>0 && !checkMI()) return;
	        else if (matIndexRequested==REVERSE) {
	            String s = resRemarks.getText();
	            if (Utils.isNull(s)) {
	                Utils.createErrMsg(
	                    "Must enter reason MI could not be performed");
	                editResRemarks=false;
	                commentEntry();
	                setMsgLabel("ENTER REASON MI COULD NOT BE PERFORMED. "+
	                    msgLabel.getText());
	                return;
	            }
	        }
	        if (!Utils.isNull(resultCode.getText())) {
	            Utils.createErrMsg("Screening code "+resultCode.getText()+
	                " not entered");
	            resultCode.requestFocus();
                return;	                
	        }
	        if (!Utils.isNull(qcResultCode.getText())) {
	            Utils.createErrMsg("QC result code "+resultCode.getText()+
	                " not entered");
                return;	                
	        }
	        if (!Utils.isNull(pathCode.getText())) {
	            Utils.createErrMsg("Pathologist result code "+resultCode.getText()+
	                " not entered");
                return;	                
	        }
	        String msg="Print final report for Lab #"+resultRec.lab_number+" ?  "+
	            "Please select an option.";
            setMsgLabel(msg);
            setEnableConfirmButtons(true);
            buttonMode=CONFIRM_PRINT;
            noButton.requestFocus();
	    }
	    
	}
	
	void resetResultForm() 
	{
	    //labComments.setText(null);
	    hxOverride=true;
	    HPVinfo.setText(null);
	    createdLbl.setText("Created:");
	    changedLbl.setText("Updated:");
	    numSCR=0;
	    numQC=0;
	    numPATH=0;
	    buttonMode=Lab.IDLE;
	    QC=false;
	    PC=false;
	    editResRemarks=false;
	    hasQC=false;
	    hasPC=false;
	    labResults = new Vector();
	    qcResults = new Vector();
	    pathResults = new Vector();
        resetColors();
        clearForm();
	    setEnableConfirmButtons(false);
        setEnableAllFields(false);
        resultTable.clearSelection();
        rData.removeAllRows();
        resultTable.repaint();
        resultTable.revalidate();
        setMsgLabel(" ");
        msgLabel.requestFocus();
        NUM_RESULTS=0;
        fKeys.off();
        fKeys.keyOn(fKeys.F1);
        fKeys.keyOn(fKeys.F2);
        fKeys.keyOn(fKeys.F9);
        fKeys.keyOn(fKeys.F5);
        resultRec = new ResultRec();
        matIndexRequested=0;
        currMode=Lab.IDLE;
	}
	
	public boolean checkMI() 
	{
	    boolean status=true;
		int checkSum = addMI();
	    if ((checkSum>=0)&&(checkSum!=100)) {
	        status=false;
	        String msg="Hormonal Eval Percentages must total 100%; 0 if not applied";
	        resSuper.requestFocus();
	        Utils.createErrMsg(msg);
	    }
	    return (status);
	}
	
	public int addMI()
	{
	    int checkSum = 0;
	    try {
		    checkSum =
		        Integer.parseInt(resSuper.getText()) +
		        Integer.parseInt(resInter.getText()) +
		        Integer.parseInt(resPara.getText());
		}
		catch (Exception e) { checkSum=0; }
	    return (checkSum);
	}
	
    void fillResultRecord() 
    {
        if (!Utils.isNull(qcCytoTech.getText())) hasQC=true;
        else hasQC=false;
        if (!Utils.isNull(resPathologist.getText())) hasPC=true;
        else hasPC=false;
	    resultRec.date_completed=Utils.stripDateMask(resCompleted.getText());
	    resultRec.cytotech_code=resCytoTech.getText();
	    resultRec.pathologist=resPathologist.getText();
	    resultRec.comment_text=resRemarks.getText();
	    resultRec.qc_date=Utils.stripDateMask(qcCompleted.getText());
	    resultRec.qc_cytotech_code=qcCytoTech.getText();
	    resultRec.path_date=Utils.stripDateMask(pathCompleted.getText());
	    //resultRec.lab_comments=labComments.getText();
	    if (hasQC) resultRec.qc_status="Y";
        else resultRec.qc_status="N";
        if (hasPC) resultRec.path_status="Y";
        else resultRec.path_status="N";
        resultRec.cytotech=0;
        resultRec.qc_cytotech=0;
        for (int i=0;i<MAX_TECHS;i++) {
            if (resultRec.cytotech_code.equals(techs[i].cytotech_code)) {
                resultRec.cytotech=techs[i].cytotech;
                break;
            }
        }
        labResults = new Vector();
        for (int i=0; i<numSCR/*rData.getRowCount()*/; i++) {
            labResults.addElement(rData.getValueAt(i,0));
        }
        resultRec.pap_class=getPapClass(labResults);
        if (getLimited(labResults)) resultRec.limited=1;
        else resultRec.limited=0;
        if (hasQC) {
            for (int i=0;i<MAX_TECHS;i++) {
                if (resultRec.qc_cytotech_code.equals(techs[i].cytotech_code)) {
                    resultRec.qc_cytotech=techs[i].cytotech;
                    break;
                }
            }
            qcResults = new Vector();
            for (int i=0; i<numQC/*rData.getRowCount()*/; i++)
                qcResults.addElement(rData.getValueAt(i,1));
            resultRec.pap_class=getPapClass(qcResults);
            if (getLimited(qcResults)) resultRec.limited=1;
            else resultRec.limited=0;
        }
        if (hasPC) {
            pathResults = new Vector();
            for (int i=0; i<numPATH/*rData.getRowCount()*/; i++)
                pathResults.addElement(rData.getValueAt(i,2));
            resultRec.pap_class=getPapClass(pathResults);
            if (getLimited(pathResults)) resultRec.limited=1;
            else resultRec.limited=0;
        }
        if (matIndexRequested>0) {
            resultRec.superficial=Integer.parseInt(resSuper.getText());
            resultRec.intermediate=Integer.parseInt(resInter.getText());
            resultRec.parabasal=Integer.parseInt(resPara.getText());
        }
	    resultRec.biopsy_code = getBiopsyCode();
    }
    
    void displayComments() 
    {
        /*
        boolean isUpdatable = false;
        if (currMode==Lab.ADD || currMode==Lab.UPDATE) isUpdatable=true;
        (new CommentForm("Lab Comments",labComments,isUpdatable)).setVisible(true);
        */
        if (resultRec.lab_number>0) 
            (new CommentForm(dbLogin,resultRec.lab_number)).setVisible(true);
    }
    
    void fillForm() 
    {
        PClass.setText(resultRec.p_descr);
        HPVinfo.setText(resultRec.HPV_info);
        if (currMode==Lab.QUERY) {
            createdLbl.setText("Created: "+resultRec.create_date+", "+resultRec.create_user);
            changedLbl.setText("Updated: "+resultRec.change_date+", "+resultRec.change_user);
        }
        //labComments.setText(resultRec.lab_comments);
        if (resDbOps.hasLabComments(resultRec.lab_number)) displayComments();
        resLabNumber.setText(Integer.toString(resultRec.lab_number));
        resPrevLabNum.setText(Integer.toString(resultRec.prev_lab_number));
        resDateCollected.setText(Utils.addDateMask(resultRec.date_collected));
        resDateReceived.setText(Utils.addDateMask(resultRec.receive_date));
        resPatient.setText(resultRec.patient_name);
        resSSN.setText(Utils.addSSNMask(resultRec.ssn));
        resDOB.setText(Utils.addDateMask(resultRec.dob));
        resAddress.setText(resultRec.address);
        resPhone.setText(Utils.addPhoneMask(resultRec.phone));
        resPractice.setText(Integer.toString(resultRec.practice));
        resDoctor.setText(resultRec.dr_name);
        resBilling.setText(resultRec.choice_code);
        resPracticeName.setText(
            resultRec.practice_name+"  "+
            Utils.addPhoneMask(resultRec.practice_phone));
        pracType.setText(resultRec.practice_type);
        if (!completedFlag) resCompleted.setText(Utils.addDateMask(resultRec.date_completed));
        if (!ctFlag) resCytoTech.setText(resultRec.cytotech_code);
        resPathologist.setText(resultRec.pathologist);
        resSuper.setText(Integer.toString(resultRec.superficial));
        resInter.setText(Integer.toString(resultRec.intermediate));
        resPara.setText(Integer.toString(resultRec.parabasal));
        qcCompleted.setText(Utils.addDateMask(resultRec.qc_date));
        qcCytoTech.setText(resultRec.qc_cytotech_code);
        pathCompleted.setText(Utils.addDateMask(resultRec.path_date));
        resRemarks.setText(resultRec.comment_text);
        if (!Utils.isNull(resultRec.submitted)) {
            String msg = "SUBMITTED draft on "+resultRec.submitted+"              ";
            if (!Utils.isNull(resultRec.released))
                msg=msg+"FINALIZED on "+resultRec.released+"                                ";
            if (!Utils.isNull(resultRec.verified_by))
                msg=msg+"VERIFIED on "+resultRec.verified_on
                    +" by "+resultRec.verified_by;
            setMsgLabel(msg);                
        }
        prepLbl.setText(getPrepLbl(resultRec.preparation));
    }
    
    void refreshResultTable(int cRow) 
    {
        if (rData.getRowCount()<1) return;
        if (cRow<0) cRow=0;
        refreshResultDescription(cRow);
        resultTable.clearSelection();
        resultTable.addRowSelectionInterval(cRow,cRow);
        resultTable.scrollRectToVisible
            (resultTable.getCellRect(cRow,0,true));
        resultTable.repaint();
        resultTable.revalidate();
    }
    
    void refreshResultDescription(int cRow)
    {
        String code = null;
        if (hasPC) code = (String)rData.getValueAt(cRow,2);
        else if (hasQC) code = (String)rData.getValueAt(cRow,1);
        else code = (String)rData.getValueAt(cRow,0);
        String descr = getCodeDescription(code);
        rData.setValueAt(descr,cRow,3);
    }

	public boolean cytoTechExists(String code) {
	    boolean rv=false;
	    for (int i=0;i<MAX_TECHS;i++) {
	        if (techs[i].cytotech_code.equals(code)) {
	            rv=true;
	            break;
	        }
	    }
	    if (!rv) {
	        String msg="Cytotechnologist "+code+" does not exist";
	        Utils.createErrMsg(msg);
	    }
	    return (rv);
	}
	
	public boolean pathExists(String code) {
	    boolean rv=false;
	    for (int i=0;i<MAX_PATHS;i++) {
	        if (paths[i].pathologist_code.equals(code)) {
	            rv=true;
	            break;
	        }
	    }
	    if (!rv) {
	        String msg="Pathologist "+code+" does not exist";
	        Utils.createErrMsg(msg);
	    }
	    return (rv);
	}

	public void copyScreeningResults()
	{
	    if (QC) {
	        for (int i=0; i<numQC; i++)
	            rData.setValueAt(null,i,1);
            for (int i=0; i<numSCR; i++) {	            
	            rData.setValueAt(rData.getValueAt(i,0),i,1);
	            refreshResultTable(i);
	        }
	        refreshResultTable(0);
	        numQC=numSCR;
	    }
	    else if (PC) {
	        if (numQC>0) {
	            Utils.createErrMsg("Cannot copy codes since lab has QC. "+
	                "You must enter codes manually.");
	        }
	        else {
	        for (int i=0; i<numPATH; i++) 
	            rData.setValueAt(null,i,2);
	        for (int i=0; i<numSCR; i++) {
	            rData.setValueAt(rData.getValueAt(i,0),i,2);
	            refreshResultTable(i);
	            //rData.setValueAt(getCodeDescription(rData.getValueAt(i,0)),i,3);
	        }
	        refreshResultTable(0);
	        numPATH=numSCR;
	        }
	    }
	}
	
    public void qualityControl () {
        PC=false;
        if (Utils.isNull(qcCompleted.getText()) &&
            Utils.isNull(qcCytoTech.getText()) &&
            Utils.isNull(qcResultCode.getText())) hasQC=false;
        if (!QC && rData.getRowCount()>0) {
            QC=true;
            hasQC=true;
            for (int i=0; i<rData.getRowCount(); i++) {
                rData.setValueAt(null,i,3);
                if (i<numQC)
                    rData.setValueAt(getCodeDescription(
                        (String)rData.getValueAt(i,1)),i,3);
                refreshResultTable(i);                        
            }
            int ndx=0;
            if (numQC>0) ndx=numQC-1;
            refreshResultTable(ndx);
            setEnableScreening(false);
            setEnableMI(false);
            setEnablePathologist(false);
            setEnableQC(true);
        }
        else {
            QC=false;
            for (int i=0; i<rData.getRowCount(); i++) {
                rData.setValueAt(null,i,3);
                if (i<numSCR)
                    rData.setValueAt(getCodeDescription(
                        (String)rData.getValueAt(i,0)),i,3);
                refreshResultTable(i);                        
            }
            refreshResultTable(0);
            setEnableQC(false);
            setEnablePathologist(false);
            setEnableScreening(true);
            if (matIndexRequested>0) 
                setEnableMI(true);
        }            
    }

    public void pathologistControl () {
        QC=false;
        if (Utils.isNull(pathCompleted.getText()) &&
            Utils.isNull(resPathologist.getText()) &&
            Utils.isNull(pathCode.getText())) hasPC=false;
        if (!PC && rData.getRowCount()>0) {
            PC=true;
            hasPC=true;
            for (int i=0; i<rData.getRowCount(); i++) {
                rData.setValueAt(null,i,3);
                if (i<numPATH)
                    rData.setValueAt(getCodeDescription(
                        (String)rData.getValueAt(i,2)),i,3);
                refreshResultTable(i);                        
            }
            int ndx=0;
            if (numPATH>0) ndx=numPATH-1;
            refreshResultTable(ndx);
            setEnablePathologist(true);
            setEnableQC(false);
            setEnableScreening(false);
            setEnableMI(false);
        }
        else {
            PC=false;
            for (int i=0; i<rData.getRowCount(); i++) {
                rData.setValueAt(null,i,3);
                if (i<numSCR)
                    rData.setValueAt(getCodeDescription(
                        (String)rData.getValueAt(i,0)),i,3);
                refreshResultTable(i);                        
            }
            refreshResultTable(0);
            setEnablePathologist(false);
            setEnableQC(false);
            setEnableScreening(true);
            if (matIndexRequested>0) 
                setEnableMI(true);
        }            
    }
	
	void incrementResult()
	{
	    if (rData.getRowCount()<1) return;
	    int cRow = resultTable.getSelectedRow()+1;
	    if (cRow>=rData.getRowCount()) cRow=rData.getRowCount()-1;
        refreshResultDescription(cRow);
        resultTable.clearSelection();
        resultTable.addRowSelectionInterval(cRow,cRow);
        resultTable.scrollRectToVisible
            (resultTable.getCellRect(cRow,0,true));
        resultTable.repaint();
        resultTable.revalidate();
	}
	
	void decrementResult()
	{
	    if (rData.getRowCount()<1) return;
	    int cRow = resultTable.getSelectedRow()-1;
	    if (cRow<0) cRow=0;
        refreshResultDescription(cRow);
        resultTable.clearSelection();
        resultTable.addRowSelectionInterval(cRow,cRow);
        resultTable.scrollRectToVisible
            (resultTable.getCellRect(cRow,0,true));
        resultTable.repaint();
        resultTable.revalidate();
	}

	void qcResultCode_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==KeyEvent.VK_ENTER) {
		    if (Utils.isNull(qcResultCode.getText())) {
		        qcResultCode.transferFocus();
		        return;
		    }
		    if (Utils.length(qcResultCode.getText())<1) return;
            String nextCode=qcResultCode.getText();		    
            if (rData.resultEntered(nextCode,1)) {}
            else {
                boolean addCode = resultCodeExists(nextCode);
                if (qcResultCode.getText().equals("850")) {
                    if ((!Utils.isNull(resultRec.Hx_comment) 
                    || !Utils.isNull(resultRec.LMP))
                    && hxOverride) {
                        //Utils.createRedErrMsg("   ");
                        if (displayHxPopUp()!=JOptionPane.YES_OPTION) {
                            qcResultCode.setText(null);
                            hxOverride=false;
                            return;
                        }
                    }
                }
                // added for Alabama Dept. of Public Health
                else if (resultRec.practice_type.equals("ADPH")) {
                    if (qcResultCode.getText().substring(0,1).equals("9")) {
                        if (!qcResultCode.getText().equals("920")) {
                            qcResultCode.setText(null);
                            Utils.createErrMsg("Only valid '900' code for ADPH is 920");
                            return;
                        }
                    }
                }
                // added to disable 920 code from being used with accounts
                // other than ADPH accounts
                else if (qcResultCode.getText().equals("920")) {
                    if (!resultRec.practice_type.equals("ADPH")) {
                        qcResultCode.setText(null);
                        Utils.createErrMsg("Code 920 valid only for ADPH accounts");
                        return;
                    }
                }
                if (addCode) {
                    numQC++;
                    if (rData.getRowCount()>=numQC) {
                        rData.setValueAt(nextCode,(numQC-1),1);
                        rData.setValueAt(getCodeDescription(nextCode),(numQC-1),3);
                    }
                    else {
                        rData.addRow(null,nextCode,null,(getCodeDescription(nextCode)));
                    }
                    refreshResultTable(numQC-1);
                }
            }
            updateNumResults();
            qcResultCode.setText(null);
		}
		else if (event.getKeyCode()==KeyEvent.VK_DELETE) {
            String nextCode=qcResultCode.getText();		
            if (Utils.isNull(nextCode)) 
                removeQC();
            else {
                numQC=rData.removeQC(nextCode,numQC);
                removeBlankRows();
                qcResultCode.setText(null);
                refreshResultTable(numQC-1);
                for (int i=0; i<rData.getRowCount(); i++)
                    refreshResultTable(i);
                updateNumResults();                
            }
		}
        else if (event.getKeyCode()==KeyEvent.VK_HOME) 
            copyScreeningResults();
		
	}

	void qcCompleted_keyTyped(java.awt.event.KeyEvent event)
	{
	    setMsgLabel(" ");
	    Utils.buildDateMask(event);
	}

	void qcCompleted_keyPressed(java.awt.event.KeyEvent event)
	{
	    if (event.getKeyCode()==KeyEvent.VK_ENTER) {
	        if (!Utils.requiredField(qcCompleted,"Date Completed")) 
	            return;
	        if (!Utils.dateVerify(qcCompleted))
	            return;
	        if (Utils.afterToday(qcCompleted.getText())) {
	            Utils.createErrMsg(qcCompleted.getText()+" is a date in the future");
	            qcCompleted.setText(null);
	            return;
	        }
	        if (Utils.beforeDate(qcCompleted.getText(),dateWindow)) {
	            if (displayDatePopUp(qcCompleted.getText())==JOptionPane.NO_OPTION) {
	                qcCompleted.setText(null);
	                return;
	            }
	        }
	        qcCompleted.transferFocus();
	    }
	}

	void qcCytoTech_keyTyped(java.awt.event.KeyEvent event)
	{
	    setMsgLabel(" ");
		Utils.forceUpper(event,3);
	}

	void qcCytoTech_keyPressed(java.awt.event.KeyEvent event)
	{
	    if (event.getKeyCode()==KeyEvent.VK_ENTER) {
	        if (!Utils.requiredField(qcCytoTech,"Cytotech")) 
	            return;
	        if (qcCytoTech.getText().equals(resCytoTech.getText())) {
	            qcCytoTech.setText(null);
	            Utils.createErrMsg("QC Tech must be different than Screening Tech");
	            return;
	        }
	        if (!cytoTechExists(qcCytoTech.getText()))
	            return;
	        qcCytoTech.transferFocus();
	    }
	}

	void qcResultCode_keyTyped(java.awt.event.KeyEvent event)
	{
	    setMsgLabel(" ");
		Utils.forceUpper(event,3);
	}

	void pathCompleted_keyTyped(java.awt.event.KeyEvent event)
	{
	    setMsgLabel(" ");
	    Utils.buildDateMask(event);
	}

	void pathCompleted_keyPressed(java.awt.event.KeyEvent event)
	{
	    if (event.getKeyCode()==KeyEvent.VK_ENTER) {
	        if (!Utils.requiredField(pathCompleted,"Date Completed")) 
	            return;
	        if (!Utils.dateVerify(pathCompleted))
	            return;
	        if (Utils.afterToday(pathCompleted.getText())) {
	            Utils.createErrMsg(pathCompleted.getText()+" is a date in the future");
	            pathCompleted.setText(null);
	            return;
	        }
	        if (Utils.beforeDate(pathCompleted.getText(),dateWindow)) {
	            if (displayDatePopUp(pathCompleted.getText())==JOptionPane.NO_OPTION) {
	                pathCompleted.setText(null);
	                return;
	            }
	        }
	        pathCompleted.transferFocus();
	    }
	}

	void pathCode_keyTyped(java.awt.event.KeyEvent event)
	{
	    setMsgLabel(" ");
		Utils.forceUpper(event,3);
	}

	void pathCode_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==KeyEvent.VK_ENTER) {
		    if (Utils.isNull(pathCode.getText())) {
		        pathCode.transferFocus();
		        return;
		    }
		    if (Utils.length(pathCode.getText())<1) return;
            String nextCode=pathCode.getText();		    
            if (rData.resultEntered(nextCode,2)) {}
            else {
                boolean addCode = resultCodeExists(nextCode);
                if (pathCode.getText().equals("850")) {
                    if ((!Utils.isNull(resultRec.Hx_comment) 
                    || !Utils.isNull(resultRec.LMP))
                    && hxOverride) {
                        //Utils.createRedErrMsg("   ");
                        if (displayHxPopUp()!=JOptionPane.YES_OPTION) {
                            pathCode.setText(null);
                            hxOverride=false;
                            return;
                        }
                    }
                }
                // added for Alabama Dept. of Public Health
                else if (resultRec.practice_type.equals("ADPH")) {
                    if (pathCode.getText().substring(0,1).equals("9")) {
                        if (!pathCode.getText().equals("920")) {
                            pathCode.setText(null);
                            Utils.createErrMsg("Only valid '900' code for ADPH is 920");
                            return;
                        }
                    }
                }
                // added to disable 920 code from being used with accounts
                // other than ADPH accounts
                else if (pathCode.getText().equals("920")) {
                    if (!resultRec.practice_type.equals("ADPH")) {
                        pathCode.setText(null);
                        Utils.createErrMsg("Code 920 valid only for ADPH accounts");
                        return;
                    }
                }
                if (addCode) {
                    numPATH++;
                    if (rData.getRowCount()>=numPATH) {
                        rData.setValueAt(nextCode,(numPATH-1),2);
                        rData.setValueAt(getCodeDescription(nextCode),(numPATH-1),3);
                    }
                    else {
                        rData.addRow(null,null,nextCode,(getCodeDescription(nextCode)));
                    }
                    refreshResultTable(numPATH-1);
                }
            }
            updateNumResults();
            pathCode.setText(null);
		}
		else if (event.getKeyCode()==KeyEvent.VK_DELETE) {
            String nextCode=pathCode.getText();		 
            if (Utils.isNull(nextCode))
                removePathologist();
            else {
                numPATH=rData.removePATH(nextCode,numPATH);
                removeBlankRows();
                pathCode.setText(null);
                refreshResultTable(numPATH-1);
                for (int i=0; i<rData.getRowCount(); i++)
                    refreshResultTable(i);
                updateNumResults();                
            }
		}
        else if (event.getKeyCode()==KeyEvent.VK_HOME) 
            copyScreeningResults();
	}
	
	void resRemarks_keyPressed(java.awt.event.KeyEvent event)
	{
		if ((event.getKeyCode()==KeyEvent.VK_ENTER)
		    || (event.getKeyChar()=='\r'))
		{
		    setMsgLabel(" ");
		    event.consume();
		    resRemarks.setEnabled(false);
            resCompleted.requestFocus();
        }
	}

	class SymAction implements java.awt.event.ActionListener
	{
		@Override
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == yesButton)
				yesButton_actionPerformed(event);
			else if (object == noButton)
				noButton_actionPerformed(event);
			else if (object == cancelButton)
				cancelButton_actionPerformed(event);
		}
	}
	
	public void invalidMI() {
        String msg="Choose YES if Hormonal Evaluation could not be performed.  "+
	        "Please select an option.";
        setMsgLabel(msg);
        setEnableConfirmButtons(true);
        buttonMode=CONFIRM_MI;
        noButton.requestFocus();
	}
	

	class SymFocus extends java.awt.event.FocusAdapter
	{
		@Override
		public void focusLost(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			if (object == resSuper)
				resSuper_focusLost(event);
			else if (object == resInter)
				resInter_focusLost(event);
			else if (object == resPara)
				resPara_focusLost(event);
			else if (object == resCompleted)
				resCompleted_focusLost(event);
			else if (object == resCytoTech)
				resCytoTech_focusLost(event);
		}

		@Override
		public void focusGained(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			if (object == resSuper)
				resSuper_focusGained(event);
			else if (object == resInter)
				resInter_focusGained(event);
			else if (object == resPara)
				resPara_focusGained(event);
			else if (object == resLabNumber)
				resLabNumber_focusGained(event);
			else if (object == resCytoTech)
				resCytoTech_focusGained(event);
			else if (object == resCompleted)
				resCompleted_focusGained(event);
			else if (object == resPathologist)
				resPathologist_focusGained(event);
			else if (object == resultCode)
				resultCode_focusGained(event);
			else if (object == qcCytoTech)
				qcCytoTech_focusGained(event);
			else if (object == qcResultCode)
				qcResultCode_focusGained(event);
			if (object == pathCode)
				pathCode_focusGained(event);
			else if (object == qcCompleted)
				qcCompleted_focusGained(event);
			else if (object == pathCompleted)
				pathCompleted_focusGained(event);
			else if (object == resRemarks)
				resRemarks_focusGained(event);
		}
	}

	void resSuper_focusGained(java.awt.event.FocusEvent event)
	{
	    Utils.deselect(event);
		if (resSuper.getText().equals("0")) resSuper.setText(null);
	}

	void resInter_focusGained(java.awt.event.FocusEvent event)
	{
	    Utils.deselect(event);
		if (resInter.getText().equals("0")) resInter.setText(null);
	}

	void resPara_focusGained(java.awt.event.FocusEvent event)
	{
	    Utils.deselect(event);
		if (resPara.getText().equals("0")) resPara.setText(null);
	}

	void resSuper_focusLost(java.awt.event.FocusEvent event)
	{
		//if (Utils.isNull(resSuper.getText())) resSuper.setText("0");
	}

	void resInter_focusLost(java.awt.event.FocusEvent event)
	{
		//if (Utils.isNull(resInter.getText())) resInter.setText("0");
	}

	void resPara_focusLost(java.awt.event.FocusEvent event)
	{
		//if (Utils.isNull(resPara.getText())) resPara.setText("0");
	}

	void resSuper_keyTyped(java.awt.event.KeyEvent event)
	{
	    setMsgLabel(" ");
		Utils.forceDigits(event);
	}

	void resSuper_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==KeyEvent.VK_ENTER) {
		    if (Utils.isNull(resSuper.getText())) resSuper.setText("0");
		    event.consume();
		    resSuper.transferFocus();
		}
	}

	void resInter_keyTyped(java.awt.event.KeyEvent event)
	{
	    setMsgLabel(" ");
		Utils.forceDigits(event);
	}

	void resInter_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==KeyEvent.VK_ENTER) {
		    if (Utils.isNull(resInter.getText())) resInter.setText("0");
		    event.consume();
		    resInter.transferFocus();
		}
	}

	void resPara_keyTyped(java.awt.event.KeyEvent event)
	{
	    setMsgLabel(" ");
		Utils.forceDigits(event);
	}

	void resPara_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==KeyEvent.VK_ENTER) {
		    if (Utils.isNull(resPara.getText())) resPara.setText("0");
		    event.consume();
		    int MI_sum = addMI();
		    if (MI_sum==0) invalidMI();
		    else if (checkMI()) resPara.transferFocus();
		}
	}

	void resLabNumber_focusGained(java.awt.event.FocusEvent event)
	{
		if (currMode==Lab.ADD) 
		    setMsgLabel("Type Lab Number and Press ENTER");
	}

	void resCytoTech_focusGained(java.awt.event.FocusEvent event)
	{
	    Utils.deselect(event);
        setMsgLabel("Press F8 for List of Cytotechs");
        if (ctFlag) resCytoTech.setText(resCytoTechSave);
	}

	void resCompleted_focusGained(java.awt.event.FocusEvent event)
	{
	    Utils.deselect(event);
		if (completedFlag) resCompleted.setText(resCompletedSave);
	}

	void resCompleted_focusLost(java.awt.event.FocusEvent event)
	{
		if (!Utils.isNull(resCompleted.getText())) {
		    completedFlag=false;
		    resCompletedSave = new String();
		    //completedFlag=true;
		    //resCompletedSave = new String(resCompleted.getText());
		}
		else {
            completedFlag=false;
            resCompletedSave = new String();
        }
	}

	void resCytoTech_focusLost(java.awt.event.FocusEvent event)
	{
		if (!Utils.isNull(resCytoTech.getText())) { 
		    ctFlag=false;
		    resCytoTechSave = new String();
		    //ctFlag=true;
		    //resCytoTechSave = new String(resCytoTech.getText());
		}
		else { 
		    ctFlag=false;
		    resCytoTechSave = new String();
		}
	}

	void resPathologist_focusGained(java.awt.event.FocusEvent event)
	{
	    Utils.deselect(event);
		setMsgLabel("Press F8 for List of Pathologists");
	}

	void resultCode_focusGained(java.awt.event.FocusEvent event)
	{
	    Utils.deselect(event);
		setMsgLabel("Press F8 for List of Result Codes");
	}

	void qcCytoTech_focusGained(java.awt.event.FocusEvent event)
	{
	    Utils.deselect(event);
		setMsgLabel("Press F8 for List of Cytotechs");
	}

	void qcResultCode_focusGained(java.awt.event.FocusEvent event)
	{
	    Utils.deselect(event);
		setMsgLabel("Press F8 for List of Result Codes");
	}

	void pathCode_focusGained(java.awt.event.FocusEvent event)
	{
	    Utils.deselect(event);
		setMsgLabel("Press F8 for List of Result Codes");
	}
	

	void resRemarks_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event);
	}
	
	void setMsgLabel(String s)
	{
		msgLabel.setText(s);

	}
	
	String getCodeDescription(String rCode)
	{
	    String rCodeDescr = null;
	    for (int i=0; i<resultCodes.length; i++) {
	        if (resultCodes[i].bethesda_code.equals(rCode)) {
	            rCodeDescr = new String(resultCodes[i].description);
	            break;
	        }
	    }
	    rCodeDescr=resDbOps.getCodeDescription(rCode,rCodeDescr);
	    return (rCodeDescr);
	}
	
	public void noOption(int mode) 
	{
	    if (mode==CONFIRM_PRINT) {
	        if (Utils.isNull(resPathologist.getText())) {
	            cancelOption();
	            setMsgLabel("Press ESC to clear form OR resubmit");
	            Utils.createErrMsg("Draft print for pathologist cases only");
	        }
	        else {
	            resultRec.first_print=DRAFT;
	            if (currMode==Lab.ADD) finishAdd();
	            else if (currMode==Lab.UPDATE) finishUpdate();
	        }
	    }
	}
	
	public void yesOption(int mode)
	{
        if (mode==CONFIRM_MI) {
            cancelOption();        
            matIndexRequested=REVERSE;
            setEnableMI(false);
            resultRec.superficial=REVERSE;
            resultRec.parabasal=REVERSE;
            resultRec.intermediate=REVERSE;
            commentEntry();
            setMsgLabel("ENTER REASON MI COULD NOT BE PERFORMED. "+msgLabel.getText());
        }
        else if (mode==CONFIRM_PRINT) {
            if (!Utils.isNull(resPathologist.getText())) {
                Utils.createErrMsg("Pathologist case requires draft print");
                cancelOption();
            }
            else {
                resultRec.first_print=FINAL;
	            if (currMode==Lab.ADD) finishAdd();
	            else if (currMode==Lab.UPDATE) finishUpdate();
	        }
        }
    }
    
    public void cancelOption()
    {
		setMsgLabel(" ");
		setEnableConfirmButtons(false);
		if (QC) qcCompleted.requestFocus();
		else if (PC) pathCompleted.requestFocus();
		else resCompleted.requestFocus();
    }

	public boolean confirmCodesEntered()
	{
	    boolean rv = true;
	    if (hasQC && qcResults.size()==0) {
	        Utils.createErrMsg("Quality Control case needs result codes!");
	        rv=false;
	        QC=false;
	        qualityControl();
	        qcResultCode.requestFocus();
	    }
	    else if (hasPC && pathResults.size()==0) {
	        Utils.createErrMsg("Pathologist case needs result codes!");
	        rv=false;
	        PC=false;
	        pathologistControl();
	        pathCode.requestFocus();
	    }
	    if (rv&&resultRec.preparation==Lab.IMAGED_SLIDE) {
            if (pathResults.size()>0) {
                rv=checkImagedCodes(pathResults);
            }
            else if (qcResults.size()>0) {
                rv=checkImagedCodes(qcResults);
            }
            else {
                rv=checkImagedCodes(labResults);
            }
            if (!rv) {
                Utils.createErrMsg(
                    "Imaged Preparation must include a 705, 710, or 715 code!");
            }
        }
	    if (!rv) {
	        buttonMode=Lab.IDLE;
	        setEnableConfirmButtons(false);
	        setMsgLabel(" ");
	    }
	    return rv;
	}
	
	public void finishAdd() 
	{
        fillResultRecord();
        if (!confirmCodesEntered()) {
            if (QC) qcResultCode.requestFocus();
		    else if (PC) pathCode.requestFocus();
		    else resultCode.requestFocus();
            return;
        }
	    if (!dbThreadRunning) { 
	        resDbOps.DB_prep();
	        resDbOps.DB_action();
        }
        else { 
            Utils.createErrMsg("Database is busy ... please retry");
            return;
        }
        resetResultForm();
	    addActions();
	}
	
	public void finishUpdate()
	{
	    fillResultRecord();
        if (!confirmCodesEntered()) return;
	    resDbOps.DB_prep();
	    boolean rc = resDbOps.update();
	    if (rc) {
	        setEnableAllFields(false);
	        msgLabel.requestFocus();
	        fKeys.off();
	        fKeys.keyOn(fKeys.F1);
	        fKeys.keyOn(fKeys.F3);
	        fKeys.keyOn(fKeys.F9);
	        setMsgLabel("Update Operation Succeeded");
	    }
	    else {
	        setEnableAllFields(false);
	        msgLabel.requestFocus();
	        fKeys.off();
	        setMsgLabel("Update Operation Failed");
        }
	    currMode=Lab.IDLE;
	}
	
	public boolean confirmPathRequired() 
	{
	    boolean rv = true;
	    int col = 0;
	    for (int i=0; i<rData.getRowCount(); i++) {
	        String code = (String)rData.getValueAt(i,col);
	        for (int j=0; j<MAX_RESULT_CODES; j++) {
	            if (resultCodes[j].bethesda_code.equals(code)) {
	                if (resultCodes[j].path_needed.equals("Y")) {
	                    Utils.createErrMsg("Pathologist required for result code "+code);
	                    rv=false;
	                }
	                break;
	            }
	            if (!rv) break;
	        }
	    }
	    if (numQC>0 && rv) {
	        col = 1;
	        for (int i=0; i<rData.getRowCount(); i++) {
	            String code = (String)rData.getValueAt(i,col);
	            for (int j=0; j<MAX_RESULT_CODES; j++) {
	                if (resultCodes[j].bethesda_code.equals(code)) {
	                    if (resultCodes[j].path_needed.equals("Y")) {
	                        Utils.createErrMsg("Pathologist required for result code "+code);
	                        rv=false;
	                    }
	                    break;
	                }
	                if (!rv) break;
	            }
	        }
	    }
	    return (rv);
	}


	void yesButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		yesOption(buttonMode);
	}

	void noButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		noOption(buttonMode);
	}

	void cancelButton_actionPerformed(java.awt.event.ActionEvent event)
	{
	    cancelOption();
	}

	void noButton_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==KeyEvent.VK_DOWN) {
            noButton.setFont(new Font("Dialog", Font.PLAIN, 11));
            noButton.setForeground(Utils.BUTTON_FOREGROUND);
            yesButton.setFont(new Font("Dialog", Font.BOLD, 11));
            yesButton.setForeground(Utils.LABEL_FOREGROUND);
		    yesButton.requestFocus();
		}
		else if (event.getKeyCode()==KeyEvent.VK_UP) {
            noButton.setFont(new Font("Dialog", Font.PLAIN, 11));
            noButton.setForeground(Utils.BUTTON_FOREGROUND);
            cancelButton.setFont(new Font("Dialog", Font.BOLD, 11));
            cancelButton.setForeground(Utils.LABEL_FOREGROUND);
		    cancelButton.requestFocus();
		}
	}

	void yesButton_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==KeyEvent.VK_DOWN) {
            yesButton.setFont(new Font("Dialog", Font.PLAIN, 11));
            yesButton.setForeground(Utils.BUTTON_FOREGROUND);
            cancelButton.setFont(new Font("Dialog", Font.BOLD, 11));
            cancelButton.setForeground(Utils.LABEL_FOREGROUND);
		    cancelButton.requestFocus();
		}
		else if (event.getKeyCode()==KeyEvent.VK_UP) {
            yesButton.setFont(new Font("Dialog", Font.PLAIN, 11));
            yesButton.setForeground(Utils.BUTTON_FOREGROUND);
            noButton.setFont(new Font("Dialog", Font.BOLD, 11));
            noButton.setForeground(Utils.LABEL_FOREGROUND);
		    noButton.requestFocus();
		}
	}

	void cancelButton_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==KeyEvent.VK_DOWN) {
            cancelButton.setFont(new Font("Dialog", Font.PLAIN, 11));
            cancelButton.setForeground(Utils.BUTTON_FOREGROUND);
            noButton.setFont(new Font("Dialog", Font.BOLD, 11));
            noButton.setForeground(Utils.LABEL_FOREGROUND);
		    noButton.requestFocus();
		}
		else if (event.getKeyCode()==KeyEvent.VK_UP) {
            cancelButton.setFont(new Font("Dialog", Font.PLAIN, 11));
            cancelButton.setForeground(Utils.BUTTON_FOREGROUND);
            yesButton.setFont(new Font("Dialog", Font.BOLD, 11));
            yesButton.setForeground(Utils.LABEL_FOREGROUND);
		    yesButton.requestFocus();
		}
	}
	
	void printHistory()
	{
	    Vector pVect = new Vector();
	    int labNum = 0;
	    try {
	        labNum = Integer.parseInt(resLabNumber.getText());
	        resDbOps.getPrintHistory(labNum,pVect);
	        if (pVect.size()>0) {
	            String[] s = new String[pVect.size()];
	            for (int i=0; i<pVect.size(); i++)
	                s[i]=(String)pVect.elementAt(i);
                (new PickList("Print History",50,200,240,
                    120,pVect.size(),s)).setVisible(true);               	                
	        }
	        else { 
	            log.write("ERROR: printHistory\nNo reports printed for lab #"+labNum);
	            Utils.createErrMsg("No reports for this lab");
	        }
	            
	    }
	    catch (Exception e) { log.write("ERROR: printHistory\n"+e); }
	}
	
	public int getPapClass(Vector bCodeVect)
	{
	    int maxPapClass=0;
	    int pCount=0;
	    for (int i=0; i<MAX_RESULT_CODES; i++) {
            if (bCodeVect.contains(resultCodes[i].bethesda_code)) {
                pCount++;
	            if (maxPapClass<resultCodes[i].pap_class 
	            && resultCodes[i].pap_class<16
	            && resultCodes[i].pap_class!=0)
	                maxPapClass=resultCodes[i].pap_class;
	        }
	        if (pCount==bCodeVect.size()) break;
	    }
	    // pap class #10 = OTHER
	    if (maxPapClass==0) maxPapClass=10;
	    return maxPapClass;
	}
	
	public boolean getLimited(Vector bCodeVect)
	{
	    boolean limited = false;
	    int pCount=0;
	    for (int i=0; i<MAX_RESULT_CODES; i++) {
            if (bCodeVect.contains(resultCodes[i].bethesda_code)) {
                pCount++;
	            if (resultCodes[i].pap_class==16) {
	                limited=true;
	                break;
	            }
	        }
	        if (limited || pCount==bCodeVect.size()) break;
	    }
	    return limited;
	}
	
	public String getBiopsyCode()
	{
	    String biopsyCode = null;
	    for (int i=0; i<MAX_RESULT_CODES; i++) {
	        if (resultCodes[i].biopsy_request.equals("Y")||
	            resultCodes[i].biopsy_request.equals("C")) {
	            if (pathResults.size()>0) {
	                if (pathResults.contains(resultCodes[i].bethesda_code))
	                    biopsyCode = new String(resultCodes[i].bethesda_code);
	            }
	            else if (qcResults.size()>0) {
	                if (qcResults.contains(resultCodes[i].bethesda_code))
	                    biopsyCode = new String(resultCodes[i].bethesda_code);
	            }
	            else if (labResults.size()>0) {
	                if (labResults.contains(resultCodes[i].bethesda_code))
	                    biopsyCode = new String(resultCodes[i].bethesda_code);
	            }
	        }
	    }
	    return biopsyCode;
	}
	

	class SymWindow extends java.awt.event.WindowAdapter
	{
		@Override
		public void windowClosed(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == ResultForm.this)
				ResultForm_windowClosed(event);
		}
	}

	void ResultForm_windowClosed(java.awt.event.WindowEvent event)
	{
		log.stop();
	}
	
	private void closingActions()
	{
	    log.stop();
	    this.dispose();
	}

	void qcCompleted_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void pathCompleted_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void resRemarks_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}
	
	int displayHxPopUp()
	{
	    String titleMsg = null;
	    String infoMsg = null;
	    if (!Utils.isNull(resultRec.Hx_comment)) {
	        titleMsg="Code 850 entered with hysterectomy indicated!";
	        infoMsg=resultRec.Hx_comment;
	    }
	    else {
	        titleMsg="Code 850 entered with Alpha LMP!";
	        infoMsg=resultRec.LMP;
	    }
	    Utils.createRedErrMsg(titleMsg);
		Object[] options = {"Yes","No"};
		int rv = JOptionPane.showOptionDialog(this,titleMsg+"\n"+infoMsg+
		    "\nOK to use this code?",
		    "Please Confirm",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,
		    null,options,options[1]);
	    return (rv);
	}

	int displayDatePopUp(String testDate)
	{
	    String titleMsg = null;
	    String infoMsg = null;
	    infoMsg="IS EARLIER THAN 30 DAYS";
		Object[] options = {"Yes","No"};
		int rv = JOptionPane.showOptionDialog(this,testDate+"\n"+infoMsg+
		    "\nOK to use this date?",
		    "Please Confirm",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,
		    null,options,options[1]);
	    return (rv);
	}
	
	boolean checkImagedCodes(Vector v)
	{
	    boolean verified = false;
	    for (int i=0; i<v.size(); i++) {
	        String s = (String)v.elementAt(i);
	        if (s.equals("705")||s.equals("710")||s.equals("715")) {
	            verified=true;
	        }
	        if (verified) break;
	    }
	    return (verified);
	}
	
	String getPrepLbl(int preparation)
	{
	    String prepLabel = null;
	    switch (preparation)
	    {
	        case Lab.CONVENTIONAL:
	            prepLabel="CONVENTIONAL";
	            break;
	        case Lab.THIN_LAYER:
	            prepLabel="THIN PREP";
	            break;
	        case Lab.PAP_NET:
	            prepLabel="PAPNET";
	            break;
	        case Lab.CYT_NON_PAP:
	            prepLabel="NON PAP";
	            break;
	        case Lab.SURGICAL:
	            prepLabel="BIOPSY";
	            break;
	        case Lab.IMAGED_SLIDE:
	            prepLabel="IMAGED";
	            break;
	        case Lab.HPV_ONLY:
	            prepLabel="HPV ONLY";
	            break;
	    }
	    return(prepLabel);
	}
	
	public boolean hasCode(String checkCode)
	{
System.out.println("inside of hasCode");	    
	    boolean codeEntered = false;
	    String bCode = null;
System.out.println("SIZES --> "+labResults.size()+", "+qcResults.size()+", "+pathResults.size());	    
	    for (int i=0; i<numSCR; i++) {
	        bCode=(String)rData.getValueAt(i,0);
System.out.println("   got code: "+bCode);	        
	        if (bCode.equals(checkCode)) {
System.out.println("      found match!");	            
	            codeEntered=true;
	            break;
	        }
	    }
	    if (!codeEntered&&numQC>0) {
	        for (int i=0; i<numQC; i++) {
	            bCode=(String)rData.getValueAt(i,1);
	            if (bCode.equals(checkCode)) {
	                codeEntered=true;
	                break;
	            }
	        }
	    }
	    if (!codeEntered&&numPATH>0) {
	        for (int i=0; i<numPATH; i++) {
	            bCode=(String)rData.getValueAt(i,2);
	            if (bCode.equals(checkCode)) {
	                codeEntered=true;
	                break;
	            }
	        }
	    }
	    return (codeEntered);
	}
	
}
/* END OF RESULT FORM */


/* Class that displays the table on the Results Form
*/
class ResultData 
{
    public String result_code;
    public String qc_result_code;
    public String path_result_code;
    public String description;
    
    public ResultData(String result_code, String qc_result_code, 
        String path_result_code, String description)
    {
        this.result_code=result_code;
        this.qc_result_code=qc_result_code;
        this.path_result_code=path_result_code;
        this.description=description;
    }
    
}    

class ResultTableData extends AbstractTableModel
{
    static final public ColumnData columns[] = {
        new ColumnData("SCR",50,JLabel.CENTER,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("QC",50,JLabel.CENTER,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("PATH",50,JLabel.CENTER,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("DESCRIPTION",300,JLabel.LEFT,(new Font("DialogInput",Font.PLAIN,10)))
    };

    private Vector rVect;

    public ResultTableData() { 
        rVect = new Vector();
    }
    
    public boolean resultEntered(String bCode, int column)
    {
        boolean rv = false;
        for (int i=0; i<rVect.size(); i++) {
            String rCode = (String)getValueAt(i,column);
            try {
                if (rCode.equals(bCode)) {
                    rv=true;
                    break;
                }
            }
            catch (Exception e) { }
        }
        return (rv);
    }
    
    public void addRow(String result_code, String qc_result_code, String path_result_code, String description) {
        rVect.addElement(new ResultData(result_code,qc_result_code,path_result_code,description));
    }

    public void removeRow(int nRow) {
        rVect.removeElementAt(nRow);
    }
    
    public void removeAllRows() {
        rVect.removeAllElements();
    }
    
    public int removeSCR(String code, int max) 
    {
        Vector codes = new Vector();
        for (int i=0; i<rVect.size(); i++) {
            if (i==max) break;
            String bCode = (String)getValueAt(i,0);
            if (!bCode.equals(code)) 
                codes.addElement(bCode);
        }
        for (int i=0; i<codes.size(); i++) {
            setValueAt(codes.elementAt(i),i,0);
        }
        for (int i=codes.size(); i<rVect.size(); i++) {
            setValueAt(null,i,0);
        }
        return (codes.size());
    }
    
    public int removeQC(String code, int max) 
    {
        Vector codes = new Vector();
        for (int i=0; i<rVect.size(); i++) {
            if (i==max) break;
            String bCode = (String)getValueAt(i,1);
            try {
                if (!bCode.equals(code)) 
                    codes.addElement(bCode);
            }
            catch (Exception e) { }
        }
        for (int i=0; i<codes.size(); i++) {
            setValueAt(codes.elementAt(i),i,1);
        }
        for (int i=codes.size(); i<rVect.size(); i++) {
            setValueAt(null,i,1);
        }
        return (codes.size());
    }

    public int removePATH(String code, int max) 
    {
        Vector codes = new Vector();
        for (int i=0; i<rVect.size(); i++) {
            if (i==max) break;
            String bCode = (String)getValueAt(i,2);
            if (!bCode.equals(code)) 
                codes.addElement(bCode);
        }
        for (int i=0; i<codes.size(); i++) {
            setValueAt(codes.elementAt(i),i,2);
        }
        for (int i=codes.size(); i<rVect.size(); i++) {
            setValueAt(null,i,2);
        }
        return (codes.size());
    }
   
    @Override
	public void setValueAt(Object value, int row, int column) {
        ResultData cRow = (ResultData)rVect.elementAt(row);
        switch (column) {
            case 0: cRow.result_code=(String)value;break;
            case 1: cRow.qc_result_code=(String)value;break;
            case 2: cRow.path_result_code=(String)value;break;
            case 3: cRow.description=(String)value;break;
        }
        rVect.setElementAt(cRow,row);
    }

    @Override
	public Object getValueAt(int row, int column) { 
        if (row<0 || row>=getRowCount()) return "";
        ResultData cRow = (ResultData)rVect.elementAt(row);
        switch (column) {
            case 0: return cRow.result_code;
            case 1: return cRow.qc_result_code;
            case 2: return cRow.path_result_code;
            case 3: return cRow.description;
        }
        return "";
    }
    
    @Override
	public int getRowCount() { return rVect.size(); }
    @Override
	public int getColumnCount() { return columns.length; }
    @Override
	public boolean isCellEditable(int row, int column) { return (true); }
    @Override
	public String getColumnName(int column) { return columns[column].title; }
    
}
