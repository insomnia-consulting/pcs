package com.pacytology.pcs;

/*
    PENNSYLVANIA CYTOLOGY SERVICES
    LABORATORY INFORMATION SYSTEM V1.0
    Copyright (C) 2001 by John Cardella
    All Rights Reserved
    
    File:       MonthlyReptDialog.java
    Created By: John Cardella, Software Engineer
    
    Function:   Form to view and print monthly reports.
    
    MODIFICATIONS ----------------------------------------------------------------
    Date/Staff:   Description:
*/

import java.awt.*;
import javax.swing.*;
import java.io.File;
import java.io.OutputStream;
import java.sql.*;
import java.util.Vector;

public class MonthlyReptDialog extends javax.swing.JDialog
{

    String reptName;
    Vector printerCodes;
    
    // table values where file_ext == reptName
    String stp_name;
    String report_title;
    String auto_run;
    
	public MonthlyReptDialog()
	{
		
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setResizable(false);
		setModal(true);
		setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(187,88);
		setVisible(false);
		getContentPane().add(stmtMonth);
		stmtMonth.setFont(new Font("SansSerif", Font.BOLD, 12));
		stmtMonth.setBounds(130,34,40,20);
		getContentPane().add(stmtYear);
		stmtYear.setFont(new Font("SansSerif", Font.BOLD, 12));
		stmtYear.setBounds(130,56,40,20);
		JLabel1.setText("Month (MM)");
		getContentPane().add(JLabel1);
		JLabel1.setForeground(java.awt.Color.black);
		JLabel1.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel1.setBounds(20,36,68,14);
		JLabel2.setText("Year (YYYY)");
		getContentPane().add(JLabel2);
		JLabel2.setForeground(java.awt.Color.black);
		JLabel2.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel2.setBounds(20,58,78,14);
		generateReport.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
		generateReport.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		generateReport.setText("Generate");
		generateReport.setActionCommand(" Rush");
		generateReport.setOpaque(true);
		getContentPane().add(generateReport);
		generateReport.setForeground(java.awt.Color.black);
		generateReport.setBounds(14,10,80,18);
		getContentPane().add(practiceNumber);
		practiceNumber.setFont(new Font("SansSerif", Font.BOLD, 12));
		practiceNumber.setBounds(130,12,40,20);
		//}}
		
		//{{REGISTER_LISTENERS
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		stmtMonth.addKeyListener(aSymKey);
		stmtYear.addKeyListener(aSymKey);
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		generateReport.addActionListener(lSymAction);
		//}}
	}

	public MonthlyReptDialog(String reptName)
	{
	    this();
		this.reptName=reptName;
		this.printerCodes = new Vector();
		if (reptName.equals("age")) {
		    setTitle("EOM Aging Report");
		    printerCodes.addElement(Utils.ELITE);
		    printerCodes.addElement(Utils.COMPRESSED);
		}
		else if (reptName.equals("due")) {
		    setTitle("Past Due Account Report");
		    printerCodes.addElement(Utils.ELITE);
		    printerCodes.addElement(Utils.COMPRESSED);
		}
		else if (reptName.equals("sbt")) {
		    setTitle("Summary of Billing Types");
		    printerCodes.addElement(Utils.CONDENSED);
		}
		else if (reptName.equals("pth")) {
		    setTitle("Slides by Pathologist");
		    printerCodes.addElement(Utils.CONDENSED);
		}
		else if (reptName.equals("cyt")) {
		    setTitle("Slides by Cytotech");
		    printerCodes.addElement(Utils.CONDENSED);
		}
		else if (reptName.equals("rfb")) {
		    setTitle("Biopsy Request Summary");
		    printerCodes.addElement(Utils.CONDENSED);
		}
		else if (reptName.equals("pcd")) {
		    setTitle("Patient Cards");
            printerCodes.addElement(Utils.COMPRESSED);
        }
		else if (reptName.equals("rbl"))
		    setTitle("Biopsy Letters");
		else if (reptName.equals("uns"))
		    setTitle("Unsatisfactory PAP Smear");
		else if (reptName.equals("pnd"))
		    setTitle("Results Pending");
	    else if (reptName.equals("cln"))
	        setTitle("Clinic Cases");
	    else if (reptName.equals("tat"))
	        setTitle("Turn Around");
	    else if (reptName.equals("ahp"))
	        setTitle("ASCUS - HPV");
	    else if (reptName.equals("whp"))
	        setTitle("ADPH Summary");
		else if (reptName.equals("abn")) {
		    setTitle("ADPH Summary of Abnormals");
		    printerCodes.addElement(Utils.ELITE);
		}
		else if (reptName.equals("207")) {
		    setTitle("ADPH ASC-H/HPV Results");
		    printerCodes.addElement(Utils.ELITE);
		}
		else if (reptName.equals("is1")) {
		    setTitle("ADPH INV SUM MID");
		}
		else if (reptName.equals("is2")) {
		    setTitle("ADPH INV SUM EOM");
		}
		else if (reptName.equals("bc1")) {
		    setTitle("WV BCCSP INV SUM");
		}
		else if (reptName.equals("fp1")) {
		    setTitle("WV FPP INV SUM");
		}
	}

	public void setVisible(boolean b)
	{
		if (b)setLocation(50,50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new MonthlyReptDialog()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted) return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JTextField stmtMonth = new javax.swing.JTextField();
	javax.swing.JTextField stmtYear = new javax.swing.JTextField();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JCheckBox generateReport = new javax.swing.JCheckBox();
	javax.swing.JTextField practiceNumber = new javax.swing.JTextField();
	//}}


	void viewReport()
	{
	    if (Utils.isNull(stmtMonth.getText()) ||
	        Utils.isNull(stmtYear.getText())) {
	        Utils.createErrMsg("No Data Entered");
        }
        else if (reptName.equals("tat")) { 
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            (new TurnAroundForm(
                stmtYear.getText()+stmtMonth.getText())).setVisible(true);
        }
        else {
            String month = "XXX";
            int x = Integer.parseInt(stmtMonth.getText());
            switch (x) {
                case 1:  month="JAN"; break;
                case 2:  month="FEB"; break;
                case 3:  month="MAR"; break;
                case 4:  month="APR"; break;
                case 5:  month="MAY"; break;
                case 6:  month="JUN"; break;
                case 7:  month="JUL"; break;
                case 8:  month="AUG"; break;
                case 9:  month="SEP"; break;
                case 10: month="OCT"; break;
                case 11: month="NOV"; break;
                case 12: month="DEC"; break;
                default: Utils.createErrMsg("Month does not exist");
            }
            if (!month.equals("XXX")) { 
                String fName = null;
                if (Utils.isNull(practiceNumber.getText()))
                    fName=month+stmtYear.getText()+"."+reptName;
                else
                    fName=month+stmtYear.getText()+practiceNumber.getText()+"."+reptName;

                
                OutputStream out = Export.getFile(Utils.SERVER_DIR + fName);
            	if (out != null && out.toString().length() > 0) {
        			ReportViewer viewer = ReportViewer.create(out.toString(), this.getTitle());
        			viewer.setVisible(true);
                }
        		else {
                	Utils.createErrMsg("Cannot locate report: "+fName); 
        		}
                
            }
            else stmtMonth.requestFocus();
        }
	}
	

	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == stmtMonth)
				stmtMonth_keyTyped(event);
			else if (object == stmtYear)
				stmtYear_keyTyped(event);
			
		}

		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == MonthlyReptDialog.this)
				MonthlyReptDialog_keyPressed(event);
			else if (object == stmtMonth)
				stmtMonth_keyPressed(event);
			else if (object == stmtYear)
				stmtYear_keyPressed(event);
			
		}
	}

	void MonthlyReptDialog_keyPressed(java.awt.event.KeyEvent event)
	{
	    if (event.getKeyCode()==event.VK_F9) this.dispose();
	    else if (event.getKeyCode()==event.VK_ESCAPE) {
	        stmtMonth.setText(null);
	        stmtYear.setText(null);
	        stmtMonth.requestFocus();
	    }
	}

	void stmtMonth_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(stmtMonth,"Month"))
		        stmtMonth.transferFocus();
		}
	}

	void stmtMonth_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event,2);
	}

	void stmtYear_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(stmtYear,"Year")) {
		        if (generateReport.isSelected()) {
		            generateReport();
		        }
		        viewReport();
		        this.dispose();
		    }
		}
	}

	void stmtYear_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event,4);
	}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowOpened(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == MonthlyReptDialog.this)
				MonthlyReptDialog_windowOpened(event);
		}
	}

	void MonthlyReptDialog_windowOpened(java.awt.event.WindowEvent event)
	{
		stmtMonth.requestFocus();
	}
	
    private boolean getReportInfo()  
    {
        boolean dataFound = false;        
        String SQL = 
            "SELECT stp_name, auto_run, report_title \n"+
            "FROM pcs.monthly_reports \n"+
            "WHERE file_ext = '"+reptName+"' \n";
        try {
            Statement stmt = DbConnection.process().createStatement();
            ResultSet rs = stmt.executeQuery(SQL);
            while (rs.next())  {
                stp_name = rs.getString(1);
                auto_run = rs.getString(2);
                report_title = rs.getString(3);
                dataFound=true;
            }                
            rs.close(); stmt.close();
        }
        catch (SQLException e) { System.out.println(e); }
        catch (Exception e) { System.out.println(e); }
        return (dataFound);
    }
    
    private void generateReport()
    {
        if (getReportInfo()) {
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            CallableStatement cstmt = null;
            int yearMonth = Integer.parseInt(stmtYear.getText()+stmtMonth.getText());
            try  {
                if (reptName.equals("wh2")) {
	                cstmt=DbConnection.process().prepareCall(
	                    "{call "+stp_name+"(?,?)}");
                    cstmt.setInt(1,yearMonth);
                    cstmt.setInt(2,(int)Integer.parseInt(practiceNumber.getText()));
                }
                else {
	                cstmt=DbConnection.process().prepareCall(
	                    "{call "+stp_name+"(?)}");
                    cstmt.setInt(1,yearMonth);
                }
                cstmt.executeUpdate();
                try { cstmt.close(); }
                catch (SQLException e) { System.out.println(e); }
                catch (Exception e) { System.out.println(e); }
            }
            catch (SQLException e) { System.out.println(e); }
            catch (Exception e) { System.out.println(e); }
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }                
        else {
            Utils.createErrMsg(
                "Cannot generate report - not listed in table");
        }
    }

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == generateReport)
				generateReport_actionPerformed(event);
		}
	}

	void generateReport_actionPerformed(java.awt.event.ActionEvent event)
	{
		if (generateReport.isSelected() && reptName.equals("whp")) {
		    reptName="wh2";
		    practiceNumber.setEnabled(true);
		    practiceNumber.requestFocus();
		}
	}
	
}

