package com.pacytology.pcs;

/*
		A basic implementation of the JFrame class.
*/

import java.awt.*;
import javax.swing.*;
import java.util.Vector;
import javax.swing.table.*;
import com.pacytology.pcs.ui.Square;
import com.pacytology.pcs.utils.StringUtils;

import java.sql.*;
import java.io.*;

public class PracticesList extends javax.swing.JFrame
{
    private Login dbLogin;
    public PracticeTableData pData;
    public JTable practicesTable; 
    public JTableHeader header;
    public JScrollPane practicesScrollPane;
    public StringUtils format = new StringUtils();
    
	public PracticesList()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Practices Table");
		setResizable(false);
		getContentPane().setLayout(null);
		setSize(900,560);
		setVisible(false);
		getContentPane().add(F1sq);
		F1sq.setBounds(35,6,20,20);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F4");
		getContentPane().add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(39,6,20,20);
		getContentPane().add(F2sq);
		F2sq.setBounds(97,6,20,20);
		F2lbl.setRequestFocusEnabled(false);
		F2lbl.setText("F9");
		getContentPane().add(F2lbl);
		F2lbl.setForeground(java.awt.Color.black);
		F2lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F2lbl.setBounds(101,6,20,20);
		F2action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F2action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F2action.setText("Exit");
		getContentPane().add(F2action);
		F2action.setForeground(java.awt.Color.black);
		F2action.setBounds(72,30,70,16);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("Print");
		getContentPane().add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(10,30,70,16);
		//}}

		pData = new PracticeTableData();
		practicesTable = new JTable();
		practicesTable.setEnabled(false);
		practicesTable.setAutoCreateColumnsFromModel(false);
		practicesTable.setModel(pData);

		for (int k=0;k<pData.columns.length;k++) {
		    DefaultTableCellRenderer renderer = new
		        DefaultTableCellRenderer();
            renderer.setHorizontalAlignment(
                pData.columns[k].alignment);
            renderer.setFont(
                pData.columns[k].font);
            TableColumn column = new TableColumn(k,
                pData.columns[k].width,renderer,null);
            practicesTable.addColumn(column);
		}
		
		header = practicesTable.getTableHeader();
		header.setFont(new Font("Dialog",Font.PLAIN, 10));
	
		practicesScrollPane = new JScrollPane();
		practicesScrollPane.getViewport().add(practicesTable);
		getContentPane().add(practicesScrollPane);
		practicesScrollPane.setBounds(20,60,870,470);
        practicesScrollPane.setAutoscrolls(true);
        practicesScrollPane.setEnabled(false);
		
		practicesTable.setFont(new Font("DialogInput", Font.PLAIN, 9));
		practicesTable.setBounds(0,0,867,467);
        practicesTable.setRowHeight(12);
        practicesTable.setCellSelectionEnabled(false);

		//{{INIT_MENUS
		//}}
	
		//{{REGISTER_LISTENERS
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		//}}
	}

	public PracticesList(String sTitle)
	{
		this();
		setTitle(sTitle);
	}
	
	public PracticesList(Login dbLogin)
	{
	    this();
	    this.dbLogin=dbLogin;
	    query();
	    practicesTable.repaint();
	    practicesTable.revalidate();
	}

	public void setVisible(boolean b)
	{
		if (b) setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new PracticesList()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		Insets insets = getInsets();
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	Square F1sq = new Square();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	Square F2sq = new Square();
	javax.swing.JLabel F2lbl = new javax.swing.JLabel();
	javax.swing.JLabel F2action = new javax.swing.JLabel();
	javax.swing.JLabel F1action = new javax.swing.JLabel();
	//}}

	//{{DECLARE_MENUS
	//}}

    public boolean query() {
        boolean exitStatus=true;
        int currRow=0;
        PrintWriter file = null;
        String fName = dbLogin.logPath+"tmp"+format.random();
        String currPractice = null;
        try {
            file = new PrintWriter(
            new BufferedOutputStream(
            new FileOutputStream(fName)));
        }
        catch (IOException e) { }
        try  {
            String query = 
                "select rpad(to_char(practice,'009'),6),rpad(substr(name,1,32),34),\n"+
                "rpad(substr(address1,1,32),34),rpad(substr(address2,1,32),34),\n"+
                "rpad(substr(city,1,16),18),rpad(state,2),zip,\n"+
                "rpad(substr(contact,1,16),18),phone,fax,stop_code,price_code,\n"+
                "patient_cards,to_char(report_copies),client_notes,print_doctors\n"+
                "from pcs.practices order by practice";
            Statement stmt = DbConnection.process().createStatement();
            ResultSet rs = stmt.executeQuery(query);
            currRow=0;
            while (rs.next()) {
                PracticeRec p = new PracticeRec();
                p.practice_id=rs.getString(1);
                p.name=rs.getString(2);
                if (rs.wasNull()) p.name=format.blankString(34);
                p.address1=rs.getString(3);
                if (rs.wasNull()) p.address1=format.blankString(34);
                p.address2=rs.getString(4);
                if (rs.wasNull()) p.address2=format.blankString(34);
                p.city=rs.getString(5);
                if (rs.wasNull()) p.city=format.blankString(18);
                p.state=rs.getString(6);
                if (rs.wasNull()) p.state=format.blankString(4);
                p.zip=rs.getString(7);
                if (rs.wasNull()) p.zip=format.blankString(12);
                else p.zip=format.addZipMask(p.zip);
                p.contact=rs.getString(8);
                if (rs.wasNull()) p.contact=format.blankString(18);
                p.phone=rs.getString(9);
                if (rs.wasNull()) p.phone=format.blankString(16);
                else p.phone=format.addPhoneMask(p.phone);
                p.fax=rs.getString(10);
                if (rs.wasNull()) p.fax=format.blankString(16);
                else p.fax=format.addPhoneMask(p.fax);
                p.stop_code=rs.getString(11);
                if (rs.wasNull()) p.stop_code=format.blankString(3);
                else p.stop_code=format.rpad(p.stop_code,3);
                p.price_code=rs.getString(12);
                if (rs.wasNull()) p.price_code=format.blankString(3);
                else p.price_code=format.rpad(p.price_code,3);
                p.patient_cards=rs.getString(13);
                if (rs.wasNull()) p.patient_cards=format.blankString(3);
                else p.patient_cards=format.rpad(p.patient_cards,3);
                p.r_copies=rs.getString(14);
                if (rs.wasNull()) p.r_copies=format.blankString(3);
                else p.r_copies=format.rpad(p.r_copies,3);
                p.client_notes=rs.getString(15);
                if (rs.wasNull()) p.client_notes=format.blankString(3);
                else p.client_notes=format.rpad(p.client_notes,3);
                p.print_doctors=rs.getString(11);
                if (rs.wasNull()) p.print_doctors=format.blankString(3);
                else p.print_doctors=format.rpad(p.print_doctors,3);
                pData.addRow(
                    rs.getString(1),rs.getString(2),rs.getString(3),
                    /*rs.getString(4),*/rs.getString(5),rs.getString(6),
                    format.addZipMask(rs.getString(7)),rs.getString(8),
                    format.addPhoneMask(rs.getString(9)),
                    format.addPhoneMask(rs.getString(10)),
                    rs.getString(11),rs.getString(12),rs.getString(13),
                    rs.getString(14),rs.getString(15),rs.getString(16));
                String cLine = p.practice_id+p.name+p.address1+p.city+p.state+
                    p.zip+p.contact+p.phone+p.fax+p.stop_code+p.price_code+
                    p.patient_cards+p.r_copies+p.client_notes+p.print_doctors;
                file.println(cLine);
                currRow++;
            }
            file.close();
        }
        catch( Exception e ) {
            exitStatus=false;
            System.out.println(e+"  (R:"+currRow+") (P:"+currPractice+")");
            format.createErrMsg("FATAL ERROR");
        }
        return(exitStatus);            
    }

	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == PracticesList.this)
				PracticesList_keyPressed(event);
		}
	}

	void PracticesList_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_F9) this.dispose();
		else if (event.getKeyCode()==event.VK_F4) {
		    practicesTable.repaint();
		    practicesTable.revalidate();
		}
	}
}



class PracticeData 
{
    public String practice;
    public String name;
    public String address1;
    //public String address2;
    public String city;
    public String state;
    public String zip;
    public String contact;
    public String phone;
    public String fax;
    public String stop_code;
    public String price_code;
    public String patient_cards;
    public String report_copies;
    public String client_notes;
    public String print_doctors;
    
    public PracticeData(String practice,String name,String address1,/*String address2,*/
        String city,String state,String zip,String contact,String phone,String fax,
        String stop_code,String price_code,String patient_cards,String report_copies,
        String client_notes,String print_doctors)
    {
        this.practice=practice;
        this.name=name;
        this.address1=address1;
        //this.address2=address2;
        this.city=city;
        this.state=state;
        this.zip=zip;
        this.contact=contact;
        this.phone=phone;
        this.fax=fax;
        this.stop_code=stop_code;
        this.price_code=price_code;
        this.patient_cards=patient_cards;
        this.report_copies=report_copies;
        this.client_notes=client_notes;
        this.print_doctors=print_doctors;
    
		//{{INIT_CONTROLS
		//}}
	}
    
	//{{DECLARE_CONTROLS
	//}}
}    

class PracticeTableData extends AbstractTableModel
{
    static final public ColumnData columns[] = {
        new ColumnData("A",10,JLabel.CENTER,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("NAME",44,JLabel.LEFT,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("ADDRESS1",44,JLabel.LEFT,(new Font("DialogInput",Font.PLAIN,12))),
        //new ColumnData("ADDRESS2",50,JLabel.LEFT,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("CITY",24,JLabel.LEFT,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("ST",2,JLabel.CENTER,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("ZIP",10,JLabel.LEFT,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("CONTACT",20,JLabel.LEFT,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("PHONE",12,JLabel.CENTER,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("FAX",12,JLabel.CENTER,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("S",2,JLabel.CENTER,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("P",3,JLabel.CENTER,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("T",3,JLabel.CENTER,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("R",3,JLabel.CENTER,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("C",2,JLabel.CENTER,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("D",2,JLabel.CENTER,(new Font("DialogInput",Font.PLAIN,10)))
    };

    private Vector rVect;
    private StringUtils format = new StringUtils();
    public PracticeTableData() {rVect = new Vector(); 
		//{{INIT_CONTROLS
		//}}
	}

    public void addRow(String practice,String name,String address1,/*String address2,*/
            String city,String state,String zip,String contact,String phone,
            String fax,String stop_code,String price_code,
            String patient_cards,String report_copies,
            String client_notes,String print_doctors) {
        rVect.addElement(new PracticeData(practice,name,address1,/*address2,*/
            city,state,zip,contact,phone,fax,stop_code,price_code,
            patient_cards,report_copies,client_notes,print_doctors));
    }

    public void setValueAt(Object value, int row, int column) {
        PracticeData cRow = (PracticeData)rVect.elementAt(row);
        switch (column) {
            case 0:     cRow.practice=(String)value;break;
            case 1:     cRow.name=(String)value;break;
            case 2:     cRow.address1=(String)value;break;
            //case 3:     cRow.address2=(String)value;break;
            case 3:     cRow.city=(String)value;break;
            case 4:     cRow.state=(String)value;break;
            case 5:     cRow.zip=(String)value;break;
            case 6:     cRow.contact=(String)value;break;
            case 7:     cRow.phone=(String)value;break;
            case 8:     cRow.fax=(String)value;break;
            case 9:    cRow.stop_code=(String)value;break;
            case 10:    cRow.price_code=(String)value;break;
            case 11:    cRow.patient_cards=(String)value;break;
            case 12:    cRow.report_copies=(String)value;break;
            case 13:    cRow.client_notes=(String)value;break;
            case 14:    cRow.print_doctors=(String)value;break;
        }
        rVect.setElementAt(cRow,row);
    }

    public Object getValueAt(int row, int column) { 
        if (row<0 || row>=getRowCount()) return "";
        PracticeData cRow = (PracticeData)rVect.elementAt(row);
        switch (column) {
            case 0:     return cRow.practice;
            case 1:     return cRow.name;
            case 2:     return cRow.address1;
            //case 3:     return cRow.address2;
            case 3:     return cRow.city;
            case 4:     return cRow.state;
            case 5:     return cRow.zip;
            case 6:     return cRow.contact;
            case 7:     return cRow.phone;
            case 8:     return cRow.fax;
            case 9:    return cRow.stop_code;
            case 10:    return cRow.price_code;
            case 11:    return cRow.patient_cards;
            case 12:    return cRow.report_copies;
            case 13:    return cRow.client_notes;
            case 14:    return cRow.print_doctors;
        }
        return "";
    }
    
    public int getRowCount() { return (rVect.size()); }
    public int getColumnCount() { return (columns.length); }
    public boolean isCellEditable(int row, int column) { return (true); }
    public String getColumnName(int column) { return (columns[column].title); }
    
	//{{DECLARE_CONTROLS
	//}}
}
