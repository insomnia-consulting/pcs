package com.pacytology.pcs;

/*
		A basic implementation of the JDialog class.
*/

import java.awt.*;
import javax.swing.*;
import java.awt.Toolkit;

public class ErrorDialog extends javax.swing.JDialog
{
	public ErrorDialog(Frame parent)
	{
		super(parent);
		
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("ERROR!");
		setResizable(false);
		setModal(true);
		setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(386,68);
		setVisible(false);
		continueMsg.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		continueMsg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		continueMsg.setText("Press <ESCAPE> To Continue");
		getContentPane().add(continueMsg);
		continueMsg.setForeground(java.awt.Color.black);
		continueMsg.setFont(new Font("Dialog", Font.BOLD, 11));
		continueMsg.setBounds(10,50,366,12);
		errorMsg.setLineWrap(true);
		errorMsg.setWrapStyleWord(true);
		errorMsg.setOpaque(false);
		errorMsg.setEditable(false);
		errorMsg.setEnabled(false);
		getContentPane().add(errorMsg);
		errorMsg.setForeground(java.awt.Color.blue);
		errorMsg.setFont(new Font("SansSerif", Font.BOLD, 12));
		errorMsg.setBounds(10,6,366,40);
		//}}

		errorMsg.setForeground(Color.blue.brighter());
		errorMsg.setDisabledTextColor(Color.blue.brighter());
	
		//{{REGISTER_LISTENERS
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		//}}
	}

	public ErrorDialog()
	{
		this((Frame)null);
	}

	public ErrorDialog(String message)
	{
		this();
		this.getToolkit().beep();
		errorMsg.setText(message);
	}
	
	/* specific error message for result form */
	public ErrorDialog(String message,boolean changeColor)
	{
		this();
		this.getToolkit().beep();
		this.getContentPane().setBackground(Color.red);
		this.setTitle(message);
        this.errorMsg.setForeground(java.awt.Color.white);		
        this.errorMsg.repaint();
		this.continueMsg.setForeground(Color.white.brighter());
		this.continueMsg.setText("Press <ESC> to confirm usage.");
		errorMsg.setText("-- DETAILS FOLLOW --");
		this.repaint();
	}
	
	public ErrorDialog(String message, String location)
	{
		this();
		this.getToolkit().beep();
		this.setTitle(location);
		errorMsg.setText(message);
	}
	
	public void setVisible(boolean b)
	{
		if (b) setLocation(40,36);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new ErrorDialog()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JLabel continueMsg = new javax.swing.JLabel();
	javax.swing.JTextArea errorMsg = new javax.swing.JTextArea();
	//}}


	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == ErrorDialog.this)
				ErrorDialog_keyPressed(event);
		}
	}

	void ErrorDialog_keyPressed(java.awt.event.KeyEvent event)
	{
	    if (event.getKeyCode()==event.VK_ESCAPE)
		    this.dispose();
	}
	
}
