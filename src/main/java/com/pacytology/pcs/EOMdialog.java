package com.pacytology.pcs;

/*
    PENNSYLVANIA CYTOLOGY SERVICES
    LABORATORY INFORMATION SYSTEM V1.0
    Copyright (C) 2001 by John Cardella
    All Rights Reserved
    
    File:       EOMDialog.java
    Created By: John Cardella, Software Engineer
    
    Function:   Dialog for display only shows information about
    the next End-Of-Month; when it will run, month to be processed,
    and so on. Future plans include enabling user to modify default
    settings and enter update EOM run variables.
    
    MODIFICATIONS ----------------------------------------------------------------
    Date/Staff:   Description:
    10/20/2010    Initial creation
*/

import java.awt.*;
import javax.swing.*;
import com.pacytology.pcs.ui.Square;
import java.sql.*;
import com.pacytology.pcs.ui.Square;

public class EOMdialog extends javax.swing.JDialog
{
    int ACCOUNT_MID = 0;
    int S_MONTH = 0;
    int EOM_DATE = 0;
    int EOM_MODE = -1;
    int SUMMARY_MODE = -1;
	
	public EOMdialog(Frame parent)
	{
		super(parent);
		
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("End Of Month");
		getContentPane().setLayout(null);
		setSize(253,249);
		setVisible(false);
		getContentPane().add(F1sq);
		F1sq.setBounds(25,6,20,20);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F3");
		getContentPane().add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(29,6,20,20);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("Update");
		getContentPane().add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(10,30,50,16);
		getContentPane().add(F2sq);
		F2sq.setBounds(77,6,20,20);
		F2lbl.setRequestFocusEnabled(false);
		F2lbl.setText("F9");
		getContentPane().add(F2lbl);
		F2lbl.setForeground(java.awt.Color.black);
		F2lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F2lbl.setBounds(81,6,20,20);
		getContentPane().add(F3sq);
		F3sq.setBounds(129,6,20,20);
		F3lbl.setRequestFocusEnabled(false);
		F3lbl.setText("F12");
		getContentPane().add(F3lbl);
		F3lbl.setForeground(java.awt.Color.black);
		F3lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F3lbl.setBounds(130,6,20,20);
		F2action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F2action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F2action.setText("Exit");
		getContentPane().add(F2action);
		F2action.setForeground(java.awt.Color.black);
		F2action.setBounds(62,30,50,16);
		F3action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F3action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F3action.setText("Submit");
		getContentPane().add(F3action);
		F3action.setForeground(java.awt.Color.black);
		F3action.setBounds(114,30,50,16);
		sMonthLbl.setText("Month Being Ran");
		getContentPane().add(sMonthLbl);
		sMonthLbl.setBounds(20,68,100,12);
		sMonth.setEnabled(false);
		getContentPane().add(sMonth);
		sMonth.setFont(new Font("DialogInput", Font.PLAIN, 12));
		sMonth.setBounds(134,64,86,20);
		JLabel1.setText("Will Run On");
		getContentPane().add(JLabel1);
		JLabel1.setBounds(20,100,100,12);
		runDate.setEnabled(false);
		getContentPane().add(runDate);
		runDate.setFont(new Font("DialogInput", Font.PLAIN, 12));
		runDate.setBounds(134,96,86,20);
		JLabel2.setText("Summaries");
		getContentPane().add(JLabel2);
		JLabel2.setBounds(20,132,100,12);
		summaryMode.setEnabled(false);
		getContentPane().add(summaryMode);
		summaryMode.setFont(new Font("DialogInput", Font.PLAIN, 12));
		summaryMode.setBounds(134,128,86,20);
		
			InfoLabel.setText("CURRENT STATS:  End-Of-Month routines typically begin around 01:20 and end at 05:30; this includes generating all cytology summaries.");
		

		getContentPane().add(InfoLabel);
		InfoLabel.setBounds(20,164,210,70);
		//}}
	
		//{{REGISTER_LISTENERS
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		//}}
	}

	public EOMdialog()
	{
		this((Frame)null);
		init();
		fillForm();
	}

	public EOMdialog(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

	public void setVisible(boolean b)
	{
		if (b)
			setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new EOMdialog()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	Square F1sq = new Square();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	javax.swing.JLabel F1action = new javax.swing.JLabel();
	Square F2sq = new Square();
	javax.swing.JLabel F2lbl = new javax.swing.JLabel();
	Square F3sq = new Square();
	javax.swing.JLabel F3lbl = new javax.swing.JLabel();
	javax.swing.JLabel F2action = new javax.swing.JLabel();
	javax.swing.JLabel F3action = new javax.swing.JLabel();
	javax.swing.JLabel sMonthLbl = new javax.swing.JLabel();
	javax.swing.JTextField sMonth = new javax.swing.JTextField();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JTextField runDate = new javax.swing.JTextField();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JTextField summaryMode = new javax.swing.JTextField();
	JLabel InfoLabel = new JLabel();
	//}}


	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == EOMdialog.this)
				EOMdialog_keyPressed(event);
		}
	}

	void EOMdialog_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_F9) this.dispose();
		else if (event.getKeyCode()==event.VK_F3) { }
		else if (event.getKeyCode()==event.VK_F12) { }
	}

	public void init()
	{
	    resetColors();
	    int job_status = 0;
	    String job_descr = null;
	    String SQL =
	        "select job_status,job_descr \n"+
	        "from pcs.job_control \n"+
	        "where job_descr in ('ACCOUNT_MID','S_MONTH','EOM_DATE','EOM_MODE','SUMMARY_MODE') \n";
	    try {
	        Statement stmt = DbConnection.process().createStatement(); 
	        ResultSet rs = stmt.executeQuery(SQL);
	        while (rs.next()) {
	            job_status = rs.getInt(1);
	            job_descr = rs.getString(2);
	            if (job_descr.equals("ACCOUNT_MID"))
	                ACCOUNT_MID=job_status;
	            else if (job_descr.equals("S_MONTH"))
	                S_MONTH=job_status;
	            else if (job_descr.equals("EOM_DATE"))
	                EOM_DATE=job_status;
	            else if (job_descr.equals("EOM_MODE"))
	                EOM_MODE=job_status;
	            else if (job_descr.equals("SUMMARY_MODE"))
	                SUMMARY_MODE=job_status;
	        }
	        stmt.close(); rs.close();
	    }
	    catch (SQLException e) { System.out.println(e.toString()); }
	    catch (Exception e) { System.out.println(e); }
	}
	
	public void resetColors()
	{
	    Utils.setColors(this.getContentPane());
		InfoLabel.setFont(new Font("Dialog",Font.BOLD,11));
	    InfoLabel.setForeground(Color.white.brighter());
    }
	
	public void fillForm()
	{
	    String s = Integer.toString(S_MONTH);
	    String t = Integer.toString(EOM_DATE);
	    String year = s.substring(0,4);
	    s=s.substring(4);
	    int m = Integer.parseInt(s);
	    String month = null;
	    String day = null;
	    switch(m) {
	        case 1:  month="JAN"; 
	                 break;
	        case 2:  month="FEB";
	                 break;
	        case 3:  month="MAR";
	                 break;
	        case 4:  month="APR";
	                 break;
	        case 5:  month="MAY";
	                 break;
	        case 6:  month="JUN";
	                 break;
	        case 7:  month="JUL";
	                 break;
	        case 8:  month="AUG";
	                 break;
	        case 9:  month="SEP";
	                 break;
	        case 10: month="OCT";
	                 break;
	        case 11: month="NOV";
	                 break;
	        case 12: month="DEC";
	                 break;
	    }
	    sMonth.setText(month+"  "+year);
	    month=t.substring(4,6);
	    day=t.substring(6);
	    year=t.substring(0,4);
	    runDate.setText(month+"/"+day+"/"+year);
	    switch(EOM_MODE) {
	        case 0:  summaryMode.setText("ALL");
	                 break;
	        case 1:  summaryMode.setText("FIRST HALF");
	                 break;
	        default: summaryMode.setText("SECOND HALF");
	    }
	}
	
	
}
