package com.pacytology.pcs;

/*
		A basic implementation of the JDialog class.
*/

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Insets;
import java.awt.event.KeyEvent;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;

import com.pacytology.pcs.ui.Square;

public class HPVNoTest extends javax.swing.JDialog
{
    
    Vector labNumbers = new Vector();
    Vector displayVect = new Vector();
    LogFile log;
    
	public HPVNoTest()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("HPV Tests Not Being Sent");
		getContentPane().setLayout(null);
		setSize(282,519);
		setVisible(false);
		getContentPane().add(F1sq);
		F1sq.setBounds(25,4,20,20);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F2");
		getContentPane().add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(29,4,20,20);
		getContentPane().add(F2sq);
		F2sq.setBounds(87,4,20,20);
		F2lbl.setRequestFocusEnabled(false);
		F2lbl.setText("F9");
		getContentPane().add(F2lbl);
		F2lbl.setForeground(java.awt.Color.black);
		F2lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F2lbl.setBounds(91,4,20,20);
		getContentPane().add(F3sq);
		F3sq.setBounds(149,4,20,20);
		F3lbl.setRequestFocusEnabled(false);
		F3lbl.setText("F12");
		getContentPane().add(F3lbl);
		F3lbl.setForeground(java.awt.Color.black);
		F3lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F3lbl.setBounds(150,4,20,20);
		F2action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F2action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F2action.setText("Exit");
		getContentPane().add(F2action);
		F2action.setForeground(java.awt.Color.black);
		F2action.setBounds(62,28,70,16);
		F3action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F3action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F3action.setText("Submit");
		getContentPane().add(F3action);
		F3action.setForeground(java.awt.Color.black);
		F3action.setBounds(124,28,70,16);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("Add");
		getContentPane().add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(0,28,70,18);
		JLabel4.setRequestFocusEnabled(false);
		JLabel4.setText("Lab Number");
		getContentPane().add(JLabel4);
		JLabel4.setBounds(16,70,80,12);
		labNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		labNumber.setEnabled(false);
		getContentPane().add(labNumber);
		labNumber.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labNumber.setBounds(100,68,90,20);
		getContentPane().add(JScrollPane1);
		JScrollPane1.setBounds(12,110,250,400);
		LNumList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		JScrollPane1.getViewport().add(LNumList);
		LNumList.setBounds(0,0,247,397);
		//}}
	
		//{{REGISTER_LISTENERS
		SymKey aSymKey = new SymKey();
		labNumber.addKeyListener(aSymKey);
		this.addKeyListener(aSymKey);
		//}}
		
		this.resetForm();
	}

	public HPVNoTest(String sTitle)
	{
		this();
		System.out.println("before log create");
        this.log = new LogFile(
            DbConnection.getLogPath(),
            "HPVNoTest",
            DbConnection.getDate(),
            DbConnection.getUser());
        System.out.println("after log create");
        setTitle(sTitle);
	}

	public void setVisible(boolean b)
	{
		if (b) setLocation(50,0);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new HPVNoTest()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	Square F1sq = new Square();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	Square F2sq = new Square();
	javax.swing.JLabel F2lbl = new javax.swing.JLabel();
	Square F3sq = new Square();
	javax.swing.JLabel F3lbl = new javax.swing.JLabel();
	javax.swing.JLabel F2action = new javax.swing.JLabel();
	javax.swing.JLabel F3action = new javax.swing.JLabel();
	javax.swing.JLabel F1action = new javax.swing.JLabel();
	javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
	javax.swing.JTextField labNumber = new javax.swing.JTextField();
	javax.swing.JScrollPane JScrollPane1 = new javax.swing.JScrollPane();
	javax.swing.JList LNumList = new javax.swing.JList();
	//}}


	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == labNumber)
				labNumber_keyPressed(event);
			else if (object == HPVNoTest.this)
				HPVNoTest_keyPressed(event);
		}

		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == labNumber)
				labNumber_keyTyped(event);
		}
	}

	void labNumber_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event,10);
	}

	void labNumber_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(labNumber,"Lab Number")) {
		        if (Utils.length(labNumber.getText())!=10) {
		            Utils.createErrMsg("Illegal lab number");
		            labNumber.setText(null);
		        }
		        else if (labNumbers.contains(labNumber.getText())) {
		            Utils.createErrMsg("Lab Number already entered");
		            labNumber.setText(null);
		        }
		        else {
		            String pname = 
		                getName(
		                    (new Integer(labNumber.getText())).intValue());
		            if (Utils.isNull(pname)) {
		                Utils.createErrMsg("Lab Number invalid for HPV");
		                labNumber.setText(null);
		            }
		            else {
		                labNumbers.addElement(labNumber.getText());
		                displayVect.addElement(labNumber.getText()+"  "+pname);
		                labNumber.setText(null);
		                refreshList();
		            }
		        }
		    }
		}
		else if (event.getKeyCode()==event.VK_DELETE) {
		    int ndx = labNumbers.indexOf(labNumber.getText());
		    if (ndx>=0) {
		        labNumbers.removeElementAt(ndx);
		        displayVect.removeElementAt(ndx);
		        labNumber.setText(null);
		        refreshList();
		    }
		}
	}
	
	void refreshList()
	{
        LNumList.removeAll();
        if (labNumbers.size()>0) { 
            LNumList.setListData(displayVect);
            LNumList.ensureIndexIsVisible(labNumbers.size()-1);
        }
		LNumList.revalidate();
		LNumList.repaint();
	    
	}
	
	void resetColors()
	{
        Utils.setColors(this.getContentPane());
        LNumList.setBackground(Color.black);
        LNumList.setForeground(Color.yellow);
        LNumList.setFont(new Font("Dialog", Font.BOLD, 11));
	}
	
    void resetForm()
    {
        resetColors();
        labNumber.setText(null);
        labNumbers.removeAllElements();
        displayVect.removeAllElements();
        refreshList();
        F1action.requestFocus();
    }

	void HPVNoTest_keyPressed(java.awt.event.KeyEvent event)
	{
		int key = event.getKeyCode();
		switch (key) {
		    case KeyEvent.VK_F2:
		        labNumber.setEnabled(true);
		        labNumber.requestFocus();
		        break;
            case KeyEvent.VK_F9:
                closingActions();
                break;
            case KeyEvent.VK_F12:
                this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                updateActions();
                resetForm();
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                break;
            case KeyEvent.VK_ESCAPE:
                resetForm();
                break;
		}
	}
	
	void updateActions()
	{
	    if (labNumbers.size()<=0) {
	        Utils.createErrMsg("No lab numbers have been entered");
	        resetForm();
	    }
	    else {
	        PreparedStatement pstmt = null;
	        CallableStatement cstmt = null;
	        log.write("UPDATING "+displayVect.size()+" HPV REQUESTS TO NO"); 
	        try {
	            String SQL =
	                "UPDATE pcs.hpv_requests \n"+
	                "SET test_sent = 'N', datestamp=SysDate \n"+
	                "WHERE lab_number = ? \n"+
	                "AND test_sent IS NULL \n";
	            for (int i=0; i<labNumbers.size(); i++) {
	                log.write((String)displayVect.elementAt(i));
	                int lnum = (new Integer((String)labNumbers.elementAt(i))).intValue();
	                pstmt=DbConnection.process().prepareStatement(SQL);
	                pstmt.setInt(1,lnum);
	                int q = pstmt.executeUpdate();
	                pstmt.close();
	                if (q>0) {
	                    cstmt=DbConnection.process().prepareCall(
	                        "{call pcs.calculate_cost(?)}");
                        cstmt.setInt(1,lnum);
                        cstmt.executeUpdate();
                        cstmt.close();
                    }
	            }
	        }
	        catch (SQLException e) { log.write(e.toString()); }
	        catch (Exception e) { log.write(e); }
	    }
	}
	
	String getName(int lnum)
	{
	    PreparedStatement pstmt = null;
	    String pname = null;
	    try {
	        String SQL =
	            "SELECT lname||', '||fname \n"+
	            "FROM pcs.hpv_requests a,pcs.lab_requisitions b,pcs.patients c \n"+
                "WHERE a.lab_number=b.lab_number \n"+
                "AND b.patient=c.patient AND a.test_sent IS NULL \n"+
                "AND a.lab_number=? \n";
            pstmt=DbConnection.process().prepareStatement(SQL);
	        pstmt.setInt(1,lnum);
	        ResultSet rs = pstmt.executeQuery();
	        while (rs.next()) { pname=rs.getString(1); }
	        rs.close();
	        pstmt.close();
	    }
        catch (SQLException e) { log.write(e.toString()); }
	    catch (Exception e) { log.write(e); }
	    return (pname);
	}
	
	void closingActions()
	{
	    log.stop();
	    this.dispose();
	}
	
}
