package com.pacytology.pcs;/*    PENNSYLVANIA CYTOLOGY SERVICES    LABORATORY INFORMATION SYSTEM V1.0    Copyright (C) 2001 by John Cardella    All Rights Reserved        File:       PracticeListing.java    Created By: John Cardella, Software Engineer        Function:   Asks user for sort order, and then queries    for all practices in the data base.        MODIFICATIONS ----------------------------------    Date/Staff      Description:*/import java.util.Vector;import java.sql.*;import javax.swing.JOptionPane;public class PracticeListing{    public Login dbLogin;    public Vector practiceVect;	String orderByClause;	String title;    Vector tVector;    public PracticeListing() {         practiceVect = new Vector();     }    /*    public PracticeListing(Login dbLogin)    {        this();        this.dbLogin=dbLogin;        Object[] possibleValues = {"Account#", "Practice Name", "State"};         Object selectedValue = sortOrderConfirm.showInputDialog(null, "Select Sort Order", "practices", sortOrderConfirm.INFORMATION_MESSAGE, null, possibleValues, possibleValues[0]);         if (possibleValues[0].equals(selectedValue)) {            orderByClause="ORDER BY practice ";            title="Practices - Account Number";        }        else if (possibleValues[1].equals(selectedValue)) {            orderByClause="ORDER BY name ";            title="Practices - Name";        }        else {            orderByClause="ORDER BY state, zip, name ";            title="Practices - State";        }        boolean rv=this.query();        if (rv) displayList();    }     */        public PracticeListing(Login dbLogin)    {        this();        this.dbLogin=dbLogin;        Vector buttonVector = new Vector();        Vector sortOrderVector = new Vector();        tVector = new Vector();        buttonVector.addElement("Account #");        sortOrderVector.addElement("ORDER BY practice ");        buttonVector.addElement("Account Name");        sortOrderVector.addElement("ORDER BY name ");        buttonVector.addElement("Zip Code");        sortOrderVector.addElement("ORDER BY zip, name ");        buttonVector.addElement("Active Status");        sortOrderVector.addElement("ORDER BY active_status, name ");        title="Practice Listing";        tVector.addElement(title+" - Sort Order");        tVector.addElement("RUN");        SortByDialog d = new SortByDialog(buttonVector,sortOrderVector,tVector);        d.setVisible(true);        for (;;) {            int x = tVector.size();            if (x>2) break;        }        orderByClause=(String)tVector.elementAt(1);        if (!orderByClause.equals("NULL")) {            if (this.query()) displayList();        }    }        	static public void main(String args[])	{		new PracticeListing();	}    public boolean query()  {        boolean exitStatus=true;        try  {            String query =                 "SELECT \n"+                "   practice, name, address1, address2, city, \n"+                "   state, zip, contact, phone, fax, \n"+                "   stop_code, price_code, active_status \n"+                "FROM pcs.practices  \n"+                orderByClause+" \n";                            Statement stmt = dbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(query);            while (rs.next()) {                PracticeRec pRec = new PracticeRec();                pRec.practice=rs.getInt(1);                pRec.name=rs.getString(2);                pRec.address1=rs.getString(3);                pRec.address2=rs.getString(4);                pRec.city=rs.getString(5);                pRec.state=rs.getString(6);                pRec.zip=rs.getString(7);                pRec.contact=rs.getString(8);                pRec.phone=rs.getString(9);                pRec.fax=rs.getString(10);                pRec.stop_code=rs.getString(11);                pRec.price_code=rs.getString(12);                pRec.active_status=rs.getString(13);                practiceVect.addElement(pRec);                            }               }        catch( Exception e ) {            System.out.println(e+" lab.query");            exitStatus=false;        }        return(exitStatus);                }    public void displayList() {        String[] s = new String[practiceVect.size()];        for (int i=0; i<practiceVect.size(); i++) {            PracticeRec pRec = (PracticeRec)practiceVect.elementAt(i);            String t = Utils.lpad(                Integer.toString(pRec.practice),3,"0");            String currLine = t+"-"+pRec.active_status+" ";            t=Utils.rpad(pRec.name,30);            currLine+=t+" ";            t=Utils.rpad(pRec.address1,20);            currLine+=t+" ";            t=Utils.rpad(pRec.address2,20);            currLine+=t+" ";            t=Utils.rpad(pRec.state,3);            currLine+=t;            t=Utils.rpad(pRec.zip,5);            currLine+=t+" ";            t=Utils.rpad(pRec.contact,20);            currLine+=t+" ";            t=Utils.rpad(Utils.addPhoneMask(pRec.phone),15);            currLine+=t;            t=Utils.rpad(Utils.addPhoneMask(pRec.fax),15);            currLine+=t;            currLine+=pRec.stop_code+" "+pRec.price_code+" ";            s[i]=currLine;        }        (new PickList((String)tVector.elementAt(0),0,0,800,550,            practiceVect.size(),s)).setVisible(true);    }    }
