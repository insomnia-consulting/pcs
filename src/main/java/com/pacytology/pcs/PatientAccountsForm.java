package com.pacytology.pcs;


/*
    PENNSYLVANIA CYTOLOGY SERVICES
    LABORATORY INFORMATION SYSTEM V1.0
    Copyright (C) 2001 by John Cardella
    All Rights Reserved
    
    File:       PatientAccountsForm.java
    Created By: John Cardella, Software Engineer
    
    Function:   Data entry form for entering patient payments.
    Also used to display details about a DB (i.e. patient) 
    account.
    
    MODIFICATIONS ----------------------------------
    Date/Staff      Description:
*/

import java.awt.*;
import java.awt.event.KeyEvent;

import javax.swing.*;
import com.pacytology.pcs.ui.Square;
import java.util.Vector;

public class PatientAccountsForm extends javax.swing.JFrame
{
    public Login dbLogin;
    public PatientAccountDbOps dbOps;
    /*
    final int IDLE = 99;
    final int QUERY = 100;
    final int QUERY_FOR_ADD = 101;
    final int ADD = 102;
    final int UPDATE = 103;
    final int DELETE = 104;
    final int RELEASE = 105;
    final int HOLD = 106;
    */
    public int currMode = Lab.IDLE;
    public int currPID = 0;
    public int currLAB = 0;
    public double currBAL = 0;
    // values for pastDue
    final int REBILL = -5;
    final int ACCOUNT_NOT_ACTIVATED = -4;
    final int PAID_IN_FULL = -3;
    final int INDEFINITE_HOLD = -2;
    final int HOLD_TO_DATE = -1;
    final int CURRENT = 0;
    final int PAST_30 = 1;
    final int FINAL_NOTICE = 2;
    final int IN_COLLECTION = 3;
    public int pastDue = CURRENT;
    public String lateDate;
    public boolean dFlag = false;
    public Vector payTypeVect = new Vector();
    public Vector payCodeVect = new Vector();
    boolean inBillingQueue = false;
    public LogFile log;
	public JTextArea labComments = new javax.swing.JTextArea();
	public JTextArea dbComments = new javax.swing.JTextArea();
    
	public PatientAccountsForm()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(643,562);
		setVisible(false);
		paLab.setEnabled(false);
		getContentPane().add(paLab);
		paLab.setFont(new Font("DialogInput", Font.PLAIN, 12));
		paLab.setBounds(94,84,86,20);
		patientID.setEnabled(false);
		getContentPane().add(patientID);
		patientID.setFont(new Font("DialogInput", Font.PLAIN, 12));
		patientID.setBounds(252,84,86,20);
		paLName.setEnabled(false);
		getContentPane().add(paLName);
		paLName.setFont(new Font("DialogInput", Font.PLAIN, 12));
		paLName.setBounds(108,112,220,20);
		paFName.setEnabled(false);
		getContentPane().add(paFName);
		paFName.setFont(new Font("DialogInput", Font.PLAIN, 12));
		paFName.setBounds(370,112,150,20);
		paMI.setEnabled(false);
		getContentPane().add(paMI);
		paMI.setFont(new Font("DialogInput", Font.PLAIN, 12));
		paMI.setBounds(544,112,24,20);
		paAddress1.setEnabled(false);
		getContentPane().add(paAddress1);
		paAddress1.setFont(new Font("DialogInput", Font.PLAIN, 12));
		paAddress1.setBounds(108,134,220,20);
		paZip.setEnabled(false);
		getContentPane().add(paZip);
		paZip.setFont(new Font("DialogInput", Font.PLAIN, 12));
		paZip.setBounds(108,158,80,20);
		paCity.setEnabled(false);
		getContentPane().add(paCity);
		paCity.setFont(new Font("DialogInput", Font.PLAIN, 12));
		paCity.setBounds(240,158,156,20);
		paState.setEnabled(false);
		getContentPane().add(paState);
		paState.setFont(new Font("DialogInput", Font.PLAIN, 12));
		paState.setBounds(458,158,24,20);
		paPhone.setEnabled(false);
		getContentPane().add(paPhone);
		paPhone.setFont(new Font("DialogInput", Font.PLAIN, 12));
		paPhone.setBounds(108,182,108,20);
		paSSN.setEnabled(false);
		getContentPane().add(paSSN);
		paSSN.setFont(new Font("DialogInput", Font.PLAIN, 12));
		paSSN.setBounds(264,182,86,20);
		paDOB.setEnabled(false);
		getContentPane().add(paDOB);
		paDOB.setFont(new Font("DialogInput", Font.PLAIN, 12));
		paDOB.setBounds(408,182,76,20);
		billTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		billTotal.setEnabled(false);
		getContentPane().add(billTotal);
		billTotal.setFont(new Font("DialogInput", Font.PLAIN, 12));
		billTotal.setBounds(140,234,76,20);
		paymentAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		paymentAmount.setEnabled(false);
		getContentPane().add(paymentAmount);
		paymentAmount.setFont(new Font("DialogInput", Font.PLAIN, 12));
		paymentAmount.setBounds(306,234,70,20);
		payCode.setText("C");
		payCode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		payCode.setEnabled(false);
		getContentPane().add(payCode);
		payCode.setFont(new Font("DialogInput", Font.PLAIN, 12));
		payCode.setBounds(432,234,20,20);
		payCodeLbl.setText("CHECK");
		getContentPane().add(payCodeLbl);
		payCodeLbl.setBounds(458,236,120,12);
		totalPayments.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		totalPayments.setEnabled(false);
		getContentPane().add(totalPayments);
		totalPayments.setFont(new Font("DialogInput", Font.PLAIN, 12));
		totalPayments.setBounds(140,256,76,20);
		checkNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		checkNumber.setEnabled(false);
		getContentPane().add(checkNumber);
		checkNumber.setFont(new Font("DialogInput", Font.PLAIN, 12));
		checkNumber.setBounds(306,256,70,20);
		dateReceived.setEnabled(false);
		getContentPane().add(dateReceived);
		dateReceived.setFont(new Font("DialogInput", Font.PLAIN, 12));
		dateReceived.setBounds(460,256,76,20);
		currBal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		currBal.setEnabled(false);
		getContentPane().add(currBal);
		currBal.setFont(new Font("DialogInput", Font.PLAIN, 12));
		currBal.setBounds(140,280,76,20);
		adjustReason.setEnabled(false);
		getContentPane().add(adjustReason);
		adjustReason.setFont(new Font("DialogInput", Font.PLAIN, 12));
		adjustReason.setBounds(362,280,186,20);
		adjustReason.setVisible(false);
		releaseDate.setEnabled(false);
		getContentPane().add(releaseDate);
		releaseDate.setFont(new Font("DialogInput", Font.PLAIN, 12));
		releaseDate.setBounds(492,84,76,20);
		F11lbl.setRequestFocusEnabled(false);
		F11lbl.setText("F6");
		getContentPane().add(F11lbl);
		F11lbl.setForeground(java.awt.Color.black);
		F11lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F11lbl.setBounds(349,6,20,20);
		paAddressLbl.setText("Address");
		getContentPane().add(paAddressLbl);
		paAddressLbl.setBounds(38,136,48,12);
		F2action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F2action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F2action.setText("Add");
		getContentPane().add(F2action);
		F2action.setForeground(java.awt.Color.black);
		F2action.setBounds(72,26,70,16);
		paFNameLbl.setText("First");
		getContentPane().add(paFNameLbl);
		paFNameLbl.setBounds(338,114,30,12);
		getContentPane().add(F2sq);
		F2sq.setBounds(97,6,20,20);
		getContentPane().add(F3sq);
		F3sq.setBounds(159,6,20,20);
		F11action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F11action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F11action.setText("Hold");
		getContentPane().add(F11action);
		F11action.setForeground(java.awt.Color.black);
		F11action.setBounds(320,26,70,16);
		paStateLbl.setText("State");
		getContentPane().add(paStateLbl);
		paStateLbl.setBounds(420,160,38,12);
		getContentPane().add(F11sq);
		F11sq.setBounds(345,6,20,20);
		F4action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F4action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F4action.setText("Statement");
		getContentPane().add(F4action);
		F4action.setForeground(java.awt.Color.black);
		F4action.setBounds(196,26,70,16);
		getContentPane().add(msgLabel);
		msgLabel.setForeground(java.awt.Color.red);
		msgLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		msgLabel.setBounds(32,60,358,14);
		F3action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F3action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F3action.setText("Update");
		getContentPane().add(F3action);
		F3action.setForeground(java.awt.Color.black);
		F3action.setBounds(134,26,70,16);
		F4lbl.setRequestFocusEnabled(false);
		F4lbl.setText("F4");
		getContentPane().add(F4lbl);
		F4lbl.setForeground(java.awt.Color.black);
		F4lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F4lbl.setBounds(225,6,20,20);
		F9lbl.setRequestFocusEnabled(false);
		F9lbl.setText("F5");
		getContentPane().add(F9lbl);
		F9lbl.setForeground(java.awt.Color.black);
		F9lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F9lbl.setBounds(287,6,20,20);
		paZipLbl.setText("Zip");
		getContentPane().add(paZipLbl);
		paZipLbl.setBounds(38,160,24,12);
		F9action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F9action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F9action.setText("Release");
		getContentPane().add(F9action);
		F9action.setForeground(java.awt.Color.black);
		F9action.setBounds(258,26,70,16);
		paDOBLbl.setText("DOB");
		getContentPane().add(paDOBLbl);
		paDOBLbl.setBounds(368,184,30,12);
		getContentPane().add(F1sq);
		F1sq.setBounds(35,6,20,20);
		paLNameLbl.setText("Last");
		getContentPane().add(paLNameLbl);
		paLNameLbl.setBounds(38,114,44,12);
		getContentPane().add(F4sq);
		F4sq.setBounds(221,6,20,20);
		paSSNLbl.setText("SSN");
		getContentPane().add(paSSNLbl);
		paSSNLbl.setBounds(228,184,28,12);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F1");
		getContentPane().add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(39,6,20,20);
		JLabel1.setText("MI");
		getContentPane().add(JLabel1);
		JLabel1.setBounds(528,114,20,12);
		getContentPane().add(F9sq);
		F9sq.setBounds(283,6,20,20);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("Query");
		getContentPane().add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(10,26,70,16);
		paPhoneLbl.setText("Phone");
		getContentPane().add(paPhoneLbl);
		paPhoneLbl.setBounds(38,184,48,12);
		F2lbl.setRequestFocusEnabled(false);
		F2lbl.setText("F2");
		getContentPane().add(F2lbl);
		F2lbl.setForeground(java.awt.Color.black);
		F2lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F2lbl.setBounds(101,6,20,20);
		paCityLbl.setText("City");
		getContentPane().add(paCityLbl);
		paCityLbl.setBounds(208,160,28,12);
		F3lbl.setRequestFocusEnabled(false);
		F3lbl.setText("F3");
		getContentPane().add(F3lbl);
		F3lbl.setForeground(java.awt.Color.black);
		F3lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F3lbl.setBounds(163,6,20,20);
		JLabel2.setText("Patient ID");
		getContentPane().add(JLabel2);
		JLabel2.setBounds(194,86,54,12);
		JLabel3.setText("Lab Num");
		getContentPane().add(JLabel3);
		JLabel3.setBounds(38,86,60,12);
		paymentLbl.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
		paymentLbl.setText("PAYMENTS");
		getContentPane().add(paymentLbl);
		paymentLbl.setForeground(java.awt.Color.black);
		paymentLbl.setBounds(242,216,90,14);
		JLabel16.setText("Amount");
		getContentPane().add(JLabel16);
		JLabel16.setBounds(242,236,46,12);
		JLabel15.setText("Type");
		getContentPane().add(JLabel15);
		JLabel15.setBounds(396,236,38,14);
		JLabel17.setText("Check #");
		getContentPane().add(JLabel17);
		JLabel17.setBounds(242,258,46,12);
		adjustLbl.setText("Adjustment Reason");
		getContentPane().add(adjustLbl);
		adjustLbl.setBounds(242,282,118,14);
		adjustLbl.setVisible(false);
		JLabel4.setText("Current Due");
		getContentPane().add(JLabel4);
		JLabel4.setBounds(36,282,70,12);
		pastDueLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		pastDueLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		pastDueLbl.setText("HOLD UNTIL FURTHER NOTICE");
		pastDueLbl.setOpaque(true);
		getContentPane().add(pastDueLbl);
		pastDueLbl.setForeground(java.awt.Color.red);
		pastDueLbl.setFont(new Font("Dialog", Font.BOLD|Font.ITALIC, 12));
		pastDueLbl.setBounds(420,54,190,18);
		pastDueLbl.setVisible(false);
		JLabel8.setText("Total Payments");
		getContentPane().add(JLabel8);
		JLabel8.setBounds(36,258,90,14);
		releaseLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		releaseLbl.setText("RELEASE BILL ON:");
		getContentPane().add(releaseLbl);
		releaseLbl.setForeground(java.awt.Color.black);
		releaseLbl.setBounds(368,86,120,12);
		JLabel20.setText("Received");
		getContentPane().add(JLabel20);
		JLabel20.setBounds(396,258,56,12);
		JLabel6.setText("Patient Charges");
		getContentPane().add(JLabel6);
		JLabel6.setBounds(36,236,100,14);
		JScrollPane1.setOpaque(true);
		getContentPane().add(JScrollPane1);
		JScrollPane1.setBounds(36,306,580,240);
		detailList.setEnabled(false);
		JScrollPane1.getViewport().add(detailList);
		detailList.setFont(new Font("DialogInput", Font.PLAIN, 12));
		detailList.setBounds(0,0,577,237);
		creditBureauWarning.setMessageType(javax.swing.JOptionPane.WARNING_MESSAGE);
		//$$ creditBureauWarning.move(0,563);
		getContentPane().add(F12sq);
		F12sq.setBounds(470,6,20,20);
		F12lbl.setRequestFocusEnabled(false);
		F12lbl.setText("F12");
		getContentPane().add(F12lbl);
		F12lbl.setForeground(java.awt.Color.black);
		F12lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F12lbl.setBounds(471,6,20,20);
		F12action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F12action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F12action.setText("Submit");
		getContentPane().add(F12action);
		F12action.setForeground(java.awt.Color.black);
		F12action.setBounds(444,26,70,16);
		getContentPane().add(square1);
		square1.setBounds(407,6,20,20);
		JLabel5.setRequestFocusEnabled(false);
		JLabel5.setText("F9");
		getContentPane().add(JLabel5);
		JLabel5.setForeground(java.awt.Color.black);
		JLabel5.setFont(new Font("SansSerif", Font.PLAIN, 10));
		JLabel5.setBounds(411,6,20,20);
		JLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		JLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		JLabel7.setText("Exit");
		getContentPane().add(JLabel7);
		JLabel7.setForeground(java.awt.Color.black);
		JLabel7.setBounds(382,26,70,16);
		JLabel9.setText("Lab Charges");
		getContentPane().add(JLabel9);
		JLabel9.setBounds(36,214,80,14);
		labCharges.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		labCharges.setEnabled(false);
		getContentPane().add(labCharges);
		labCharges.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labCharges.setBounds(140,212,76,20);
		JLabel10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		JLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		JLabel10.setText("Copy");
		getContentPane().add(JLabel10);
		JLabel10.setForeground(java.awt.Color.black);
		JLabel10.setBounds(196,38,70,14);
		JLabel11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		JLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		JLabel11.setText("Payment");
		getContentPane().add(JLabel11);
		JLabel11.setForeground(java.awt.Color.black);
		JLabel11.setBounds(72,38,70,14);
		//$$ recvDateWarning.move(0,563);
		//}}
		
        this.setTitle("Patient Accounts");
        resetColors();

		//{{INIT_MENUS
		//}}
	
		//{{REGISTER_LISTENERS
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		SymAction lSymAction = new SymAction();
		SymFocus aSymFocus = new SymFocus();
		paymentAmount.addFocusListener(aSymFocus);
		paymentAmount.addKeyListener(aSymKey);
		checkNumber.addKeyListener(aSymKey);
		adjustReason.addKeyListener(aSymKey);
		patientID.addKeyListener(aSymKey);
		paLab.addKeyListener(aSymKey);
		dateReceived.addKeyListener(aSymKey);
		payCode.addKeyListener(aSymKey);
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		paLName.addKeyListener(aSymKey);
		paLName.addFocusListener(aSymFocus);
		paFName.addKeyListener(aSymKey);
		paFName.addFocusListener(aSymFocus);
		paMI.addKeyListener(aSymKey);
		paMI.addFocusListener(aSymFocus);
		paAddress1.addKeyListener(aSymKey);
		paAddress1.addFocusListener(aSymFocus);
		paZip.addKeyListener(aSymKey);
		paZip.addFocusListener(aSymFocus);
		paCity.addKeyListener(aSymKey);
		paCity.addFocusListener(aSymFocus);
		paState.addKeyListener(aSymKey);
		paState.addFocusListener(aSymFocus);
		paPhone.addKeyListener(aSymKey);
		paPhone.addFocusListener(aSymFocus);
		paSSN.addKeyListener(aSymKey);
		paSSN.addFocusListener(aSymFocus);
		paDOB.addKeyListener(aSymKey);
		paDOB.addFocusListener(aSymFocus);
		releaseDate.addKeyListener(aSymKey);
		releaseDate.addFocusListener(aSymFocus);
		payCode.addFocusListener(aSymFocus);
		checkNumber.addFocusListener(aSymFocus);
		dateReceived.addFocusListener(aSymFocus);
		adjustReason.addFocusListener(aSymFocus);
		//}}
	}

	public PatientAccountsForm(Login dbLogin)
	{
		this();
		this.dbLogin=dbLogin;
		this.log = new LogFile(
		    dbLogin.logPath,"PatientAccountsForm",dbLogin.dateToday,dbLogin.userName);
		this.dbOps = new PatientAccountDbOps(this);
        this.dbOps.getPaymentTypes();
	}
	
	public PatientAccountsForm(Login dbLogin, int lab_number)
	{
		this();
		this.dbLogin=dbLogin;
		this.log = new LogFile(
		    dbLogin.logPath,"PatientAccountsForm",dbLogin.dateToday,dbLogin.userName);
		this.dbOps = new PatientAccountDbOps(this);
        this.dbOps.getPaymentTypes();
        this.queryActions();
        this.paLab.setText(Integer.toString(lab_number));
        this.finalActions();
	}

	public void setVisible(boolean b)
	{
		if (b) setLocation(0,0);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new PatientAccountsForm()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		Insets insets = getInsets();
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JTextField paLab = new javax.swing.JTextField();
	javax.swing.JTextField patientID = new javax.swing.JTextField();
	javax.swing.JTextField paLName = new javax.swing.JTextField();
	javax.swing.JTextField paFName = new javax.swing.JTextField();
	javax.swing.JTextField paMI = new javax.swing.JTextField();
	javax.swing.JTextField paAddress1 = new javax.swing.JTextField();
	javax.swing.JTextField paZip = new javax.swing.JTextField();
	javax.swing.JTextField paCity = new javax.swing.JTextField();
	javax.swing.JTextField paState = new javax.swing.JTextField();
	javax.swing.JTextField paPhone = new javax.swing.JTextField();
	javax.swing.JTextField paSSN = new javax.swing.JTextField();
	javax.swing.JTextField paDOB = new javax.swing.JTextField();
	javax.swing.JTextField billTotal = new javax.swing.JTextField();
	javax.swing.JTextField paymentAmount = new javax.swing.JTextField();
	javax.swing.JTextField payCode = new javax.swing.JTextField();
	javax.swing.JLabel payCodeLbl = new javax.swing.JLabel();
	javax.swing.JTextField totalPayments = new javax.swing.JTextField();
	javax.swing.JTextField checkNumber = new javax.swing.JTextField();
	javax.swing.JTextField dateReceived = new javax.swing.JTextField();
	javax.swing.JTextField currBal = new javax.swing.JTextField();
	javax.swing.JTextField adjustReason = new javax.swing.JTextField();
	javax.swing.JTextField releaseDate = new javax.swing.JTextField();
	javax.swing.JLabel F11lbl = new javax.swing.JLabel();
	javax.swing.JLabel paAddressLbl = new javax.swing.JLabel();
	javax.swing.JLabel F2action = new javax.swing.JLabel();
	javax.swing.JLabel paFNameLbl = new javax.swing.JLabel();
	Square F2sq = new Square();
	Square F3sq = new Square();
	javax.swing.JLabel F11action = new javax.swing.JLabel();
	javax.swing.JLabel paStateLbl = new javax.swing.JLabel();
	Square F11sq = new Square();
	javax.swing.JLabel F4action = new javax.swing.JLabel();
	javax.swing.JLabel msgLabel = new javax.swing.JLabel();
	javax.swing.JLabel F3action = new javax.swing.JLabel();
	javax.swing.JLabel F4lbl = new javax.swing.JLabel();
	javax.swing.JLabel F9lbl = new javax.swing.JLabel();
	javax.swing.JLabel paZipLbl = new javax.swing.JLabel();
	javax.swing.JLabel F9action = new javax.swing.JLabel();
	javax.swing.JLabel paDOBLbl = new javax.swing.JLabel();
	Square F1sq = new Square();
	javax.swing.JLabel paLNameLbl = new javax.swing.JLabel();
	Square F4sq = new Square();
	javax.swing.JLabel paSSNLbl = new javax.swing.JLabel();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	Square F9sq = new Square();
	javax.swing.JLabel F1action = new javax.swing.JLabel();
	javax.swing.JLabel paPhoneLbl = new javax.swing.JLabel();
	javax.swing.JLabel F2lbl = new javax.swing.JLabel();
	javax.swing.JLabel paCityLbl = new javax.swing.JLabel();
	javax.swing.JLabel F3lbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	javax.swing.JLabel paymentLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel16 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel15 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel17 = new javax.swing.JLabel();
	javax.swing.JLabel adjustLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
	javax.swing.JLabel pastDueLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel8 = new javax.swing.JLabel();
	javax.swing.JLabel releaseLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel20 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel6 = new javax.swing.JLabel();
	javax.swing.JScrollPane JScrollPane1 = new javax.swing.JScrollPane();
	javax.swing.JList detailList = new javax.swing.JList();
	javax.swing.JOptionPane creditBureauWarning = new javax.swing.JOptionPane();
	Square F12sq = new Square();
	javax.swing.JLabel F12lbl = new javax.swing.JLabel();
	javax.swing.JLabel F12action = new javax.swing.JLabel();
	Square square1 = new Square();
	javax.swing.JLabel JLabel5 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel7 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel9 = new javax.swing.JLabel();
	javax.swing.JTextField labCharges = new javax.swing.JTextField();
	javax.swing.JLabel JLabel10 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel11 = new javax.swing.JLabel();
	//}}

	//{{DECLARE_MENUS
	//}}


	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == paymentAmount)
				paymentAmount_keyTyped(event);
			else if (object == checkNumber)
				checkNumber_keyTyped(event);
			else if (object == adjustReason)
				adjustReason_keyTyped(event);
			else if (object == patientID)
				patientID_keyTyped(event);
			else if (object == paLab)
				paLab_keyTyped(event);
			else if (object == dateReceived)
				dateReceived_keyTyped(event);
			else if (object == payCode)
				payCode_keyTyped(event);
			else if (object == paLName)
				paLName_keyTyped(event);
			else if (object == paFName)
				paFName_keyTyped(event);
			else if (object == paMI)
				paMI_keyTyped(event);
			else if (object == paAddress1)
				paAddress1_keyTyped(event);
			else if (object == paZip)
				paZip_keyTyped(event);
			else if (object == paCity)
				paCity_keyTyped(event);
			else if (object == paState)
				paState_keyTyped(event);
			else if (object == paPhone)
				paPhone_keyTyped(event);
			else if (object == paSSN)
				paSSN_keyTyped(event);
			else if (object == paDOB)
				paDOB_keyTyped(event);
			else if (object == releaseDate)
				releaseDate_keyTyped(event);
		}

		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == PatientAccountsForm.this)
				PatientAccountsForm_keyPressed(event);
			else if (object == paymentAmount)
				paymentAmount_keyPressed(event);
			else if (object == patientID)
				patientID_keyPressed(event);
			else if (object == paLab)
				paLab_keyPressed(event);
			else if (object == checkNumber)
				checkNumber_keyPressed(event);
			else if (object == adjustReason)
				adjustReason_keyPressed(event);
			else if (object == dateReceived)
				dateReceived_keyPressed(event);
			else if (object == payCode)
				payCode_keyPressed(event);
			else if (object == paLName)
				paLName_keyPressed(event);
			else if (object == paFName)
				paFName_keyPressed(event);
			else if (object == paMI)
				paMI_keyPressed(event);
			else if (object == paAddress1)
				paAddress1_keyPressed(event);
			else if (object == paZip)
				paZip_keyPressed(event);
			else if (object == paCity)
				paCity_keyPressed(event);
			else if (object == paState)
				paState_keyPressed(event);
			else if (object == paPhone)
				paPhone_keyPressed(event);
			else if (object == paSSN)
				paSSN_keyPressed(event);
			else if (object == paDOB)
				paDOB_keyPressed(event);
			else if (object == releaseDate)
				releaseDate_keyPressed(event);
		}
	}

	void PatientAccountsForm_keyPressed(java.awt.event.KeyEvent event)
	{
	    msgLabel.setText(null);
		int key = event.getKeyCode();
		switch (key) {
		    case java.awt.event.KeyEvent.VK_F1:
		        queryActions();
		        break;
            case java.awt.event.KeyEvent.VK_F12:
                if (inBillingQueue)
                    Utils.createErrMsg(
                        "Cannot submit changes on an account "+
                        "with a statement in the billing queue.");
                else
                    finalActions();
                break;
            case java.awt.event.KeyEvent.VK_F9:
                closingActions();
                this.dispose();
                break;
            case KeyEvent.VK_F8:
                if (payCode.hasFocus()) {
                    String[] buf = new String[payTypeVect.size()];
                    String[] buf2 = new String[payTypeVect.size()];
                    for (int i=0;i<payTypeVect.size();i++) {
                        buf[i]=(String)payCodeVect.elementAt(i);
                        buf2[i]=(String)payCodeVect.elementAt(i)+
                            "  "+payTypeVect.elementAt(i);
                    }
                    (new PickList("Payment Types",400,80,200,200,
                        payTypeVect.size(),buf2,buf,payCode)).setVisible(true);
                }
                else if (currMode==Lab.IDLE) {
                    Vector v = dbOps.getAccountHolds();
                    if (v.size()>0) {
                        String[] buf = new String[v.size()];
                        for (int i=0;i<v.size();i++)
                            buf[i]=(String)v.elementAt(i);
                        (new PickList("Direct Bills on Hold",50,50,370,400,
                            v.size(),buf)).setVisible(true);
                    }
                    else Utils.createErrMsg("No accounts on hold.");
                }
                break;
            case KeyEvent.VK_ESCAPE:
                resetForm();
                break;
            case KeyEvent.VK_F2:
                addActions();
                break;
            case KeyEvent.VK_F3:
                if (currMode!=Lab.IDLE) {
                    if (pastDue==REBILL)
                        Utils.createErrMsg("Lab has been rebilled - cannot update.");
                    else if (pastDue==ACCOUNT_NOT_ACTIVATED)
                        Utils.createErrMsg("Account not activated - cannot update.");
                    else if (inBillingQueue)
                        Utils.createErrMsg("Cannot update account with a "+
                            "statement in the billing queue.");
                    else if (pastDue>PAID_IN_FULL)
                        updateActions();
                    else
                        Utils.createErrMsg("Lab charges paid in full - cannot update.");
                }
                break;
            case KeyEvent.VK_F4:
                if (!Utils.isNull(paLab.getText())) {
                    if (inBillingQueue)
                        Utils.createErrMsg(
                            "Cannot print a copy of statement "+
                            "that is in the billing queue.");
                    else {
                        if (currMode==Lab.QUERY || currMode==Lab.IDLE) {
                            String s = dbComments.getText();
                            if (!Utils.isNull(s)) dbOps.addComment(s);
                            dbComments.setText(null);
                        }
			            (new PatStmtCopyDialog(
			                this,dbLogin,paLab.getText())).setVisible(true);
			        }
			    }
			    break;
			case KeyEvent.VK_F5:
			    if (event.isShiftDown() && currLAB>0) {
                    (new DBCommentDialog(dbComments)).setVisible(true);
			    }
			    else {
                    if (inBillingQueue)
                        Utils.createErrMsg("Cannot update account with a "+
                            "statement in the billing queue.");
                    else if (pastDue>PAID_IN_FULL)
			            releaseActions();
                    else 
                        Utils.createErrMsg("Lab charges paid in full - cannot add release date");
                }
			    break;
			case KeyEvent.VK_F6:
                if (inBillingQueue)
                    Utils.createErrMsg("Cannot update account with a "+
                        "statement in the billing queue.");
                else if (pastDue>PAID_IN_FULL)
			        holdActions();
                else 
                    Utils.createErrMsg("Lab charges paid in full - cannot put on hold");
			    break;
		    case KeyEvent.VK_INSERT:
		        displayComments();
		        break;
            case KeyEvent.VK_CONTROL:
                ((JTextField)getFocusOwner()).setText(null);
               dFlag=false;
               break;
		}
	}
	
	public void forceDigits(java.awt.event.KeyEvent event, boolean b)  {
	    msgLabel.setText(null);
	    try {
	        char key=event.getKeyChar();
	        if (key=='.') {
	            if (dFlag==false) dFlag=true;
	            else event.consume();
	        }
	        else if ( (key<'0')||(key>'9') ) 
	            event.consume();
        }
        catch (Exception e)  { log.write(e); }            
    }        
	
	void queryActions() 
	{
	    if (currMode!=Lab.QUERY_FOR_ADD) currMode=Lab.QUERY;
        patientID.setEnabled(true);
        paLab.setEnabled(true);
        patientID.setBackground(Color.white);
        patientID.setForeground(Color.black);
        patientID.setCaretColor(Color.black);
        paLab.setBackground(Color.white);
        paLab.setForeground(Color.black);
        paLab.setCaretColor(Color.black);
        paLab.requestFocus();
	}
	
	void addActions() 
	{
	    if (currMode!=Lab.QUERY) {
	        resetForm();
	        resetForm();
	        currMode=Lab.QUERY_FOR_ADD;
	        queryActions();
	    }
	    paymentAmount.setEnabled(true);
	    checkNumber.setEnabled(true);
	    dateReceived.setEnabled(true);
	    payCode.setEnabled(true);
	    if (!Utils.isNull(paLName.getText()) 
	    && !Utils.isNull(paFName.getText())
	    && currLAB>0 && currPID>0 && currMode!=Lab.ADD) {
	        currMode=Lab.ADD;
	        paymentAmount.requestFocus();
	    }
	}
	
	void updateActions()
	{
	    currMode=Lab.UPDATE;
	    paLName.setEnabled(true);
	    paFName.setEnabled(true);
	    paMI.setEnabled(true);
	    paPhone.setEnabled(true);
	    paSSN.setEnabled(true);
	    paDOB.setEnabled(true);
	    paAddress1.setEnabled(true);
	    paCity.setEnabled(true);
	    paState.setEnabled(true);
	    paZip.setEnabled(true);
	    paLName.requestFocus();
	}
	
	void releaseActions()
	{
	    currMode=Lab.RELEASE;
	    paLName.setEnabled(true);
	    paFName.setEnabled(true);
	    paMI.setEnabled(true);
	    paPhone.setEnabled(true);
	    paSSN.setEnabled(true);
	    paDOB.setEnabled(true);
	    paAddress1.setEnabled(true);
	    paCity.setEnabled(true);
	    paState.setEnabled(true);
	    paZip.setEnabled(true);
	    releaseDate.setEnabled(true);
	    msgLabel.setText("Enter date to release bill to queue");
	    releaseDate.requestFocus();
	}
	
	void holdActions()
	{
	    currMode=Lab.HOLD;
	    paLName.setEnabled(true);
	    paFName.setEnabled(true);
	    paMI.setEnabled(true);
	    paPhone.setEnabled(true);
	    paSSN.setEnabled(true);
	    paDOB.setEnabled(true);
	    paAddress1.setEnabled(true);
	    paCity.setEnabled(true);
	    paState.setEnabled(true);
	    paZip.setEnabled(true);
	    releaseDate.setText(null);
	    msgLabel.setText("Make changes to patient if needed; otherwise press F12 now");
	    paLName.requestFocus();
	}
	
    void resetColors()
    {
        Utils.setColors(this.getContentPane());
        msgLabel.setForeground(Color.green);
        pastDueLbl.setForeground(Color.white);
        pastDueLbl.setBackground((Color.red).darker());
		pastDueLbl.setFont(new Font("Dialog", Font.BOLD, 12));
		detailList.setFont(new Font("MonoSpaced", Font.PLAIN, 11));
        paymentLbl.setForeground(Color.white);
        releaseLbl.setForeground(Color.white);
        this.repaint();
    }
	
	void acctSummary() {
	    Vector summaryInfo = new Vector();
	    dbOps.getSummary(currPID,currLAB,summaryInfo);
	    String pName=paLName.getText().trim()+", "+paFName.getText().trim();
	    String[] list = new String[summaryInfo.size()];
	    for (int i=0;i<summaryInfo.size();i++)
	        list[i]=(String)summaryInfo.elementAt(i);
        detailList.setFont(new Font("MonoSpaced", Font.PLAIN, 11));
        detailList.setListData(list);
        detailList.repaint();
        detailList.revalidate();
        setPastDueLabel();
	}
	
	void finalActions() {
	    if (currMode==Lab.QUERY || currMode==Lab.QUERY_FOR_ADD) {
	        try { currPID = (int)Integer.parseInt(patientID.getText()); }
	        catch (Exception e) { currPID=0; }
	        try { currLAB = (int)Integer.parseInt(paLab.getText()); }
	        catch (Exception e) { currLAB=0; }
	        if (currPID==0 && currLAB==0) {
	            Utils.createErrMsg("Missing patient and/or lab number!");
	            patientID.requestFocus();
	        }
	        else {
	            if (dbOps.query(currPID,currLAB)) {
                    patientID.setEnabled(false);
                    Utils.setComponent(patientID);
                    Utils.setComponent(paLab);
	                paLab.setEnabled(false);
	                if (inBillingQueue)
	                    msgLabel.setText(
	                        "STATEMENT IN BILLING QUEUE MUST BE PRINTED!!!");
	                msgLabel.requestFocus();
	                acctSummary();
	                if (dbOps.hasLabComments(currLAB)) displayComments();
	            }
	            else { resetForm(); }
	        }
	    }
	    else if (currMode==Lab.ADD) {
	        if (pastDue==IN_COLLECTION) displayCreditBureauWarning();
	        currBAL=(Double.valueOf(currBal.getText())).doubleValue();
	        if (dbOps.add(currLAB)) {
	            resetForm();
	            resetForm();
	            Utils.setComponent(patientID);
	            Utils.setComponent(paLab);
	            addActions();
	            return;
	        }
	    }
	    else if (currMode==Lab.UPDATE) {
	        if (pastDue==IN_COLLECTION) displayCreditBureauWarning();
	        try { currPID = (int)Integer.parseInt(patientID.getText()); }
	        catch (Exception e) { currPID=0; }
	        try { currLAB = (int)Integer.parseInt(paLab.getText()); }
	        catch (Exception e) { currLAB=0; }
	        if (currPID==0 || currLAB==0) {
	            Utils.createErrMsg("Missing patient or lab number!");
	            patientID.requestFocus();
	        }
	        else {
	            if (dbOps.update(currPID,currLAB)) {
                    patientID.setEnabled(false);
	                paLab.setEnabled(false);
	                paLName.setEnabled(false);
	                paFName.setEnabled(false);
	                paMI.setEnabled(false);
	                paPhone.setEnabled(false);
	                paSSN.setEnabled(false);
	                paDOB.setEnabled(false);
	                paAddress1.setEnabled(false);
	                paCity.setEnabled(false);
	                paState.setEnabled(false);
	                paZip.setEnabled(false);
	                releaseDate.setEnabled(false);
	                msgLabel.requestFocus();
	                pastDue=CURRENT;
	                acctSummary();
	            }
	            else { resetForm(); }
	        }
	    }
	    else if (currMode==Lab.RELEASE || currMode==Lab.HOLD) {
	        if (pastDue==IN_COLLECTION) displayCreditBureauWarning();
	        try { currPID = (int)Integer.parseInt(patientID.getText()); }
	        catch (Exception e) { currPID=0; }
	        try { currLAB = (int)Integer.parseInt(paLab.getText()); }
	        catch (Exception e) { currLAB=0; }
	        if (currPID==0 || currLAB==0) {
	            Utils.createErrMsg("Missing patient or lab number!");
	            patientID.requestFocus();
	        }
	        else {
	            if (currMode==Lab.RELEASE) pastDue=HOLD_TO_DATE;
	            else if (currMode==Lab.HOLD) pastDue=INDEFINITE_HOLD;
	            if (dbOps.addReleaseDate(currPID,currLAB)) {
                    patientID.setEnabled(false);
	                paLab.setEnabled(false);
	                paLName.setEnabled(false);
	                paFName.setEnabled(false);
	                paMI.setEnabled(false);
	                paPhone.setEnabled(false);
	                paSSN.setEnabled(false);
	                paDOB.setEnabled(false);
	                paAddress1.setEnabled(false);
	                paCity.setEnabled(false);
	                paState.setEnabled(false);
	                paZip.setEnabled(false);
	                releaseDate.setEnabled(false);
	                msgLabel.requestFocus();
	                acctSummary();
	            }
	            else { resetForm(); }
	        }
	    }
	}
	
    void resetForm() {
        resetColors();
        msgLabel.setText(null);
        if (currMode==Lab.ADD) {
            currMode=Lab.IDLE;
	        dFlag=false;
            paymentAmount.setText(null);
            paymentAmount.setEnabled(false);
            checkNumber.setText(null);
            checkNumber.setEnabled(false);
            adjustLbl.setVisible(false);
            adjustReason.setText(null);
            adjustReason.setEnabled(false);
            adjustReason.setVisible(false);
            dateReceived.setText(null);
            dateReceived.setEnabled(false);
            payCode.setText("C");
            payCodeLbl.setText("CHECK");
            payCode.setEnabled(false);
        }
        else {
            currPID=0;
            currLAB=0;
            currBAL=0;
            currMode=Lab.IDLE;
            pastDue=CURRENT;
            inBillingQueue=false;
            lateDate=null;
            patientID.setText(null);
            paLab.setText(null);
            paLName.setText(null);
            paFName.setText(null);
            paMI.setText(null);
            paAddress1.setText(null);
            paCity.setText(null);
            paState.setText(null);
            paZip.setText(null);
            paPhone.setText(null);
            paDOB.setText(null);
            paSSN.setText(null);
            currBal.setText(null);
            totalPayments.setText(null);
            labCharges.setText(null);
            billTotal.setText(null);
            patientID.setEnabled(false);
            paLab.setEnabled(false);
            paLName.setEnabled(false);
            paFName.setEnabled(false);
            paMI.setEnabled(false);
            paAddress1.setEnabled(false);
            paCity.setEnabled(false);
            paState.setEnabled(false);
            paZip.setEnabled(false);
            paPhone.setEnabled(false);
            paDOB.setEnabled(false);
            paSSN.setEnabled(false);
            currBal.setEnabled(false);
            totalPayments.setEnabled(false);
            billTotal.setEnabled(false);
            dateReceived.setText(null);
            dateReceived.setEnabled(false);
            releaseDate.setText(null);
            releaseDate.setEnabled(false);
            payCode.setText("C");
            payCodeLbl.setText("CHECK");
            payCode.setEnabled(false);
            labComments.setText(null);
            Vector v = new Vector();
            v.addElement(" ");
            detailList.setListData(v);
            detailList.repaint();
            detailList.revalidate();
        }
        patientID.setEnabled(false);
        paLab.setEnabled(false);
        setPastDueLabel();
        dbComments = new javax.swing.JTextArea();
        msgLabel.requestFocus();
    }
	

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
		}
	}

	class SymFocus extends java.awt.event.FocusAdapter
	{
		public void focusLost(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			if (object == paymentAmount)
				paymentAmount_focusLost(event);
		}

		public void focusGained(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			if (object == paymentAmount)
				paymentAmount_focusGained(event);
			else if (object == paLName)
				paLName_focusGained(event);
			else if (object == paFName)
				paFName_focusGained(event);
			else if (object == paMI)
				paMI_focusGained(event);
			else if (object == paAddress1)
				paAddress1_focusGained(event);
			else if (object == paZip)
				paZip_focusGained(event);
			else if (object == paCity)
				paCity_focusGained(event);
			else if (object == paState)
				paState_focusGained(event);
			else if (object == paPhone)
				paPhone_focusGained(event);
			else if (object == paSSN)
				paSSN_focusGained(event);
			else if (object == paDOB)
				paDOB_focusGained(event);
			else if (object == releaseDate)
				releaseDate_focusGained(event);
			else if (object == payCode)
				payCode_focusGained(event);
			else if (object == checkNumber)
				checkNumber_focusGained(event);
			else if (object == dateReceived)
				dateReceived_focusGained(event);
			else if (object == adjustReason)
				adjustReason_focusGained(event);
		}
	}

	void paymentAmount_focusGained(java.awt.event.FocusEvent event)
	{
	    Utils.deselect(event);
		try { 
		    int x = ((String)paymentAmount.getText()).length(); 
		    if (((String)paymentAmount.getText()).equals("0.00"))
		        paymentAmount.setText(null);
        }
		catch (Exception e) { dFlag=false; }
	}

	void paymentAmount_focusLost(java.awt.event.FocusEvent event)
	{
		try {
		    String buf = (String)paymentAmount.getText();
		    int x = buf.length();
		    int decimalPos=x;
		    for (int i=0;i<x;i++) {
		        if (buf.charAt(i)=='.') {
		            decimalPos=i;
		            break;
		        }
		    }
		    if (x>0) {
		        if (x-decimalPos==0) buf=buf+".00";
		        else if (x-decimalPos==1) buf=buf+"00";
		        else if (x-decimalPos==2) buf=buf+"0";
		    }   else buf="0.00";
		    paymentAmount.setText(buf);
		}
		catch (Exception e) { log.write(e);  }
	}

	void paymentAmount_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyChar()=='\b') {
		    try {
		        int x = ((String)paymentAmount.getText()).length();
		        if (((String)paymentAmount.getText()).charAt(x-1)=='.')
		            dFlag=false;
		    }
		    catch (Exception e) { dFlag=false; }
		}
		else if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(paymentAmount,"Payment Amount")) {
		        if ((Double.valueOf(paymentAmount.getText())).doubleValue()==0) {
		            Utils.createErrMsg("Payment must be greater than 0");
		        }
		        else paymentAmount.transferFocus();
		    }
		}
	}

	void paymentAmount_keyTyped(java.awt.event.KeyEvent event)
	{
		forceDigits(event,true);
	}

	void checkNumber_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event,4);
	}

	void adjustReason_keyTyped(java.awt.event.KeyEvent event)
	{
		this.forceUpper(event);
	}
	
	public void forceDigits(java.awt.event.KeyEvent event)  {
	    msgLabel.setText(null);
	    try {
	        char key=event.getKeyChar();
	        if ( ((key<'0')||(key>'9')) && key!='\b' ) 
	            event.consume();
        }
        catch (Exception e)  { log.write(e); }            
    }        

	public void forceUpper(java.awt.event.KeyEvent event) {
        try {
	        char key=event.getKeyChar();
	        if ( (key>='a')&&(key<='z') ) 
	            event.setKeyChar((char)(key-32));
        }
        catch (Exception e)  { log.write(e); }
    }	    

	void patientID_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event);
	}

	void patientID_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) invokeQuery();
	}
	
    void invokeQuery()
    {
        if (Utils.isNull(patientID.getText()) &&
		    Utils.isNull(paLab.getText())) {
		    Utils.createErrMsg("Must enter either Lab Number or Patient ID");
        }
        else {
            finalActions();
            if (currMode==Lab.QUERY_FOR_ADD) { 
                currMode=Lab.ADD;
                paymentAmount.requestFocus();
            }
        }
    }

	void paLab_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.isNull(paLab.getText())) paLab.transferFocus();
		    else invokeQuery();
		}
	}

	void paLab_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event,10);
	}

	void checkNumber_keyPressed(java.awt.event.KeyEvent event)
	{
		if (!Utils.isNull(payCode.getText()) && payCode.getText().equals("C")) {
		    if (event.getKeyCode()==event.VK_ENTER) {
		        if (Utils.required(checkNumber,"Check Number")) {
		            checkNumber.transferFocus();
		        }
		    }
		}
	}

	void adjustReason_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
            if (currMode==Lab.ADD) finalActions();
            else adjustReason.transferFocus();
		}
	}

	void dateReceived_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(dateReceived,"Date Received")) {
		        if (Utils.dateVerify(dateReceived)) {
		            if (currMode==Lab.ADD 
		            && !payCode.getText().equals("+")
		            && !payCode.getText().equals("-"))
		                finalActions();
		            else
		                dateReceived.transferFocus();
		        }
		    }
		}
	}

	void dateReceived_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.buildDateMask(event);
	}

	void payCode_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
            String buf = payCode.getText();
            if (!payCodeVect.contains(buf)) {
                Utils.createErrMsg("Invalid Payment Type ["+buf+"]");
                payCode.setText(null);
            }
		    else if (Utils.required(payCode,"Payment Type")) {
		        if (!payCode.getText().equals("C"))
		            checkNumber.setEnabled(false);
		        else checkNumber.setEnabled(true);
		        if (payCode.getText().equals("+") ||
		            payCode.getText().equals("-")) {
                    adjustReason.setVisible(true);
                    adjustReason.setEnabled(true);
                    adjustLbl.setVisible(true);
                }
                else {
                    adjustReason.setVisible(false);
                    adjustReason.setEnabled(false);
                    adjustReason.setText(null);
                    adjustLbl.setVisible(false);
                }
		        payCodeLbl.setText((String)payTypeVect.elementAt(
		            payCodeVect.indexOf(buf)));
		        payCode.transferFocus();
		    }
		}
	}

	void payCode_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event);
        char c = event.getKeyChar();
        payCode.setText((new StringBuffer(c)).toString());
        if (c=='\r' && Utils.isNull(payCode.getText())) {
                payCode.setText("C");
                payCodeLbl.setText("CHECK");
        }
	}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosed(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == PatientAccountsForm.this)
				PatientAccountsForm_windowClosed(event);
		}
	}

	void PatientAccountsForm_windowClosed(java.awt.event.WindowEvent event)
	{
		closingActions();
	}
	
	private void closingActions()
	{
	    dbOps.close();
	    log.stop();
	}
	

	void paLName_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event);
	}

	void paLName_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(paLName,"Patient Last Name"))
		        paLName.transferFocus();
		}
	}

	void paLName_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void paFName_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event);
	}

	void paFName_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(paLName,"Patient First Name"))
		        paFName.transferFocus();
		}
	}

	void paFName_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void paMI_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event);
	}

	void paMI_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    paMI.transferFocus();
		}
	}

	void paMI_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void paAddress1_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event);
	}

	void paAddress1_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    paAddress1.transferFocus();
		}
	}

	void paAddress1_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void paZip_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.buildZipMask(event);
	}

	void paZip_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    paZip.transferFocus();
		}
	}

	void paZip_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void paCity_keyTyped(java.awt.event.KeyEvent event)
	{
	    Utils.forceUpper(event);
	}

	void paCity_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    paCity.transferFocus();
		}
	}

	void paCity_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void paState_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event);
	}

	void paState_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    paState.transferFocus();
		}
	}

	void paState_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void paPhone_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.buildPhoneMask(event);
	}

	void paPhone_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    paCity.transferFocus();
		}
	}

	void paPhone_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void paSSN_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.buildSSNMask(event);
	}

	void paSSN_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    paSSN.transferFocus();
		}
	}

	void paSSN_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void paDOB_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.buildDateMask(event);
	}

	void paDOB_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.dateVerify(paDOB))
		        paDOB.transferFocus();
		}
	}

	void paDOB_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void releaseDate_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.buildDateMask(event);
	}

	void releaseDate_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.dateVerify(releaseDate)) {
		        if (!Utils.afterToday(releaseDate.getText())) {
		            Utils.createErrMsg("Date entered ["+releaseDate.getText()+
		                "] is invalid - date must be later than today");
		            releaseDate.setText(null);
		        }
		        else releaseDate.transferFocus();
		    }
		}
	}

	void releaseDate_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}
	
	void displayCreditBureauWarning()
	{
	    String s = payCode.getText();
	    if (!Utils.isNull(s) || !s.equals("B")) {
            creditBureauWarning.showConfirmDialog(
		        this,"Account will be taken OUT of collection.\n"+
		        "  Please fax MUST NOTIFY list to agency.",
		        "Please Note",creditBureauWarning.DEFAULT_OPTION,
		        creditBureauWarning.INFORMATION_MESSAGE);
		}
	}
	
	void setPastDueLabel()
	{
	    pastDueLbl.setVisible(true);
	    switch (pastDue) {
	        case REBILL:
	            pastDueLbl.setText("REBILLED");
	            break;
	        case ACCOUNT_NOT_ACTIVATED:
	            pastDueLbl.setText("ACCOUNT NOT ACTIVATED");
	            break;
	        case PAID_IN_FULL:
	            pastDueLbl.setText("PAID IN FULL");
	            break;
	        case INDEFINITE_HOLD:
	            pastDueLbl.setText("HOLD UNTIL FURTHER NOTICE");
	            break;
	        case HOLD_TO_DATE:
	            pastDueLbl.setText("HOLD UNTIL RELEASE DATE");
	            break;
	        case PAST_30:
	            pastDueLbl.setText("PAST DUE ACCOUNT");
	            break;
	        case FINAL_NOTICE:
	            pastDueLbl.setText("FINAL NOTICE SENT");
	            break;
            case IN_COLLECTION:	            
                pastDueLbl.setText("ACCOUNT IN COLLECTION");
                break;
            default:
                pastDueLbl.setVisible(false);    
	    }
	}
	
    public void displayComments() {
        /*
        boolean isUpdatable = false;
        if (currMode==Lab.ADD || currMode==Lab.UPDATE || currMode==Lab.QUERY_FOR_ADD) 
            isUpdatable=true;
        (new CommentForm("Lab Comments",labComments,isUpdatable)).setVisible(true);
        */
        (new CommentForm(dbLogin,currLAB)).setVisible(true);
    }        

	void payCode_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void checkNumber_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void dateReceived_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void adjustReason_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}
	
}
