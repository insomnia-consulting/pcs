import java.awt.*;
import javax.swing.*;
import java.util.Vector;
import javax.swing.table.*;
import Square;
import java.sql.*;
import java.io.*;



public class PaymentsList extends javax.swing.JFrame
{
    private Login dbLogin;
    public PendingPaymentTableData pData;
    public JTable pendingPaymentTable; 
    public JTableHeader header;
    public JScrollPane paymentScrollPane;
    public StringUtils format = new StringUtils();
    
	public PaymentsList()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Payments Pending");
		setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(900,360);
		setVisible(false);
		getContentPane().add(F1sq);
		F1sq.setBounds(35,6,20,20);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F4");
		getContentPane().add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(39,6,20,20);
		getContentPane().add(F2sq);
		F2sq.setBounds(97,6,20,20);
		F2lbl.setRequestFocusEnabled(false);
		F2lbl.setText("F9");
		getContentPane().add(F2lbl);
		F2lbl.setForeground(java.awt.Color.black);
		F2lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F2lbl.setBounds(101,6,20,20);
		F2action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F2action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F2action.setText("Exit");
		getContentPane().add(F2action);
		F2action.setForeground(java.awt.Color.black);
		F2action.setBounds(72,30,70,16);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("Print");
		getContentPane().add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(10,30,70,16);
		//}}

		pData = new PendingPaymentTableData();
		pendingPaymentTable = new JTable();
		pendingPaymentTable.setEnabled(false);
		pendingPaymentTable.setAutoCreateColumnsFromModel(false);
		pendingPaymentTable.setModel(pData);

		for (int k=0;k<pData.columns.length;k++) {
		    DefaultTableCellRenderer renderer = new
		        DefaultTableCellRenderer();
            renderer.setHorizontalAlignment(
                pData.columns[k].alignment);
            renderer.setFont(
                pData.columns[k].font);
            TableColumn column = new TableColumn(k,
                pData.columns[k].width,renderer,null);
            pendingPaymentTable.addColumn(column);
		}
		
		header = pendingPaymentTable.getTableHeader();
		header.setFont(new Font("Dialog",Font.PLAIN, 10));
	
		paymentScrollPane = new JScrollPane();
		paymentScrollPane.getViewport().add(pendingPaymentTable);
		getContentPane().add(paymentScrollPane);
		paymentScrollPane.setBounds(20,60,870,270);
        paymentScrollPane.setAutoscrolls(true);
        paymentScrollPane.setEnabled(false);
		
		pendingPaymentTable.setFont(new Font("DialogInput", Font.PLAIN, 11));
		pendingPaymentTable.setBounds(0,0,867,267);
        pendingPaymentTable.setRowHeight(12);
        pendingPaymentTable.setCellSelectionEnabled(false);

		//{{INIT_MENUS
		//}}
	
		//{{REGISTER_LISTENERS
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		//}}
	}

	public PaymentsList(String sTitle)
	{
		this();
		setTitle(sTitle);
	}
	
	public PaymentsList(Login dbLogin)
	{
	    this();
	    this.dbLogin=dbLogin;
	    query();
	    pendingPaymentTable.repaint();
	    pendingPaymentTable.revalidate();
	}

	public void setVisible(boolean b)
	{
		if (b) setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new PaymentsList()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		Insets insets = getInsets();
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	Square F1sq = new Square();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	Square F2sq = new Square();
	javax.swing.JLabel F2lbl = new javax.swing.JLabel();
	javax.swing.JLabel F2action = new javax.swing.JLabel();
	javax.swing.JLabel F1action = new javax.swing.JLabel();
	//}}

	//{{DECLARE_MENUS
	//}}


    public boolean query() {
        boolean exitStatus=true;
        int currRow=0;
        String currPractice = null;
        try  {
            String query = 
                "select P.payment_id,B.choice_code,P.account_id,P.payment_type, \n"+
                "P.check_number,to_char(P.payment_amount,'99,990.99'), \n"+
                "to_char(P.payment_date,'MM/DD/YYYY'), \n"+
                "to_char(P.receive_date,'MM/DD/YYYY'), A.adjust_reason \n"+
                "from pcs.payments P, pcs.billing_choices B, \n"+
                "pcs.payment_adjust_reasons A \n"+
                "where P.billing_choice=B.billing_choice and \n"+
                "P.payment_id=A.payment_id(+) and \n"+
                "P.date_posted is null \n"+
                "order by B.choice_code,P.account_id \n";
            
            Statement stmt = dbConnection.process().createStatement();
            ResultSet rs = stmt.executeQuery(query);
            currRow=0;
            while (rs.next()) {
                int payment_id = rs.getInt(1);
                String billing_choice = rs.getString(2);
                int account_id = rs.getInt(3);
                String payment_type = rs.getString(4);
                int check_number = rs.getInt(5);
                String payment_amount = rs.getString(6);
                String date_entered = rs.getString(7);
                String date_received = rs.getString(8);
                String adjust_reason = rs.getString(9);
                pData.addRow(payment_id,billing_choice,account_id,payment_type,
                    check_number,payment_amount,date_entered,
                    date_received,adjust_reason);
                currRow++;
            }
        }
        catch( Exception e ) {
            exitStatus=false;
            System.out.println(e);
            format.createErrMsg("FATAL ERROR");
        }
        return(exitStatus);            
    }

	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == PaymentsList.this)
				PaymentsList_keyPressed(event);
		}
	}

	void PaymentsList_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_F9) this.dispose();
	}
	
}
