package com.pacytology.pcs;


/*
    PENNSYLVANIA CYTOLOGY SERVICES
    LABORATORY INFORMATION SYSTEM V1.0
    Copyright (C) 2001 by John Cardella
    All Rights Reserved
    
    File:       CytoPathReport.java
    Created By: John Cardella, Software Engineer
    
    Function:   Form used to print current finals and
    draft cytopathology reports; also to print a draft
    or final copy of a prior report as well.
    
    MODIFICATIONS ----------------------------------
    Date/Staff      Description:
*/

import java.awt.*;
import java.sql.*;
import javax.swing.*;
import java.awt.Toolkit;
import java.awt.Window;
import java.util.Properties;
import java.util.Vector;
import java.awt.PrintJob;


import javax.swing.border.BevelBorder;
import javax.swing.border.LineBorder;
import javax.swing.border.SoftBevelBorder;
import javax.swing.border.TitledBorder;

public class CytoPathReport extends javax.swing.JFrame
{
    public Login dbLogin;                       // database user and general info
    public int startingLabNumber;               // starting and ending values used
    public int endingLabNumber;                 //    for non-queued print requests
    public Vector labReportVect = new Vector(); // vector of labReport objects
    public int NUM_REPORTS=0;                   // number of reports to be printed
    public int maxY=0;                          // vertical place holder
    public String reportDate;                   // current date
    final int MAX_SOURCE=29;                    // max number of source details
    final int MAX_CONDITION=44;                 // max number of condition details
    
    public int printMode=Lab.NO_PRINT;          // print mode selected
    /********************************************************************************/
    
    int numDrafts=0;                            // number of DRAFT reports queued
    int numFinals=0;                            // number of FINAL reports queued
    int numHPVs=0;                              // number of hold finals for HPV queued
    int queueSize=0;                            // total reports queued for printing
    public CytoPathDbOps dbOps;                 // database operations for this screen
    LogFile log;                                // log file for this screen
    public Vector amendedCodes = new Vector();  // codes that indicate report is amended
    
    /********************************************************************************
     * HPV DATA                                                                     *
     ********************************************************************************/
    public Vector HPVrequests = new Vector();   // formatted strings of HPV data
    boolean hasExceptions = false;              // does the HPV list contain exceptions
    public Vector HPVpermissions = new Vector();// HPV requests requiring permission
    public Vector HPValternates = new Vector(); // HPV tests to alternate lab
    public Vector HPVmanual = new Vector();     // HPV requests to be checked manually
    public Vector HPVdrVerify = new Vector();   // HPV requests require dr. verification
    public Vector HPVonly = new Vector();       // HPV testing only
    int pageNum = 0;                            // current HPV sheet page number
    int holdFinalsNdx = 0;                      // when to print holdFinalsHeader
    boolean hasHoldFinals = false;              // whether there are reports to hold
    boolean hasFaxFinals = false;               // whether there are finals to fax
    /********************************************************************************/
    
    /*
        Default constructor; builds screen based on values and layout as indicated
        using the Visual Cafe form editor.
    */
	public CytoPathReport()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(385,252);
		setVisible(false);
		startingLab.setEnabled(false);
		getContentPane().add(startingLab);
		startingLab.setFont(new Font("SansSerif", Font.BOLD, 12));
		startingLab.setBounds(138,38,90,20);
		endingLab.setEnabled(false);
		getContentPane().add(endingLab);
		endingLab.setFont(new Font("SansSerif", Font.BOLD, 12));
		endingLab.setBounds(138,64,90,20);
		JLabel1.setText("Starting Lab Number");
		getContentPane().add(JLabel1);
		JLabel1.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel1.setBounds(14,40,126,14);
		JLabel2.setText("Ending Lab Number");
		getContentPane().add(JLabel2);
		JLabel2.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel2.setBounds(14,66,126,14);
		printButton.setText("Retrieve");
		printButton.setActionCommand("Print");
		printButton.setEnabled(false);
		getContentPane().add(printButton);
		printButton.setFont(new Font("Dialog", Font.BOLD, 12));
		printButton.setBounds(60,94,82,24);
		cancelButton.setText("Cancel");
		cancelButton.setActionCommand("Cancel");
		cancelButton.setEnabled(false);
		getContentPane().add(cancelButton);
		cancelButton.setFont(new Font("Dialog", Font.BOLD, 12));
		cancelButton.setBounds(144,94,82,24);
		msgLabel.setText("PLACE HOLDER");
		getContentPane().add(msgLabel);
		msgLabel.setForeground(java.awt.Color.red);
		msgLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		msgLabel.setBounds(16,220,300,14);
		printModePanel.setLayout(null);
		getContentPane().add(printModePanel);
		printModePanel.setBounds(252,42,124,102);
		currentDrafts.setText("Current Drafts");
		currentDrafts.setActionCommand("Current Drafts");
		printModePanel.add(currentDrafts);
		currentDrafts.setFont(new Font("Dialog", Font.BOLD, 12));
		currentDrafts.setBounds(6,0,101,18);
		currentFinals.setText("Current Finals");
		currentFinals.setActionCommand("Current Finals");
		printModePanel.add(currentFinals);
		currentFinals.setFont(new Font("Dialog", Font.BOLD, 12));
		currentFinals.setBounds(6,20,108,18);
		draftCopy.setText("Draft");
		draftCopy.setActionCommand("jradioButton");
		printModePanel.add(draftCopy);
		draftCopy.setFont(new Font("Dialog", Font.BOLD, 12));
		draftCopy.setBounds(6,60,108,18);
		finalCopy.setText("Final");
		finalCopy.setActionCommand("jradioButton");
		printModePanel.add(finalCopy);
		finalCopy.setFont(new Font("Dialog", Font.BOLD, 12));
		finalCopy.setBounds(6,80,108,18);
		currentHPVs.setText("Current HPVs");
		printModePanel.add(currentHPVs);
		currentHPVs.setFont(new Font("Dialog", Font.BOLD, 12));
		currentHPVs.setBounds(6,40,108,18);
		JLabel3.setText("Select Print Mode:");
		getContentPane().add(JLabel3);
		JLabel3.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel3.setBounds(256,20,126,14);
		draftsLbl.setText("DRAFTS:");
		getContentPane().add(draftsLbl);
		draftsLbl.setForeground(java.awt.Color.black);
		draftsLbl.setFont(new Font("Dialog", Font.BOLD, 10));
		draftsLbl.setBounds(290,154,50,14);
		finalsLbl.setText("FINALS:");
		getContentPane().add(finalsLbl);
		finalsLbl.setForeground(java.awt.Color.black);
		finalsLbl.setFont(new Font("Dialog", Font.BOLD, 10));
		finalsLbl.setBounds(290,168,50,14);
		draftPrints.setText("0");
		draftPrints.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		draftPrints.setEnabled(false);
		getContentPane().add(draftPrints);
		draftPrints.setBackground(java.awt.Color.white);
		draftPrints.setForeground(java.awt.Color.black);
		draftPrints.setFont(new Font("DialogInput", Font.PLAIN, 10));
		draftPrints.setBounds(340,154,24,14);
		finalPrints.setText("0");
		finalPrints.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		finalPrints.setEnabled(false);
		getContentPane().add(finalPrints);
		finalPrints.setBackground(java.awt.Color.white);
		finalPrints.setFont(new Font("DialogInput", Font.PLAIN, 10));
		finalPrints.setBounds(340,168,24,14);
		JPanel1.setBorder(titledBorder1);
		JPanel1.setLayout(null);
		getContentPane().add(JPanel1);
		JPanel1.setBounds(12,144,254,60);
		coverSheetButton.setText("Get Sheet(s)");
		coverSheetButton.setActionCommand("Print");
		JPanel1.add(coverSheetButton);
		coverSheetButton.setFont(new Font("Dialog", Font.BOLD, 12));
		coverSheetButton.setBounds(10,24,104,25);
		clearAllButton.setText("Reset");
		clearAllButton.setActionCommand("Print");
		JPanel1.add(clearAllButton);
		clearAllButton.setFont(new Font("Dialog", Font.BOLD, 12));
		clearAllButton.setBounds(132,24,68,25);
		practice.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		JPanel1.add(practice);
		practice.setFont(new Font("SansSerif", Font.BOLD, 12));
		practice.setBounds(208,30,36,19);
		JLabel4.setText("Acct#");
		JPanel1.add(JLabel4);
		JLabel4.setBounds(210,14,40,14);
		titledBorder1.setTitle("COVER SHEETS");
		//$$ titledBorder1.move(72,353);
		//$$ printerConfirm.move(96,353);
		hpvLbl.setText("HPVS:");
		getContentPane().add(hpvLbl);
		hpvLbl.setForeground(java.awt.Color.black);
		hpvLbl.setFont(new Font("Dialog", Font.BOLD, 10));
		hpvLbl.setBounds(290,182,50,14);
		hpvPrints.setText("0");
		hpvPrints.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		hpvPrints.setEnabled(false);
		getContentPane().add(hpvPrints);
		hpvPrints.setBackground(java.awt.Color.white);
		hpvPrints.setForeground(java.awt.Color.black);
		hpvPrints.setFont(new Font("DialogInput", Font.PLAIN, 10));
		hpvPrints.setBounds(340,182,24,14);
		//$$ JOptionPane1.move(96,353);
		//}}

		currentHPVs.setFont(new Font("Dialog", Font.BOLD, 12));

		//{{INIT_MENUS
		//}}
	
		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		printButton.addActionListener(lSymAction);
		SymFocus aSymFocus = new SymFocus();
		endingLab.addFocusListener(aSymFocus);
		SymKey aSymKey = new SymKey();
		startingLab.addKeyListener(aSymKey);
		endingLab.addKeyListener(aSymKey);
		cancelButton.addActionListener(lSymAction);
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		currentDrafts.addActionListener(lSymAction);
		currentFinals.addActionListener(lSymAction);
		draftCopy.addActionListener(lSymAction);
		finalCopy.addActionListener(lSymAction);
		this.addKeyListener(aSymKey);
		coverSheetButton.addActionListener(lSymAction);
		practice.addKeyListener(aSymKey);
		clearAllButton.addActionListener(lSymAction);
		currentHPVs.addActionListener(lSymAction);
		//}}
	}

    /*
        Main constructor for the CytoPathology Reports screen; the
        Login object passed in holds database user and other misc.
        data.
    */
	public CytoPathReport(Login dbLogin)
	{
		this();
		setTitle("Cytopathology Reports");
		this.dbLogin=dbLogin;
		// instansiate LogFile object
        this.log = new LogFile(
            dbLogin.logPath,"CytoPathReport",dbLogin.dateToday,dbLogin.userName);
        // instansiate database operations object; takes this object as a param.
		this.dbOps = new CytoPathDbOps(this);
		this.resetForm();
		this.queueSize=dbOps.checkQueue();
		this.draftPrints.setText(Integer.toString(numDrafts));
		this.finalPrints.setText(Integer.toString(numFinals));
		this.hpvPrints.setText(Integer.toString(numHPVs));
		this.amendedCodes=dbOps.getAmendedCodes();
	}

	public void setVisible(boolean b)
	{
		if (b) setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new CytoPathReport()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted) return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		Insets insets = getInsets();
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JTextField startingLab = new javax.swing.JTextField();
	javax.swing.JTextField endingLab = new javax.swing.JTextField();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JButton printButton = new javax.swing.JButton();
	javax.swing.JButton cancelButton = new javax.swing.JButton();
	javax.swing.JLabel msgLabel = new javax.swing.JLabel();
	JPanel printModePanel = new JPanel();
	javax.swing.JRadioButton currentDrafts = new javax.swing.JRadioButton();
	javax.swing.JRadioButton currentFinals = new javax.swing.JRadioButton();
	javax.swing.JRadioButton draftCopy = new javax.swing.JRadioButton();
	javax.swing.JRadioButton finalCopy = new javax.swing.JRadioButton();
	javax.swing.JRadioButton currentHPVs = new javax.swing.JRadioButton();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	javax.swing.JLabel draftsLbl = new javax.swing.JLabel();
	javax.swing.JLabel finalsLbl = new javax.swing.JLabel();
	javax.swing.JTextField draftPrints = new javax.swing.JTextField();
	javax.swing.JTextField finalPrints = new javax.swing.JTextField();
	javax.swing.JPanel JPanel1 = new javax.swing.JPanel();
	javax.swing.JButton coverSheetButton = new javax.swing.JButton();
	javax.swing.JButton clearAllButton = new javax.swing.JButton();
	javax.swing.JTextField practice = new javax.swing.JTextField();
	javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
	javax.swing.border.TitledBorder titledBorder1 = new javax.swing.border.TitledBorder("");
	javax.swing.JOptionPane printerConfirm = new javax.swing.JOptionPane();
	javax.swing.JLabel hpvLbl = new javax.swing.JLabel();
	javax.swing.JTextField hpvPrints = new javax.swing.JTextField();
	//}}

	//{{DECLARE_MENUS
	//}}

    /*
        Method that controls printing of the reports
    */
    public void cytoPathReport() {
        PrintJob pjob;
        Properties p = new java.util.Properties();
        Graphics pgraphics;
        String name = new String("Cytopathology Report");
        String logMsg = null;
        int x,y;
        boolean gotFirstFax = true;
        pjob=getToolkit().getPrintJob(this,name,p);
        if (pjob!=null) {

            
            // set a log file message to indicate print mode selected
            switch (printMode) {
                case Lab.CURR_DRAFT:    logMsg="CURR_DRAFT"; break;
                case Lab.CURR_FINAL:    logMsg="CURR_FINAL"; break;
                case Lab.DRAFT:         logMsg="DRAFT"; break;
                case Lab.FINAL:         logMsg="FINAL"; break;
                case Lab.CURR_HPV:      logMsg="CURR_HPV"; break;
                case Lab.NO_PRINT:      logMsg="NO_PRINT"; break;
                default:                logMsg=" ";
            }
            log.write("PRINT MODE = "+logMsg);
            log.write("REPORTS    = "+labReportVect.size());
            boolean hasFaxes = false;
            if (printMode==Lab.CURR_FINAL) hasFaxes=true;
            /*  Maximum number of HPV requests per page
                on the HPV requisition sheet.
            */
            double maxPerPage=40;  
            /*  Computes the number of pages that will be needed for
                the HPV requisition sheet; value stored in numPages
            */
            int numPages = (int)Math.ceil(HPVrequests.size()/maxPerPage);
            if (printMode!=Lab.CURR_HPV) {
                // there are HPV requests to print on the HPV requisition sheet
                if (HPVrequests.size()>0) {
                    log.stamp("--->Formatting HPVlisting<---");
                    if (hasHoldFinals)
                        log.write("      HPVrequests["+(HPVrequests.size()-2)+"]");
                    else
                        log.write("      HPVrequests["+(HPVrequests.size())+"]");
                    log.write("   numPages = "+numPages);
                    /*  Indices of the HPVrequests vector to print on 
                        on current page of HPV requisition sheet.
                    */
                    int startNdx=0, endNdx=(int)maxPerPage;
                    if (endNdx>=HPVrequests.size()) endNdx=HPVrequests.size();
                    for (int currPage=1; currPage<=numPages; currPage++) {
                        pgraphics=pjob.getGraphics();
                        if (pgraphics!=null) {
                            log.stamp("--->PRINTING HPVlisting PAGE<---"+(pageNum+1));
                            HPVlisting(pgraphics,startNdx,endNdx);
                            pgraphics.dispose();
                        }
                        startNdx=endNdx;
                        endNdx+=(int)maxPerPage;
                        if (endNdx>=HPVrequests.size()) endNdx=HPVrequests.size();
                    }
                }       
                /*  If there is any special HPV information to report, then
                    print the HPV exceptions sheet.
                */
                if (hasExceptions) {
                    pgraphics=pjob.getGraphics();
                    if (pgraphics!=null) {
                        log.write("   Formatting HPVexception");
                        log.write("      HPValternates["+HPValternates.size()+"]");
                        log.write("      HPVpermissions["+HPVpermissions.size()+"]");
                        log.write("      HPVmanual["+HPVmanual.size()+"]");
                        log.write("      HPVdrVerify["+HPVdrVerify.size()+"]");
                        HPVexception(pgraphics);
                        pgraphics.dispose();
                    }
                }
                // move HPV requests from 'R' to 'P' (pending) status
                if (HPVrequests.size()>0 || hasExceptions) {
                    log.stamp("Calling dbOps.HPVupdate()");
                    dbOps.HPVupdate();
                    log.stamp("Return dbOPs.HPVupdate()");
                }
            }
            
            /*
                After any HPV information sheets are printed (DRAFT mode only)
                begin printing the individual CytoPathology reports; the
                labReportVect holds all of the individual labReport objects
                that were retrieved.
            */
            for (int i=0;i<labReportVect.size();i++) {
                LabReportRec labReport = (LabReportRec)labReportVect.elementAt(i);
                log.write("--------------------");
                log.write("LAB:  "+labReport.lab_number);
                log.write(labReport.prac_name+" ("+labReport.practice+")");
                log.write(labReport.pat_lname+", "+labReport.pat_fname+
                    " : "+labReport.doctor_text);
                if (printMode==Lab.CURR_FINAL && i==0) {
                    /*  Since the sort order of the reports groups all labs
                        with a biopsy code first, if the value of the biopsy_code
                        of the first object is NULL, then there are no FINAL
                        reports that have to be faxed; this block will run
                        only once.
                    */
                    if (Utils.isNull(labReport.biopsy_code)) hasFaxes=false;
                    /*  Otherwise a header sheet is printed that indicates
                        the beginning of the reports that must be faxed.
                    */
                    else {
                        pgraphics=pjob.getGraphics();
                        if (pgraphics!=null) {
                            log.write("PRINTING faxHeader");
                            faxHeader(pgraphics);
                            pgraphics.dispose();
                        }
                    }
                }
                if (hasFaxFinals && labReport.send_fax.equals("Y") 
                && gotFirstFax && Utils.isNull(labReport.biopsy_code)) {
                    gotFirstFax=false;
                    pgraphics=pjob.getGraphics();
                    if (pgraphics!=null) {
                        log.write("PRINTING faxHeader");
                        faxHeader(pgraphics);
                        pgraphics.dispose();
                    }
                }
                /*  If is determined there are reports to fax, each time through
                    the loop the biopsy_code is checked for NULL.  As soon as 
                    it is null, the last report that should be faxed has been 
                    printed (because of the sort order), hence; the hasFaxes
                    boolean flag is then set to false, and a trailer sheet is
                    printed indicated the end of the reports that must be faxed.
                    This block of code will run only once.
                */
                if (hasFaxes) {
                    if (Utils.isNull(labReport.biopsy_code)) {
                        hasFaxes=false;
                        pgraphics=pjob.getGraphics();
                        if (pgraphics!=null) {
                            log.write("PRINTING faxTrailer");
                            faxTrailer(pgraphics);
                            pgraphics.dispose();
                        }
                    }
                }
                /*  Some practices request more than one copy of thier FINAL
                    reports.  However, when in draft mode, always print only
                    one copy of the report.
                */
                if (printMode!=Lab.CURR_FINAL)
                    labReport.report_copies=1;
                /*  The actual printing of the CytoPathology report
                    for the current labReport object.  The value of
                    report_copies variable indicates how many copies
                    of the report the practice wants if FINALs.
                */
                if (printMode==Lab.CURR_FINAL && hasHoldFinals && i==holdFinalsNdx) {
                    pgraphics=pjob.getGraphics();
                    if (pgraphics!=null) {
                        holdFinalsHeader(pgraphics);
                        hasHoldFinals=false;
                        pgraphics.dispose();
                    }
                }
                boolean canPrint = true;
                boolean holdForHPV = false;
                /* In Current Finals mode if the report is to sent
                   electroncially, then no hard copy; all other modes
                   the report will get printed to the printer.
                */
                if (printMode==Lab.CURR_FINAL) {
                    if (labReport.e_reporting.equals("Y"))
                        canPrint=false;
                    if (labReport.hold_final.equals("Y")
                    && Utils.equals(labReport.test_sent,"P")
                    && Utils.isNull(labReport.biopsy_code)
                    && labReport.path_status.equals("Y")) {
                        canPrint=false;
                        holdForHPV=true;
                    }
                }
                for (int j=0;j<labReport.report_copies;j++) {
                    if (canPrint) {
                        pgraphics=pjob.getGraphics();
                        if (pgraphics!=null) {
                            PCSHeader(pgraphics,labReport);     // header part of report
                            labData(pgraphics,labReport);       // requisition data
                            resultsData(pgraphics,labReport);   // result data
                            pgraphics.dispose();
                        }
                    }
                }
                if (hasFaxFinals && i==labReportVect.size()-1) {
                    pgraphics=pjob.getGraphics();
                    if (pgraphics!=null) {
                        log.write("PRINTING faxTrailer");
                        faxTrailer(pgraphics);
                        pgraphics.dispose();
                    }
                }
                // if the report was held pending HPV results then leave
                // in the queue, otherwise
                // dequeue the current lab number from the print queue
                if (holdForHPV) dbOps.holdReportForHPV(labReport.lab_number);
                else dbOps.dequeue(labReport.lab_number);
            }
            pjob.end();
        }
    }


	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == printButton) 
				printButton_actionPerformed(event);
			else if (object == cancelButton)
				cancelButton_actionPerformed(event);
			else if (object == currentDrafts)
				currentDrafts_actionPerformed(event);
			else if (object == currentFinals)
				currentFinals_actionPerformed(event);
			else if (object == draftCopy)
				draftCopy_actionPerformed(event);
			else if (object == finalCopy)
				finalCopy_actionPerformed(event);
			else if (object == coverSheetButton)
				coverSheetButton_actionPerformed(event);
			else if (object == clearAllButton)
				clearAllButton_actionPerformed(event);
			else if (object == currentHPVs)
				currentHPVs_actionPerformed(event);
		}
	}

	void printButton_actionPerformed(java.awt.event.ActionEvent event)
	{
	    if (printButtonCheck()) printButtonActions();
	}

    /*
        If in a non-queue print mode, make sure that a staring lab 
        number has been entered; an ending lab number is not required.
    */
	public boolean printButtonCheck()
	{
        boolean status=true;
        if ((printMode==Lab.DRAFT)||(printMode==Lab.FINAL)) {
		    if (Utils.isNull(startingLab.getText())) {
		        Utils.createErrMsg("Error: Missing Starting Lab");
		        startingLab.requestFocus();
		        status=false;
		    }   
		}
		return (status);
	}
	
    /*
        Based on which radio button was selected (which sets the
        printMode variable appropriately), convert the starting
        and ending lab numbers to values if needed; finally, 
        call the database operation to retrieve data.
    */
	public void printButtonActions() 
	{
	    /*  For non-queue requests must get the values for the
	        range of lab numbers to print reports for.
	    */
	    if ((printMode==Lab.DRAFT)||(printMode==Lab.FINAL)) {
	        startingLabNumber=(int)Integer.parseInt(startingLab.getText());
	        /*  If there is no ending lab number entered, set the value
	            of the ending lab to the starting lab; i.e. request was
	            for one report only.
	        */
	        if (Utils.isNull(endingLab.getText()))
	            endingLabNumber=startingLabNumber;
	        else {
	            /*  If an ending lab number was entered, make sure that the
	                end value entered is larger than the start value;
	                otherwise display an error message.
	            */
	            endingLabNumber=(int)Integer.parseInt(endingLab.getText());
	            if (endingLabNumber-startingLabNumber<0) {
	                Utils.createErrMsg("Error: Ending lab less then staring lab");
	                endingLab.requestFocus();
	                return;
	            }
	        } 
	    }
	    /*  Database operations object method that retrieves
	        data for the current set of reports requested
	    */
	    log.stamp("Calling dbOps.getReports()");
        dbOps.getReports();
        log.stamp("Return dbOps.getReports()");
	}
	
    /*
        Prints the heading section of the report
    */
	public void PCSHeader(Graphics pgraphics, LabReportRec labReport) {
	    int x=30,y=46;
	    int saveY=y;
	    /*  If the type of report is a draft the word "DRAFT"
	        is printed in large type across the top of the report
	    */
	    if ((printMode==Lab.DRAFT)||(printMode==Lab.CURR_DRAFT)) {
	        x+=75;
	        y+=40;
            pgraphics.setFont(new Font("SansSerif",Font.BOLD,30));
            pgraphics.drawString("*  *  *  *  D  R  A  F  T  *  *  *  *",x,y);
            y+=54;
            pgraphics.drawLine(30,y,574,y);
            maxY=y;
            return;
	    }
	    /*  Otherwise format and print the heading information
	        on the report.
	    */
        pgraphics.setFont(new Font("SansSerif",Font.BOLD,13));
        saveY=y;
        pgraphics.drawString("PENNSYLVANIA CYTOLOGY SERVICES",x,y);
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,12));
        y+=14;
        pgraphics.drawString("339 Old Haymaker Road",x,y);
        y+=12;
        pgraphics.drawString("Parkway Building, Suite 1700",x,y);
        y+=12;
        pgraphics.drawString("Monroeville, PA  15146",x,y);
        y+=10;
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,9));
        pgraphics.drawString("Phone: 412.373.8300   Fax: 412.373.7027",x,y);
        x=499;y=saveY;
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,8));
        pgraphics.drawString("CLIA: 39D0656968",x,y);
        x=409;y+=10;
        pgraphics.drawString("Pennsylvania State Laboratory Code: 331",x,y);
        x=400;y+=10;
        pgraphics.drawString("College of American Pathologists: 41911-01",x,y);
        // added FL license on 6/01/04
        // removed FL license on 12/02/09
        //x=430;y+=10;
        //pgraphics.drawString("Florida License Number: 800016595",x,y);
        x=388;y+=18;
        pgraphics.drawString("Laboratory Director: "+labReport.director_name,x,y);
        y+=12;
        pgraphics.drawLine(30,y,574,y);
        maxY=y;
	}

	class SymFocus extends java.awt.event.FocusAdapter
	{
		public void focusGained(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			if (object == endingLab)
				endingLab_focusGained(event);
		}
	}

	void endingLab_focusGained(java.awt.event.FocusEvent event)
	{
		if (Utils.isNull(startingLab.getText())) {
		    Utils.createErrMsg("Error: Missing Starting Lab");
		    startingLab.requestFocus();
		}
	}
	
	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == CytoPathReport.this)
				CytoPathReport_keyPressed(event);
			else if (object == startingLab)
				startingLab_keyPressed(event);
			else if (object == endingLab)
				endingLab_keyPressed(event);
			else if (object == practice)
				practice_keyPressed(event);
		}

		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == startingLab)
				startingLab_keyTyped(event);
			else if (object == endingLab)
				endingLab_keyTyped(event);
			else if (object == practice)
				practice_keyTyped(event);
		}
	}

	void startingLab_keyTyped(java.awt.event.KeyEvent event)
	{
	    msgLabel.setText(null);
		Utils.forceDigits(event);
	}

	void endingLab_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event);
	}

    /*
        Formats and prints selected data from the requisition
        on the report.
    */
	public void labData(Graphics pgraphics, LabReportRec labReport) 
	{
	    int x,y;
	    int gap;
	    int saveY = 0;
	    int slen;
	    StringBuffer buf = new StringBuffer();
	    StringBuffer buf2 = new StringBuffer();
	    StringBuffer buf3 = new StringBuffer();
	    DetailCodeRec dCodeRec = null;
	    
	    boolean test = true;
	    
	    x=30; y=maxY+20;
	    saveY=y;
	    
	    /* PATIENT NAME */
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,9));
        pgraphics.drawString("NAME:",x,y);
        if (!Utils.isNull(labReport.pat_lname)) buf.append(labReport.pat_lname.trim());
        else buf.append("MISSING");
        buf.append(", ");
        if (!Utils.isNull(labReport.pat_fname)) buf.append(labReport.pat_fname.trim());
        else buf.append("MISSING");
        if (!Utils.isNull(labReport.pat_mi)) buf.append(" "+labReport.pat_mi);
        gap=86;
        pgraphics.setFont(new Font("SansSerif",Font.BOLD,11));
        pgraphics.drawString(buf.toString(),x+gap,y);
        
        /* PATIENT SSN */
        /* Utils.addShortSSN prints only the last four digits of the
         * patient's SSN, and left pads with pound signs
         */
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,9));
        if (!Utils.isNull(labReport.pat_ssn)) {
            //if (labReport.practice_type.equals("ADPH"))
                buf = new StringBuffer(Utils.addShortSSN(labReport.pat_ssn));
            //else
            //    buf = new StringBuffer(Utils.addSSNMask(labReport.pat_ssn));
            y+=10;
            pgraphics.drawString("SSN:",x,y);
            pgraphics.drawString(buf.toString(),x+gap,y);
        }

        /* PATIENT ID */
        if (!Utils.isNull(labReport.patient_id)) {
            y+=10;
            pgraphics.drawString("PATIENT ID:",x,y);
            pgraphics.drawString(labReport.patient_id,x+gap,y);
        }

        /* PATIENT DOB */
        if (!Utils.isNull(labReport.pat_dob)) {
            y+=10;
            pgraphics.drawString("DOB:",x,y);
            pgraphics.drawString(labReport.pat_dob,x+gap,y);
        }
        
        /* ACCOUNT NUMBER */
        maxY=y;
        x=340;y=saveY;
        pgraphics.setFont(new Font("SansSerif",Font.BOLD,11));
        if (labReport.practice<100) 
            buf = new StringBuffer("ACCOUNT #0"+Integer.toString(labReport.practice));
        else 
            buf = new StringBuffer("ACCOUNT #"+Integer.toString(labReport.practice));
        pgraphics.drawString(buf.toString(),x,y);	    
 
        /* PRACTICE NAME */
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,9));
        y+=10;
        gap=86;
        pgraphics.drawString(labReport.prac_name,x,y);
        
        /* PRACTICE ADDRESS */
        y+=10;
        if (!Utils.isNull(labReport.prac_address1))
            pgraphics.drawString(labReport.prac_address1,x,y);
        if (!Utils.isNull(labReport.prac_address2)) {
            y+=10;
            pgraphics.drawString(labReport.prac_address2,x,y);
        }
        
        /* PRACTICE CSZ */
        y+=10;
        if (!Utils.isNull(labReport.prac_city))
            buf2 = new StringBuffer(labReport.prac_city);
        else buf2 = new StringBuffer(" ");
        if (!Utils.isNull(labReport.prac_state))
            buf = new StringBuffer(buf2.toString()+", "+labReport.prac_state);
        else buf = new StringBuffer(buf2.toString());
        if (!Utils.isNull(labReport.prac_zip)) 
            buf2 = new StringBuffer(buf.toString()+" "+Utils.addZipMask(labReport.prac_zip));
        else buf2 = new StringBuffer(buf.toString());
        buf = new StringBuffer(buf2.toString());
        pgraphics.drawString(buf.toString(),x,y);
        
        /* PHYSICIAN */
        y+=14;
        pgraphics.drawString("PHYSICIAN:  ",x,y);
        try { slen=labReport.doctor_text.length(); }
        catch (Exception e) { slen=0; }
        buf = new StringBuffer();
        if (slen>24) buf.append(labReport.doctor_text.substring(0,24));
        else buf.append(labReport.doctor_text);
        pgraphics.setFont(new Font("SansSerif",Font.BOLD,11));
        pgraphics.drawString(buf.toString(),400,y);
        
        /* DRAW LINE */
        if (y>maxY) maxY=y;
        maxY+=10;
        pgraphics.drawLine(30,maxY,574,maxY);
        
        /* LAB DETAILS */
        y=maxY;
        x=30; y+=18;
        pgraphics.setFont(new Font("SansSerif",Font.BOLD,10));
        buf = new StringBuffer("LAB #"+labReport.lab_number);
        switch (labReport.preparation) {
            case Lab.CONVENTIONAL: buf.append("    CONVENTIONAL PAP SMEAR"); break;
            case Lab.THIN_LAYER: buf.append("   LIQUID BASED PAP TEST (ThinPrep)"); break;
            case Lab.CYT_NON_PAP: buf.append("   CYTOLOGY NON-PAP"); break;            
            case Lab.IMAGED_SLIDE: 
                pgraphics.setFont(new Font("SansSerif",Font.BOLD,10));
                buf.append("   THINPREP PAP TEST WITH IMAGING SYSTEM DUAL REVIEW"); 
                break;
        }
        pgraphics.drawString(buf.toString(),x,y);	    
        
        /* DATE COLLECTED */
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,8));
        x=464; 
        buf = new StringBuffer("COLLECTED:");
        pgraphics.drawString(buf.toString(),x,y-4);
        pgraphics.drawString(labReport.date_collected,x+66,y-4);

        /* DATE RECEIVED */
        buf = new StringBuffer("RECEIVED:");
        pgraphics.drawString(buf.toString(),x,y+5);
        pgraphics.drawString(labReport.receive_date,x+66,y+5);
        
        /* DATE REPORTED */
        buf = new StringBuffer("REPORTED:");
        pgraphics.drawString(buf.toString(),x,y+14);
        pgraphics.drawString(labReport.date_reported,x+66,y+14);
        
        /* SOURCE INFO */
        int detailY=y+18;
        saveY=y;
        if (labReport.numSources>0) {
            x=30; y+=18;
            //saveY=y;
            pgraphics.setFont(new Font("SansSerif",Font.BOLD,10));        
            pgraphics.drawString("SOURCE:",x,y);
            y+=10;
            pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,8));
            for (int i=0;i<labReport.detailVect.size();i++) {
                dCodeRec = (DetailCodeRec)labReport.detailVect.elementAt(i);
                if (dCodeRec.detail_type.equals("SOURCE")) {
                    pgraphics.drawString(dCodeRec.description,x,y);
                    y+=10;
                }
            }
        }
        
        /* SAMPLING DEVICE INFO */
        if (labReport.numDevices>0) {
            if (labReport.numSources==0) y+=18;
            else y+=8;
            x=30;
            pgraphics.setFont(new Font("SansSerif",Font.BOLD,10));
            pgraphics.drawString("SAMPLING DEVICE:",x,y);
            y+=10;
            pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,8));
            for (int i=0;i<labReport.detailVect.size();i++) {
                dCodeRec = (DetailCodeRec)labReport.detailVect.elementAt(i);
                if (dCodeRec.detail_type.equals("DEVICE")) {
                    pgraphics.drawString(dCodeRec.description,x,y);
                    y+=10;
                }
            }
        }

        /* OTHER INFO */
        if (labReport.numOthers>0) {
            if (labReport.numSources==0 && labReport.numDevices==0)
                y+=18;
            else y+=8;
            x=30; 
            pgraphics.setFont(new Font("SansSerif",Font.BOLD,10));
            pgraphics.drawString("OTHER INFORMATION:",x,y);
            y+=10;
            pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,8));
            for (int i=0;i<labReport.detailVect.size();i++) {
                dCodeRec = (DetailCodeRec)labReport.detailVect.elementAt(i);
                if (dCodeRec.detail_type.equals("OTHER")) {
                    buf = new StringBuffer(dCodeRec.description);
                    if (dCodeRec.additional_info.equals("Y")) {
                        buf.append(": ");
                        buf.append(dCodeRec.textEntered);
                    }
                    pgraphics.drawString(buf.toString(),x,y);
                    y+=10;
                }
            }
        }
        
        /* CONDITIONS */
        maxY=y;
        if (labReport.numConditions>0) {
            x=340; y=detailY;
            pgraphics.setFont(new Font("SansSerif",Font.BOLD,10));        
            pgraphics.drawString("CONDITIONS:",x,y);
            y+=12;
            pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,8));
            for (int i=0;i<labReport.detailVect.size();i++) {
                dCodeRec = (DetailCodeRec)labReport.detailVect.elementAt(i);
                if (dCodeRec.detail_type.equals("CONDITION")) {
                    pgraphics.drawString(dCodeRec.description,x,y);
                    y+=10;
                }
            }
        }
        
        /* PATIENT HISTORY */
        if (y>=maxY) maxY=y;
        else y=maxY;
        x=30;
        if (labReport.numHistory>0) {
            if (y<detailY) y=detailY;
            if (labReport.numSources==0
            && labReport.numDevices==0 && labReport.numOthers==0)
                y+=18;
            else y+=8;
            pgraphics.setFont(new Font("SansSerif",Font.BOLD,10));        
            pgraphics.drawString("PATIENT HISTORY:",x,y);
            y+=10;
            pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,8));
            if (labReport.pat_last_lab>0) {
                buf = new StringBuffer(
                    "PREVIOUS LAB #"+Integer.toString(labReport.pat_last_lab));
                pgraphics.drawString(buf.toString(),x,y);
                y+=10;
            }
            for (int i=0;i<labReport.detailVect.size();i++) {
                dCodeRec = (DetailCodeRec)labReport.detailVect.elementAt(i);
                if (dCodeRec.detail_type.equals("HISTORY")) {
                    buf = new StringBuffer(
                        dCodeRec.description.trim()+": "+
                        dCodeRec.textEntered.trim());
                    if (Utils.length(buf.toString())>100) {
                        buf2 = new StringBuffer(buf.toString());
                        int endNdx=0;
                        while (Utils.length(buf2.toString())>100) {
                            for (int j=0;j<100;j++) {
                                if (buf2.charAt(j)==' ')
                                    endNdx=j;
                            }
                            buf = new StringBuffer(buf2.toString().substring(0,endNdx));
                            buf3 = new StringBuffer(buf2.toString().substring(endNdx).trim());
                            pgraphics.drawString(buf.toString(),x,y);
                            buf2 = new StringBuffer("   "+buf3.toString());
                            y+=10;
                        }
                        if (!Utils.isNull(buf2.toString())) {
                            pgraphics.drawString(buf2.toString(),x,y);
                            y+=10;
                        }
                    }
                    else {
                        pgraphics.drawString(buf.toString(),x,y);
                        y+=10;
                    }
                }
            }
        }
        
        /* CLIENT NOTES */
        if (!Utils.isNull(labReport.client_notes)) {
            if (labReport.numSources==0 && labReport.numDevices==0 
            && labReport.numOthers==0 && labReport.numHistory==0)
                y+=18;
            else y+=8;
            pgraphics.setFont(new Font("SansSerif",Font.BOLD,10));        
            pgraphics.drawString("CLIENT NOTES:",x,y);
            y+=10;
            pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,8));
            buf = new StringBuffer(labReport.client_notes.trim());
            if (Utils.length(buf.toString())>100) {
                buf2 = new StringBuffer(buf.toString());
                int endNdx=0;
                while (buf2.length()>100) {
                    for (int j=0;j<100;j++) {
                        if (buf2.charAt(j)==' ')
                            endNdx=j;
                    }
                    buf = new StringBuffer(buf2.toString().substring(0,endNdx));
                    buf2 = new StringBuffer(buf2.toString().substring(endNdx).trim());
                    pgraphics.drawString(buf.toString(),x,y);
                    buf2 = new StringBuffer("   "+buf2.toString());
                    y+=10;
                }
                if (!Utils.isNull(buf2.toString())) {
                    pgraphics.drawString(buf2.toString(),x,y);
                    y+=10;
                }
            }
            else {
                pgraphics.drawString(buf.toString(),x,y);
                y+=10;
            }
        }
        if (labReport.numDetails==0) y+=26;
        maxY=y;
        pgraphics.drawLine(30,maxY,574,maxY);
	}
	
    /*  Determines whether for the current report being printed
        if any of the result codes indicate this is an 
        amended report.
    */
	public boolean isAmendedReport(Vector resultCodes)
	{
	    boolean hasAmendedCode = false;
	    for (int i=0; i<resultCodes.size(); i++) {
	        ResultCodeRec r = (ResultCodeRec)resultCodes.elementAt(i);
	        if (amendedCodes.contains(r.bethesda_code)) {
	            hasAmendedCode=true;
	            break;
	        }
	    }
	    return (hasAmendedCode);
	}

    /*
        Format and print the actual CytoPathology Report section
        of the report; includes test results and staff that
        performed the test.
    */
	public void resultsData(Graphics pgraphics, LabReportRec labReport)
	{
	    int x,y;
	    y=maxY+26;
        pgraphics.setFont(new Font("SansSerif",Font.BOLD,13));
	    pgraphics.drawString("CYTOPATHOLOGY REPORT",30,y);
	    if (labReport.HPVmessage) {
	        pgraphics.drawString("HPV REPORT",484,y);
	        pgraphics.drawString("TO FOLLOW",486,y+13);
	    }
	    if (isAmendedReport(labReport.resultVect))
	        pgraphics.drawString(" - AMENDED",220,y);
	    y+=14;
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,11));
	    pgraphics.drawString("The Bethesda Reporting System",30,y);
	    y+=30;
	    boolean remarksPrinted=false;
	    String buf=" ";
	    String buf2=" ";
        boolean printNegativeReportMessage = false;
        if (labReport.iDatestamp>=20090407) printNegativeReportMessage=true;
	    for (int i=0;i<4;i++) {
	        boolean printCategory=true;
	        for (int j=0;j<labReport.numResults;j++) {
	            ResultCodeRec resultCodeRec = (ResultCodeRec)labReport.resultVect.elementAt(j);
	            if (resultCodeRec.bethesda_code.equals("014")
	            ||  resultCodeRec.bethesda_code.equals("011")
	            ||  resultCodeRec.bethesda_code.equals("013")
	            ||  resultCodeRec.bethesda_code.equals("13R")) {
                    printNegativeReportMessage=true;	                    
	            }
	            switch (i) {
	                case 0:
	                if (resultCodeRec.category.equals("S")) {
	                    if (printCategory==true) {
                            pgraphics.setFont(new Font("SansSerif",Font.PLAIN,11));
	                        pgraphics.drawString("SPECIMEN ADEQUACY:",30,y);
	                        printCategory=false;
	                        y-=4;
	                    }
                        pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,9));
                        buf = new String(resultCodeRec.description);
                        if (Utils.length(buf)>60) {
                            buf2 = new String(buf);
                            int endNdx=0;
                            while (Utils.length(buf2)>60) {
                                for (int k=0;k<60;k++) {
                                    if (buf2.charAt(k)==' ')
                                        endNdx=k;
                                }
                                buf = new String(buf2.substring(0,endNdx));
                                buf2 = new String(buf2.substring(endNdx).trim());
                                pgraphics.drawString(buf,210,y);
                                y+=10;
                            }
                            if (!Utils.isNull(buf2)) {
                                pgraphics.drawString(buf2,210,y);
                                y+=10;
                            }
                        }
                        else {
                            pgraphics.drawString(buf,210,y);
                            y+=10;
                        }
	                } break;
	                case 1:
	                if (resultCodeRec.category.equals("G")) {
	                    if (printCategory==true) {
	                        y+=24;
                            pgraphics.setFont(new Font("SansSerif",Font.PLAIN,11));
	                        pgraphics.drawString("GENERAL CATEGORIZATION:",30,y);
	                        printCategory=false;
	                        y-=4;
	                    }
                        pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,9));
                        buf = new String(resultCodeRec.description);
                        if (Utils.length(buf)>60) {
                            buf2 = new String(buf);
                            int endNdx=0;
                            while (Utils.length(buf2)>60) {
                                for (int k=0;k<60;k++) {
                                    if (buf2.charAt(k)==' ')
                                        endNdx=k;
                                }
                                buf = new String(buf2.substring(0,endNdx));
                                buf2 = new String(buf2.substring(endNdx).trim());
                                pgraphics.drawString(buf,210,y);
                                y+=10;
                            }
                            if (!Utils.isNull(buf2)) {
                                pgraphics.drawString(buf2,210,y);
                                y+=10;
                            }
                        }
                        else {
                            pgraphics.drawString(buf,210,y);
                            y+=10;
                        }
	                } break;
	                case 2:
	                if (resultCodeRec.category.equals("D")) {
	                    if (printCategory==true) {
	                        y+=24;
                            pgraphics.setFont(new Font("SansSerif",Font.PLAIN,11));
	                        pgraphics.drawString("DESCRIPTION:",30,y);
	                        printCategory=false;
	                        y-=4;
	                    }
                        pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,9));
                        buf = new String(resultCodeRec.description);
                        if (Utils.length(buf)>60) {
                            buf2 = new String(buf);
                            int endNdx=0;
                            while (Utils.length(buf2)>60) {
                                for (int k=0;k<60;k++) {
                                    if (buf2.charAt(k)==' ')
                                        endNdx=k;
                                }
                                buf = new String(buf2.substring(0,endNdx));
                                buf2 = new String(buf2.substring(endNdx).trim());
                                pgraphics.drawString(buf,210,y);
                                //buf2="   "+buf2;
                                y+=10;
                            }
                            if (!Utils.isNull(buf2)) {
                                pgraphics.drawString(buf2,210,y);
                                y+=10;
                            }
                        }
                        else {
                            pgraphics.drawString(buf,210,y);
                            y+=10;
                        }
	                } break;
	                case 3:
	                if (resultCodeRec.category.equals("R")) {
	                    if (printCategory==true) {
	                        remarksPrinted=true;
	                        y+=24;
                            pgraphics.setFont(new Font("SansSerif",Font.PLAIN,12));
	                        pgraphics.drawString("REMARKS:",30,y);
	                        printCategory=false;
	                        y-=4;
	                    }
                        pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,10));
                        buf = new String(resultCodeRec.description);
                        if (Utils.length(buf)>60) {
                            buf2 = new String(buf);
                            int endNdx=0;
                            while (Utils.length(buf2)>60) {
                                for (int k=0;k<60;k++) {
                                    if (buf2.charAt(k)==' ')
                                        endNdx=k;
                                }
                                buf = new String(buf2.substring(0,endNdx));
                                buf2 = new String(buf2.substring(endNdx).trim());
                                pgraphics.drawString(buf,210,y);
                                y+=10;
                            }
                            if (!Utils.isNull(buf2)) {
                                pgraphics.drawString(buf2,210,y);
                                y+=10;
                            }
                        }
                        else {
                            pgraphics.drawString(buf,210,y);
                            y+=10;
                        }
	                } 
	                if ((j==labReport.numResults-1)&&
	                    (!Utils.isNull(labReport.remarks)))
	                {
	                    if (remarksPrinted==false) {
	                        remarksPrinted=true;
	                        y+=24;
                            pgraphics.setFont(new Font("SansSerif",Font.PLAIN,11));
	                        pgraphics.drawString("REMARKS:",30,y);
	                        printCategory=false;
	                        y-=4;
	                    }
	                    for (int a=0; a<labReport.remarksVect.size(); a++) {
                        pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,9));
                        buf = new String((String)labReport.remarksVect.elementAt(a));
                        if (Utils.length(buf)>60) {
                            buf2 = new String(buf);
                            int endNdx=0;
                            while (Utils.length(buf2)>60) {
                                for (int k=0;k<60;k++) {
                                    if (buf2.charAt(k)==' ')
                                        endNdx=k;
                                }
                                buf = new String(buf2.substring(0,endNdx));
                                buf2 = new String(buf2.substring(endNdx).trim());
                                pgraphics.drawString(buf,210,y);
                                y+=10;
                            }
                            if (!Utils.isNull(buf2)) {
                                pgraphics.drawString(buf2,210,y);
                                y+=12;
                            }
                            else y+=2;
                        }
                        else {
                            pgraphics.drawString(buf,210,y);
                            y+=12;
                        }
                        }
	                }
	                break;
	            }
	        }
	    }
	    if (labReport.sumMatNdx>0)
        {
            y+=24;
            pgraphics.setFont(new Font("SansSerif",Font.PLAIN,11));
            pgraphics.drawString("MATURATION INDEX:",30,y);
            y-=4;
            pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,9));
            pgraphics.drawString("SUPERFICIAL   "+labReport.superficial,210,y);
            y+=10;
            pgraphics.drawString("INTERMEDIATE  "+labReport.intermediate,210,y);
            y+=10;
            pgraphics.drawString("PARABASAL     "+labReport.parabasal,210,y);
            y+=10;
        }
        if (labReport.iDatestamp>=20050726 
        && printNegativeReportMessage && labReport.pap_class!=Lab.NON_GYNE) {
            String msgText = 
                "Cervical cytology is a screening test with limited "+
                "sensitivity and an irreducible false negative rate.  Regular";
            y+=50;
            pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,8));
            pgraphics.drawString(msgText,30,y);
            y+=8;
            msgText =
                "screening is critical for cancer prevention.  Pap "+
                "tests are designed for the detection of squamous cell carcinoma";
            pgraphics.drawString(msgText,30,y);
            y+=8;
            msgText =
                "and its precursors, not adenocarcinomas or other cancers.";
            pgraphics.drawString(msgText,30,y);
            y+=8;
        }
        if (y>=656) y+=10;
        else y=660;
        
        String cytotech = new String("CYTOTECHNOLOGIST:    "+
            labReport.cytotech_code.trim());
        if (!Utils.isNull(labReport.qc_cytotech_code))
            cytotech = new String(cytotech+"/"+labReport.qc_cytotech_code);
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,9));            
        pgraphics.drawString(cytotech,30,y);
        
        if (!Utils.isNull(labReport.verified_on)) {
            String verified = new String(
                "VERIFIED BY: "+labReport.verified_by+", "+labReport.verified_on);
            y+=10;
            pgraphics.drawString(verified,30,y);
            y+=20;
        }
        else y+=30;
        
        if (!Utils.isNull(labReport.pathologist_code)) {
            pgraphics.setFont(new Font("SansSerif",Font.PLAIN,11));            
            String fullName = new String(labReport.path_fname+" ");
            if (!Utils.isNull(labReport.path_mi)) {
                fullName = new String(fullName+labReport.path_mi+" ");
            }
            fullName = new String(fullName+labReport.path_lname);
            if (!Utils.isNull(labReport.path_degree)) {
                fullName = new String(fullName+", "+labReport.path_degree);
            }
            pgraphics.drawString(fullName,30,y);
            pgraphics.drawString("PHONED/FAXED ON: _____________",350,y);
            y+=12;
            pgraphics.drawString(labReport.path_title,30,y);
            y+=4;
            pgraphics.drawString("BY: _____________",450,y);
            y+=10;
            pgraphics.setFont(new Font("SansSerif",Font.PLAIN,9));            
            pgraphics.drawString("ELECTRONIC SIGNATURE",30,y);
            y+=10;
            pgraphics.setFont(new Font("SansSerif",Font.PLAIN,8));
            String msg =
                "My electronic signature is attestation that I have personally reviewed "+
                "the submitted material(s) and the final result reflects that evaluation.";
            pgraphics.drawString(msg,30,y);                
        }
	}
	    

	void cancelButton_actionPerformed(java.awt.event.ActionEvent event)
	{
	    dbOps.kill();
		closingActions();
	}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == CytoPathReport.this)
				CytoPathReport_windowClosing(event);
		}
	}

	void CytoPathReport_windowClosing(java.awt.event.WindowEvent event)
	{
	    closingActions();
	}
	
	void currentDrafts_actionPerformed(java.awt.event.ActionEvent event)
	{
		printModeButtonActions();
	}

	void currentFinals_actionPerformed(java.awt.event.ActionEvent event)
	{
		printModeButtonActions();
	}

	void draftCopy_actionPerformed(java.awt.event.ActionEvent event)
	{
		printModeButtonActions();
	}

	void finalCopy_actionPerformed(java.awt.event.ActionEvent event)
	{
		printModeButtonActions();
	}
	
    /*
        Determines screen flow based on which radio button
        has been selected.
    */
	public void printModeButtonActions() {
	    currentDrafts.setEnabled(false);
	    currentFinals.setEnabled(false);
	    currentHPVs.setEnabled(false);
	    draftCopy.setEnabled(false);
	    finalCopy.setEnabled(false);
	    printModePanel.setEnabled(false);
	    if (currentDrafts.isSelected()==true) {
	        if (numDrafts>0) {
	            printMode=Lab.CURR_DRAFT;
	            startingLab.setEnabled(false);
	            endingLab.setEnabled(false);
	            cancelButton.setEnabled(true);
	            printButton.setEnabled(true);
	            printButton.requestFocus();
	        }
	        else {
	            resetForm();
	            Utils.createErrMsg("No Drafts to Print!");
	            log.write("NO DRAFTS TO PRINT");
	        }
	    }
	    else if (currentFinals.isSelected()==true) {
	        if (numFinals>0) {
	            printMode=Lab.CURR_FINAL;
	            startingLab.setEnabled(false);
	            endingLab.setEnabled(false);
	            cancelButton.setEnabled(true);
	            printButton.setEnabled(true);
	            printButton.requestFocus();
	        }
	        else {
	            resetForm();
	            Utils.createErrMsg("No Finals to Print!");
	            log.write("NO FINALS TO PRINT");
	        }
	    }
	    else if (currentHPVs.isSelected()==true) {
            if (numHPVs>0) {
                printMode=Lab.CURR_HPV;
                startingLab.setEnabled(false);
                endingLab.setEnabled(false);
                cancelButton.setEnabled(true);
                printButton.setEnabled(true);
                printButton.requestFocus();
            }
            else {
                resetForm();
                Utils.createErrMsg("No Finals with HPV to Print!");
                log.write("NO HPV/CYTOPATH TO PRINT");
            }
	    }
	    else if (draftCopy.isSelected()==true) {
	        printMode=Lab.DRAFT;
	        startingLab.setEnabled(true);
	        endingLab.setEnabled(true);
	        printButton.setEnabled(true);
	        cancelButton.setEnabled(true);
	        startingLab.requestFocus();    
	    }
	    else if (finalCopy.isSelected()==true) {
	        printMode=Lab.FINAL;
	        startingLab.setEnabled(true);
	        endingLab.setEnabled(true);
	        printButton.setEnabled(true);
	        cancelButton.setEnabled(true);
	        startingLab.requestFocus();
	    }
	    
	}

	void CytoPathReport_keyPressed(java.awt.event.KeyEvent event)
	{
		int key=event.getKeyCode();
		if (key==java.awt.event.KeyEvent.VK_ESCAPE) {
		    resetForm();
		}
		else if (key==java.awt.event.KeyEvent.VK_F9) {
		    closingActions();
		}
	}
	
    /*
        Resets the CytoPathReport screen
    */
	public void resetForm() {
        startingLab.setText(null);
		endingLab.setText(null);
		msgLabel.setText(null);
		startingLab.setEnabled(false);
		endingLab.setEnabled(false);
		printButton.setEnabled(false);
		cancelButton.setEnabled(false);
		printModePanel.setEnabled(true);
		currentDrafts.setEnabled(true);
		currentFinals.setEnabled(true);
		currentHPVs.setEnabled(true);
		draftCopy.setEnabled(true);
		finalCopy.setEnabled(true);
		printMode=Lab.NO_PRINT;
		NUM_REPORTS=0;
        maxY=0;
        reportDate = new String();
		currentDrafts.requestFocus();
		practice.setText(null);
	}
	
	void startingLab_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(startingLab,"Start Lab"))
		        startingLab.transferFocus();
		}
	}

	void endingLab_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
	        if (printButtonCheck()) { 
	            printButton.requestFocus();
	            printButtonActions();
	        }
		}
	}
	
    /*
        Actions performed when screen is terminated;
        close log file, close database connection.
    */
	void closingActions()
	{
	    log.stop();
	    dbOps.close();
	    this.dispose();
	}
	
	public void holdFinalsHeader(Graphics pgraphics) {
	    int x=40,y=105;
        pgraphics.setFont(new Font("MonoSpaced",Font.BOLD,24));
        pgraphics.drawString("*  *  *  *  *  *  *  *  *  *  *  *  *",x,y);
        y+=56;
        pgraphics.drawString("*  *  *  *  *  *  *  *  *  *  *  *  *",x,y);
        y+=56;
        pgraphics.drawString("*  *         H  O  L  D          *  *",x,y);
        y+=56;
        pgraphics.drawString("*  *     R  E  P  O  R  T  S     *  *",x,y);
        y+=56;
        pgraphics.drawString("*  *           F  O  R           *  *",x,y);
        y+=56;
        pgraphics.drawString("*  *           H  P  V           *  *",x,y);
        y+=56;
        pgraphics.drawString("*  *     R  E  S  U  L  T  S     *  *",x,y);
        y+=56;
        pgraphics.drawString("*  *  *  *  *  *  *  *  *  *  *  *  *",x,y);
        y+=56;
        pgraphics.drawString("*  *  *  *  *  *  *  *  *  *  *  *  *",x,y);
    }
    
    /*
        Format and print sheet that indicates the beginning of
        one or more reports that must be faxed.
    */
	public void faxHeader(Graphics pgraphics) {
	    int x=105,y=105;
        pgraphics.setFont(new Font("SansSerif",Font.BOLD,30));
        pgraphics.drawString("*  *  *  *  B  E  G  I  N  *  *  *  *",x,y);
        y+=54;
        pgraphics.drawString("*  *  *  *  F  A  X  E  S  *  *  *  *",x,y);
    }
    
    /*
        Format and print sheet that indicates the end of
        the reports that must be faxed.
    */
	public void faxTrailer(Graphics pgraphics) {
	    int x=105,y=105;
        pgraphics.setFont(new Font("SansSerif",Font.BOLD,30));
        pgraphics.drawString("*  *  *  *  *  E  N  D  *  *  *  *  *",x,y);
        y+=54;
        pgraphics.drawString("*  *  *  *  F  A  X  E  S  *  *  *  *",x,y);
    }

    /*
        Method modified below
    */
    public void HPVlisting(Graphics pgraphics) {
	    int x=35,y=30;
	    /*
	    String columnHeadings = 
	        "LAB NUMBER      "+
	        "PATIENT NAME              "+
	        "SSN          "+
	        "DOB       "+
	        "COLLECTED  "+
	        "ORDERING PHYSICIAN";
	    */
	    String columnHeadings = 
	        "             "+
	        "LAB NUMBER      "+
	        "PATIENT NAME";
	    /*
	    String line = 
	        "----------------"+
	        "--------------------------"+
	        "-------------"+
	        "----------"+
	        "-----------"+
	        "------------------------------";
	    */
	    String line = 
	        "----------------"+
	        "--------------------------"+
	        "-------------"+
	        "----------"+
	        "------";
        pgraphics.setFont(new Font("MonoSpaced",Font.BOLD,10));
        pgraphics.drawString("P E N N S Y L V A N I A   C Y T O L O G Y   S E R V I C E S",x,y);
        y+=4;
        pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,5));
        pgraphics.drawString("SUITE 1700 PARKWAY BLDG  *  339 OLD HAYMAKER ROAD  *  MONROEVILLE, PA 15146  *  (412) 373-8300  *  FAX: (412) 373-7027",x,y);
        y+=14;
        pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,8));
        if (hasHoldFinals)
            /* subtract 2 from size because two non-data lines are added to vector */
            pgraphics.drawString("HPV TEST LOG ["+(HPVrequests.size()-2)+"]",x,y);
        else
            pgraphics.drawString("HPV TEST LOG ["+(HPVrequests.size())+"]",x,y);
        y+=8;
        String s = "DATE REQUESTED: "+Login.getCurrentDateTime();
        pgraphics.drawString(s,x,y);
        y+=11;
        //pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,9));
        pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,10));
        pgraphics.drawString(columnHeadings,x,y);
        y+=5;
        pgraphics.drawString(line,x,y);
        y+=8;
        for (int i=0; i<HPVrequests.size(); i++) {
            s = (String)HPVrequests.elementAt(i);
            pgraphics.drawString(s,x,y);
            //y+=5;
            y+=7;
            pgraphics.drawString(line,x,y);
            //y+=8;
            y+=10;
        }
    }
    
    /*
        Formats and prints the HPV requisition sheets
    */
    public void HPVlisting(Graphics pgraphics, int startNdx, int endNdx) {
	    int x=35,y=30;
	    pageNum++;
	    /*
	    String columnHeadings = 
	        "LAB NUMBER      "+
	        "PATIENT NAME              "+
	        "SSN          "+
	        "DOB       "+
	        "COLLECTED  "+
	        "ORDERING PHYSICIAN";
	    */
	    String columnHeadings = 
	        "             "+
	        "LAB NUMBER      "+
	        "PATIENT NAME";
	    /*
	    String line = 
	        "----------------"+
	        "--------------------------"+
	        "-------------"+
	        "----------"+
	        "-----------"+
	        "------------------------------";
	    */
	    String line = 
	        "----------------"+
	        "--------------------------"+
	        "-------------"+
	        "----------"+
	        "------";
        pgraphics.setFont(new Font("MonoSpaced",Font.BOLD,10));
        pgraphics.drawString("P E N N S Y L V A N I A   C Y T O L O G Y   S E R V I C E S",x,y);
        y+=4;
        pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,5));
        pgraphics.drawString("SUITE 1700 PARKWAY BLDG  *  339 OLD HAYMAKER ROAD  *  MONROEVILLE, PA 15146  *  (412) 373-8300  *  FAX: (412) 373-7027",x,y);
        y+=14;
        pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,8));
        /* subtract 2 from size because two non-data lines are added to vector */
        pgraphics.drawString("HPV TEST LOG ["+(HPVrequests.size()-2)+"]",x,y);
        y+=8;
        String s = "DATE REQUESTED: "+Login.getCurrentDateTime();
        pgraphics.drawString(s,x,y);
        y+=8;
        pgraphics.drawString("PAGE "+pageNum,x,y);
        y+=11;
        //pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,9));
        pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,10));
        pgraphics.drawString("NOTE:  * AFTER LAB NUMBER = HPV TO FOLLOW MESSAGE WAS PRINTED ON REPORT",x,y);
        y+=11;
        pgraphics.drawString(columnHeadings,x,y);
        y+=5;
        pgraphics.drawString(line,x,y);
        y+=8;
        for (int i=startNdx; i<endNdx; i++) {
            s = (String)HPVrequests.elementAt(i);
            pgraphics.drawString(s,x,y);
            //y+=5;
            y+=7;
            pgraphics.drawString(line,x,y);
            //y+=8;
            y+=10;
        }
    }

    /*
        Format and print the various exceptions regarding HPV testing
        that must be reported
    */
    public void HPVexception(Graphics pgraphics) {
	    int x=35,y=30;
	    /*
	    String columnHeadings = 
	        "LAB NUMBER      "+
	        "PATIENT NAME              "+
	        "SSN          "+
	        "DOB       "+
	        "COLLECTED  "+
	        "ORDERING PHYSICIAN";
	    */
	    String columnHeadings = 
	        "             "+
	        "LAB NUMBER      "+
	        "PATIENT NAME";
	    /*
	    String line = 
	        "----------------"+
	        "--------------------------"+
	        "-------------"+
	        "----------"+
	        "-----------"+
	        "------------------------------";
	    */
	    String line = 
	        "----------------"+
	        "--------------------------"+
	        "-------------"+
	        "----------"+
	        "------";
        pgraphics.setFont(new Font("MonoSpaced",Font.BOLD,10));
        pgraphics.drawString("P E N N S Y L V A N I A   C Y T O L O G Y   S E R V I C E S",x,y);
        y+=4;
        pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,5));
        pgraphics.drawString("SUITE 1700 PARKWAY BLDG  *  339 OLD HAYMAKER ROAD  *  MONROEVILLE, PA 15146  *  (412) 373-8300  *  FAX: (412) 373-7027",x,y);
        y+=14;
        pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,8));
        pgraphics.drawString("HPV EXCEPTIONS LOG",x,y);
        y+=8;
        String s = "DATE REQUESTED: "+Login.getCurrentDateTime();
        pgraphics.drawString(s,x,y);
        y+=9;
        // next line is new
        pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,10));
        pgraphics.drawString("NOTE:  * AFTER LAB NUMBER = HPV TO FOLLOW MESSAGE WAS PRINTED ON REPORT",x,y);
        y+=11;
        pgraphics.drawString(columnHeadings,x,y);
        y+=5;
        pgraphics.drawString(line,x,y);
        y+=9;
        String heading = null;
        if (HPValternates.size()>0) {
            heading="THE FOLLOWING ARE SENT TO LAB CORP ["+HPValternates.size()+"]:";
            pgraphics.drawString(heading,x,y);
            y+=9;
            for (int i=0; i<HPValternates.size(); i++) {
                s = (String)HPValternates.elementAt(i);
                //pgraphics.drawString(s,x,y);
                //y+=9;
                pgraphics.drawString(s,x,y);
                y+=7;
                pgraphics.drawString(line,x,y);
                y+=10;
            }
            pgraphics.drawString("  ",x,y);
        }
        if (HPVpermissions.size()>0) {
            heading="THE FOLLOWING MUST BE FAXED FOR PERMISSION ["+HPVpermissions.size()+"]:";
            pgraphics.drawString(heading,x,y);
            y+=9;
            for (int i=0; i<HPVpermissions.size(); i++) {
                s = (String)HPVpermissions.elementAt(i);
                //pgraphics.drawString(s,x,y);
                //y+=9;
                pgraphics.drawString(s,x,y);
                y+=7;
                pgraphics.drawString(line,x,y);
                y+=10;
            }
            pgraphics.drawString("  ",x,y);
        }
        if (HPVmanual.size()>0) {
            heading="THE FOLLOWING MUST BE CHECKED MANUALLY (OLD CODES) ["+HPVmanual.size()+"]:";
            pgraphics.drawString(heading,x,y);
            y+=9;
            for (int i=0; i<HPVmanual.size(); i++) {
                s = (String)HPVmanual.elementAt(i);
                //pgraphics.drawString(s,x,y);
                //y+=9;
                pgraphics.drawString(s,x,y);
                y+=7;
                pgraphics.drawString(line,x,y);
                y+=10;
            }
        }
        if (HPVdrVerify.size()>0) {
            heading="CHECK REQ TO BE SURE WE ARE TO SEND FOR HPV ["+HPVdrVerify.size()+"]:";
            pgraphics.drawString(heading,x,y);
            y+=9;
            for (int i=0; i<HPVdrVerify.size(); i++) {
                s = (String)HPVdrVerify.elementAt(i);
                //pgraphics.drawString(s,x,y);
                //y+=9;
                pgraphics.drawString(s,x,y);
                y+=7;
                pgraphics.drawString(line,x,y);
                y+=10;
            }
        }
        if (HPVonly.size()>0) {
            heading="HPV TESTING ONLY - NO REPORTS ["+HPVonly.size()+"]:";
            pgraphics.drawString(heading,x,y);
            y+=9;
            for (int i=0; i<HPVonly.size(); i++) {
                s = (String)HPVonly.elementAt(i);
                //pgraphics.drawString(s,x,y);
                //y+=9;
                pgraphics.drawString(s,x,y);
                y+=7;
                pgraphics.drawString(line,x,y);
                y+=10;
            }
        }
    }

	void coverSheetButton_actionPerformed(java.awt.event.ActionEvent event)
	{
	    getCoverSheets();
	}
	
	void getCoverSheets()
	{
	    String s = practice.getText();
	    int prac = 0;
	    if (!Utils.isNull(s)) {
	        if (s.equals("LBL")) prac=(-1);
	        else prac = (int)Integer.parseInt(s);
	    }
	    if (prac==(-1)) {
	        CallableStatement cstmt = null;
	        try { 
                cstmt=DbConnection.process().prepareCall(
	                "{call pcs.build_report_lbl_file()}");
                cstmt.executeUpdate();
                cstmt.close();
                String fileName = "reports.lbl";
                String dir = Utils.ROOT_DIR;
		        if (verifyPrinter()) {
		            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
		            Utils.genericPrint(dir,fileName,false);
		            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
		        }
		        practice.setText(null);
           }
	        catch (SQLException e) { log.write(e.toString()); }
	        catch (Exception e) { log.write(e); }
	    }
	    else {
	        log.stamp("Calling dbOps.getCoverSheets(int)");
		    Vector coverSheets = dbOps.getCoverSheets(prac);
		    log.stamp("Return dbOps.getCoverSheets(int)");
		    if (coverSheets.size()>0) {
		        printCoverSheets(coverSheets);
		    }
		}
        dbOps.resetCoverSheets();
	}
	
	public boolean verifyPrinter()
	{
	    boolean status = false;
		int rv = printerConfirm.showConfirmDialog(this,"Make sure printer is ready. \nPrint labels now?",
		    "Account Labels",printerConfirm.YES_NO_OPTION,printerConfirm.QUESTION_MESSAGE);
		if (rv==printerConfirm.YES_OPTION) {
		    status=true;
		}
		return (status);
	}

    public void printCoverSheets(Vector coverSheets) {
        PrintJob pjob;
        Properties p = new java.util.Properties();
        Graphics pgraphics;
        String name = new String("Cover Sheets");
        int x,y;
        pjob=getToolkit().getPrintJob(this,name,p);
        if (pjob!=null) {
            for (int i=0; i<coverSheets.size(); i++) {
                pgraphics=pjob.getGraphics();
                if (pgraphics!=null) {
		            PracticeRec r = (PracticeRec)coverSheets.elementAt(i);
                    x=430; y=80;
                    pgraphics.setFont(new Font("SansSerif",Font.BOLD,16));
                    pgraphics.drawString(("ACCOUNT #"+r.practice_id),x,y);
                    //x=190; y=360;  old values
                    x=68; y=225;
                    pgraphics.setFont(new Font("MonoSpaced",Font.BOLD,12));
                    pgraphics.drawString(r.name,x,y);
                    y+=12;
                    pgraphics.drawString(r.address1,x,y);
                    y+=12;
                    if (!Utils.isNull(r.address2)) {
                        pgraphics.drawString(r.address2,x,y);
                        y+=12;
                    }
                    pgraphics.drawString(
                        (r.city+", "+r.state+"  "+r.zip),x,y);
                    if (!Utils.isNull(r.attn_message)) {
                        y+=24;
                        pgraphics.drawString("ATTN: "+r.attn_message,x,y);
                    }
                    pgraphics.dispose();
                }
            }
        }
        pjob.end();
    }

	void practice_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(practice,"Must enter an Account Number")) {
		        getCoverSheets();
		    }
		}
	}

	void practice_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,3);
	}

	void clearAllButton_actionPerformed(java.awt.event.ActionEvent event)
	{
        dbOps.resetCoverSheets();
	}

	void currentHPVs_actionPerformed(java.awt.event.ActionEvent event)
	{
		printModeButtonActions();
	}
	
}
