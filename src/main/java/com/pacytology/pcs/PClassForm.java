package com.pacytology.pcs;

/*
		A basic implementation of the JFrame class.
*/

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.*;
import javax.swing.*;

import org.apache.commons.lang.NotImplementedException;

import com.pacytology.pcs.actions.PClassActionMap;
import com.pacytology.pcs.actions.PcsActionMap;
import com.pacytology.pcs.ui.PcsFrame;
import com.pacytology.pcs.ui.Square;
import java.util.Vector;

public class PClassForm extends PcsFrame
{
    
    public Login dbLogin;
    public Vector pclassVect = new Vector();
    public Vector pclassDescrVect = new Vector();
    public Vector bcodesVect = new Vector();
    public int currNdx=0;
    public StringUtils format = new StringUtils();
    
	public PClassForm()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Pap Classes");
		setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(556,326);
		setVisible(false);
		getContentPane().add(F1sq);
		F1sq.setBounds(35,6,20,20);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F1");
		getContentPane().add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(39,6,20,20);
		getContentPane().add(F2sq);
		F2sq.setBounds(97,6,20,20);
		F2lbl.setRequestFocusEnabled(false);
		F2lbl.setText("F2");
		getContentPane().add(F2lbl);
		F2lbl.setForeground(java.awt.Color.black);
		F2lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F2lbl.setBounds(101,6,20,20);
		getContentPane().add(F3sq);
		F3sq.setBounds(159,6,20,20);
		F3lbl.setRequestFocusEnabled(false);
		F3lbl.setText("F3");
		getContentPane().add(F3lbl);
		F3lbl.setForeground(java.awt.Color.black);
		F3lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F3lbl.setBounds(163,6,20,20);
		getContentPane().add(F4sq);
		F4sq.setBounds(221,6,20,20);
		F4lbl.setRequestFocusEnabled(false);
		F4lbl.setText("F4");
		getContentPane().add(F4lbl);
		F4lbl.setForeground(java.awt.Color.black);
		F4lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F4lbl.setBounds(225,6,20,20);
		getContentPane().add(F9sq);
		F9sq.setBounds(283,6,20,20);
		F9lbl.setRequestFocusEnabled(false);
		F9lbl.setText("F9");
		getContentPane().add(F9lbl);
		F9lbl.setForeground(java.awt.Color.black);
		F9lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F9lbl.setBounds(287,6,20,20);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("Query");
		getContentPane().add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(10,30,70,18);
		F2action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F2action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F2action.setText("Add");
		getContentPane().add(F2action);
		F2action.setForeground(java.awt.Color.black);
		F2action.setBounds(72,30,70,16);
		F3action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F3action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F3action.setText("Update");
		getContentPane().add(F3action);
		F3action.setForeground(java.awt.Color.black);
		F3action.setBounds(134,30,70,16);
		F4action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F4action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F4action.setText("Delete");
		getContentPane().add(F4action);
		F4action.setForeground(java.awt.Color.black);
		F4action.setBounds(196,30,70,16);
		F9action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F9action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F9action.setText("Exit");
		getContentPane().add(F9action);
		F9action.setForeground(java.awt.Color.black);
		F9action.setBounds(258,30,70,16);
		getContentPane().add(msgLabel);
		msgLabel.setForeground(java.awt.Color.red);
		msgLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		msgLabel.setBounds(44,52,372,20);
		getContentPane().add(F12sq);
		F12sq.setBounds(345,6,20,20);
		F12lbl.setRequestFocusEnabled(false);
		F12lbl.setText("F12");
		getContentPane().add(F12lbl);
		F12lbl.setForeground(java.awt.Color.black);
		F12lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F12lbl.setBounds(346,6,20,20);
		F12action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F12action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F12action.setText("Submit");
		getContentPane().add(F12action);
		F12action.setForeground(java.awt.Color.black);
		F12action.setBounds(320,30,70,16);
		JLabel2.setText("Class");
		getContentPane().add(JLabel2);
		JLabel2.setBounds(26,86,40,14);
		papClass.setEnabled(false);
		getContentPane().add(papClass);
		papClass.setFont(new Font("DialogInput", Font.PLAIN, 12));
		papClass.setBounds(24,102,40,20);
		papClassDescr.setEnabled(false);
		getContentPane().add(papClassDescr);
		papClassDescr.setFont(new Font("DialogInput", Font.PLAIN, 12));
		papClassDescr.setBounds(70,102,300,20);
		JLabel1.setText("Description");
		getContentPane().add(JLabel1);
		JLabel1.setBounds(76,86,80,14);
		bcodePane.setOpaque(true);
		getContentPane().add(bcodePane);
		bcodePane.setBounds(24,150,514,160);
		bcodePane.getViewport().add(bcodeList);
		bcodeList.setFont(new Font("DialogInput", Font.PLAIN, 10));
		bcodeList.setBounds(0,0,511,157);
		JLabel3.setText("Bethesda Codes");
		getContentPane().add(JLabel3);
		JLabel3.setBounds(26,132,110,14);
		//}}
		
		resetColors();

		actionMap = new PClassActionMap(this);
		this.setupKeyPressMap();
	}
	protected JRootPane setupKeyPressMap() {
		JRootPane rp = super.setupKeyPressMap();
		rp.getActionMap().put("F4", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				msgLabel.setText("Delete function not yet implemented");
			}
		});
		rp.getActionMap().put("F12", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				msgLabel.setText("Submit function not yet implemented");
			}
		});
		rp.getActionMap().put("VK_DOWN", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
			    msgLabel.setText(null);
				currNdx++;
		        if (currNdx>=pclassVect.size())
		            currNdx=pclassVect.size()-1;
		        displayClass(currNdx);

			}
		});
		rp.getActionMap().put("VK_UP", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				msgLabel.setText(null);
				currNdx--;
                if (currNdx<0) currNdx=0;
                displayClass(currNdx);
			}
		});
		rp.getActionMap().put("VK_HOME", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				msgLabel.setText(null);
				currNdx=0;
                displayClass(currNdx);
			}
		});
		rp.getActionMap().put("VK_END", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				msgLabel.setText(null);
				currNdx=pclassVect.size()-1;
                displayClass(currNdx);
			}
		});
		return rp;
	}
	public PClassForm(Login dbLogin)
	{
	    this();
	    this.dbLogin=dbLogin;
	    this.getPapClasses();
	    this.displayClass(currNdx);
	}

	public void setVisible(boolean b)
	{
		if (b) setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new PClassForm()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		Insets insets = getInsets();
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	Square F1sq = new Square();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	Square F2sq = new Square();
	javax.swing.JLabel F2lbl = new javax.swing.JLabel();
	Square F3sq = new Square();
	javax.swing.JLabel F3lbl = new javax.swing.JLabel();
	Square F4sq = new Square();
	javax.swing.JLabel F4lbl = new javax.swing.JLabel();
	Square F9sq = new Square();
	javax.swing.JLabel F9lbl = new javax.swing.JLabel();
	javax.swing.JLabel F1action = new javax.swing.JLabel();
	javax.swing.JLabel F2action = new javax.swing.JLabel();
	javax.swing.JLabel F3action = new javax.swing.JLabel();
	javax.swing.JLabel F4action = new javax.swing.JLabel();
	javax.swing.JLabel F9action = new javax.swing.JLabel();
	
	Square F12sq = new Square();
	javax.swing.JLabel F12lbl = new javax.swing.JLabel();
	javax.swing.JLabel F12action = new javax.swing.JLabel();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JTextField papClass = new javax.swing.JTextField();
	javax.swing.JTextField papClassDescr = new javax.swing.JTextField();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JScrollPane bcodePane = new javax.swing.JScrollPane();
	javax.swing.JList bcodeList = new javax.swing.JList();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	//}}

	//{{DECLARE_MENUS
	//}}
	
    public boolean getPapClasses()  {
        boolean exitStatus=true;
        int currPapClass=0;
        try  {
            String query = 
                "SELECT pap_class,TO_CHAR(pap_class),description \n"+
                "FROM pcs.pap_classes \n"+
                "ORDER BY pap_class \n";
                
            System.out.println(query);                
            Statement stmt = dbConnection.process().createStatement();
            ResultSet rs = stmt.executeQuery(query);
            Vector vTmp = new Vector();
            while (rs.next()) {
                currPapClass=rs.getInt(1);
                pclassVect.addElement(rs.getString(2));
                pclassDescrVect.addElement(rs.getString(3));
                String subQuery = 
                    "SELECT bethesda_code||'   '||path_needed||'   '"+
                    "   ||category||'   '||description \n"+
                    "FROM pcs.bethesda_codes \n"+
                    "WHERE papclass="+currPapClass+" \n"+
                    "ORDER BY bethesda_code \n";
                Statement stmt2 = dbConnection.process().createStatement();
                ResultSet rs2 = stmt2.executeQuery(subQuery);
                vTmp.removeAllElements();
                while (rs2.next()) {
                    vTmp.addElement(rs2.getString(1));
                }
                bcodesVect.addElement(vTmp.clone());
            }       
        }
        catch( Exception e ) {
            System.out.println(e+" getPapClasses");
            exitStatus=false;
            msgLabel.setText("Operation Failed");
        }
        
        return(exitStatus);            
    }
	
	public void displayClass(int ndx) {
	    papClass.setText((String)pclassVect.elementAt(ndx));
	    papClassDescr.setText((String)pclassDescrVect.elementAt(ndx));
	    bcodeList.setListData((Vector)(bcodesVect.elementAt(ndx)));
	    bcodeList.revalidate();
	    bcodeList.repaint();
	}

	
	void resetColors()
	{
	    format.setColors(this.getContentPane());
	    msgLabel.setForeground(Color.green);
	}
	
	void closingActions()
	{
	    this.dispose();
	}
	/**
	 * Not Implemented
	 */
	@Override
	public void queryActions() {
		throw new NotImplementedException();
	}
	/**
	 * Not Implemented
	 */
	@Override
	public void addActions() {
		throw new NotImplementedException();
	}
	/**
	 * Not Implemented
	 */
	@Override
	public void updateActions() {
		throw new NotImplementedException();
	}
	/**
	 * Not Implemented
	 */
	@Override
	public void finalActions() {
		throw new NotImplementedException();
	}
	@Override
	public void resetActions() {
		// TODO Auto-generated method stub
		
	}
	
}
