package com.pacytology.pcs;

/*
 PENNSYLVANIA CYTOLOGY SERVICES
 LABORATORY INFORMATION SYSTEM V1.0
 Copyright (C) 2001 by John Cardella
 All Rights Reserved

 File:       PCSLabEntryJava
 Created By: John Cardella, Software Engineer

 Function:   Main application screen/project.

 MODIFICATIONS ----------------------------------
 Date/Staff      Description:
 */
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Insets;
import java.awt.PrintJob;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;
import java.util.Properties;
import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.SwingConstants;
import javax.swing.UIManager;

import org.apache.commons.lang.StringUtils;

import oracle.jdbc.OracleTypes;

import com.pacytology.pcs.db.DbUser;
import com.pacytology.pcs.io.FileTransfer;
import com.pacytology.pcs.ui.JAboutDialog;
import com.pacytology.pcs.ui.PcsFrame;

/**
 * Pennyslvania Cytology Services - Laboratory Information System
 */
public class PCSLabEntry extends PcsFrame {

	public Login dbLogin;
	public PatientStatement pStmt;
	public LogFile log;
	public boolean logOpen = false;
	int ltrCounter = 0;
	Vector printerCodes = new Vector();
	DbConnection d;

	public PCSLabEntry() {
		dbLogin = new Login();

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		// {{INIT_CONTROLS
		setJMenuBar(JMenuBar1);
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		getContentPane().setBackground(new java.awt.Color(204, 204, 204));
		setSize(792, 488);
		setVisible(false);
		JPanel2.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));
		getContentPane().add(JPanel2);
		JPanel2.setBounds(0, 0, 488, 309);
		JPanel1.setLayout(null);
		getContentPane().add(JPanel1);
		JPanel1.setBounds(0, 0, 792, 488);
		currentMsg.setHorizontalAlignment(SwingConstants.CENTER);
		currentMsg.setText("CURRENT MESSAGE");
		currentMsg.setOpaque(true);
		JPanel1.add(currentMsg);
		currentMsg.setForeground(java.awt.Color.yellow);
		currentMsg.setFont(new Font("Dialog", Font.BOLD, 12));
		currentMsg.setBounds(40, 456, 700, 20);
		currentMsg.setVisible(false);
		// $$ JMenuBar1.move(132,336);
		dbMenu.setText("Database");
		dbMenu.setActionCommand("Database");
		JMenuBar1.add(dbMenu);
		DbLogin.setText("Login");
		DbLogin.setActionCommand("Login");
		dbMenu.add(DbLogin);
		passwordItem.setEnabled(false);
		passwordItem.setText("Set Password");
		dbMenu.add(passwordItem);
		dbMenu.add(JSeparator1);
		adminMenu.setEnabled(false);
		adminMenu.setText("Administration");
		adminMenu.setActionCommand("Administration");
		dbMenu.add(adminMenu);
		freeSpaceItem.setText("dB Free Space");
		freeSpaceItem.setActionCommand("dB Free Space");
		adminMenu.add(freeSpaceItem);
		jobMenu.setEnabled(false);
		jobMenu.setText("Night Jobs");
		jobMenu.setActionCommand("Night Jobs");
		adminMenu.add(jobMenu);
		jobItem.setEnabled(false);
		jobItem.setText("Reset");
		jobItem.setActionCommand("Reset Night Jobs");
		jobMenu.add(jobItem);
		suspendJobItem.setText("Suspend Next");
		suspendJobItem.setActionCommand("Suspend");
		jobMenu.add(suspendJobItem);
		jobOffItem.setText("Off");
		jobOffItem.setActionCommand("Off");
		jobMenu.add(jobOffItem);
		resubmitJobItem.setEnabled(false);
		resubmitJobItem.setText("Resubmit");
		resubmitJobItem.setActionCommand("Resubmit");
		jobMenu.add(resubmitJobItem);
		logMenu.setText("Logs");
		logMenu.setActionCommand("Logs");
		adminMenu.add(logMenu);
		dailyJobItem.setText("Daily Jobs");
		dailyJobItem.setActionCommand("Daily Jobs");
		logMenu.add(dailyJobItem);
		traceItem.setText("Oracle Trace");
		traceItem.setActionCommand("Oracle Trace");
		logMenu.add(traceItem);
		fixAccount.setEnabled(false);
		fixAccount.setText("Fix Account");
		adminMenu.add(fixAccount);
		midBillItem.setText("Mid Month Billing");
		midBillItem.setActionCommand("Mid Month Billing");
		adminMenu.add(midBillItem);
		eomItem.setText("EOM");
		adminMenu.add(eomItem);
		adphPgmItem.setText("Process NP File");
		adphPgmItem.setActionCommand("Process NP File");
		adminMenu.add(adphPgmItem);
		dbMenu.add(JSeparator7);
		exitItem.setText("Exit");
		exitItem.setActionCommand("Exit");
		dbMenu.add(exitItem);
		fixAccount.setActionCommand("Fix Account");
		passwordItem.setActionCommand("Set Password");
		entryMenu.setText("Data Entry");
		entryMenu.setActionCommand("Data Entry");
		JMenuBar1.add(entryMenu);
		LabsItem.setEnabled(false);
		LabsItem.setText("Requisitions");
		LabsItem.setActionCommand("Labs");
		entryMenu.add(LabsItem);
		ResultsItem.setEnabled(false);
		ResultsItem.setText("Results");
		ResultsItem.setActionCommand("Results");
		entryMenu.add(ResultsItem);
		TissuePathItem.setText("Tissue Pathology");
		TissuePathItem.setActionCommand("Tissue Pathology");
		entryMenu.add(TissuePathItem);
		PracticesItem.setEnabled(false);
		PracticesItem.setText("Practices");
		PracticesItem.setActionCommand("Practices");
		entryMenu.add(PracticesItem);
		CarriersItem.setEnabled(false);
		CarriersItem.setText("Payers");
		CarriersItem.setActionCommand("Carriers");
		entryMenu.add(CarriersItem);
		ReceiveDateMenu.setText("Receive Dates");
		ReceiveDateMenu.setActionCommand("Receive Dates");
		entryMenu.add(ReceiveDateMenu);
		recvDateItem.setEnabled(false);
		recvDateItem.setText("Daily");
		recvDateItem.setActionCommand("Receive Dates");
		ReceiveDateMenu.add(recvDateItem);
		specificRecvDateItem.setText("Specific");
		specificRecvDateItem.setActionCommand("Specific");
		ReceiveDateMenu.add(specificRecvDateItem);
		HPVitem.setText("HPV Results ");
		HPVitem.setActionCommand("Group HPV Results ");
		entryMenu.add(HPVitem);
		HPVNoTestItem.setEnabled(false);
		HPVNoTestItem.setText("HPVs Not Sent");
		HPVNoTestItem.setActionCommand("HPVs Not Sent");
		entryMenu.add(HPVNoTestItem);
		entryMenu.add(JSeparator3);
		reportsMenu.setText("Print");
		reportsMenu.setActionCommand("Reports");
		entryMenu.add(reportsMenu);
		worksheetMenu.setText("Worksheets");
		worksheetMenu.setActionCommand("Worksheets");
		reportsMenu.add(worksheetMenu);
		wksheetItem.setEnabled(false);
		wksheetItem.setText("Current");
		wksheetItem.setActionCommand("Work Sheets");
		worksheetMenu.add(wksheetItem);
		wksheetCopyItem.setEnabled(false);
		wksheetCopyItem.setText("Copy");
		wksheetCopyItem.setActionCommand("Copy");
		worksheetMenu.add(wksheetCopyItem);
		lettersMenu.setText("Fax Letter Reprint");
		lettersMenu.setActionCommand("Letters");
		reportsMenu.add(lettersMenu);
		medLetterReprintItem.setEnabled(false);
		medLetterReprintItem.setText("Not Medically Necessary");
		medLetterReprintItem.setActionCommand("Reprint");
		lettersMenu.add(medLetterReprintItem);
		diagLetterReprintItem.setEnabled(false);
		diagLetterReprintItem.setText("Medicare Type");
		diagLetterReprintItem.setActionCommand("Reprint");
		lettersMenu.add(diagLetterReprintItem);
		infoLetterReprintItem.setEnabled(false);
		infoLetterReprintItem.setText("Missing Information");
		infoLetterReprintItem.setActionCommand("Reprint");
		lettersMenu.add(infoLetterReprintItem);
		CytoPathItem.setEnabled(false);
		CytoPathItem.setText("Cytopathology");
		CytoPathItem.setActionCommand("Cytopathology");
		reportsMenu.add(CytoPathItem);
		hpvItem.setText("HPV  Reports");
		hpvItem.setActionCommand("HPV  Reports");
		reportsMenu.add(hpvItem);
		HPVPendingItem.setEnabled(false);
		HPVPendingItem.setText("Pending HPV");
		HPVPendingItem.setActionCommand("Pending HPV");
		reportsMenu.add(HPVPendingItem);
		listsMenu.setText("Tools");
		JMenuBar1.add(listsMenu);
		maintMenu.setText("Maintain Codes");
		maintMenu.setActionCommand("Maintenance");
		listsMenu.add(maintMenu);
		diagItem.setEnabled(false);
		diagItem.setText("Diagnosis Codes");
		diagItem.setActionCommand("Diagnosis Codes");
		maintMenu.add(diagItem);
		resultCodeItem.setEnabled(false);
		resultCodeItem.setText("Result Codes");
		resultCodeItem.setActionCommand("Result Codes");
		maintMenu.add(resultCodeItem);
		pclassItem.setEnabled(false);
		pclassItem.setText("Pap Classes");
		pclassItem.setActionCommand("Pap Classes");
		maintMenu.add(pclassItem);
		procedureItem.setEnabled(false);
		procedureItem.setText("Procedure Codes");
		procedureItem.setActionCommand("Procedure Codes");
		maintMenu.add(procedureItem);
		tissueCodeItem.setText("Tissue Codes");
		tissueCodeItem.setActionCommand("Tissue Codes");
		maintMenu.add(tissueCodeItem);
		carrierListItem.setEnabled(false);
		carrierListItem.setText("List Payers");
		carrierListItem.setActionCommand("Insurance Carriers");
		listsMenu.add(carrierListItem);
		pracListItem.setEnabled(false);
		pracListItem.setText("List Practices");
		pracListItem.setActionCommand("Physician Practices");
		listsMenu.add(pracListItem);
		physicianListItem.setEnabled(false);
		physicianListItem.setText("List Physicians");
		physicianListItem.setActionCommand("Physicians");
		listsMenu.add(physicianListItem);
		listsMenu.add(JSeparator5);
		pracLabelItem.setEnabled(false);
		pracLabelItem.setText("Practice Address Labels");
		pracLabelItem.setActionCommand("Practice Address Labels");
		listsMenu.add(pracLabelItem);
		pcardItem.setEnabled(false);
		pcardItem.setText("Patient Cards");
		pcardItem.setActionCommand("Current");
		listsMenu.add(pcardItem);
		claimsMenu.setText("Claims");
		claimsMenu.setActionCommand("Claims");
		JMenuBar1.add(claimsMenu);
		elecClaimMenu.setText("Electronic Claims");
		elecClaimMenu.setActionCommand("Electronic Claims");
		claimsMenu.add(elecClaimMenu);
		submitItem.setEnabled(false);
		submitItem.setText("Build Claim File");
		submitItem.setActionCommand("Build Claim File");
		elecClaimMenu.add(submitItem);
		ackItem.setEnabled(false);
		ackItem.setText("Acknowledgement");
		ackItem.setActionCommand("Acknowledgement");
		elecClaimMenu.add(ackItem);
		paperClaimMenu.setText("Paper Claims");
		paperClaimMenu.setActionCommand("jmenu");
		claimsMenu.add(paperClaimMenu);
		hcfaMenu.setText("CMS 1500");
		hcfaMenu.setActionCommand("HCFA-1500");
		paperClaimMenu.add(hcfaMenu);
		pprBillQueueItem.setEnabled(false);
		pprBillQueueItem.setText("Print Claims");
		pprBillQueueItem.setActionCommand("Current Paper Claims");
		hcfaMenu.add(pprBillQueueItem);
		othLabelItem.setEnabled(false);
		othLabelItem.setText("Other Insurance Labels");
		othLabelItem.setActionCommand("Other Insurance Labels");
		hcfaMenu.add(othLabelItem);
		paDPWQueueItem.setEnabled(false);
		paDPWQueueItem.setText("Print PA DPW Claims");
		paDPWQueueItem.setActionCommand("Current Paper Claims");
		paDPWQueueItem.setVisible(false);
		paperClaimMenu.add(paDPWQueueItem);
		claimReprintItem.setText("Reprint Claims");
		claimReprintItem.setActionCommand("Reprint");
		paperClaimMenu.add(claimReprintItem);
		claimWksItem.setEnabled(false);
		claimWksItem.setText("Claim Worksheets");
		claimWksItem.setActionCommand("Claim Worksheets");
		claimsMenu.add(claimWksItem);
		accountsMenu.setText("Accounting");
		accountsMenu.setActionCommand("Accounts");
		JMenuBar1.add(accountsMenu);
		labBillingItem.setEnabled(false);
		labBillingItem.setText("Billing/Claim Payments");
		labBillingItem.setActionCommand("Lab Billings");
		accountsMenu.add(labBillingItem);
		accountsMenu.add(JSeparator8);
		practiceAcctItem.setEnabled(false);
		practiceAcctItem.setText("Practices");
		practiceAcctItem.setActionCommand("Practices");
		accountsMenu.add(practiceAcctItem);
		patientAcctItem.setEnabled(false);
		patientAcctItem.setText("Patients");
		patientAcctItem.setActionCommand("Patients");
		accountsMenu.add(patientAcctItem);
		accountsMenu.add(JSeparator2);
		statementMenu.setText("Statements");
		statementMenu.setActionCommand("Statements");
		accountsMenu.add(statementMenu);
		importItem.setText("Invoice Import File");
		importItem.setActionCommand("Invoice Import File");
		statementMenu.add(importItem);
		pracBillItem.setEnabled(false);
		pracBillItem.setText("Practices");
		pracBillItem.setActionCommand("One Practice");
		statementMenu.add(pracBillItem);
		patBillMenu.setText("Patients");
		patBillMenu.setActionCommand("Patients");
		statementMenu.add(patBillMenu);
		patBillQueue.setEnabled(false);
		patBillQueue.setText("Current");
		patBillQueue.setActionCommand("Current Patient Bills");
		patBillMenu.add(patBillQueue);
		patBillOne.setEnabled(false);
		patBillOne.setText("Copy");
		patBillOne.setActionCommand("Patient Bill");
		patBillMenu.add(patBillOne);
		mgmtMenu.setText("Management");
		JMenuBar1.add(mgmtMenu);
		BusinessItem.setEnabled(false);
		BusinessItem.setText("Business Information");
		BusinessItem.setActionCommand("Business Information");
		mgmtMenu.add(BusinessItem);
		staffMenu.setText("Staff");
		staffMenu.setActionCommand("Staff");
		mgmtMenu.add(staffMenu);
		CytotechsItem.setEnabled(false);
		CytotechsItem.setText("Cytotechs");
		CytotechsItem.setActionCommand("Cytotechs");
		staffMenu.add(CytotechsItem);
		PathsItem.setEnabled(false);
		PathsItem.setText("Pathologists");
		PathsItem.setActionCommand("Pathologists");
		staffMenu.add(PathsItem);
		addPayerItem.setEnabled(false);
		addPayerItem.setText("Process Payers");
		addPayerItem.setActionCommand("Process Payer File");
		mgmtMenu.add(addPayerItem);
		BillingQueueMenu.setText("Billing Queue");
		BillingQueueMenu.setActionCommand("Billing Queue");
		mgmtMenu.add(BillingQueueMenu);
		billingQueueItem.setEnabled(false);
		billingQueueItem.setText("Summary");
		billingQueueItem.setActionCommand("Billing Queue");
		BillingQueueMenu.add(billingQueueItem);
		patientBillItem.setText("Direct Bills");
		patientBillItem.setActionCommand("Direct Bills");
		BillingQueueMenu.add(patientBillItem);
		BillingQueueMenu.add(JSeparator9);
		billQueueRemoveItem.setEnabled(false);
		billQueueRemoveItem.setText("Remove Lab");
		billQueueRemoveItem.setActionCommand("Remove Lab");
		BillingQueueMenu.add(billQueueRemoveItem);
		letterQueueRemoveItem.setText("Remove Fax Letter");
		letterQueueRemoveItem.setActionCommand("Remove Fax Letter");
		BillingQueueMenu.add(letterQueueRemoveItem);
		finishedItem.setEnabled(false);
		finishedItem.setText("Unfinish Lab");
		finishedItem.setActionCommand("Unfinalize Lab");
		mgmtMenu.add(finishedItem);
		changeLabItem.setText("Lab Number Correction");
		changeLabItem.setActionCommand("Lab Number Correction");
		mgmtMenu.add(changeLabItem);
		recalcItem.setText("Recalculate Charges");
		recalcItem.setActionCommand("Recalculate");
		mgmtMenu.add(recalcItem);
		priceListItem.setEnabled(false);
		priceListItem.setText("Pricing");
		priceListItem.setActionCommand("Pricing Maintenance");
		mgmtMenu.add(priceListItem);
		securityItem.setEnabled(false);
		securityItem.setText("Set Restrictions");
		securityItem.setActionCommand("Function Security");
		mgmtMenu.add(securityItem);
		messageItem.setEnabled(false);
		messageItem.setText("Set Message");
		messageItem.setActionCommand("Set Message");
		mgmtMenu.add(messageItem);
		mgmtMenu.add(JSeparator4);
		mgmtReptMenu.setText("Reports");
		mgmtReptMenu.setActionCommand("Reports");
		mgmtMenu.add(mgmtReptMenu);
		summaryItem.setEnabled(false);
		summaryItem.setText("Doctor Summaries");
		summaryItem.setActionCommand("Doctor Summaries");
		mgmtReptMenu.add(summaryItem);
		agingItem.setEnabled(false);
		agingItem.setText("Account Aging");
		agingItem.setActionCommand("EOM Aging");
		agingItem.setVisible(false);
		mgmtReptMenu.add(agingItem);
		unsatisfactoryItem.setEnabled(false);
		unsatisfactoryItem.setText("Unsatisfactory PAP Smear");
		unsatisfactoryItem.setActionCommand("Unsatisfactory PAP Smear");
		mgmtReptMenu.add(unsatisfactoryItem);
		biopsyMenu.setText("Biopsy Request");
		biopsyMenu.setActionCommand("Biopsy Request");
		biopsyMenu.setNextFocusableComponent(agingItem);
		mgmtReptMenu.add(biopsyMenu);
		biopsyLtrItem.setEnabled(false);
		biopsyLtrItem.setText("Letters");
		biopsyLtrItem.setActionCommand("Letters");
		biopsyMenu.add(biopsyLtrItem);
		biopsySumItem.setEnabled(false);
		biopsySumItem.setText("Summary");
		biopsySumItem.setActionCommand("Summary");
		biopsyMenu.add(biopsySumItem);
		slidesMenu.setText("Slides Screened");
		slidesMenu.setActionCommand("Slides");
		mgmtReptMenu.add(slidesMenu);
		byTechItem.setEnabled(false);
		byTechItem.setText("By Cytotech");
		byTechItem.setActionCommand("By Cytotech");
		slidesMenu.add(byTechItem);
		byPathItem.setEnabled(false);
		byPathItem.setText("By Pathologist");
		byPathItem.setActionCommand("By Pathologist");
		slidesMenu.add(byPathItem);
		pastDueItem.setEnabled(false);
		pastDueItem.setText("Past Due Accounts");
		pastDueItem.setActionCommand("Past Due Accounts");
		pastDueItem.setVisible(false);
		mgmtReptMenu.add(pastDueItem);
		btSummaryItem.setEnabled(false);
		btSummaryItem.setText("Billing Type Summary");
		btSummaryItem.setActionCommand("Billing Type Summary");
		mgmtReptMenu.add(btSummaryItem);
		clinCaseItem.setText("Clinic Cases");
		clinCaseItem.setActionCommand("Clinic Cases");
		mgmtReptMenu.add(clinCaseItem);
		ascusHpvItem.setText("ASCUS - HPV");
		ascusHpvItem.setActionCommand("ASCUS - HPV");
		mgmtReptMenu.add(ascusHpvItem);
		ADPHreportsMenu.setText("ADPH Reports");
		ADPHreportsMenu.setActionCommand("ADPH Reports");
		mgmtReptMenu.add(ADPHreportsMenu);
		ADPHsummaryItem.setText("Summary");
		ADPHsummaryItem.setActionCommand("ADPH Summary");
		ADPHreportsMenu.add(ADPHsummaryItem);
		ADPHabnormalItem.setText("Summary of Abnormals");
		ADPHabnormalItem.setActionCommand("ADPH Summary of Abnormals");
		ADPHreportsMenu.add(ADPHabnormalItem);
		ADPHaschItem.setText("ASC-H/HPV Results");
		ADPHaschItem.setActionCommand("ADPH ASC-H/HPV Results");
		ADPHreportsMenu.add(ADPHaschItem);
		ADPHreportsMenu.add(JSeparator10);
		invSummMidItem.setText("MID Inv. Summ.");
		ADPHreportsMenu.add(invSummMidItem);
		invSummEomItem.setText("EOM Inv. Summ.");
		invSummEomItem.setActionCommand("End of Month");
		ADPHreportsMenu.add(invSummEomItem);
		WVreportsMenu.setText("WV Reports");
		WVreportsMenu.setActionCommand("WV Reports");
		mgmtReptMenu.add(WVreportsMenu);
		invSummItemFPP.setText("FPP Inv. Summ.");
		invSummItemFPP.setActionCommand("FPP Inv. Summ.");
		WVreportsMenu.add(invSummItemFPP);
		invSummItemBCCSP.setText("BCCSP Inv. Summ.");
		invSummItemBCCSP.setActionCommand("BCCSP Inv. Summ.");
		WVreportsMenu.add(invSummItemBCCSP);
		invSummMidItem.setActionCommand("Mid Month");
		mgmtReptMenu.add(JSeparator6);
		dailyReptItem.setEnabled(false);
		dailyReptItem.setText("Daily Report");
		dailyReptItem.setActionCommand("Daily Report");
		mgmtReptMenu.add(dailyReptItem);
		noResponseClaimItem.setEnabled(false);
		noResponseClaimItem.setText("No Response Claims");
		noResponseClaimItem.setActionCommand("Work Summary");
		mgmtReptMenu.add(noResponseClaimItem);
		lettersItem.setEnabled(false);
		lettersItem.setText("Fax Letters");
		lettersItem.setActionCommand("Work Summary");
		lettersItem.setVisible(false);
		mgmtReptMenu.add(lettersItem);
		labGapItem.setEnabled(false);
		labGapItem.setText("Lab Number Gaps");
		labGapItem.setActionCommand("Work Summary");
		mgmtReptMenu.add(labGapItem);
		btYearItem.setEnabled(false);
		btYearItem.setText("Billing Summary, Acct/Year");
		btYearItem.setActionCommand("Practice Billing Summary by Year");
		mgmtReptMenu.add(btYearItem);
		labStatusItem.setText("Lab Status");
		labStatusItem.setActionCommand("Lab Status");
		mgmtReptMenu.add(labStatusItem);
		commissionItem.setText("Commission");
		commissionItem.setActionCommand("Commission");
		mgmtReptMenu.add(commissionItem);
		CollectionsMenu.setEnabled(false);
		CollectionsMenu.setText("Collections");
		CollectionsMenu.setActionCommand("Collections");
		mgmtMenu.add(CollectionsMenu);
		collectionDequeueItem.setText("Dequeued");
		collectionDequeueItem.setActionCommand("Dequeued");
		CollectionsMenu.add(collectionDequeueItem);
		collectionQueueItem.setText("Queued");
		collectionQueueItem.setActionCommand("Queued");
		CollectionsMenu.add(collectionQueueItem);
		collectionCallItem.setText("Must Notify");
		collectionCallItem.setActionCommand("Must Notify");
		CollectionsMenu.add(collectionCallItem);
		copyCollectionItem.setText("Prior Batch");
		copyCollectionItem.setActionCommand("Existing");
		CollectionsMenu.add(copyCollectionItem);
		turnAroundItem.setText("Turn Around Times");
		turnAroundItem.setActionCommand("Turn Around Times");
		mgmtMenu.add(turnAroundItem);
		specialItem.setText("Special Tasks");
		specialItem.setActionCommand("Special Tasks");
		mgmtMenu.add(specialItem);
		helpMenu.setText("Help");
		helpMenu.setActionCommand("Help");
		JMenuBar1.add(helpMenu);
		aboutItem.setHorizontalTextPosition(SwingConstants.RIGHT);
		aboutItem.setText("About...");
		aboutItem.setActionCommand("About...");
		helpMenu.add(aboutItem);
		pprClaimOption.setMessageType(JOptionPane.QUESTION_MESSAGE);
		// $$ pprClaimOption.move(0,489);
		// $$ wksheetOption.move(24,489);
		recvDateWarning.setMessageType(JOptionPane.WARNING_MESSAGE);
		// $$ recvDateWarning.move(48,489);
		printerConfirm.setMessageType(JOptionPane.QUESTION_MESSAGE);
		// $$ printerConfirm.move(72,489);
		JLabel1.setText("jlabel");
		getContentPane().add(JLabel1);
		JLabel1.setBounds(0, 0, 20, 40);
		// $$ JOptionPane1.move(48,489);
		mgmtMenu.setActionCommand("jmenu");
		listsMenu.setActionCommand("jmenu");
		// }}

		// {{INIT_MENUS
		// }}

		// {{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		exitItem.addActionListener(lSymAction);
		aboutItem.addActionListener(lSymAction);
		DbLogin.addActionListener(lSymAction);
		PracticesItem.addActionListener(lSymAction);
		LabsItem.addActionListener(lSymAction);
		CarriersItem.addActionListener(lSymAction);
		CytotechsItem.addActionListener(lSymAction);
		ResultsItem.addActionListener(lSymAction);
		CytoPathItem.addActionListener(lSymAction);
		diagItem.addActionListener(lSymAction);
		resultCodeItem.addActionListener(lSymAction);
		procedureItem.addActionListener(lSymAction);
		priceListItem.addActionListener(lSymAction);
		labBillingItem.addActionListener(lSymAction);
		PathsItem.addActionListener(lSymAction);
		pracListItem.addActionListener(lSymAction);
		physicianListItem.addActionListener(lSymAction);
		patBillQueue.addActionListener(lSymAction);
		pclassItem.addActionListener(lSymAction);
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		submitItem.addActionListener(lSymAction);
		pprBillQueueItem.addActionListener(lSymAction);
		billingQueueItem.addActionListener(lSymAction);
		patBillOne.addActionListener(lSymAction);
		practiceAcctItem.addActionListener(lSymAction);
		pracBillItem.addActionListener(lSymAction);
		BusinessItem.addActionListener(lSymAction);
		patientAcctItem.addActionListener(lSymAction);
		wksheetItem.addActionListener(lSymAction);
		paDPWQueueItem.addActionListener(lSymAction);
		summaryItem.addActionListener(lSymAction);
		othLabelItem.addActionListener(lSymAction);
		pcardItem.addActionListener(lSymAction);
		agingItem.addActionListener(lSymAction);
		btSummaryItem.addActionListener(lSymAction);
		unsatisfactoryItem.addActionListener(lSymAction);
		biopsyLtrItem.addActionListener(lSymAction);
		biopsySumItem.addActionListener(lSymAction);
		byTechItem.addActionListener(lSymAction);
		byPathItem.addActionListener(lSymAction);
		dailyReptItem.addActionListener(lSymAction);
		noResponseClaimItem.addActionListener(lSymAction);
		ackItem.addActionListener(lSymAction);
		medLetterReprintItem.addActionListener(lSymAction);
		diagLetterReprintItem.addActionListener(lSymAction);
		infoLetterReprintItem.addActionListener(lSymAction);
		lettersItem.addActionListener(lSymAction);
		labGapItem.addActionListener(lSymAction);
		wksheetCopyItem.addActionListener(lSymAction);
		addPayerItem.addActionListener(lSymAction);
		recvDateItem.addActionListener(lSymAction);
		passwordItem.addActionListener(lSymAction);
		btYearItem.addActionListener(lSymAction);
		billQueueRemoveItem.addActionListener(lSymAction);
		messageItem.addActionListener(lSymAction);
		claimReprintItem.addActionListener(lSymAction);
		carrierListItem.addActionListener(lSymAction);
		pracLabelItem.addActionListener(lSymAction);
		finishedItem.addActionListener(lSymAction);
		claimWksItem.addActionListener(lSymAction);
		jobItem.addActionListener(lSymAction);
		freeSpaceItem.addActionListener(lSymAction);
		suspendJobItem.addActionListener(lSymAction);
		jobOffItem.addActionListener(lSymAction);
		resubmitJobItem.addActionListener(lSymAction);
		collectionDequeueItem.addActionListener(lSymAction);
		collectionQueueItem.addActionListener(lSymAction);
		collectionCallItem.addActionListener(lSymAction);
		dailyJobItem.addActionListener(lSymAction);
		traceItem.addActionListener(lSymAction);
		copyCollectionItem.addActionListener(lSymAction);
		patientBillItem.addActionListener(lSymAction);
		recalcItem.addActionListener(lSymAction);
		fixAccount.addActionListener(lSymAction);
		changeLabItem.addActionListener(lSymAction);
		HPVPendingItem.addActionListener(lSymAction);
		HPVNoTestItem.addActionListener(lSymAction);
		pastDueItem.addActionListener(lSymAction);
		labStatusItem.addActionListener(lSymAction);
		clinCaseItem.addActionListener(lSymAction);
		turnAroundItem.addActionListener(lSymAction);
		ascusHpvItem.addActionListener(lSymAction);
		ADPHsummaryItem.addActionListener(lSymAction);
		TissuePathItem.addActionListener(lSymAction);
		commissionItem.addActionListener(lSymAction);
		midBillItem.addActionListener(lSymAction);
		importItem.addActionListener(lSymAction);
		adphPgmItem.addActionListener(lSymAction);
		ADPHabnormalItem.addActionListener(lSymAction);
		ADPHaschItem.addActionListener(lSymAction);
		specialItem.addActionListener(lSymAction);
		specificRecvDateItem.addActionListener(lSymAction);
		invSummMidItem.addActionListener(lSymAction);
		invSummEomItem.addActionListener(lSymAction);
		HPVitem.addActionListener(lSymAction);
		letterQueueRemoveItem.addActionListener(lSymAction);
		tissueCodeItem.addActionListener(lSymAction);
		invSummItemFPP.addActionListener(lSymAction);
		invSummItemBCCSP.addActionListener(lSymAction);
		hpvItem.addActionListener(lSymAction);
		eomItem.addActionListener(lSymAction);
		// }}

		setTitle("PCS LabInfoSystem 2.0");
		Utils.setColors(this.getContentPane());
		this.repaint();

	}

	/**
	 * Creates a new instance of JFrame1 with the given title.
	 * 
	 * @param sTitle
	 *            the title for the new frame.
	 * @see #JFrame1()
	 */
	public PCSLabEntry(String sTitle) {
		this();
		setTitle(sTitle);
	}

	/**
	 * The entry point for this application. Sets the Look and Feel to the
	 * System Look and Feel. Creates a new JFrame1 and makes it visible.
	 */
	static public void main(String args[]) {
		try {
			// Add the following code if you want the Look and Feel
			// to be set to the Look and Feel of the native system.
			try {
				UIManager.setLookAndFeel(UIManager
						.getSystemLookAndFeelClassName());
			} catch (Exception e) {
			}
			// Create a new instance of our application's frame, and make it
			// visible.
			(new PCSLabEntry()).setVisible(true);
		} catch (Throwable t) {
			t.printStackTrace();
			// Ensure the application exits with an error condition.
			System.exit(1);
		}
	}

	/**
	 * Notifies this component that it has been added to a container This method
	 * should be called by <code>Container.add</code>, and not by user code
	 * directly. Overridden here to adjust the size of the frame if needed.
	 * 
	 * @see java.awt.Container#removeNotify
	 */
	public void addNotify() {
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top
				+ insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	// {{DECLARE_CONTROLS
	JPanel JPanel2 = new JPanel();
	JPanel JPanel1 = new JPanel();
	JLabel currentMsg = new JLabel();
	JOptionPane pprClaimOption = new JOptionPane();
	JOptionPane wksheetOption = new JOptionPane();
	JOptionPane recvDateWarning = new JOptionPane();
	JOptionPane printerConfirm = new JOptionPane();
	JLabel JLabel1 = new JLabel();
	JMenuBar JMenuBar1 = new JMenuBar();
	JMenu dbMenu = new JMenu();
	JMenuItem DbLogin = new JMenuItem();
	JMenuItem passwordItem = new JMenuItem();
	JSeparator JSeparator1 = new JSeparator();
	JMenu adminMenu = new JMenu();
	JMenuItem freeSpaceItem = new JMenuItem();
	JMenu jobMenu = new JMenu();
	JMenuItem jobItem = new JMenuItem();
	JMenuItem suspendJobItem = new JMenuItem();
	JMenuItem jobOffItem = new JMenuItem();
	JMenuItem resubmitJobItem = new JMenuItem();
	JMenu logMenu = new JMenu();
	JMenuItem dailyJobItem = new JMenuItem();
	JMenuItem traceItem = new JMenuItem();
	JMenuItem fixAccount = new JMenuItem();
	JMenuItem midBillItem = new JMenuItem();
	JMenuItem eomItem = new JMenuItem();
	JMenuItem adphPgmItem = new JMenuItem();
	JSeparator JSeparator7 = new JSeparator();
	JMenuItem exitItem = new JMenuItem();
	JMenu entryMenu = new JMenu();
	JMenuItem LabsItem = new JMenuItem();
	JMenuItem ResultsItem = new JMenuItem();
	JMenuItem TissuePathItem = new JMenuItem();
	JMenuItem PracticesItem = new JMenuItem();
	JMenuItem CarriersItem = new JMenuItem();
	JMenu ReceiveDateMenu = new JMenu();
	JMenuItem recvDateItem = new JMenuItem();
	JMenuItem specificRecvDateItem = new JMenuItem();
	JMenuItem HPVitem = new JMenuItem();
	JMenuItem HPVNoTestItem = new JMenuItem();
	JSeparator JSeparator3 = new JSeparator();
	JMenu reportsMenu = new JMenu();
	JMenu worksheetMenu = new JMenu();
	JMenuItem wksheetItem = new JMenuItem();
	JMenuItem wksheetCopyItem = new JMenuItem();
	JMenu lettersMenu = new JMenu();
	JMenuItem medLetterReprintItem = new JMenuItem();
	JMenuItem diagLetterReprintItem = new JMenuItem();
	JMenuItem infoLetterReprintItem = new JMenuItem();
	JMenuItem CytoPathItem = new JMenuItem();
	JMenuItem hpvItem = new JMenuItem();
	JMenuItem HPVPendingItem = new JMenuItem();
	JMenu listsMenu = new JMenu();
	JMenu maintMenu = new JMenu();
	JMenuItem diagItem = new JMenuItem();
	JMenuItem resultCodeItem = new JMenuItem();
	JMenuItem pclassItem = new JMenuItem();
	JMenuItem procedureItem = new JMenuItem();
	JMenuItem tissueCodeItem = new JMenuItem();
	JMenuItem carrierListItem = new JMenuItem();
	JMenuItem pracListItem = new JMenuItem();
	JMenuItem physicianListItem = new JMenuItem();
	JSeparator JSeparator5 = new JSeparator();
	JMenuItem pracLabelItem = new JMenuItem();
	JMenuItem pcardItem = new JMenuItem();
	JMenu claimsMenu = new JMenu();
	JMenu elecClaimMenu = new JMenu();
	JMenuItem submitItem = new JMenuItem();
	JMenuItem ackItem = new JMenuItem();
	JMenu paperClaimMenu = new JMenu();
	JMenu hcfaMenu = new JMenu();
	JMenuItem pprBillQueueItem = new JMenuItem();
	JMenuItem othLabelItem = new JMenuItem();
	JMenuItem paDPWQueueItem = new JMenuItem();
	JMenuItem claimReprintItem = new JMenuItem();
	JMenuItem claimWksItem = new JMenuItem();
	JMenu accountsMenu = new JMenu();
	JMenuItem labBillingItem = new JMenuItem();
	JSeparator JSeparator8 = new JSeparator();
	JMenuItem practiceAcctItem = new JMenuItem();
	JMenuItem patientAcctItem = new JMenuItem();
	JSeparator JSeparator2 = new JSeparator();
	JMenu statementMenu = new JMenu();
	JMenuItem importItem = new JMenuItem();
	JMenuItem pracBillItem = new JMenuItem();
	JMenu patBillMenu = new JMenu();
	JMenuItem patBillQueue = new JMenuItem();
	JMenuItem patBillOne = new JMenuItem();
	JMenu mgmtMenu = new JMenu();
	JMenuItem BusinessItem = new JMenuItem();
	JMenu staffMenu = new JMenu();
	JMenuItem CytotechsItem = new JMenuItem();
	JMenuItem PathsItem = new JMenuItem();
	JMenuItem addPayerItem = new JMenuItem();
	JMenu BillingQueueMenu = new JMenu();
	JMenuItem billingQueueItem = new JMenuItem();
	JMenuItem patientBillItem = new JMenuItem();
	JSeparator JSeparator9 = new JSeparator();
	JMenuItem billQueueRemoveItem = new JMenuItem();
	JMenuItem letterQueueRemoveItem = new JMenuItem();
	JMenuItem finishedItem = new JMenuItem();
	JMenuItem changeLabItem = new JMenuItem();
	JMenuItem recalcItem = new JMenuItem();
	JMenuItem priceListItem = new JMenuItem();
	JMenuItem securityItem = new JMenuItem();
	JMenuItem messageItem = new JMenuItem();
	JSeparator JSeparator4 = new JSeparator();
	JMenu mgmtReptMenu = new JMenu();
	JMenuItem summaryItem = new JMenuItem();
	JMenuItem agingItem = new JMenuItem();
	JMenuItem unsatisfactoryItem = new JMenuItem();
	JMenu biopsyMenu = new JMenu();
	JMenuItem biopsyLtrItem = new JMenuItem();
	JMenuItem biopsySumItem = new JMenuItem();
	JMenu slidesMenu = new JMenu();
	JMenuItem byTechItem = new JMenuItem();
	JMenuItem byPathItem = new JMenuItem();
	JMenuItem pastDueItem = new JMenuItem();
	JMenuItem btSummaryItem = new JMenuItem();
	JMenuItem clinCaseItem = new JMenuItem();
	JMenuItem ascusHpvItem = new JMenuItem();
	JMenu ADPHreportsMenu = new JMenu();
	JMenuItem ADPHsummaryItem = new JMenuItem();
	JMenuItem ADPHabnormalItem = new JMenuItem();
	JMenuItem ADPHaschItem = new JMenuItem();
	JSeparator JSeparator10 = new JSeparator();
	JMenuItem invSummMidItem = new JMenuItem();
	JMenuItem invSummEomItem = new JMenuItem();
	JMenu WVreportsMenu = new JMenu();
	JMenuItem invSummItemFPP = new JMenuItem();
	JMenuItem invSummItemBCCSP = new JMenuItem();
	JSeparator JSeparator6 = new JSeparator();
	JMenuItem dailyReptItem = new JMenuItem();
	JMenuItem noResponseClaimItem = new JMenuItem();
	JMenuItem lettersItem = new JMenuItem();
	JMenuItem labGapItem = new JMenuItem();
	JMenuItem btYearItem = new JMenuItem();
	JMenuItem labStatusItem = new JMenuItem();
	JMenuItem commissionItem = new JMenuItem();
	JMenu CollectionsMenu = new JMenu();
	JMenuItem collectionDequeueItem = new JMenuItem();
	JMenuItem collectionQueueItem = new JMenuItem();
	JMenuItem collectionCallItem = new JMenuItem();
	JMenuItem copyCollectionItem = new JMenuItem();
	JMenuItem turnAroundItem = new JMenuItem();
	JMenuItem specialItem = new JMenuItem();
	JMenu helpMenu = new JMenu();
	JMenuItem aboutItem = new JMenuItem();

	// }}

	// {{DECLARE_MENUS
	// }}

	void exitApplication() {
		try {
			// Show a confirmation dialog
			int reply = JOptionPane.showConfirmDialog(this,
					"Do you really want to exit?",
					"PCS Lab Information System", JOptionPane.YES_NO_OPTION,
					JOptionPane.QUESTION_MESSAGE);
			// If the confirmation was affirmative, handle exiting.
			if (reply == JOptionPane.YES_OPTION) {
				if (logOpen)
					log.stop();
				if (dbLogin.loginEstablished)
					DbConnection.close(); // close Oracle connection
				this.setVisible(false); // hide the Frame
				this.dispose(); // free the system resources
				System.exit(0); // close the application
			}
		} catch (Exception e) {
			System.out.println("ERROR: exitApplication\n" + e);
		}
	}

	class SymWindow extends java.awt.event.WindowAdapter {
		public void windowOpened(java.awt.event.WindowEvent event) {
			Object object = event.getSource();
			if (object == PCSLabEntry.this)
				PCSLabEntry_windowOpened(event);
		}

		public void windowClosing(java.awt.event.WindowEvent event) {
			Object object = event.getSource();
			if (object == PCSLabEntry.this)
				PCSLabEntry_windowClosing(event);
		}
	}

	void PCSLabEntry_windowClosing(java.awt.event.WindowEvent event) {
		exitApplication();
	}

	class SymAction implements java.awt.event.ActionListener {
		public void actionPerformed(java.awt.event.ActionEvent event) {
			Object object = event.getSource();
			if (object == exitItem)
				exitItem_actionPerformed(event);
			else if (object == aboutItem)
				aboutItem_actionPerformed(event);
			else if (object == DbLogin)
				DbLogin_actionPerformed(event);
			else if (object == PracticesItem)
				PracticesItem_actionPerformed(event);
			else if (object == LabsItem)
				LabsItem_actionPerformed(event);
			if (object == CarriersItem)
				CarriersItem_actionPerformed(event);
			else if (object == CytotechsItem)
				CytotechsItem_actionPerformed(event);
			else if (object == ResultsItem)
				ResultsItem_actionPerformed(event);
			else if (object == CytoPathItem)
				CytoPathItem_actionPerformed(event);
			else if (object == diagItem)
				diagItem_actionPerformed(event);
			else if (object == resultCodeItem)
				resultCodeItem_actionPerformed(event);
			else if (object == procedureItem)
				procedureItem_actionPerformed(event);
			else if (object == priceListItem)
				priceListItem_actionPerformed(event);
			else if (object == labBillingItem)
				labBillingItem_actionPerformed(event);
			else if (object == PathsItem)
				PathsItem_actionPerformed(event);
			else if (object == pracListItem)
				pracListItem_actionPerformed(event);
			else if (object == physicianListItem)
				physicianListItem_actionPerformed(event);
			else if (object == patBillQueue)
				patBillQueue_actionPerformed(event);
			else if (object == pclassItem)
				pclassItem_actionPerformed(event);
			if (object == submitItem)
				submitItem_actionPerformed(event);
			else if (object == pprBillQueueItem)
				pprBillQueueItem_actionPerformed(event);
			if (object == billingQueueItem)
				billingQueueItem_actionPerformed(event);
			else if (object == patBillOne)
				patBillOne_actionPerformed(event);
			else if (object == practiceAcctItem)
				practiceAcctItem_actionPerformed(event);
			if (object == pracBillItem)
				pracBillItem_actionPerformed(event);
			else if (object == BusinessItem)
				BusinessItem_actionPerformed(event);
			else if (object == patientAcctItem)
				patientAcctItem_actionPerformed(event);
			else if (object == wksheetItem)
				wksheetItem_actionPerformed(event);
			else if (object == paDPWQueueItem)
				paDPWQueueItem_actionPerformed(event);
			if (object == summaryItem)
				summaryItem_actionPerformed(event);
			else if (object == othLabelItem)
				othLabelItem_actionPerformed(event);
			else if (object == pcardItem)
				pcardItem_actionPerformed(event);
			if (object == agingItem)
				agingItem_actionPerformed(event);
			else if (object == btSummaryItem)
				btSummaryItem_actionPerformed(event);
			else if (object == unsatisfactoryItem)
				unsatisfactoryItem_actionPerformed(event);
			if (object == biopsyLtrItem)
				biopsyLtrItem_actionPerformed(event);
			else if (object == biopsySumItem)
				biopsySumItem_actionPerformed(event);
			else if (object == byTechItem)
				byTechItem_actionPerformed(event);
			else if (object == byPathItem)
				byPathItem_actionPerformed(event);

			if (object == dailyReptItem)
				dailyReptItem_actionPerformed(event);
			if (object == noResponseClaimItem)
				noResponseClaimItem_actionPerformed(event);
			else if (object == ackItem)
				ackItem_actionPerformed(event);
			else if (object == medLetterReprintItem)
				medLetterReprintItem_actionPerformed(event);
			if (object == diagLetterReprintItem)
				diagLetterReprintItem_actionPerformed(event);
			if (object == infoLetterReprintItem)
				infoLetterReprintItem_actionPerformed(event);
			else if (object == lettersItem)
				lettersItem_actionPerformed(event);
			else if (object == labGapItem)
				labGapItem_actionPerformed(event);
			else if (object == wksheetCopyItem)
				wksheetCopyItem_actionPerformed(event);
			else if (object == addPayerItem)
				addPayerItem_actionPerformed(event);
			else if (object == recvDateItem)
				recvDateItem_actionPerformed(event);
			else if (object == passwordItem)
				passwordItem_actionPerformed(event);
			else if (object == btYearItem)
				btYearItem_actionPerformed(event);
			else if (object == billQueueRemoveItem)
				billQueueRemoveItem_actionPerformed(event);
			else if (object == messageItem)
				messageItem_actionPerformed(event);
			else if (object == claimReprintItem)
				claimReprintItem_actionPerformed(event);
			else if (object == carrierListItem)
				carrierListItem_actionPerformed(event);
			else if (object == pracLabelItem)
				pracLabelItem_actionPerformed(event);
			else if (object == finishedItem)
				finishedItem_actionPerformed(event);
			else if (object == claimWksItem)
				claimWksItem_actionPerformed(event);
			else if (object == jobItem)
				jobItem_actionPerformed(event);
			else if (object == freeSpaceItem)
				freeSpaceItem_actionPerformed(event);
			else if (object == suspendJobItem)
				suspendJobItem_actionPerformed(event);
			else if (object == jobOffItem)
				jobOffItem_actionPerformed(event);
			else if (object == resubmitJobItem)
				resubmitJobItem_actionPerformed(event);
			else if (object == collectionDequeueItem)
				collectionDequeueItem_actionPerformed(event);
			else if (object == collectionQueueItem)
				collectionQueueItem_actionPerformed(event);
			else if (object == collectionCallItem)
				collectionCallItem_actionPerformed(event);
			if (object == dailyJobItem)
				dailyJobItem_actionPerformed(event);
			else if (object == traceItem)
				traceItem_actionPerformed(event);
			else if (object == copyCollectionItem)
				copyCollectionItem_actionPerformed(event);
			else if (object == patientBillItem)
				patientBillItem_actionPerformed(event);
			else if (object == recalcItem)
				recalcItem_actionPerformed(event);
			else if (object == changeLabItem)
				changeLabItem_actionPerformed(event);
			else if (object == HPVPendingItem)
				HPVPendingItem_actionPerformed(event);
			else if (object == HPVNoTestItem)
				HPVNoTestItem_actionPerformed(event);
			else if (object == pastDueItem)
				pastDueItem_actionPerformed(event);
			else if (object == labStatusItem)
				labStatusItem_actionPerformed(event);
			else if (object == clinCaseItem)
				clinCaseItem_actionPerformed(event);
			else if (object == turnAroundItem)
				turnAroundItem_actionPerformed(event);
			else if (object == ascusHpvItem)
				ascusHpvItem_actionPerformed(event);
			else if (object == ADPHsummaryItem)
				ADPHsummaryItem_actionPerformed(event);
			else if (object == TissuePathItem)
				TissuePathItem_actionPerformed(event);
			else if (object == commissionItem)
				commissionItem_actionPerformed(event);
			else if (object == midBillItem)
				midBillItem_actionPerformed(event);
			else if (object == importItem)
				importItem_actionPerformed(event);
			else if (object == adphPgmItem)
				adphPgmItem_actionPerformed(event);
			else if (object == ADPHabnormalItem)
				ADPHabnormalItem_actionPerformed(event);
			else if (object == ADPHaschItem)
				ADPHaschItem_actionPerformed(event);
			else if (object == specialItem)
				specialItem_actionPerformed(event);
			else if (object == specificRecvDateItem)
				specificRecvDateItem_actionPerformed(event);
			else if (object == invSummMidItem)
				invSummMidItem_actionPerformed(event);
			else if (object == invSummEomItem)
				invSummEomItem_actionPerformed(event);
			else if (object == HPVitem)
				HPVitem_actionPerformed(event);
			else if (object == letterQueueRemoveItem)
				letterQueueRemoveItem_actionPerformed(event);
			else if (object == tissueCodeItem)
				tissueCodeItem_actionPerformed(event);
			else if (object == invSummItemFPP)
				invSummItemFPP_actionPerformed(event);
			else if (object == invSummItemBCCSP)
				invSummItemBCCSP_actionPerformed(event);
			else if (object == hpvItem)
				hpvItem_actionPerformed(event);
			else if (object == eomItem)
				eomItem_actionPerformed(event);

		}
	}

	void exitItem_actionPerformed(java.awt.event.ActionEvent event) {
		exitApplication();
	}

	void aboutItem_actionPerformed(java.awt.event.ActionEvent event) {
		aboutItem_actionPerformed_Interaction1(event);
	}

	void aboutItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// JAboutDialog Create with owner and show as modal
			{
				JAboutDialog JAboutDialog1 = new JAboutDialog(this);
				JAboutDialog1.setModal(true);
				JAboutDialog1.show();
			}
		} catch (Exception e) {
			log.write("ERROR: aboutItem_actionPerformed_Interaction1\n" + e);
		}
	}

	void DbLogin_actionPerformed(java.awt.event.ActionEvent event) {
		DbLogin_actionPerformed_Interaction1(event);
	}

	public void DbLogin_actionPerformed_Interaction1(
			java.awt.event.ActionEvent event) {
		invokeLogin();
	}

	public void invokeLogin() {
		try {
			this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
			DbUser DbUser1 = new DbUser(this);
			DbUser1.show();
			if (this.dbLogin.loginEstablished) {
				this.log = new LogFile(dbLogin.logPath, "PCSLabEntry",
						dbLogin.dateToday, dbLogin.userName);
				logOpen = true;
				boolean rv = dbLogin.initializeApplication();
				if (rv) {
					this.currentMsg.setBackground(new Color(
							dbLogin.messageBackground));
					this.currentMsg.setForeground(new Color(
							dbLogin.messageForeground));
					this.currentMsg.setText(dbLogin.currentMessage);
					this.currentMsg.setVisible(true);
					this.DbLogin.setEnabled(false);
					this.passwordItem.setEnabled(true);
					this.PracticesItem.setEnabled(!dbLogin
							.hasRestriction("PracticesItem"));
					this.LabsItem.setEnabled(!dbLogin
							.hasRestriction("LabsItem"));
					this.TissuePathItem.setEnabled(!dbLogin
							.hasRestriction("TissuePathItem"));
					this.CarriersItem.setEnabled(!dbLogin
							.hasRestriction("CarriersItem"));
					this.CytotechsItem.setEnabled(!dbLogin
							.hasRestriction("CytotechsItem"));
					this.ResultsItem.setEnabled(!dbLogin
							.hasRestriction("ResultsItem"));
					this.CytoPathItem.setEnabled(!dbLogin
							.hasRestriction("CytoPathItem"));
					this.diagItem.setEnabled(!dbLogin
							.hasRestriction("diagItem"));
					this.resultCodeItem.setEnabled(!dbLogin
							.hasRestriction("resultsItem"));
					this.procedureItem.setEnabled(!dbLogin
							.hasRestriction("procedureItem"));
					this.priceListItem.setEnabled(!dbLogin
							.hasRestriction("LabsItem"));
					this.labBillingItem.setEnabled(!dbLogin
							.hasRestriction("LabBillingItem"));
					this.PathsItem.setEnabled(!dbLogin
							.hasRestriction("PathsItem"));
					this.physicianListItem.setEnabled(!dbLogin
							.hasRestriction("physicianListItem"));
					this.patBillQueue.setEnabled(!dbLogin
							.hasRestriction("patBillQueue"));
					this.pclassItem.setEnabled(!dbLogin
							.hasRestriction("pclassItem"));
					this.submitItem.setEnabled(!dbLogin
							.hasRestriction("submitItem"));
					this.pprBillQueueItem.setEnabled(!dbLogin
							.hasRestriction("pprBillQueueItem"));
					this.billingQueueItem.setEnabled(!dbLogin
							.hasRestriction("billingQueueItem"));
					this.patBillOne.setEnabled(!dbLogin
							.hasRestriction("patBillOne"));
					this.practiceAcctItem.setEnabled(!dbLogin
							.hasRestriction("practiceAcctItem"));
					this.pracBillItem.setEnabled(!dbLogin
							.hasRestriction("pracBillOne"));
					this.BusinessItem.setEnabled(!dbLogin
							.hasRestriction("BusinessItem"));
					this.patientAcctItem.setEnabled(!dbLogin
							.hasRestriction("patientAcctItem"));
					this.worksheetMenu.setEnabled(!dbLogin
							.hasRestriction("worksheetMenu"));
					this.wksheetItem.setEnabled(!dbLogin
							.hasRestriction("wksheetItem"));
					this.paDPWQueueItem.setEnabled(!dbLogin
							.hasRestriction("paDPWQueueItem"));
					this.summaryItem.setEnabled(!dbLogin
							.hasRestriction("summaryCopy"));
					this.othLabelItem.setEnabled(!dbLogin
							.hasRestriction("othLabelItemItem"));
					this.pcardItem.setEnabled(!dbLogin
							.hasRestriction("pcardCurrent"));
					this.agingItem.setEnabled(!dbLogin
							.hasRestriction("agingItem"));
					this.pastDueItem.setEnabled(!dbLogin
							.hasRestriction("pastDueItem"));
					this.btSummaryItem.setEnabled(!dbLogin
							.hasRestriction("btSummaryItem"));
					this.unsatisfactoryItem.setEnabled(!dbLogin
							.hasRestriction("unsatisfactoryItem"));
					this.biopsyLtrItem.setEnabled(!dbLogin
							.hasRestriction("biopsyLtrItem"));
					this.biopsySumItem.setEnabled(!dbLogin
							.hasRestriction("biopsySumItem"));
					this.byPathItem.setEnabled(!dbLogin
							.hasRestriction("byPathItem"));
					this.byTechItem.setEnabled(!dbLogin
							.hasRestriction("byTechItem"));
					this.pracListItem.setEnabled(!dbLogin
							.hasRestriction("pracListItem"));
					this.carrierListItem.setEnabled(!dbLogin
							.hasRestriction("carrierListItem"));
					this.dailyReptItem.setEnabled(!dbLogin
							.hasRestriction("dailyReptItem"));
					this.noResponseClaimItem.setEnabled(!dbLogin
							.hasRestriction("noResponseClaimItem"));
					this.ackItem.setEnabled(!dbLogin.hasRestriction("ackItem"));
					this.medLetterReprintItem.setEnabled(!dbLogin
							.hasRestriction("medLetterReprintItem"));
					this.diagLetterReprintItem.setEnabled(!dbLogin
							.hasRestriction("diagLetterReprintItem"));
					this.infoLetterReprintItem.setEnabled(!dbLogin
							.hasRestriction("infoLetterReprintItem"));
					this.lettersItem.setEnabled(!dbLogin
							.hasRestriction("lettersItem"));
					this.labGapItem.setEnabled(!dbLogin
							.hasRestriction("labGapItem"));
					this.wksheetCopyItem.setEnabled(!dbLogin
							.hasRestriction("wksheetCopyItem"));
					this.addPayerItem.setEnabled(!dbLogin
							.hasRestriction("adedPayerItem"));
					this.recvDateItem.setEnabled(!dbLogin
							.hasRestriction("recvDateItem"));
					this.btYearItem.setEnabled(!dbLogin
							.hasRestriction("btYearItem"));
					this.securityItem.setEnabled(!dbLogin
							.hasRestriction("securityItem"));
					this.billQueueRemoveItem.setEnabled(!dbLogin
							.hasRestriction("billQueueRemoveItem"));
					this.messageItem.setEnabled(!dbLogin
							.hasRestriction("messageItem"));
					this.claimReprintItem.setEnabled(!dbLogin
							.hasRestriction("claimReprintItem"));
					this.pracLabelItem.setEnabled(!dbLogin
							.hasRestriction("pracLabelItem"));
					this.finishedItem.setEnabled(!dbLogin
							.hasRestriction("finishedItem"));
					this.claimWksItem.setEnabled(!dbLogin
							.hasRestriction("claimWksItem"));
					this.HPVPendingItem.setEnabled(!dbLogin
							.hasRestriction("HPVPendingItem"));
					// this.HPVNoTestItem.setEnabled(
					// !dbLogin.hasRestriction("HPVNoTestItem"));
					/* ONLY CODE FOR REQURIED MENU RESTRICTIONS HERE */

					// ALL TOP LEVEL MENUS
					this.entryMenu.setEnabled(!dbLogin
							.hasRestriction("entryMenu"));
					this.reportsMenu.setEnabled(!dbLogin
							.hasRestriction("reportsMenu"));
					this.listsMenu.setEnabled(!dbLogin
							.hasRestriction("listsMenu"));
					this.claimsMenu.setEnabled(!dbLogin
							.hasRestriction("claimsMenu"));
					this.accountsMenu.setEnabled(!dbLogin
							.hasRestriction("accountsMenu"));
					this.mgmtMenu.setEnabled(!dbLogin
							.hasRestriction("mgmtMenu"));

					// SUB-MENUS THAT CAN BE RESTRICTED
					this.elecClaimMenu.setEnabled(!dbLogin
							.hasRestriction("elecClaimMenu"));
					this.paperClaimMenu.setEnabled(!dbLogin
							.hasRestriction("paperClaimMenu"));
					this.adminMenu.setEnabled(!dbLogin
							.hasRestriction("adminMenu"));
					this.CollectionsMenu.setEnabled(!dbLogin
							.hasRestriction("CollectionsMenu"));

					d = new DbConnection(dbLogin);
				} else
					Utils.createErrMsg("FATAL ERROR");
				this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
			}
		} catch (Exception e) {
			log.write("ERROR: invokeLogin\n" + e);
		}
		if (!dbLogin.hasLatestRecvDate && dbLogin.loginEstablished) {
			recvDateWarning.showConfirmDialog(this, "Prior day's receive date "
					+ dbLogin.latestRecvDate + " has not been input.\n"
					+ "                         Please notify management.",
					"WARNING", recvDateWarning.DEFAULT_OPTION,
					recvDateWarning.WARNING_MESSAGE);
		}

	}

	void PracticesItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new PracticesForm(dbLogin)).setVisible(true);
	}

	void LabsItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new LabForm(dbLogin)).setVisible(true);
	}

	void CarriersItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new CarrierForm(dbLogin)).setVisible(true);
	}

	void CytotechsItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new TechForm(dbLogin)).setVisible(true);
	}

	void ResultsItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new ResultForm(dbLogin)).setVisible(true);
	}

	void CytoPathItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new CytoPathReport(dbLogin)).setVisible(true);
	}

	void diagItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new DiagCodeForm(dbLogin)).setVisible(true);
	}

	void resultCodeItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new ResultCodeForm(dbLogin)).setVisible(true);
	}

	void procedureItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new ProcedureCodeForm(dbLogin)).setVisible(true);
	}

	void priceListItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new PriceListForm(dbLogin)).setVisible(true);
	}

	void labBillingItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new BillingForm(dbLogin)).setVisible(true);
	}

	void PathsItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new PathologistForm(dbLogin)).setVisible(true);
	}

	void pracListItem_actionPerformed(java.awt.event.ActionEvent event) {
		// (new PracticesList(dbLogin)).setVisible(true);
		PracticeListing p = new PracticeListing(dbLogin);
	}

	void physicianListItem_actionPerformed(java.awt.event.ActionEvent event) {
		// (new DocListForm(dbLogin)).setVisible(true);
		DoctorListing d = new DoctorListing(dbLogin);
	}

	void patBillQueue_actionPerformed(java.awt.event.ActionEvent event) {
		String query = "SELECT count(*) \n" + "FROM \n"
				+ "   pcs.lab_requisitions l, pcs.patients p, \n"
				+ "   pcs.practices d, pcs.lab_billings lb, \n"
				+ "   pcs.billing_queue bq, pcs.rebill_codes rc \n"
				+ "WHERE \n" + "   l.lab_number=lb.lab_number and \n"
				+ "   l.practice=d.practice and \n"
				+ "   bq.rebill_code=rc.rebill_code(+) and \n"
				+ "   l.patient=p.patient and \n"
				+ "   lb.lab_number=bq.lab_number and \n"
				+ "   bq.billing_route='PAT' and \n"
				+ "   bq.rebilling=lb.rebilling \n";
		int rv = getCount(query);
		if (rv > 0) {
			PrintJob pjob = null;
			Properties p = new java.util.Properties();
			String name = "Patient Statement";
			pjob = getToolkit().getPrintJob(this, name, p);
			pStmt = new PatientStatement(dbLogin, pjob);
			pStmt.printStatements();
		} else
			(new ErrorDialog("No Statements to Print")).setVisible(true);
	}

	void pclassItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new PClassForm(dbLogin)).setVisible(true);
	}

	class SymKey extends java.awt.event.KeyAdapter {
		public void keyPressed(java.awt.event.KeyEvent event) {
			Object object = event.getSource();
			if (object == PCSLabEntry.this)
				PCSLabEntry_keyPressed(event);
		}
	}

	void PCSLabEntry_keyPressed(java.awt.event.KeyEvent event) {
		int key = event.getKeyCode();
		if (key == event.VK_F9)
			exitApplication();
		else if (key == event.VK_F4) {
			if (event.isControlDown() && event.isAltDown()) {
				(new TimeSheet(dbLogin)).setVisible(true);
			} else {
				(new MailerForm(dbLogin)).setVisible(true);
			}
		} else if (key == event.VK_F6) {
			Properties p = new java.util.Properties();
			MergeLetters m = new MergeLetters(dbLogin, getToolkit()
					.getPrintJob(this, "Letters", p), MergeLetters.LETTERS
					+ ltrCounter);
			m.createLetters();
			ltrCounter += 10;
		} else if (key == event.VK_F5) {
			Properties p = new java.util.Properties();
			MergeLetters m = new MergeLetters(dbLogin, getToolkit()
					.getPrintJob(this, "Envelopes", p), MergeLetters.ENVELOPES
					+ ltrCounter);
			m.createLetters();
			ltrCounter += 10;
		} else if (key == event.VK_R && event.isControlDown()) {
			if (securityItem.isEnabled())
				setUserRestrictions();
			else
				Utils.createErrMsg("ILLEGAL OPERATION: No permission to set security!");
		}
	}

	void submitItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new BuildClaimDialog(this, dbLogin)).setVisible(true);
	}

	void pprBillQueueItem_actionPerformed(java.awt.event.ActionEvent event) {
		int rv = pprClaimOption
				.showConfirmDialog(
						this,
						"Make sure printer is ready. \nPrint current paper claims now?",
						"Paper Claims", pprClaimOption.YES_NO_OPTION,
						pprClaimOption.QUESTION_MESSAGE);
		if (rv == pprClaimOption.YES_OPTION) {
			buildHCFA1500("PPR");
		}
	}
 /** 
  * Use the max(batch_number) to get a filename
  * @param billRoute
  */
	void buildHCFA1500(String billRoute) {
		try {
			CallableStatement cstmt;
			cstmt = DbConnection.process().prepareCall(
					"{call pcs.build_1500_claim_forms(?,?,?)}");
			cstmt.setString(1, Utils.UTL_FILE_DIR);
			cstmt.setString(2, "ppr_clm");
			cstmt.setString(3, billRoute);
			//cstmt.executeUpdate();
			String query = "SELECT max(batch_number) FROM pcs.claim_batches \n"
					+ "WHERE tpp='" + billRoute + "' \n";
			Statement stmt = DbConnection.process().createStatement();
			ResultSet rs = stmt.executeQuery(query);
			int batchClaimID = 0;
			while (rs.next())
				batchClaimID = rs.getInt(1);
			
			OutputStream out = FileTransfer.getFile(Utils.SERVER_DIR + "ppr_clm");

			if (out != null && out.toString().length() > 0) {
				Utils.genericPrint(out.toString(), new MessageFormat("ppr_clm"), null);
				//Utils.genericPrinat(Utils.TMP_DIR, "ppr_clm", false);
				String fName = "ppr_clm" + batchClaimID;
				try {
					FileTransfer.sendFile(out.toString().getBytes(), Utils.SERVER_DIR + fName);
				} catch (SecurityException e) {
					log.write("ERROR: build HCFA1500\n" + e);
				}
			}
		} catch (Exception e) {
			log.write("ERROR: build HCFA1500\n" + e);
		}
	}

	void buildMA319C(String billRoute) {
		try {
			CallableStatement cstmt;
			cstmt = DbConnection.process().prepareCall(
					"{call pcs.build_ma319c_file(?,?,?)}");
			cstmt.setString(1, Utils.UTL_FILE_DIR);
			cstmt.setString(2, "pdw_clm");
			cstmt.setString(3, billRoute);
			cstmt.executeUpdate();
			String query = "SELECT max(batch_number) FROM pcs.claim_batches \n"
					+ "WHERE tpp='" + billRoute + "' \n";
			Statement stmt = DbConnection.process().createStatement();
			ResultSet rs = stmt.executeQuery(query);
			int batchClaimID = 0;
			while (rs.next())
				batchClaimID = rs.getInt(1);
			File f = new File(Utils.ROOT_DIR, "pdw_clm");
			long fLen = f.length();
			if (fLen > 0) {
				Utils.genericPrint(Utils.ROOT_DIR, "pdw_clm", false);
				String fName = "pdw_clm" + batchClaimID;
				try {
					f.renameTo(new File(Utils.ROOT_DIR, fName));
				} catch (SecurityException e) {
					log.write("ERROR: build MA319C\n" + e);
				}
			}
		} catch (Exception e) {
			log.write("ERROR: build MA319C\n" + e);
		}

	}

	void billingQueueItem_actionPerformed(java.awt.event.ActionEvent event) {
		getBillingQueueData();
	}

	void getBillingQueueData() {
		try {
			String query = "SELECT job_status FROM pcs.job_control \n"
					+ "WHERE job_descr='MID MONTH COUNT'";
			Statement stmt = DbConnection.process().createStatement();
			ResultSet rs = stmt.executeQuery(query);
			int midMonthCount = 0;
			while (rs.next()) {
				midMonthCount = rs.getInt(1);
			}
			query = "SELECT billing_route,LPAD(TO_CHAR(count(billing_route)),4), \n"
					+ "   count(billing_route) \n"
					+ "FROM pcs.billing_queue \n"
					+ "GROUP BY billing_route \n"
					+ "ORDER BY billing_route \n";
			stmt = DbConnection.process().createStatement();
			rs = stmt.executeQuery(query);
			Vector routes = new Vector();
			Vector counts = new Vector();
			String billingRoute = null;
			int qCount = 0;
			while (rs.next()) {
				billingRoute = rs.getString(1);
				qCount = rs.getInt(3);
				if (billingRoute.equals("PRA")) {
					qCount -= midMonthCount;
					counts.addElement(Utils.lpad(Integer.toString(qCount), 4));
				} else
					counts.addElement(rs.getString(2));
			}
			query = "SELECT DISTINCT a.description, \n"
					+ "   RPAD(a.billing_route||' ['||a.description||']',50), \n"
					+ "   a.billing_route \n"
					+ "FROM pcs.billing_routes a, pcs.billing_queue b \n"
					+ "WHERE a.billing_route=b.billing_route \n"
					+ "ORDER BY a.billing_route \n";
			stmt = DbConnection.process().createStatement();
			rs = stmt.executeQuery(query);
			while (rs.next()) {
				routes.addElement(rs.getString(2));
			}
			String[] list = new String[routes.size() + 2];
			list[0] = "ROUTE OF BILLING                                     LABS";
			list[1] = "----------------------------------------------------------";
			for (int i = 0; i < routes.size(); i++)
				list[i + 2] = routes.elementAt(i) + "  " + counts.elementAt(i);
			(new PickList("Current Billing Queue", 180, 110, 440, 240,
					routes.size() + 2, list)).setVisible(true);
		} catch (Exception e) {
			log.write("ERROR: getBillQueueData\n" + e);
		}
	}

	void patBillOne_actionPerformed(java.awt.event.ActionEvent event) {
		try {
			PatStmtCopyDialog pstmtCopy = new PatStmtCopyDialog(this, dbLogin);
			pstmtCopy.show();
		} catch (Exception e) {
		}
	}

	private int getCount(String query) {
		int rv = 0;
		try {
			Statement stmt = DbConnection.process().createStatement();
			ResultSet rs = stmt.executeQuery(query);
			while (rs.next()) {
				rv = rs.getInt(1);
			}
		} catch (Exception e) {
			log.write("ERROR: getCount\n" + e);
		}
		return (rv);
	}

	void practiceAcctItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new PracticeAccountsForm(dbLogin)).setVisible(true);
	}

	void pracBillItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new DocStmtDialog(this, "STATEMENT")).setVisible(true);
	}

	void BusinessItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new BusinessInfoForm(dbLogin)).setVisible(true);
	}

	void patientAcctItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new PatientAccountsForm(dbLogin)).setVisible(true);
	}

	void PCSLabEntry_windowOpened(java.awt.event.WindowEvent event) {
		invokeLogin();
	}

	void wksheetItem_actionPerformed(java.awt.event.ActionEvent event) {
		int rv = JOptionPane
				.showConfirmDialog(
						this,
						"Make sure printer is ready. \nPrint history match worksheets now?",
						"History Match Worksheets",
						JOptionPane.YES_NO_OPTION,
						JOptionPane.QUESTION_MESSAGE);
		if (rv == JOptionPane.YES_OPTION) {
			this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
			buildWorksheets();
			this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
		}
	}

	void buildWorksheets() {
		try {
			CallableStatement cstmt = DbConnection.process()
					.prepareCall("{? = call pcs.build_hm_worksheets(?,?,?)}");
			cstmt.setInt(2, Lab.CURR_WKS);
			cstmt.setString(3, "curr_wks");
			cstmt.setString(4, Utils.UTL_FILE_DIR);
			cstmt.registerOutParameter(1, OracleTypes.CLOB);
			cstmt.execute();
			Clob results = cstmt.getClob(1);
			cstmt.close();
			String printString = results.getSubString(1, (int)results.length());
			printString = printString.replaceAll("\\\\n", "\n");
			if (printString.length() > 0) {
				Utils.genericPrint(printString, new MessageFormat(""), new MessageFormat(""));
			}

		} catch (Exception e) {
			log.write("ERROR: build worksheets\n" + e);
		}

	}

	void paDPWQueueItem_actionPerformed(java.awt.event.ActionEvent event) {
		int rv = pprClaimOption
				.showConfirmDialog(
						this,
						"Make sure printer is ready. \nPrint current PA DPW claims now?",
						"PA DPW Claims", pprClaimOption.YES_NO_OPTION,
						pprClaimOption.QUESTION_MESSAGE);
		if (rv == pprClaimOption.YES_OPTION) {
			buildMA319C("PDW");
		}
	}

	void summaryItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new DocStmtDialog(this, "SUMMARY")).setVisible(true);
	}

	void othLabelItem_actionPerformed(java.awt.event.ActionEvent event) {
		int rv = pprClaimOption
				.showConfirmDialog(
						this,
						"Make sure printer is ready. \nPrint other insurance labels now?",
						"Other Insurance Labels", pprClaimOption.YES_NO_OPTION,
						pprClaimOption.QUESTION_MESSAGE);
		if (rv == pprClaimOption.YES_OPTION) {
			String fName = "ppr_clm.lbl";
			File f = new File(Utils.ROOT_DIR, fName);
			long fLen = f.length();
			if (fLen > 0)
				Utils.genericPrint(Utils.ROOT_DIR, fName, false);
		}
	}

	void pcardItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new DocStmtDialog(this, "PATIENT_CARD")).setVisible(true);
	}

	void pcardQueue() {
		printerCodes.removeAllElements();
		printerCodes.addElement(Utils.COMPRESSED);
		try {
			String fName = null;
			String SQL = "SELECT file_name FROM pcs.pcard_queue ORDER BY practice \n";
			Statement stmt = DbConnection.process().createStatement();
			ResultSet rs = stmt.executeQuery(SQL);
			int numStmts = 0;
			while (rs.next()) {
				fName = rs.getString(1);
				Utils.genericPrint(Utils.ROOT_DIR, fName, false, printerCodes);
				numStmts++;
			}
			if (numStmts == 0)
				Utils.createErrMsg("No Patient Cards to Print!");
			SQL = "DELETE FROM pcs.pcard_queue \n";
			int rv = stmt.executeUpdate(SQL);
			rs.close();
			stmt.close();
		} catch (Exception e) {
			log.write("ERROR: pcardQueue\n" + e);
		}
	}

	void agingItem_actionPerformed(java.awt.event.ActionEvent event) {
		printMonthlyReport("age");
	}

	void btSummaryItem_actionPerformed(java.awt.event.ActionEvent event) {
		/* Summary of Billing Types */
		printMonthlyReport("sbt");
	}

	void unsatisfactoryItem_actionPerformed(java.awt.event.ActionEvent event) {
		/* Unsatisfactory PAP Smear */
		printMonthlyReport("uns");
	}

	void printMonthlyReport(String ext) {
		MonthlyReptDialog dialog = new MonthlyReptDialog(ext);
		dialog.setVisible(true);
		dialog.toFront();
	}

	void biopsyLtrItem_actionPerformed(java.awt.event.ActionEvent event) {
		/* Request for Biopsy Letters */
		printMonthlyReport("rbl");
	}

	void biopsySumItem_actionPerformed(java.awt.event.ActionEvent event) {
		/* Request for Biopsy Summary */
		printMonthlyReport("rfb");
	}

	void byTechItem_actionPerformed(java.awt.event.ActionEvent event) {
		/* Slides screened by cytotech */
		printMonthlyReport("cyt");
	}

	void byPathItem_actionPerformed(java.awt.event.ActionEvent event) {
		/* Slides by pathologist */
		printMonthlyReport("pth");
	}

	void dailyReptItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new DailyReptDialog()).setVisible(true);
	}

	void noResponseClaimItem_actionPerformed(java.awt.event.ActionEvent event) {
		printerCodes.removeAllElements();
		printerCodes.addElement(Utils.ELITE);
		OutputStream out = FileTransfer.getFile(Utils.SERVER_DIR + "claim.rpt");
    	if (out != null && out.toString().length() > 0) {
			ReportViewer viewer = ReportViewer.create(out.toString(), "No Response Claims");
			viewer.setVisible(true);
        }
		else {
        	Utils.createErrMsg("Cannot locate report: claim.rpt"); 
		}

	}

	void ackItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new BatchClaimInfoForm(dbLogin)).setVisible(true);
	}

	void medLetterReprintItem_actionPerformed(java.awt.event.ActionEvent event) {
		int rv = wksheetOption.showConfirmDialog(this,
				"Reprint Medicare NMN letters now?", "Medicare NMN Letters",
				wksheetOption.YES_NO_OPTION, wksheetOption.QUESTION_MESSAGE);
		if (rv == wksheetOption.YES_OPTION) {
			this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
			printFaxLetters("MEDICARE");
			this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
		}
	}

	void diagLetterReprintItem_actionPerformed(java.awt.event.ActionEvent event) {
		int rv = wksheetOption.showConfirmDialog(this,
				"Reprint Medicare Type letters now?", "Medicare Type Letters",
				wksheetOption.YES_NO_OPTION, wksheetOption.QUESTION_MESSAGE);
		if (rv == wksheetOption.YES_OPTION) {
			this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
			printFaxLetters("DIAGNOSIS");
			this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
		}
	}

	void infoLetterReprintItem_actionPerformed(java.awt.event.ActionEvent event) {
		int rv = wksheetOption.showConfirmDialog(this,
				"Reprint Missing Information letters now?",
				"Missing Information Letters", wksheetOption.YES_NO_OPTION,
				wksheetOption.QUESTION_MESSAGE);
		if (rv == wksheetOption.YES_OPTION) {
			this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
			printFaxLetters("GENERIC");
			this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
		}
	}

	void displayFaxLetters() {
		try {
			String query = "SELECT TO_CHAR(lab_number),RPAD(letter_type,14), \n"
					+ "   DECODE(in_queue,0,'SENT ','QUEUE'), \n"
					+ "   TO_CHAR(date_sent,'MM/DD/YYYY HH:Mi') \n"
					+ "FROM pcs.fax_letters ORDER by letter_type,date_sent";

			Statement stmt = DbConnection.process().createStatement();
			ResultSet rs = stmt.executeQuery(query);
			Vector v = new Vector();
			while (rs.next()) {
				String lnum = rs.getString(1);
				String ltype = rs.getString(2);
				String inQ = rs.getString(3);
				String qDate = rs.getString(4);
				String s = lnum + "  " + ltype + inQ + "  " + qDate;
				v.addElement(s);
			}
			if (v.size() > 0) {
				String[] list = new String[v.size() + 2];
				list[0] = "LAB NUMBER  TYPE          STATUS DATE";
				list[1] = "---------------------------------------------------";
				for (int i = 0; i < v.size(); i++)
					list[i + 2] = (String) v.elementAt(i);
				(new PickList("Current Fax Letters", 180, 110, 390, 240,
						v.size() + 2, list)).setVisible(true);
			} else
				Utils.createErrMsg("There are currently no fax letters");
		} catch (Exception e) {
			log.write("ERROR: displayFaxLetters\n" + e);
		}
	}

	void lettersItem_actionPerformed(java.awt.event.ActionEvent event) {
		displayFaxLetters();
	}

	void displayLabGaps(int minLab, int maxLab) {
		try {
			CallableStatement cstmt;
			cstmt = DbConnection.process().prepareCall(
					"{call pcs.compute_labnumber_gaps(?,?)}");
			cstmt.setInt(1, minLab);
			cstmt.setInt(2, maxLab);
			cstmt.executeUpdate();
			String SQL = "SELECT message_text FROM pcs.temp_table ORDER BY row_id \n";
			Statement stmt = DbConnection.process().createStatement();
			ResultSet rs = stmt.executeQuery(SQL);
			Vector v = new Vector();
			while (rs.next()) {
				String s = rs.getString(1);
				v.addElement(s);
			}
			if (v.size() > 0) {
				String[] list = new String[v.size()];
				for (int i = 0; i < v.size(); i++)
					list[i] = (String) v.elementAt(i);
				(new PickList("Lab Number Gap Report", 180, 110, 350, 240,
						v.size(), list)).setVisible(true);
			} else
				Utils.createErrMsg("There are no gaps for this range");
		} catch (Exception e) {
			log.write("ERROR: displayLabGaps\n" + e);
		}

	}

	void labGapItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new LabGapDialog(this)).setVisible(true);
	}

	void wksheetCopyItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new WksheetDialog(dbLogin)).setVisible(true);
	}

	void addPayerItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new PayerFileDialog(dbLogin)).setVisible(true);
	}

	void recvDateItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new ReceiveDateForm(dbLogin)).setVisible(true);
	}

	void passwordItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new PasswordDialog(dbLogin)).setVisible(true);
	}

	void btYearItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new YearSummaryDialog(this)).setVisible(true);
	}

	void setSecurity(String objectName, String objectTitle) {
		(new SecurityForm(dbLogin, objectName, objectTitle)).setVisible(true);
	}

	void setUserRestrictions() {
		/*
		 * Note: In this else/if statement all JMenuItems must be checked FIRST
		 * for isArmed() before checking JMenus for hasFocus()
		 */
		if (securityItem.isArmed())
			setSecurity("securityItem", "Set Restrictions");
		else if (resultCodeItem.isArmed())
			setSecurity("resultsItem", "Result Codes");
		else if (pclassItem.isArmed())
			setSecurity("pclassItem", "Pap Classes");
		else if (priceListItem.isArmed())
			setSecurity("priceListItem", "Pricing");
		else if (dailyReptItem.isArmed())
			setSecurity("dailyReptItem", "Daily Report");
		else if (messageItem.isArmed())
			setSecurity("messageItem", "Current Message");

		/* ALL TOP LEVEL MENUS */
		else if (entryMenu.hasFocus())
			setSecurity("entryMenu", "Data Entry");
		else if (reportsMenu.hasFocus())
			setSecurity("reportsMenu", "Print");
		else if (listsMenu.hasFocus())
			setSecurity("listsMenu", "Lists");
		else if (claimsMenu.hasFocus())
			setSecurity("claimsMenu", "Claims");
		else if (accountsMenu.hasFocus())
			setSecurity("accountsMenu", "Accounting");
		else if (mgmtMenu.hasFocus())
			setSecurity("mgmtMenu", "Management");

		/* SUB-MENUS THAT CAN BE RESTRICTED */
		else if (elecClaimMenu.hasFocus())
			setSecurity("elecClaimMenu", "Electronic Claims");
		else if (paperClaimMenu.hasFocus())
			setSecurity("paperClaimMenu", "Paper Claims");
		else if (adminMenu.hasFocus())
			setSecurity("adminMenu", "Administration");
		else if (CollectionsMenu.hasFocus())
			setSecurity("CollectionsMenu", "Collections");
		else
			Utils.createErrMsg("This option has not been programmed for user restrictions");
	}

	void billQueueRemoveItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new BillQueueDeleteDialog(dbLogin, true)).setVisible(true);
	}

	void messageItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new CurrentMessageDialog(this)).setVisible(true);
	}

	boolean verifyPrinter() {
		boolean status = false;
		int rv = printerConfirm.showConfirmDialog(this,
				"Make sure printer is ready. \nPrint report now?",
				this.getTitle(), printerConfirm.YES_NO_OPTION,
				printerConfirm.QUESTION_MESSAGE);
		if (rv == printerConfirm.YES_OPTION) {
			status = true;
		}
		return (status);
	}

	void claimReprintItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new ClaimReprintDialog(this, dbLogin, log)).setVisible(true);
	}

	void carrierListItem_actionPerformed(java.awt.event.ActionEvent event) {
		PayerListing p = new PayerListing(dbLogin);
	}

	void pracLabelItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new PracticeAddrDialog(dbLogin)).setVisible(true);
	}

	void finishedItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new UnfinishDialog(false)).setVisible(true);
	}

	void claimWksItem_actionPerformed(java.awt.event.ActionEvent event) {
		int rv = pprClaimOption.showConfirmDialog(this,
				"Make sure printer is ready. \nPrint claim worksheets now?",
				"Claim Worksheets", pprClaimOption.YES_NO_OPTION,
				pprClaimOption.QUESTION_MESSAGE);
		if (rv == pprClaimOption.YES_OPTION) {
			buildClaimWorksheets("WKS");
		}
	}

	void buildClaimWorksheets(String billRoute) {
		try {
			CallableStatement cstmt;
			cstmt = DbConnection.process().prepareCall(
					"{call pcs.build_claim_wks_file(?,?,?)}");
			cstmt.setString(1, Utils.UTL_FILE_DIR);
			cstmt.setString(2, "clm_wks");
			cstmt.setString(3, billRoute);
			cstmt.executeUpdate();
			OutputStream out = FileTransfer.getFile(Utils.SERVER_DIR+ "clm_wks");

			if (StringUtils.isNotBlank(out.toString())) {
				Utils.genericPrint(out.toString() );
			}
		} catch (Exception e) {
			log.write("ERROR: build ClaimWKS\n" + e);
		}
	}

	void resetNightJobs() {
		try {
			CallableStatement cstmt;
			cstmt = DbConnection.process().prepareCall(
					"{call pcs.reset_night_jobs()}");
			cstmt.executeUpdate();
		} catch (Exception e) {
			log.write("ERROR: resetNightJobs\n" + e);
		}
	}

	void dbFreeSpace() {
		try {
			String SQL = "SELECT RPAD(tablespace_name,31), \n"
					+ "LPAD(TO_CHAR(SUM(bytes/(1024*1024)),'99,990.99'),11) \n"
					+ "FROM dba_free_space GROUP BY tablespace_name";
			Statement stmt = DbConnection.process().createStatement();
			ResultSet rs = stmt.executeQuery(SQL);
			Vector v = new Vector();
			while (rs.next()) {
				String t = rs.getString(1);
				String b = rs.getString(2);
				v.addElement(t + b);
			}
			String list[] = new String[v.size()];
			for (int i = 0; i < v.size(); i++)
				list[i] = (String) v.elementAt(i);
			(new PickList("PCS Free Space", 180, 110, 370, 180, v.size(), list))
					.setVisible(true);
		} catch (Exception e) {
			log.write("ERROR: dbFreeSpace\n" + e);
		}
	}

	void jobItem_actionPerformed(java.awt.event.ActionEvent event) {
		resetNightJobs();
	}

	void freeSpaceItem_actionPerformed(java.awt.event.ActionEvent event) {
		dbFreeSpace();
	}

	void suspendJobItem_actionPerformed(java.awt.event.ActionEvent event) {
		suspendJobs();
	}

	void suspendJobs() {
		try {
			String SQL = "UPDATE pcsJob_control \n" + "SET job_status=3 \n"
					+ "WHERE job_descr='JOB_STATUS' \n";
			Statement stmt = DbConnection.process().createStatement();
			int rs = stmt.executeUpdate(SQL);
			try {
				stmt.close();
			} catch (SQLException e) {
				log.write("ERROR: suspendJobs\n" + e);
			}
		} catch (Exception e) {
			log.write("ERROR: suspendJobs\n" + e);
		}
	}

	void jobOffItem_actionPerformed(java.awt.event.ActionEvent event) {
		nightJobsOff();
	}

	void nightJobsOff() {
		try {
			String SQL = "UPDATE pcsJob_control \n" + "SET job_status=2 \n"
					+ "WHERE job_descr='JOB_STATUS' \n";
			Statement stmt = DbConnection.process().createStatement();
			int rs = stmt.executeUpdate(SQL);
			try {
				stmt.close();
			} catch (SQLException e) {
				log.write("ERROR: suspendJobs\n" + e);
			}
		} catch (Exception e) {
			log.write("ERROR: suspendJobs\n" + e);
		}
	}

	void resubmitJobItem_actionPerformed(java.awt.event.ActionEvent event) {
		resubmitNightJobs();
	}

	void resubmitNightJobs() {
		try {
			CallableStatement cstmt;
			cstmt = DbConnection.process().prepareCall(
					"{call pcs.submit_night_jobs()}");
			cstmt.executeUpdate();
			cstmt.close();
		} catch (Exception e) {
			log.write("ERROR: resubmitNightJobs\n" + e);
		}
	}

	void collectionDequeueItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new CollectionsForm(-1)).setVisible(true);
	}

	void collectionQueueItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new CollectionsForm(0, dbLogin)).setVisible(true);
	}

	void collectionCallItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new CollectionsForm(2)).setVisible(true);
	}

	void dailyJobItem_actionPerformed(java.awt.event.ActionEvent event) {
		try {
			String fileName = "dailyjob.log";
			String title = "Daily Job Log";
			File f = new File(Utils.ROOT_DIR, fileName);
			long fLen = f.length();
			if (fLen > 0)
				(new ReportViewer(fileName, title)).setVisible(true);
			else
				Utils.createErrMsg("File not found");
		} catch (Exception e) {
			log.write("ERROR: dailyJobLog\n" + e);
		}
	}

	void traceItem_actionPerformed(java.awt.event.ActionEvent event) {
		try {
			String fileName = "oranw803\\rdbms80\\trace\\orclalrt.log";
			String title = "Oracle Trace Log";
			File f = new File(Utils.ROOT_DIR, fileName);
			long fLen = f.length();
			if (fLen > 0)
				(new ReportViewer(fileName, title)).setVisible(true);
			else
				Utils.createErrMsg("File not found");
		} catch (Exception e) {
			log.write("ERROR: traceItem\n" + e);
		}
	}

	void copyCollectionItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new CollectionsForm(1)).setVisible(true);
	}

	void patientBillItem_actionPerformed(java.awt.event.ActionEvent event) {
		getDirectBillData();
	}

	void getDirectBillData() {
		try {
			String query = "SELECT SUBSTR(billing_type,3,2), \n"
					+ "   LPAD(TO_CHAR(COUNT(SUBSTR(billing_type,3,2))),4), \n"
					+ "   COUNT(SUBSTR(billing_type,3,2)) \n"
					+ "FROM pcs.billing_queue \n"
					+ "WHERE billing_route='PAT' \n"
					+ "GROUP BY SUBSTR(billing_type,3,2) \n";
			Statement stmt = DbConnection.process().createStatement();
			ResultSet rs = stmt.executeQuery(query);
			Vector v = new Vector();
			int count = 0;
			while (rs.next()) {
				String s = rs.getString(1);
				String t = rs.getString(2);
				count += rs.getInt(3);
				if (s.equals("00"))
					s = "FIRST STATEMENT  ";
				else if (s.equals("30"))
					s = "PAST DUE         ";
				else if (s.equals("99"))
					s = "FINAL NOTICE     ";
				String r = s + t;
				v.addElement(r);
			}
			String[] list = new String[v.size() + 4];
			list[0] = "STATEMENT TYPE             ";
			list[1] = "---------------------------";
			for (int i = 0; i < v.size(); i++)
				list[i + 2] = (String) v.elementAt(i);
			list[v.size() + 2] = "---------------------------";
			list[v.size() + 3] = "TOTAL: " + count;
			if (count > 0)
				(new PickList("Patient Statements in Billing Queue", 180, 110,
						240, 160, v.size() + 2, list)).setVisible(true);
			else
				Utils.createErrMsg("No Patient Statements in Billing Queue");
			rs.close();
			stmt.close();
		} catch (Exception e) {
			log.write("ERROR: getDirectBillData\n" + e);
		}
	}

	void recalcItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new UnfinishDialog(true)).setVisible(true);
	}

	void changeLabItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new LabChangeDialog(this)).setVisible(true);
	}

	void HPVPendingItem_actionPerformed(java.awt.event.ActionEvent event) {
		try {
			CallableStatement cstmt = DbConnection.process()
					.prepareCall("{? = call pcs.hpv_pending }");
			
			cstmt.registerOutParameter(1, OracleTypes.CLOB);
			cstmt.execute();
			
			String results = cstmt.getString(1);
			results = results.replaceAll("\\\\n", "\n");
			System.out.println("Results length is " + results.length());
			cstmt.close();
			ReportViewer viewer = ReportViewer.create(results, "Pending HPV Requests");
			viewer.setVisible(true);
		} catch (Exception e) {
			System.out.println("ERROR: HPVPending\n" + e);
		}
	}

	void HPVNoTestItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new HPVNoTest("Tests Not Sent - HPV")).setVisible(true);
	}

	void pastDueItem_actionPerformed(java.awt.event.ActionEvent event) {
		/* Past Due Accounts */
		printMonthlyReport("due");
	}

	void labStatusItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new LabStatusDialog()).setVisible(true);
	}

	void clinCaseItem_actionPerformed(java.awt.event.ActionEvent event) {
		/* Clinic Cases */
		printMonthlyReport("cln");
	}

	void turnAroundItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new MonthlyReptDialog("tat")).setVisible(true);
	}

	void ascusHpvItem_actionPerformed(java.awt.event.ActionEvent event) {
		printMonthlyReport("ahp");
	}

	void ADPHsummaryItem_actionPerformed(java.awt.event.ActionEvent event) {
		printMonthlyReport("whp");
	}

	private void printFaxLetters(String ltrType) {
		String fileName = null;
		if (ltrType.equals("GENERIC"))
			fileName = "generic.old";
		else if (ltrType.equals("DIAGNOSIS"))
			fileName = "diag.old";
		else if (ltrType.equals("MEDICARE"))
			fileName = "medicare.old";
		PrintJob pjob;
		Properties p = new java.util.Properties();
		String name = new String("Recent " + ltrType + " Letters");
		printLetterFile(Utils.ROOT_DIR, fileName, true);
		pjob = getToolkit().getPrintJob(this, name, p);
		if (pjob != null) {
		}
		pjob.end();
	}

	private void printLetterFile(String filePath, String fileName,
			boolean forcePage) {
		File f;
		File f2;
		FileInputStream fIN;
		FileOutputStream fOUT;
		f = new File(filePath, fileName);
		f2 = new File("c:\\", "lpt2");
		if (f.exists()) {
			long fLen = f.length();
			if (fLen > 0) {
				try {
					fIN = new FileInputStream(f);
					fOUT = new FileOutputStream(f2);
					for (int k = 0; k < fLen - 2; k++) {
						int x = fIN.read();
						if (x == -1)
							break;
						fOUT.write(x);
					}
					if (forcePage)
						fOUT.write(12);
					fIN.close();
					fOUT.close();
				} catch (Exception e) {
					System.out.println(e);
				}
			}
		} else
			Utils.createErrMsg("Cannot locate report: " + fileName);
	}

	void TissuePathItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new TissuePathologyForm(dbLogin)).setVisible(true);
	}

	void commissionItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new CommissionDialog(this)).setVisible(true);
	}

	void midBillItem_actionPerformed(java.awt.event.ActionEvent event) {
		String statusMsg = null;
		int status = 0;
		try {
			String SQL = "SELECT job_status FROM pcsJob_control \n"
					+ "WHERE job_descr='MID MONTH' \n";
			Statement stmt = DbConnection.process().createStatement();
			ResultSet rs = stmt.executeQuery(SQL);
			while (rs.next()) {
				status = rs.getInt(1);
			}
			rs.close();
			stmt.close();
			if (status == 0)
				statusMsg = "Mid-Month billing NOT set to run.";
			else if (status == 1)
				statusMsg = "Mid-Month billing set to RUN.";
			else
				statusMsg = "Mid-Month bills ALREADY ran this month.";
		} catch (Exception e) {
			log.write("ERROR: pcardQueue\n" + e);
		}

		if (status == 2) {
			Utils.createErrMsg(statusMsg);
			return;
		}

		try {
			int reply = JOptionPane.showConfirmDialog(this,
					"Run Mid-Month billing on night jobs?", statusMsg,
					JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
			// If the confirmation was affirmative
			if (reply == JOptionPane.YES_OPTION) {
				try {
					String SQL = "UPDATE pcsJob_control SET \n"
							+ "   job_status=1 \n"
							+ "WHERE job_descr='MID MONTH' \n";
					Statement stmt = DbConnection.process().createStatement();
					stmt.executeUpdate(SQL);
					stmt.close();
				} catch (Exception e) {
					System.out.println(e);
				}
			} else if (reply == JOptionPane.NO_OPTION) {
				try {
					String SQL = "UPDATE pcsJob_control SET \n"
							+ "   job_status=0 \n"
							+ "WHERE job_descr='MID MONTH' \n";
					Statement stmt = DbConnection.process().createStatement();
					stmt.executeUpdate(SQL);
					stmt.close();
				} catch (Exception e) {
					System.out.println(e);
				}
			}
		} catch (Exception e) {
			System.out.println("ERROR: midBillItem\n" + e);
		}
	}

	void importItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new InvoiceImportDialog()).setVisible(true);
	}

	void adphPgmItem_actionPerformed(java.awt.event.ActionEvent event) {
		Utils.processNPfile();
	}

	void ADPHabnormalItem_actionPerformed(java.awt.event.ActionEvent event) {
		printMonthlyReport("abn");
	}

	void ADPHaschItem_actionPerformed(java.awt.event.ActionEvent event) {
		printMonthlyReport("207");
	}

	void specialItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new BillQueueDeleteDialog(dbLogin, this)).setVisible(true);
	}

	void specificRecvDateItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new SpecificRecvDateDialog(this)).setVisible(true);
	}

	void invSummMidItem_actionPerformed(java.awt.event.ActionEvent event) {
		printMonthlyReport("is1");
	}

	void invSummEomItem_actionPerformed(java.awt.event.ActionEvent event) {
		printMonthlyReport("is2");
	}

	void HPVitem_actionPerformed(java.awt.event.ActionEvent event) {
		(new HPVTestResults(this)).setVisible(true);
	}

	void letterQueueRemoveItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new BillQueueDeleteDialog(dbLogin, false)).setVisible(true);
	}

	void tissueCodeItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new TissueCodeForm(dbLogin)).setVisible(true);
	}

	void invSummItemFPP_actionPerformed(java.awt.event.ActionEvent event) {
		printMonthlyReport("FP1");
	}

	void invSummItemBCCSP_actionPerformed(java.awt.event.ActionEvent event) {
		printMonthlyReport("BC1");
	}

	void hpvItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new HPVReport(dbLogin)).setVisible(true);
	}

	void eomItem_actionPerformed(java.awt.event.ActionEvent event) {
		(new EOMdialog()).setVisible(true);
	}

	@Override
	public void queryActions() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void addActions() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void updateActions() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void finalActions() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void resetActions() {
		// TODO Auto-generated method stub
		
	}

}
