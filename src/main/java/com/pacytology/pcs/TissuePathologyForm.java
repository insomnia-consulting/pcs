package com.pacytology.pcs;
/*
    PENNSYLVANIA CYTOLOGY SERVICES
    LABORATORY INFORMATION SYSTEM V1.0
    Copyright (C) 2001 by John Cardella
    All Rights Reserved
    
    File:       TissuePathologyForm.java
    Created By: John Cardella, Software Engineer
    
    Function:   Data entry form for biopsies.
    
    MODIFICATIONS ----------------------------------
    Date/Staff      Description:
*/


import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.PrintJob;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;

import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JRootPane;
import javax.swing.JTextField;
import javax.swing.KeyStroke;

import com.pacytology.pcs.actions.TissuePathologyFormActionMap;
import com.pacytology.pcs.ui.PcsFrame;
import com.pacytology.pcs.ui.Square;

public class TissuePathologyForm extends PcsFrame
{
    Vector labResults = new Vector();
    public int currMode=Lab.IDLE;
    ResultRec resultRec = new ResultRec();
    LabReportRec labReport = new LabReportRec();
    public int MAX_TECHS=0;
    public TechRec[] techs;
    public int MAX_PATHS=0;
    public PathRec[] paths;
    TissuePathDbOps dbOps;
    boolean dbThreadRunning=false;
    public LogFile log;
    public String[] textBuffer;
    int textListSize = 0;
    int maxY = 0;
    String reportDate = null;
    Vector tissueCodes = null;
    Vector tissueCodeDescriptions = null;
    
	public TissuePathologyForm()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Tissue Pathology Results");
		getContentPane().setLayout(null);
		setSize(786,546);
		setVisible(false);
		getContentPane().add(F1sq);
		F1sq.setBounds(25,6,20,20);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F1");
		getContentPane().add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(29,6,20,20);
		getContentPane().add(F2sq);
		F2sq.setBounds(77,6,20,20);
		F2lbl.setRequestFocusEnabled(false);
		F2lbl.setText("F2");
		getContentPane().add(F2lbl);
		F2lbl.setForeground(java.awt.Color.black);
		F2lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F2lbl.setBounds(81,6,20,20);
		getContentPane().add(F3sq);
		F3sq.setBounds(129,6,20,20);
		F3lbl.setRequestFocusEnabled(false);
		F3lbl.setText("F3");
		getContentPane().add(F3lbl);
		F3lbl.setForeground(java.awt.Color.black);
		F3lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F3lbl.setBounds(133,6,20,20);
		getContentPane().add(F4sq);
		F4sq.setBounds(181,6,20,20);
		F4lbl.setRequestFocusEnabled(false);
		F4lbl.setText("F4");
		getContentPane().add(F4lbl);
		F4lbl.setForeground(java.awt.Color.black);
		F4lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F4lbl.setBounds(185,6,25,18);

		getContentPane().add(F12sq);
		F12sq.setBounds(389,6,30,20);
		F12lbl.setRequestFocusEnabled(false);
		F12lbl.setText("F12");
		getContentPane().add(F12lbl);
		F12lbl.setForeground(java.awt.Color.black);
		F12lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F12lbl.setBounds(390,6,30,20);
		F2action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F2action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F2action.setText("Add");
		getContentPane().add(F2action);
		F2action.setForeground(java.awt.Color.black);
		F2action.setBounds(62,30,50,16);
		F3action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F3action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F3action.setText("Update");
		getContentPane().add(F3action);
		F3action.setForeground(java.awt.Color.black);
		F3action.setBounds(114,30,50,16);
		F4action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F4action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F4action.setText("Print");
		getContentPane().add(F4action);
		F4action.setForeground(java.awt.Color.black);
		F4action.setBounds(166,30,50,16);

		F12action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F12action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F12action.setText("Submit");
		getContentPane().add(F12action);
		F12action.setForeground(java.awt.Color.black);
		F12action.setBounds(374,30,50,16);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("Query");
		getContentPane().add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(10,30,50,16);
		getContentPane().add(f9sq);
		f9sq.setBounds(285,6,20,20);
		f9lbl.setRequestFocusEnabled(false);
		f9lbl.setText("F9");
		getContentPane().add(f9lbl);
		f9lbl.setForeground(java.awt.Color.black);
		f9lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		f9lbl.setBounds(289,6,20,20);
		f9action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		f9action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		f9action.setText("Exit");
		getContentPane().add(f9action);
		f9action.setForeground(java.awt.Color.black);
		f9action.setBounds(270,30,50,16);
		getContentPane().add(f5sq);
		f5sq.setBounds(233,6,20,20);
		f5lbl.setRequestFocusEnabled(false);
		f5lbl.setText("F5");
		getContentPane().add(f5lbl);
		f5lbl.setForeground(java.awt.Color.black);
		f5lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		f5lbl.setBounds(238,6,20,20);
		f5action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		f5action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		f5action.setText("Text");
		getContentPane().add(f5action);
		f5action.setForeground(java.awt.Color.black);
		f5action.setBounds(218,30,50,16);
		patientPanel.setBorder(titledBorder2);
		patientPanel.setLayout(null);
		getContentPane().add(patientPanel);
		patientPanel.setBounds(248,64,528,166);
		resLabNumber.setEnabled(false);
		patientPanel.add(resLabNumber);
		resLabNumber.setFont(new Font("DialogInput", Font.BOLD, 12));
		resLabNumber.setBounds(52,32,76,20);
		resPrevLabNum.setEnabled(false);
		patientPanel.add(resPrevLabNum);
		resPrevLabNum.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resPrevLabNum.setBounds(166,32,76,20);
		resDateCollected.setEnabled(false);
		patientPanel.add(resDateCollected);
		resDateCollected.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resDateCollected.setBounds(310,32,76,20);
		resPatient.setEnabled(false);
		patientPanel.add(resPatient);
		resPatient.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resPatient.setBounds(70,58,170,20);
		resDOB.setEnabled(false);
		patientPanel.add(resDOB);
		resDOB.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resDOB.setBounds(438,58,76,20);
		resAddress.setEnabled(false);
		patientPanel.add(resAddress);
		resAddress.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resAddress.setBounds(70,84,270,20);
		resDoctor.setEnabled(false);
		patientPanel.add(resDoctor);
		resDoctor.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resDoctor.setBounds(170,112,210,20);
		resPractice.setEnabled(false);
		patientPanel.add(resPractice);
		resPractice.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resPractice.setBounds(482,112,30,20);
		resBilling.setEnabled(false);
		patientPanel.add(resBilling);
		resBilling.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resBilling.setBounds(70,112,32,20);
		JLabel1.setText("Patient");
		patientPanel.add(JLabel1);
		JLabel1.setBounds(16,60,70,12);
		labSSNLbl.setText("SSN");
		patientPanel.add(labSSNLbl);
		labSSNLbl.setBounds(260,60,40,12);
		labAddrLbl.setText("Address");
		patientPanel.add(labAddrLbl);
		labAddrLbl.setForeground(new java.awt.Color(102,102,153));
		labAddrLbl.setBounds(16,86,70,12);
		labCollDateLbl.setText("Collected");
		patientPanel.add(labCollDateLbl);
		labCollDateLbl.setBounds(252,34,58,12);
		JLabel6.setText("Prev");
		patientPanel.add(JLabel6);
		JLabel6.setBackground(new java.awt.Color(204,204,204));
		JLabel6.setBounds(136,34,32,12);
		labNumLbl.setText("Lab #");
		patientPanel.add(labNumLbl);
		labNumLbl.setBounds(16,34,42,12);
		labPracticeLbl.setText("Account");
		patientPanel.add(labPracticeLbl);
		labPracticeLbl.setForeground(new java.awt.Color(102,102,153));
		labPracticeLbl.setBounds(420,114,56,12);
		JLabel2.setText("Doctor");
		patientPanel.add(JLabel2);
		JLabel2.setForeground(new java.awt.Color(102,102,153));
		JLabel2.setBounds(126,114,40,12);
		resPhoneLbl.setText("Phone");
		patientPanel.add(resPhoneLbl);
		resPhoneLbl.setBounds(360,86,48,12);
		resDOBLbl.setText("DOB");
		patientPanel.add(resDOBLbl);
		resDOBLbl.setBounds(400,60,30,12);
		JLabel3.setText("Billing");
		patientPanel.add(JLabel3);
		JLabel3.setForeground(new java.awt.Color(102,102,153));
		JLabel3.setBounds(18,114,40,12);
		resPracticeName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		patientPanel.add(resPracticeName);
		resPracticeName.setForeground(new java.awt.Color(102,102,153));
		resPracticeName.setFont(new Font("Dialog", Font.BOLD, 10));
		resPracticeName.setBounds(102,12,406,12);
		resDateReceived.setEnabled(false);
		patientPanel.add(resDateReceived);
		resDateReceived.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resDateReceived.setBounds(438,32,76,20);
		JLabel4.setText("Recv\'d");
		patientPanel.add(JLabel4);
		JLabel4.setBounds(394,34,50,12);
		resSSN.setEnabled(false);
		patientPanel.add(resSSN);
		resSSN.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resSSN.setBounds(290,58,86,20);
		resPhone.setEnabled(false);
		patientPanel.add(resPhone);
		resPhone.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resPhone.setBounds(406,84,108,20);
		verifiedPanel.setBorder(titledBorder1);
		verifiedPanel.setLayout(null);
		getContentPane().add(verifiedPanel);
		verifiedPanel.setBounds(20,64,208,80);
		resCompleted.setEnabled(false);
		verifiedPanel.add(resCompleted);
		resCompleted.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resCompleted.setBounds(120,24,76,20);
		resCytoTech.setEnabled(false);
		verifiedPanel.add(resCytoTech);
		resCytoTech.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resCytoTech.setBounds(120,46,76,20);
		resCytoTechLbl.setText("Cytotechnologist");
		verifiedPanel.add(resCytoTechLbl);
		resCytoTechLbl.setBounds(16,48,100,16);
		resVerifiedLbl.setText("Date Verified");
		verifiedPanel.add(resVerifiedLbl);
		resVerifiedLbl.setBounds(16,26,90,12);
		pathologistPanel.setBorder(titledBorder3);
		pathologistPanel.setLayout(null);
		getContentPane().add(pathologistPanel);
		pathologistPanel.setBounds(20,150,208,80);
		pathCompleted.setEnabled(false);
		pathologistPanel.add(pathCompleted);
		pathCompleted.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pathCompleted.setBounds(120,24,76,20);
		resPathologist.setEnabled(false);
		pathologistPanel.add(resPathologist);
		resPathologist.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resPathologist.setBounds(120,46,76,20);
		JLabel12.setText("Date Completed");
		pathologistPanel.add(JLabel12);
		JLabel12.setBounds(16,26,90,12);
		JLabel17.setText("Pathologist");
		pathologistPanel.add(JLabel17);
		JLabel17.setBounds(16,48,100,12);
		titledBorder1.setTitleFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN,  12));
		titledBorder1.setTitle("Verification");
		//$$ titledBorder1.move(0,547);
		titledBorder2.setTitleFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
		titledBorder2.setTitle("Patient Information");
		//$$ titledBorder2.move(24,547);
		titledBorder3.setTitleFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
		titledBorder3.setTitle("Pathologist");
		//$$ titledBorder3.move(48,547);
		remarksPanel.setBorder(titledBorder4);
		remarksPanel.setLayout(null);
		getContentPane().add(remarksPanel);
		remarksPanel.setBounds(248,252,528,188);
		JScrollPane1.setOpaque(true);
		remarksPanel.add(JScrollPane1);
		JScrollPane1.setBounds(15,20,500,154);
		resRemarks.setLineWrap(true);
		resRemarks.setWrapStyleWord(true);
		resRemarks.setEnabled(false);
		JScrollPane1.getViewport().add(resRemarks);
		resRemarks.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resRemarks.setBounds(0,0,497,151);
		titledBorder4.setTitleFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
		titledBorder4.setTitle("Description");
		//$$ titledBorder4.move(72,547);
		descriptionListPanel.setBorder(titledBorder5);
		descriptionListPanel.setLayout(null);
		getContentPane().add(descriptionListPanel);
		descriptionListPanel.setBounds(20,252,224,188);
		JScrollPane2.setOpaque(true);
		descriptionListPanel.add(JScrollPane2);
		JScrollPane2.setBounds(15,20,196,154);
		textItemsList.setEnabled(false);
		JScrollPane2.getViewport().add(textItemsList);
		textItemsList.setBounds(0,0,193,151);
		titledBorder5.setTitleFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 12));
		titledBorder5.setTitle("Text Items");
		//$$ titledBorder5.move(96,547);
		JPanel1.setBorder(titledBorder6);
		JPanel1.setLayout(null);
		getContentPane().add(JPanel1);
		JPanel1.setBounds(20,460,224,46);
		createdLbl.setText("Created:");
		JPanel1.add(createdLbl);
		createdLbl.setForeground(java.awt.Color.darkGray);
		createdLbl.setFont(new Font("Dialog", Font.BOLD, 10));
		createdLbl.setBounds(4,4,200,14);
		changedLbl.setText("Updated:");
		JPanel1.add(changedLbl);
		changedLbl.setForeground(java.awt.Color.darkGray);
		changedLbl.setFont(new Font("Dialog", Font.BOLD, 10));
		changedLbl.setBounds(4,24,200,14);
		//$$ lineBorder1.move(120,547);
		//$$ bevelBorder1.move(144,547);
		//$$ titledBorder6.move(168,547);
		getContentPane().add(msgLabel);
		msgLabel.setBounds(264,468,489,20);
		//}}
		
		titledBorder1.setTitleColor(Color.white);
		titledBorder2.setTitleColor(Color.white);
		titledBorder3.setTitleColor(Color.white);
		titledBorder4.setTitleColor(Color.white);
		titledBorder5.setTitleColor(Color.white);
		titledBorder1.setTitleFont(new java.awt.Font("Dialog",java.awt.Font.BOLD,12));
		titledBorder2.setTitleFont(new java.awt.Font("Dialog",java.awt.Font.BOLD,12));
		titledBorder3.setTitleFont(new java.awt.Font("Dialog",java.awt.Font.BOLD,12));
		titledBorder4.setTitleFont(new java.awt.Font("Dialog",java.awt.Font.BOLD,12));
		titledBorder5.setTitleFont(new java.awt.Font("Dialog",java.awt.Font.BOLD,12));

		//{{INIT_MENUS
		//}}
	
		//{{REGISTER_LISTENERS
		SymFocus aSymFocus = new SymFocus();
		this.addFocusListener(aSymFocus);
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		resLabNumber.addKeyListener(aSymKey);
		resRemarks.addKeyListener(aSymKey);
		resCompleted.addKeyListener(aSymKey);
		
		resCytoTech.addKeyListener(aSymKey);
		pathCompleted.addKeyListener(aSymKey);
		resPathologist.addKeyListener(aSymKey);
		//}}
		actionMap = new TissuePathologyFormActionMap(this);
		JRootPane rp = setupKeyPressMap();
		
		
		for (int i=0; i<this.getContentPane().getComponentCount(); i++) {
		    Component c = this.getContentPane().getComponent(i);
		    String s = c.getClass().getName();
		    if (s.equals("javax.swing.JTextField")
		    || s.equals("javax.swing.JTextArea")) {
		        c.addFocusListener(aSymFocus);
		    }
		    else if (s.equals("javax.swing.JPanel")) {
		        for (int j=0; j<((Container)c).getComponentCount(); j++) {
		            Component d = ((Container)c).getComponent(j);
		            String t = d.getClass().getName();
		            if (t.equals("javax.swing.JTextField")
		            || t.equals("javax.swing.JTextArea")) {
		                d.addFocusListener(aSymFocus);
		            }
		        }
		    }
		}
		resetColors();
	}
	protected JRootPane setupKeyPressMap() {
		JRootPane rp = super.setupKeyPressMap();
		rp.getActionMap().put("F1", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				queryActions();       
			}
		});
		rp.getActionMap().put("F2", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				addActions();
			}
		});
		rp.getActionMap().put("F3", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				updateActions();
			}
		});
		rp.getActionMap().put("F4", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				tissuePathologyReport();
			}
		});
		
		

		rp.getActionMap().put("F8", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				 if (resCytoTech.hasFocus()) {
		                String buf[] = new String [MAX_TECHS];
		                String buf2[] = new String [MAX_TECHS];
		                for (int i=0;i<MAX_TECHS;i++) {
		                    buf[i]=
		                        techs[i].cytotech_code+"   "+
		                        techs[i].lname+", "+
		                        techs[i].fname;
                         buf2[i]=techs[i].cytotech_code;
                     }
                     (new PickList("Cytotechnologists",
                           200,50,220,200,
                           MAX_TECHS,buf,buf2,
                           resCytoTech)).setVisible(true);
		            }
		            else if (resPathologist.hasFocus()) {
		                String buf[] = new String [MAX_PATHS];
		                String buf2[] = new String [MAX_PATHS];
		                for (int i=0;i<MAX_PATHS;i++) {
		                    buf[i]=
		                        paths[i].pathologist_code+"   "+
		                        paths[i].lname+", "+
		                        paths[i].fname;
                         buf2[i]=paths[i].pathologist_code;
                     }
                     (new PickList("Pathologists",
                           200,50,220,200,
                           MAX_PATHS,buf,buf2,
                           resPathologist)).setVisible(true);
		            }
		            else if (resRemarks.hasFocus()) {
		                String buf[] = new String [tissueCodes.size()];
		                String buf2[] = new String [tissueCodes.size()];
		                for (int i=0;i<tissueCodes.size();i++) {
		                    String s1 = (String)tissueCodes.elementAt(i);
		                    String s2 = (String)tissueCodeDescriptions.elementAt(i);
		                    buf[i]=s1+" "+s2;
		                    buf2[i]=s2;
		                }
		                (new PickList("Tissue Codes",
		                    0,0,400,500,
		                    tissueCodes.size(),buf,buf2,resRemarks)).setVisible(true);
		            }
			}
		});
		rp.getActionMap().put("F9", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				closingActions();
			}
		});
		rp.getActionMap().put("F12", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				finalActions();
			}
		});
		rp.getActionMap().put("ESC", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				resetActions();
			}
		});
		rp.getActionMap().put("VK_DOWN", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				System.out.println("This is incrementTextList action");
				incrementTextList();
			}
		});
		rp.getActionMap().put("VK_UP", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				System.out.println("This is decrementTextList action");
				decrementTextList();
			}
		});
		
		return rp;
	}
    public TissuePathologyForm(Login dbLogin)  {
        this();
        this.log = new LogFile(
            dbLogin.logPath,"TissuePathologyForm",dbLogin.dateToday,dbLogin.userName);
        this.dbOps = new TissuePathDbOps(this);
        dbOps.tissuePathFormInit();
    }        
	

	public TissuePathologyForm(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

	public void setVisible(boolean b)
	{
		if (b) setLocation(0,0);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new TissuePathologyForm()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		Insets insets = getInsets();
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	Square F1sq = new Square();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	Square F2sq = new Square();
	javax.swing.JLabel F2lbl = new javax.swing.JLabel();
	Square F3sq = new Square();
	javax.swing.JLabel F3lbl = new javax.swing.JLabel();
	Square F4sq = new Square();
	javax.swing.JLabel F4lbl = new javax.swing.JLabel();

	Square F12sq = new Square();
	javax.swing.JLabel F12lbl = new javax.swing.JLabel();
	javax.swing.JLabel F2action = new javax.swing.JLabel();
	javax.swing.JLabel F3action = new javax.swing.JLabel();
	javax.swing.JLabel F4action = new javax.swing.JLabel();

	javax.swing.JLabel F12action = new javax.swing.JLabel();
	javax.swing.JLabel F1action = new javax.swing.JLabel();
	Square f9sq = new Square();
	javax.swing.JLabel f9lbl = new javax.swing.JLabel();
	javax.swing.JLabel f9action = new javax.swing.JLabel();
	Square f5sq = new Square();
	javax.swing.JLabel f5lbl = new javax.swing.JLabel();
	javax.swing.JLabel f5action = new javax.swing.JLabel();
	javax.swing.JPanel patientPanel = new javax.swing.JPanel();
	javax.swing.JTextField resLabNumber = new javax.swing.JTextField();
	javax.swing.JTextField resPrevLabNum = new javax.swing.JTextField();
	javax.swing.JTextField resDateCollected = new javax.swing.JTextField();
	javax.swing.JTextField resPatient = new javax.swing.JTextField();
	javax.swing.JTextField resDOB = new javax.swing.JTextField();
	javax.swing.JTextField resAddress = new javax.swing.JTextField();
	javax.swing.JTextField resDoctor = new javax.swing.JTextField();
	javax.swing.JTextField resPractice = new javax.swing.JTextField();
	javax.swing.JTextField resBilling = new javax.swing.JTextField();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JLabel labSSNLbl = new javax.swing.JLabel();
	javax.swing.JLabel labAddrLbl = new javax.swing.JLabel();
	javax.swing.JLabel labCollDateLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel6 = new javax.swing.JLabel();
	javax.swing.JLabel labNumLbl = new javax.swing.JLabel();
	javax.swing.JLabel labPracticeLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JLabel resPhoneLbl = new javax.swing.JLabel();
	javax.swing.JLabel resDOBLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	javax.swing.JLabel resPracticeName = new javax.swing.JLabel();
	javax.swing.JTextField resDateReceived = new javax.swing.JTextField();
	javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
	javax.swing.JTextField resSSN = new javax.swing.JTextField();
	javax.swing.JTextField resPhone = new javax.swing.JTextField();
	javax.swing.JPanel verifiedPanel = new javax.swing.JPanel();
	public javax.swing.JTextField resCompleted = new javax.swing.JTextField();
	javax.swing.JTextField resCytoTech = new javax.swing.JTextField();
	javax.swing.JLabel resCytoTechLbl = new javax.swing.JLabel();
	javax.swing.JLabel resVerifiedLbl = new javax.swing.JLabel();
	javax.swing.JPanel pathologistPanel = new javax.swing.JPanel();
	javax.swing.JTextField pathCompleted = new javax.swing.JTextField();
	javax.swing.JTextField resPathologist = new javax.swing.JTextField();
	javax.swing.JLabel JLabel12 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel17 = new javax.swing.JLabel();
	javax.swing.border.TitledBorder titledBorder1 = new javax.swing.border.TitledBorder("");
	javax.swing.border.TitledBorder titledBorder2 = new javax.swing.border.TitledBorder("");
	javax.swing.border.TitledBorder titledBorder3 = new javax.swing.border.TitledBorder("");
	javax.swing.JPanel remarksPanel = new javax.swing.JPanel();
	javax.swing.JScrollPane JScrollPane1 = new javax.swing.JScrollPane();
	public javax.swing.JTextArea resRemarks = new javax.swing.JTextArea();
	javax.swing.border.TitledBorder titledBorder4 = new javax.swing.border.TitledBorder("");
	javax.swing.JPanel descriptionListPanel = new javax.swing.JPanel();
	javax.swing.JScrollPane JScrollPane2 = new javax.swing.JScrollPane();
	public javax.swing.JList textItemsList = new javax.swing.JList();
	javax.swing.border.TitledBorder titledBorder5 = new javax.swing.border.TitledBorder("");
	javax.swing.JPanel JPanel1 = new javax.swing.JPanel();
	javax.swing.JLabel createdLbl = new javax.swing.JLabel();
	javax.swing.JLabel changedLbl = new javax.swing.JLabel();
	javax.swing.border.LineBorder lineBorder1 = new javax.swing.border.LineBorder(null);
	javax.swing.border.BevelBorder bevelBorder1 = new javax.swing.border.BevelBorder(3);
	javax.swing.border.TitledBorder titledBorder6 = new javax.swing.border.TitledBorder("");
	javax.swing.JLabel msgLabel = new javax.swing.JLabel();
	//}}

	//{{DECLARE_MENUS
	//}}


	class SymFocus extends java.awt.event.FocusAdapter
	{
		public void focusGained(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			if (object == TissuePathologyForm.this)
				TissuePathologyForm_focusGained(event);
		}
	}

	void TissuePathologyForm_focusGained(java.awt.event.FocusEvent event)
	{
		// to do: code goes here.
	}
	
    public void resetColors()  
    {
        Utils.setColors(this.getContentPane());
        msgLabel.setForeground(Color.green.brighter());
    }        
	

	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == resLabNumber)
				resLabNumber_keyTyped(event);
			else if (object == resCompleted)
				resCompleted_keyTyped(event);
			else if (object == resCytoTech)
				resCytoTech_keyTyped(event);
			else if (object == pathCompleted)
				pathCompleted_keyTyped(event);
			else if (object == resPathologist)
				resPathologist_keyTyped(event);
		}

		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == resLabNumber)
				resLabNumber_keyPressed(event);
			else if (object == resRemarks)
				resRemarks_keyPressed(event);
			else if (object == resCompleted)
				resCompleted_keyPressed(event);
			else if (object == resCytoTech)
				resCytoTech_keyPressed(event);
			else if (object == pathCompleted)
				pathCompleted_keyPressed(event);
			else if (object == resPathologist)
				resPathologist_keyPressed(event);
		}
	}
	
	private void closingActions()
	{
	    log.stop();
	    this.dispose();
	}

    public void addActions() 
    {
        currMode=Lab.ADD;
        msgLabel.setText("ADD data to database");
        setEnableAllFields(false);
        resLabNumber.setEnabled(true);
        resLabNumber.setBackground(Color.red);
        resLabNumber.setForeground(Color.white);
        resLabNumber.requestFocus();
    }
    
	public void queryActions() {
        currMode=Lab.QUERY;
        msgLabel.setText("QUERY data from database");
        setEnableAllFields(false);
        resLabNumber.setEnabled(true);
        resLabNumber.setBackground(Color.white);
        resLabNumber.setForeground(Color.black);
        resLabNumber.requestFocus();
	}

    public void updateActions() 
    {
        currMode=Lab.UPDATE;
        msgLabel.setText("UPDATE existing data in database");
        setEnableAllFields(false);
        resCompleted.setEnabled(true);
        resCytoTech.setEnabled(true);
        pathCompleted.setEnabled(true);
        resPathologist.setEnabled(true);
        resCompleted.requestFocus();
    }

    public void setEnableAllFields(boolean eVal) {
	    resPatient.setEnabled(eVal);
	    resAddress.setEnabled(eVal);
	    resSSN.setEnabled(eVal);
	    resDateCollected.setEnabled(eVal);
	    resPrevLabNum.setEnabled(eVal);
	    resLabNumber.setEnabled(eVal);
	    resPractice.setEnabled(eVal);
	    resPhone.setEnabled(eVal);
	    resDOB.setEnabled(eVal);
	    resDoctor.setEnabled(eVal);
	    resBilling.setEnabled(eVal);
	    resRemarks.setEnabled(eVal);
    }

	void resLabNumber_keyPressed(java.awt.event.KeyEvent event)
	{
	    if (event.getKeyCode()==event.VK_ENTER) {
	        if (currMode==Lab.ADD) {
	            resultRec.lab_number=(int)Integer.parseInt(resLabNumber.getText());
	            /* NOTE: The preparation field being set properly will
	               ensure that the lab number is in the correct range.
	            */
	            if (!verifyLabNumber(resultRec.lab_number)) {
	                //Utils.createErrMsg("Lab Number not valid");
	                //return;
	            }
                boolean result=dbOps.query(resultRec.lab_number);
                if (result) {
                    if (Utils.isNull(resultRec.receive_date)) {
                        Utils.createErrMsg("Missing required RECEIVE DATE!!!");
                        addReceiveDate();
                    }
                    if (resultRec.finished==(-1)) {
                        Utils.createErrMsg("Lab #"+(String)resLabNumber.getText()+
                            " was an EXPIRED specimen - cannot add results.");
                        resetActions();                            
                        addActions();
                    }
                    if (resultRec.preparation!=6) {
                        Utils.createErrMsg("Lab #"+resLabNumber.getText()+
                            " is not a TISSUE PATHOLOGY specimen.");
                        resetActions();
                        addActions();
                    }
                    else if (resultRec.finished>0) {
                        Utils.createErrMsg("Results for Lab #"+
                            (String)resLabNumber.getText()+
                            " have already been added");
                        resetActions();
                        addActions();
                    }
                    else if (Utils.isNull(resultRec.receive_date)) {
                        Utils.createErrMsg("No Receive Date for Lab #"+
                            (String)resLabNumber.getText());
                        resetActions();
                        addActions();
                    }
                    else {
                        resetColors();
                        setEnableAllFields(false);
                        setEnableDataFields(true);
                        fillForm();
                        if (dbOps.hasLabComments(resultRec.lab_number))
                            displayComments();
                    }
                }
                else {
                    Utils.createErrMsg("No Data Located for Lab #"+resLabNumber.getText());
                    resetActions();
                    addActions();
                    log.write("Query failed on lab #"+resLabNumber.getText());
                }
            }
            else if (currMode==Lab.QUERY) finalActions();
	    }
	}
	
	void setEnableDataFields(boolean eVal)
	{
	    resCompleted.setEnabled(eVal);
	    resCytoTech.setEnabled(eVal);
	    pathCompleted.setEnabled(eVal);
	    resPathologist.setEnabled(eVal);
	    if (eVal) resCompleted.requestFocus();
	}
	@Override
	public void resetActions() 
	{
	    createdLbl.setText("Created:");
	    changedLbl.setText("Updated:");
        resetColors();
        clearForm();
        setEnableAllFields(false);
        resultRec = new ResultRec();
        labReport = new LabReportRec();
        labReport.reset();
        labResults = new Vector();
        currMode=Lab.IDLE;
        textItemsList.removeAll();
        Vector tmp = new Vector();
        textItemsList.setListData(tmp);
        textItemsList.revalidate();
        textItemsList.repaint();
        textListSize=0;
        resRemarks.setText(null);
        msgLabel.requestFocus();
	}
	
    public void clearForm() {
	    resPatient.setText(null);
	    resAddress.setText(null);
	    resDateCollected.setText(null);
	    resDateReceived.setText(null);
	    resPrevLabNum.setText(null);
	    resLabNumber.setText(null);
	    resPractice.setText(null);
	    resPhone.setText(null);
	    resDOB.setText(null);
	    resSSN.setText(null);
	    resDoctor.setText(null);
	    resBilling.setText(null);
	    resCompleted.setText(null);
	    resCytoTech.setText(null);
	    resPathologist.setText(null);
	    resPracticeName.setText(null);
	    pathCompleted.setText(null);
	    msgLabel.setText(null);
	    textBuffer=null;
    }
	
	public void finalActions() 
	{
	    boolean status=false;
	    if (currMode==Lab.ADD) {
	        fillResultRecord();
	        dbOps.DB_prep();
	        dbOps.DB_action();
	        dbOps.queryReport(resultRec.lab_number);
	        msgLabel.setText("REPORT ready for printing");
	    }
	    else if (currMode==Lab.QUERY) {
            boolean rv = Utils.requiredField(resLabNumber,"Lab Number");	            
            if (rv) {
	            int labNum=(int)Integer.parseInt(resLabNumber.getText());
	            resultRec.lab_number=labNum;
	            rv=dbOps.query(labNum);
	            if (rv) {
	                if (Utils.isNull(resultRec.receive_date)) {
	                    Utils.createErrMsg("Missing required RECEIVE DATE!!!");
	                    addReceiveDate();
	                }
	                fillForm();
	                dbOps.queryReport(resultRec.lab_number);
	                resetColors();
	                setEnableAllFields(false);
	            }
	            else {
	                resetActions();
	                msgLabel.setText("NO DATA LOCATED");
	            }
	        }
	        else resetActions();
	    }
	    else if (currMode==Lab.UPDATE) {
	        fillResultRecord();
	        dbOps.update();
	        //dbOps.DB_prep();
	        //dbOps.DB_action();
	    }
	}
	
	public void fillForm()
	{
        if (currMode==Lab.QUERY) {
            createdLbl.setText("Created: "+resultRec.create_date+", "+resultRec.create_user);
            changedLbl.setText("Updated: "+resultRec.change_date+", "+resultRec.change_user);
        }
        if (dbOps.hasLabComments(resultRec.lab_number)) displayComments();
        resLabNumber.setText(Integer.toString(resultRec.lab_number));
        resPrevLabNum.setText(Integer.toString(resultRec.prev_lab_number));
        resDateCollected.setText(Utils.addDateMask(resultRec.date_collected));
        resDateReceived.setText(Utils.addDateMask(resultRec.receive_date));
        resPatient.setText(resultRec.pat_lname+", "+resultRec.pat_fname);
        resSSN.setText(Utils.addSSNMask(resultRec.ssn));
        resDOB.setText(Utils.addDateMask(resultRec.dob));
        if (!resultRec.address.substring(0,1).equals(",,")) resAddress.setText(resultRec.address);
        else resAddress.setText(null);
        resPhone.setText(Utils.addPhoneMask(resultRec.phone));
        resPractice.setText(Integer.toString(resultRec.practice));
        resDoctor.setText(resultRec.dr_name);
        resBilling.setText(resultRec.choice_code);
        resPracticeName.setText(
            resultRec.practice_name+"  "+
            Utils.addPhoneMask(resultRec.practice_phone));
        resPathologist.setText(resultRec.pathologist);
        labReport.tissuesSubmitted=formatTissuesSubmitted(labReport.remarks);   
        formatTextItemsList();
        resCompleted.setText(Utils.addDateMask(resultRec.date_completed));
        resCytoTech.setText(resultRec.cytotech_code);
        resPathologist.setText(resultRec.pathologist);
        pathCompleted.setText(Utils.addDateMask(resultRec.path_date));
	}
	
    void displayComments() 
    {
        if (resultRec.lab_number>0) 
            (new CommentForm(resultRec.lab_number)).setVisible(true);
    }
    
    void fillResultRecord()
    {
	    resultRec.date_completed=Utils.stripDateMask(resCompleted.getText());
	    resultRec.cytotech_code=resCytoTech.getText();
	    resultRec.pathologist=resPathologist.getText();
	    resultRec.path_date=Utils.stripDateMask(pathCompleted.getText());
        resultRec.cytotech=0;
        for (int i=0;i<MAX_TECHS;i++) {
            if (resultRec.cytotech_code.equals(techs[i].cytotech_code)) {
                resultRec.cytotech=techs[i].cytotech;
                break;
            }
        }
        int listNdx = 0;
        TissueRec t;
        char letter = 'A';
        labReport.tissueResults = new Vector();
	    for (int i=0; i<labReport.tissuesSubmitted.size(); i++) {
	        String type = "FINAL";
	        String text = textBuffer[listNdx];
	        StringBuffer s = new StringBuffer();
	        s.append(letter);
	        t = new TissueRec();
	        t.result_letter=s.toString();
	        t.result_type=type;
	        t.result_label=(String)labReport.tissuesSubmitted.elementAt(i);
	        t.result_text=text;
	        t.p_seq=listNdx;
	        labReport.tissueResults.addElement(t);
	        listNdx++;
	        letter++;
	    }
	    letter='A';
	    for (int i=0; i<labReport.tissuesSubmitted.size(); i++) {
	        String type = "GROSS";
	        String text = textBuffer[listNdx];
	        StringBuffer s = new StringBuffer();
	        s.append(letter);
	        t = new TissueRec();
	        t.result_letter=s.toString();
	        t.result_type=type;
	        t.result_label=(String)labReport.tissuesSubmitted.elementAt(i);
	        t.result_text=text;
	        t.p_seq=listNdx;
	        labReport.tissueResults.addElement(t);
	        listNdx++;
	        letter++;
	    }
	    String text = textBuffer[listNdx];
	    t = new TissueRec();
	    t.result_type="COMMENT";
	    t.result_text=text;
	    t.p_seq=listNdx;
	    labReport.tissueResults.addElement(t);
    }
    
    Vector formatTissuesSubmitted(String text)
    {
        Vector results = new Vector();
        if (text == null) return results;
        
        StringTokenizer st = new StringTokenizer(text,";");
        while (st.hasMoreTokens()) {
            results.addElement(st.nextToken().trim());
        }
        return (results);
    }

    /* Valid range for Tissue Pathology is YYYY800000 to YYYY899999 */
    boolean verifyLabNumber(int lab)
    {
        boolean isValid = false;
	    int low = (int)Integer.parseInt(
	        Login.getAlphaDate("YYYY")+"800000");
        int high = ((int)Integer.parseInt(
	        Login.getAlphaDate("YYYY")+"899999")+1);
        if (lab>low && lab<high) { isValid=true; }
        return (isValid);
	}

	void resLabNumber_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event);
	}
	
	void formatTextItemsList()
	{
	    Vector v = new Vector();
	    for (int i=0; i<labReport.tissuesSubmitted.size(); i++) {
	        v.addElement(labReport.tissuesSubmitted.elementAt(i)+", FINAL DIAGNOSIS");
	    }
	    for (int i=0; i<labReport.tissuesSubmitted.size(); i++) {
	        v.addElement(labReport.tissuesSubmitted.elementAt(i)+", GROSS DESCRIPTION");
	    }
	    v.addElement("COMMENTS");
	    textListSize=v.size();
	    textBuffer = new String[textListSize];
	    textItemsList.removeAll();
	    textItemsList.setListData(v);
	    textItemsList.revalidate();
	    textItemsList.repaint();
	    if (labReport.tissueResults.size()>0) {
	        for (int i=0; i<textListSize; i++) {
	            TissueRec t = new TissueRec();
	            t=(TissueRec)labReport.tissueResults.elementAt(i);
	            textBuffer[i]=t.result_text;
	        }
	    }
	}
	
	void incrementTextList()
	{
	    int ndx = 0;
        if (textItemsList.getSelectedIndex()==(-1)) ndx=0;
        else ndx=textItemsList.getSelectedIndex()+1;
        if (ndx==textListSize) ndx--;
        resRemarks.setText(textBuffer[ndx]);
        resRemarks.revalidate();
        resRemarks.repaint();
        textItemsList.setSelectedIndex(ndx);
        textItemsList.ensureIndexIsVisible(ndx);
        textItemsList.revalidate();
	}
	
	void decrementTextList()
	{
	    int ndx = 0;
        if (textItemsList.getSelectedIndex()==(-1)) ndx=0;
        else ndx=textItemsList.getSelectedIndex()-1;
        if (ndx==(-1)) ndx=0;
        resRemarks.setText(textBuffer[ndx]);
        resRemarks.revalidate();
        resRemarks.repaint();
        textItemsList.setSelectedIndex(ndx);
        textItemsList.ensureIndexIsVisible(ndx);
        textItemsList.revalidate();
	}

	void resRemarks_keyPressed(java.awt.event.KeyEvent event)
	{
	}

	void resCompleted_keyTyped(java.awt.event.KeyEvent event)
	{
	    Utils.buildDateMask(event);
	}

	void resCompleted_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_DOWN) {
		    incrementTextList();
		} 
		else if (event.getKeyCode()==event.VK_UP) {
		    decrementTextList();
		}
		else 
			if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(resCompleted,"Date Completed")) {
		        if (Utils.dateVerify(resCompleted)) {
		            resCompleted.transferFocus();
		        }
		    }
		}
	}

	void resCytoTech_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,3);
	}

	void resCytoTech_keyPressed(java.awt.event.KeyEvent event)
	{
	    if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(resCytoTech,"CytoTech")) {
                resCytoTech.transferFocus();
		    }
		}
	}

	void pathCompleted_keyTyped(java.awt.event.KeyEvent event)
	{
	    Utils.buildDateMask(event);
	}

	void pathCompleted_keyPressed(java.awt.event.KeyEvent event)
	{
	    if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(pathCompleted,"Date Completed")) {
		        if (Utils.dateVerify(pathCompleted)) {
		            pathCompleted.transferFocus();
		        }
		    }
		}
	}

	void resPathologist_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,3);
	}

	void resPathologist_keyPressed(java.awt.event.KeyEvent event)
	{
	    if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(resPathologist,"Pathologist")) {
                resPathologist.transferFocus();
		    }
		}
	}
	
	public void addReceiveDate()
	{
	    LabRec labRec = new LabRec();
	    String lnum = resLabNumber.getText();
        (new RecvDateDialog(lnum,labRec)).setVisible(true);
        if (Utils.isNull(labRec.receive_date)) resetActions();
        else {
            resDateReceived.setText(Utils.addDateMask(labRec.receive_date));
            resultRec.receive_date=labRec.receive_date;
            labReport.receive_date=labRec.receive_date;
            Utils.updateReceiveDate(resultRec.lab_number,labRec.receive_date);
        }
	}
	
	
	/* PRINT REPORT METHODS **************************************************/
    public void tissuePathologyReport()
    {
        if (currMode==Lab.IDLE) {
            Utils.createErrMsg("No report to print!");
            return;
        }
        else prePrint();
        PrintJob pjob;
        Properties p = new java.util.Properties();
        Graphics pgraphics;
        String name = new String("Tissue Pathology Report");
        pjob=getToolkit().getPrintJob(this,name,p);
        if (pjob!=null) {
            pgraphics=pjob.getGraphics();
            if (pgraphics!=null) {
                PCSHeader(pgraphics);
                labData(pgraphics,labReport);
                resultsData(pgraphics,pjob,labReport);
                pgraphics.dispose();
            }
        }
        pjob.end();
    }
    
    /*
        Prints the heading section of the report
    */
	public void PCSHeader(Graphics pgraphics) {
	    int x=30,y=46;
	    int saveY=y;
        pgraphics.setFont(new Font("SansSerif",Font.BOLD,14));
        saveY=y;
        pgraphics.drawString("PENNSYLVANIA CYTOLOGY SERVICES",x,y);
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,12));
        y+=14;
        pgraphics.drawString("339 Old Haymaker Road",x,y);
        y+=12;
        pgraphics.drawString("Parkway Building, Suite 1700",x,y);
        y+=12;
        pgraphics.drawString("Monroeville, PA  15146",x,y);
        y+=12;
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,10));
        pgraphics.drawString("Phone: 412.373.8300   Fax: 412.373.7027",x,y);
        x=503;y=saveY;
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,9));
        pgraphics.drawString("CLIA: 39D0656968",x,y);
        x=406;y+=10;
        pgraphics.drawString("Pennsylvania State Laboratory Code: 331",x,y);
        x=388;y+=10;
        pgraphics.drawString("College of American Pathologists: 41911-01",x,y);
        x=380;y+=28;
        pgraphics.drawString("Laboratory Director: Robert H. Swedarsky, MD",x,y);
        y+=12;
        pgraphics.drawLine(30,y,574,y);
        maxY=y;
	}
	
	public void pageTwoHeader(Graphics pgraphics, LabReportRec labReport)
	{
	    int x,y;
	    int gap;
	    y=75;
	    int saveY = 0;
	    int slen;
	    StringBuffer buf = new StringBuffer();
	    StringBuffer buf2 = new StringBuffer();
	    StringBuffer buf3 = new StringBuffer();
	    DetailCodeRec dCodeRec = null;
	    
        pgraphics.setFont(new Font("SansSerif",Font.BOLD,14));
        StringBuffer sbuf = new StringBuffer("LAB #"+labReport.lab_number);
        sbuf.append("   TISSUE PATHOLOGY REPORT                              PAGE 2 OF 2");
        y=100;
        pgraphics.drawString(sbuf.toString(),30,y);	  
        y+=30;
	    
	    boolean test = true;
	    
	    x=30; 
	    saveY=y;
	    
	    /* PATIENT NAME */
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,10));
        pgraphics.drawString("NAME:",x,y);
        if (!Utils.isNull(labReport.pat_lname)) buf.append(labReport.pat_lname.trim());
        else buf.append("MISSING");
        buf.append(", ");
        if (!Utils.isNull(labReport.pat_fname)) buf.append(labReport.pat_fname.trim());
        else buf.append("MISSING");
        if (!Utils.isNull(labReport.pat_mi)) buf.append(" "+labReport.pat_mi);
        gap=86;
        pgraphics.setFont(new Font("SansSerif",Font.BOLD,12));
        pgraphics.drawString(buf.toString(),x+gap,y);
        
        /* DRAW LINE */
        if (y>maxY) maxY=y;
        maxY=y+20;
        pgraphics.drawLine(30,maxY,574,maxY);
	}
	
    /*
        Formats and prints selected data from the requisition
        on the report.
    */
	public void labData(Graphics pgraphics, LabReportRec labReport) 
	{
	    int x,y;
	    int gap;
	    int saveY = 0;
	    int slen;
	    StringBuffer buf = new StringBuffer();
	    StringBuffer buf2 = new StringBuffer();
	    StringBuffer buf3 = new StringBuffer();
	    DetailCodeRec dCodeRec = null;
	    
	    boolean test = true;
	    
	    x=30; y=maxY+20;
	    saveY=y;
	    
	    /* PATIENT NAME */
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,10));
        pgraphics.drawString("NAME:",x,y);
        if (!Utils.isNull(labReport.pat_lname)) buf.append(labReport.pat_lname.trim());
        else buf.append("MISSING");
        buf.append(", ");
        if (!Utils.isNull(labReport.pat_fname)) buf.append(labReport.pat_fname.trim());
        else buf.append("MISSING");
        if (!Utils.isNull(labReport.pat_mi)) buf.append(" "+labReport.pat_mi);
        gap=86;
        pgraphics.setFont(new Font("SansSerif",Font.BOLD,12));
        pgraphics.drawString(buf.toString(),x+gap,y);
        /* PATIENT SSN */
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,10));
        if (!Utils.isNull(labReport.pat_ssn)) {
            buf = new StringBuffer(Utils.addShortSSN(labReport.pat_ssn));
            y+=10;
            pgraphics.drawString("SSN:",x,y);
            pgraphics.drawString(buf.toString(),x+gap,y);
        }

        /* PATIENT ID */
        if (!Utils.isNull(labReport.patient_id)) {
            y+=10;
            pgraphics.drawString("PATIENT ID:",x,y);
            pgraphics.drawString(labReport.patient_id,x+gap,y);
        }

        /* PATIENT DOB */
        if (!Utils.isNull(labReport.pat_dob)) {
            y+=10;
            pgraphics.drawString("DOB:",x,y);
            pgraphics.drawString(labReport.pat_dob,x+gap,y);
        }
        
        /* ACCOUNT NUMBER */
        maxY=y;
        x=340;y=saveY;
        pgraphics.setFont(new Font("SansSerif",Font.BOLD,12));
        if (labReport.practice<100) 
            buf = new StringBuffer("ACCOUNT #0"+Integer.toString(labReport.practice));
        else 
            buf = new StringBuffer("ACCOUNT #"+Integer.toString(labReport.practice));
        pgraphics.drawString(buf.toString(),x,y);	    
 
        /* PRACTICE NAME */
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,10));
        y+=10;
        gap=86;
        pgraphics.drawString(labReport.prac_name,x,y);
        /* PRACTICE ADDRESS */
        y+=10;
        if (!Utils.isNull(labReport.prac_address1))
            pgraphics.drawString(labReport.prac_address1,x,y);
        if (!Utils.isNull(labReport.prac_address2)) {
            y+=10;
            pgraphics.drawString(labReport.prac_address2,x,y);
        }
        
        /* PRACTICE CSZ */
        y+=10;
        if (!Utils.isNull(labReport.prac_city))
            buf2 = new StringBuffer(labReport.prac_city);
        else buf2 = new StringBuffer(" ");
        if (!Utils.isNull(labReport.prac_state))
            buf = new StringBuffer(buf2.toString()+", "+labReport.prac_state);
        else buf = new StringBuffer(buf2.toString());
        if (!Utils.isNull(labReport.prac_zip)) 
            buf2 = new StringBuffer(buf.toString()+" "+Utils.addZipMask(labReport.prac_zip));
        else buf2 = new StringBuffer(buf.toString());
        buf = new StringBuffer(buf2.toString());
        pgraphics.drawString(buf.toString(),x,y);
        
        /* PHYSICIAN */
        y+=14;
        pgraphics.drawString("PHYSICIAN:  ",x,y);
        try { slen=labReport.doctor_text.length(); }
        catch (Exception e) { slen=0; }
        buf = new StringBuffer();
        if (slen>24) buf.append(labReport.doctor_text.substring(0,24));
        else buf.append(labReport.doctor_text);
        pgraphics.setFont(new Font("SansSerif",Font.BOLD,12));
        pgraphics.drawString(buf.toString(),400,y);
        
        /* DRAW LINE */
        if (y>maxY) maxY=y;
        maxY+=10;
        pgraphics.drawLine(30,maxY,574,maxY);
        
        /* LAB DETAILS */
        y=maxY;
        x=30; y+=18;
        pgraphics.setFont(new Font("SansSerif",Font.BOLD,12));
        buf = new StringBuffer("LAB #"+labReport.lab_number);
        switch (labReport.preparation) {
            case Lab.CONVENTIONAL: buf.append("    CONVENTIONAL PAP SMEAR"); break;
            case Lab.THIN_LAYER: buf.append("   LIQUID BASED PAP TEST (ThinPrep)"); break;
            case Lab.CYT_NON_PAP: buf.append("   CYTOLOGY NON-PAP"); break;
            case Lab.SURGICAL: buf.append("   TISSUE PATHOLOGY REPORT"); break;
        }
        pgraphics.drawString(buf.toString(),x,y);	    
        
        /* DATE COLLECTED */
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,9));
        x=464; 
        buf = new StringBuffer("COLLECTED:");
        pgraphics.drawString(buf.toString(),x,y-4);
        pgraphics.drawString(labReport.date_collected,x+66,y-4);

        /* DATE RECEIVED */
        buf = new StringBuffer("RECEIVED:");
        pgraphics.drawString(buf.toString(),x,y+5);
        pgraphics.drawString(labReport.receive_date,x+66,y+5);
        
        /* DATE REPORTED */
        buf = new StringBuffer("REPORTED:");
        pgraphics.drawString(buf.toString(),x,y+14);
        pgraphics.drawString(pathCompleted.getText(),x+66,y+14);
        
        int detailY=y+=18;
        saveY=y;
        
        /* TISSUE PATHOLOGY */
        if (labReport.numPathology>0) {
            y+=8;
            x=30;
            boolean relatedPrinted = false;
            pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,9));
            for (int i=0;i<labReport.detailVect.size();i++) {
                dCodeRec = (DetailCodeRec)labReport.detailVect.elementAt(i);
                if (dCodeRec.detail_code<63 && relatedPrinted==false) {
                    pgraphics.setFont(new Font("SansSerif",Font.BOLD,11));
                    pgraphics.drawString("RELATED MEDICAL DATA",x,y);
                    y+=10;
                    pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,9));
                    relatedPrinted=true;
                }
                if (dCodeRec.detail_type.equals("TISSUE PATHOLOGY")) {
                    if (dCodeRec.detail_code==63) {
                        pgraphics.setFont(new Font("SansSerif",Font.BOLD,11));
                        y+=10;
                        pgraphics.drawString("SPECIMEN:",x,y);
                        y+=10;
                        pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,9));
                    }
                    buf = new StringBuffer(dCodeRec.description);
                    if (dCodeRec.additional_info.equals("Y")) {
                        buf.append(": ");
                        if (resultRec.slide_qty==1 && dCodeRec.detail_code==63) {
                            dCodeRec.textEntered=dCodeRec.textEntered.substring(3);
                        }
                        buf.append(dCodeRec.textEntered);
                    }
                    pgraphics.drawString(buf.toString(),x,y);
                    y+=10;
                }
            }
        }

        /* PATIENT HISTORY */
        if (y>=maxY) maxY=y;
        else y=maxY;
        x=30;
        if (labReport.numHistory>0) {
            if (y<detailY) y=detailY;
            if (labReport.numSources==0
            && labReport.numDevices==0 && labReport.numOthers==0)
                y+=18;
            else y+=8;
            pgraphics.setFont(new Font("SansSerif",Font.BOLD,11));        
            pgraphics.drawString("PATIENT HISTORY:",x,y);
            y+=10;
            pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,9));
            if (labReport.pat_last_lab>0) {
                buf = new StringBuffer(
                    "PREVIOUS LAB #"+Integer.toString(labReport.pat_last_lab));
                pgraphics.drawString(buf.toString(),x,y);
                y+=10;
            }
            for (int i=0;i<labReport.detailVect.size();i++) {
                dCodeRec = (DetailCodeRec)labReport.detailVect.elementAt(i);
                if (dCodeRec.detail_type.equals("HISTORY")) {
                    buf = new StringBuffer(dCodeRec.description.trim());
                    if (dCodeRec.additional_info.equals("Y")) {
                        buf.append(": ");
                        buf.append(dCodeRec.textEntered);
                    }
                    if (Utils.length(buf.toString())>100) {
                        buf2 = new StringBuffer(buf.toString());
                        int endNdx=0;
                        while (Utils.length(buf2.toString())>100) {
                            for (int j=0;j<100;j++) {
                                if (buf2.charAt(j)==' ')
                                    endNdx=j;
                            }
                            buf = new StringBuffer(buf2.toString().substring(0,endNdx));
                            buf3 = new StringBuffer(buf2.toString().substring(endNdx).trim());
                            pgraphics.drawString(buf.toString(),x,y);
                            buf2 = new StringBuffer("   "+buf3.toString());
                            y+=10;
                        }
                        if (!Utils.isNull(buf2.toString())) {
                            pgraphics.drawString(buf2.toString(),x,y);
                            y+=10;
                        }
                    }
                    else {
                        pgraphics.drawString(buf.toString(),x,y);
                        y+=10;
                    }
                }
            }
        }
        
        /* CLIENT NOTES */
        if (!Utils.isNull(labReport.client_notes)) {
            if (labReport.numSources==0 && labReport.numDevices==0 
            && labReport.numOthers==0 && labReport.numHistory==0)
                y+=18;
            else y+=8;
            pgraphics.setFont(new Font("SansSerif",Font.BOLD,11));        
            pgraphics.drawString("CLIENT NOTES:",x,y);
            y+=10;
            pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,9));
            buf = new StringBuffer(labReport.client_notes.trim());
            if (Utils.length(buf.toString())>100) {
                buf2 = new StringBuffer(buf.toString());
                int endNdx=0;
                while (buf2.length()>100) {
                    for (int j=0;j<100;j++) {
                        if (buf2.charAt(j)==' ')
                            endNdx=j;
                    }
                    buf = new StringBuffer(buf2.toString().substring(0,endNdx));
                    buf2 = new StringBuffer(buf2.toString().substring(endNdx).trim());
                    pgraphics.drawString(buf.toString(),x,y);
                    buf2 = new StringBuffer("   "+buf2.toString());
                    y+=10;
                }
                if (!Utils.isNull(buf2.toString())) {
                    pgraphics.drawString(buf2.toString(),x,y);
                    y+=10;
                }
            }
            else {
                pgraphics.drawString(buf.toString(),x,y);
                y+=10;
            }
        }
        if (labReport.numDetails==0) y+=26;
        maxY=y;
        pgraphics.drawLine(30,maxY,574,maxY);
	}
	
	public void resultsData(Graphics pgraphics, PrintJob pjob, LabReportRec labReport)
	{
	    int x=0,y;
	    int page = 1;
	    int saveY = 0;
	    y=maxY+26;
	    String buf=" ";
	    String buf2=" ";
	    String lastType=" ";
	    boolean printCategory = false;
	    for (int i=0; i<labReport.tissueResults.size(); i++) {
	        TissueRec t = (TissueRec)labReport.tissueResults.elementAt(i);
	        Vector resultText = labReport.formatText(t.result_text);
	        if (!lastType.equals(t.result_type)) printCategory=true;
	        String resultType = null;
	        if (t.result_type.equals("FINAL")) {
	            resultType="FINAL DIAGNOSIS";
	        }
	        else if (t.result_type.equals("GROSS")) {
	            resultType="GROSS DESCRIPTION";
	        }
	        else if (t.result_type.equals("COMMENT")) {
	            resultType="COMMENTS";
	        }
	        if (y>=700) {
	            page++;
	            pgraphics.dispose();
	            pgraphics=pjob.getGraphics();
	            if (pgraphics!=null) {
	                printCategory=true;
                    pageTwoHeader(pgraphics,labReport);
                    y=maxY+40;
	            }
	        }
	        if (printCategory) {
	            y+=10;
                pgraphics.setFont(new Font("SansSerif",Font.BOLD,14));
	            pgraphics.drawString(resultType,30,y);
	            printCategory=false;
	            y-=4;
	        }
	        for (int j=0; j<resultText.size(); j++) {
                pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,10));
                buf = new String((String)resultText.elementAt(j));
                if (Utils.length(buf)>60) {
                    buf2 = new String(buf);
                    int endNdx=0;
                    while (Utils.length(buf2)>60) {
                        for (int k=0;k<60;k++) {
                            if (buf2.charAt(k)==' ')
                                endNdx=k;
                        }
                        buf = new String(buf2.substring(0,endNdx));
                        buf2 = new String(buf2.substring(endNdx).trim());
                        pgraphics.drawString(buf,210,y);
                        y+=10;
                    }
                    if (!Utils.isNull(buf2)) {
                        pgraphics.drawString(buf2,210,y);
                        y+=10;
                    }
                }
                else {
                    pgraphics.drawString(buf,210,y);
                    y+=10;
                }
            }
            y+=10;
	        lastType=t.result_type;
	    }
	    
        if (y>=656) y+=10;
        else y=660;
        if (page==2) y=620;
        pgraphics.setFont(new Font("SansSerif",Font.BOLD,14));
        pgraphics.drawString("VERIFICATION/SIGNATURE",30,y);
        y+=20;
        String cytotech = new String("VERIFIED:  "+
            Utils.addDateMask(resultRec.date_completed)+" - "+
            labReport.cytotech_code.trim());
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,10));            
        pgraphics.drawString(cytotech,30,y);
        y+=30;
        String fullName = new String(labReport.path_fname+" ");
        if (!Utils.isNull(labReport.path_mi)) {
            fullName = new String(fullName+labReport.path_mi+" ");
        }
        fullName = new String(fullName+labReport.path_lname);
        if (!Utils.isNull(labReport.path_degree)) {
            fullName = new String(fullName+", "+labReport.path_degree);
        }
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,12));
        pgraphics.drawString(fullName,30,y);
        y+=10;
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,11));            
        pgraphics.drawString("Pathologist, Medical Director",30,y);
        y+=11;
        pgraphics.setFont(new Font("SansSerif",Font.PLAIN,8));
        String msg =
            "My signature is attestation that I have personally reviewed "+
            "the submitted material(s) and the final result reflects that evaluation.";
        pgraphics.drawString(msg,30,y);                
        if (page>1) {
            y+=50;
            pgraphics.drawLine(30,y,574,y);
            y+=20;
            pgraphics.setFont(new Font("Monospaced",Font.ITALIC,7));
            pgraphics.drawString("Pennsylvania Cytology Services * Suite 1700 Parkway Building * "+
                "339 Old Haymaker Road * Monroeville, PA 15146 * (412) 373-8300",39,y);
        }
        
	}
	
	public void prePrint()
	{
	    int labNum = resultRec.lab_number;
	    int c = currMode;
	    resetActions();
	    currMode=c;
	    resultRec.lab_number=labNum;
	    resLabNumber.setText(Integer.toString(labNum));
	    dbOps.query(resultRec.lab_number);
	    fillForm();
	    dbOps.queryReport(resultRec.lab_number);
	}
    
	
}
