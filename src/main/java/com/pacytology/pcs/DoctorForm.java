package com.pacytology.pcs;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.swing.AbstractAction;
import javax.swing.JRootPane;
import javax.swing.JTextField;

import com.pacytology.pcs.ui.PcsFrame;
import com.pacytology.pcs.ui.Square;

public class DoctorForm extends PcsFrame
{

	private static final long serialVersionUID = 7390187090976730871L;
	
	public PracticesForm parent;
    public LabForm parent2;
	public Login dLogin;
	public int practice_id;
	public DoctorRec dr;
	private int currNdx=0;
	/*
	final int QUERY=101;
	final int ADD=102;
	final int UPDATE=103;
	final int DELETE=104;
	final int IDLE=105;
	final int MERGE=106;
	*/
	final int PRACTICE=201;
	final static int LAB=202;
	public int currMode=Lab.IDLE;
	public int origin=0;
	
	public DoctorForm()
	{

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Doctors");
		setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(527,268);
		setVisible(false);
		drLName.setEnabled(false);
		getContentPane().add(drLName);
		drLName.setFont(new Font("DialogInput", Font.PLAIN, 12));
		drLName.setBounds(106,92,168,20);
		drFName.setEnabled(false);
		getContentPane().add(drFName);
		drFName.setFont(new Font("DialogInput", Font.PLAIN, 12));
		drFName.setBounds(284,92,168,20);
		drMInit.setEnabled(false);
		getContentPane().add(drMInit);
		drMInit.setFont(new Font("DialogInput", Font.PLAIN, 12));
		drMInit.setBounds(462,92,24,20);
		docStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		docStatus.setEnabled(false);
		getContentPane().add(docStatus);
		docStatus.setFont(new Font("DialogInput", Font.PLAIN, 12));
		docStatus.setBounds(56,120,20,20);
		drTitle.setEnabled(false);
		getContentPane().add(drTitle);
		drTitle.setFont(new Font("DialogInput", Font.PLAIN, 12));
		drTitle.setBounds(56,146,44,20);
		drLicense.setEnabled(false);
		getContentPane().add(drLicense);
		drLicense.setFont(new Font("DialogInput", Font.PLAIN, 12));
		drLicense.setBounds(196,146,168,20);
		drUPIN.setEnabled(false);
		getContentPane().add(drUPIN);
		drUPIN.setFont(new Font("DialogInput", Font.PLAIN, 12));
		drUPIN.setBounds(422,146,74,20);
		altLicense.setEnabled(false);
		getContentPane().add(altLicense);
		altLicense.setFont(new Font("DialogInput", Font.PLAIN, 12));
		altLicense.setBounds(196,176,168,20);
		altState.setEnabled(false);
		getContentPane().add(altState);
		altState.setFont(new Font("DialogInput", Font.PLAIN, 12));
		altState.setBounds(422,176,30,20);
		bsProvider.setEnabled(false);
		getContentPane().add(bsProvider);
		bsProvider.setFont(new Font("DialogInput", Font.PLAIN, 12));
		bsProvider.setBounds(196,206,168,20);
		drNameLbl.setText("Doctor Name");
		getContentPane().add(drNameLbl);
		drNameLbl.setBounds(16,94,86,12);
		JLabel1.setText("(last)");
		getContentPane().add(JLabel1);
		JLabel1.setBounds(176,112,48,12);
		JLabel2.setText("(first)");
		getContentPane().add(JLabel2);
		JLabel2.setBounds(352,112,48,12);
		JLabel3.setText("(mi)");
		getContentPane().add(JLabel3);
		JLabel3.setBounds(464,112,28,12);
		JLabel8.setText("Blue Shield Provider ID");
		getContentPane().add(JLabel8);
		JLabel8.setBounds(54,208,130,12);
		mergeConfirm.setMessageType(javax.swing.JOptionPane.QUESTION_MESSAGE);
		mergeConfirm.setOptionType(javax.swing.JOptionPane.YES_NO_OPTION);
		//$$ mergeConfirm.move(0,237);
		JLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		JLabel11.setText("NPI Number");
		getContentPane().add(JLabel11);
		JLabel11.setBounds(54,240,130,12);
		NPInumber.setEnabled(false);
		getContentPane().add(NPInumber);
		NPInumber.setFont(new Font("DialogInput", Font.PLAIN, 12));
		NPInumber.setBounds(196,236,168,20);
		drUpinLbl.setText("UPIN");
		getContentPane().add(drUpinLbl);
		drUpinLbl.setBounds(380,148,42,12);
		//$$ JOptionPane1.move(0,237);
		JLabel9.setText("Retain #");
		getContentPane().add(JLabel9);
		JLabel9.setBounds(400,20,58,12);
		mergeRetain.setEnabled(false);
		getContentPane().add(mergeRetain);
		mergeRetain.setFont(new Font("DialogInput", Font.PLAIN, 12));
		mergeRetain.setBounds(460,18,54,20);
		JLabel10.setText("Remove #");
		getContentPane().add(JLabel10);
		JLabel10.setBounds(400,40,58,12);
		mergeRemove.setEnabled(false);
		getContentPane().add(mergeRemove);
		mergeRemove.setFont(new Font("DialogInput", Font.PLAIN, 12));
		mergeRemove.setBounds(460,38,54,20);
		drMergeLbl.setText("DOCTOR MERGE");
		getContentPane().add(drMergeLbl);
		drMergeLbl.setForeground(java.awt.Color.black);
		drMergeLbl.setBounds(400,4,100,12);
		JLabel7.setText("Status");
		getContentPane().add(JLabel7);
		JLabel7.setBounds(16,122,42,12);
		JLabel5.setText("Alternate License");
		getContentPane().add(JLabel5);
		JLabel5.setBounds(84,178,100,12);
		JLabel6.setText("State");
		getContentPane().add(JLabel6);
		JLabel6.setBounds(380,178,42,12);
		JLabel4.setText("Title");
		getContentPane().add(JLabel4);
		JLabel4.setBounds(16,148,40,12);
		getContentPane().add(F1sq);
		F1sq.setBounds(25,4,20,20);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F1");
		getContentPane().add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(29,4,20,20);
		getContentPane().add(F2sq);
		F2sq.setBounds(87,4,20,20);
		F2lbl.setRequestFocusEnabled(false);
		F2lbl.setText("F2");
		getContentPane().add(F2lbl);
		F2lbl.setForeground(java.awt.Color.black);
		F2lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F2lbl.setBounds(91,4,20,20);
		getContentPane().add(F3sq);
		F3sq.setBounds(149,4,20,20);
		F3lbl.setRequestFocusEnabled(false);
		F3lbl.setText("F3");
		getContentPane().add(F3lbl);
		F3lbl.setForeground(java.awt.Color.black);
		F3lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F3lbl.setBounds(153,4,20,20);
		getContentPane().add(F4sq);
		F4sq.setBounds(211,4,20,20);
		F4lbl.setRequestFocusEnabled(false);
		F4lbl.setText("F4");
		getContentPane().add(F4lbl);
		F4lbl.setForeground(java.awt.Color.black);
		F4lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F4lbl.setBounds(215,4,20,20);
		getContentPane().add(F9sq);
		F9sq.setBounds(273,4,20,20);
		F9lbl.setRequestFocusEnabled(false);
		F9lbl.setText("F9");
		getContentPane().add(F9lbl);
		F9lbl.setForeground(java.awt.Color.black);
		F9lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F9lbl.setBounds(277,4,20,20);
		getContentPane().add(F12sq);
		F12sq.setBounds(335,4,20,20);
		F12lbl.setRequestFocusEnabled(false);
		F12lbl.setText("F12");
		getContentPane().add(F12lbl);
		F12lbl.setForeground(java.awt.Color.black);
		F12lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F12lbl.setBounds(337,4,20,20);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("Query");
		getContentPane().add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(0,28,70,18);
		F2action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F2action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F2action.setText("Add");
		getContentPane().add(F2action);
		F2action.setForeground(java.awt.Color.black);
		F2action.setBounds(62,28,70,16);
		F3action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F3action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F3action.setText("Update");
		getContentPane().add(F3action);
		F3action.setForeground(java.awt.Color.black);
		F3action.setBounds(124,28,70,16);
		F4action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F4action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F4action.setText("Merge");
		getContentPane().add(F4action);
		F4action.setForeground(java.awt.Color.black);
		F4action.setBounds(186,28,70,16);
		F9action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F9action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F9action.setText("Exit");
		getContentPane().add(F9action);
		F9action.setForeground(java.awt.Color.black);
		F9action.setBounds(248,28,70,16);
		F12action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F12action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F12action.setText("Submit");
		getContentPane().add(F12action);
		F12action.setForeground(java.awt.Color.black);
		F12action.setBounds(310,28,70,14);
		getContentPane().add(practiceLbl);
		practiceLbl.setForeground(java.awt.Color.black);
		practiceLbl.setBounds(16,76,460,12);
		getContentPane().add(msgLabel);
		msgLabel.setForeground(java.awt.Color.red);
		msgLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		msgLabel.setBounds(30,52,330,14);
		drLicLbl.setText("License");
		getContentPane().add(drLicLbl);
		drLicLbl.setBounds(112,148,82,12);
		getContentPane().add(drUpinLbl);
		//}}

        dr = new DoctorRec();
        resetColors();
		
		//{{INIT_MENUS
		//}}
	
		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		SymKey aSymKey = new SymKey();
		drFName.addKeyListener(aSymKey);
		drMInit.addKeyListener(aSymKey);
		drLicense.addKeyListener(aSymKey);
		drLName.addKeyListener(aSymKey);
		//SymWindow aSymWindow = new SymWindow();
		//this.addWindowListener(aSymWindow);
		this.addKeyListener(aSymKey);
		drUPIN.addKeyListener(aSymKey);
		drTitle.addKeyListener(aSymKey);
		docStatus.addKeyListener(aSymKey);
		bsProvider.addKeyListener(aSymKey);
		altLicense.addKeyListener(aSymKey);
		altState.addKeyListener(aSymKey);
		SymFocus aSymFocus = new SymFocus();
		drLName.addFocusListener(aSymFocus);
		drFName.addFocusListener(aSymFocus);
		drMInit.addFocusListener(aSymFocus);
		docStatus.addFocusListener(aSymFocus);
		drTitle.addFocusListener(aSymFocus);
		drLicense.addFocusListener(aSymFocus);
		drUPIN.addFocusListener(aSymFocus);
		altLicense.addFocusListener(aSymFocus);
		altState.addFocusListener(aSymFocus);
		bsProvider.addFocusListener(aSymFocus);
		NPInumber.addFocusListener(aSymFocus);
		NPInumber.addKeyListener(aSymKey);
		//}}
		
		actionMap = new DoctorFormActionMap(this);
		setupKeyPressMap();
	}
	protected JRootPane setupKeyPressMap() {
		JRootPane rp = super.setupKeyPressMap();

//		rp.getActionMap().put("F12", new AbstractAction() {
//			public void actionPerformed(ActionEvent e) {
//				
//			}
//		});
		return rp;
	}
	public DoctorForm(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

    public DoctorForm(PracticesForm p) 
    {
        this();
        this.parent=p;
        this.parent.setEnabled(false);
        this.dLogin=p.dbLogin;
        this.origin=PRACTICE;
        String buf="ACCOUNT #";
        if (parent.practiceRec.practice<10) buf=buf+"00";
        else if (parent.practiceRec.practice<100) buf=buf+"0";
        buf=buf+parent.practiceRec.practice+", "+parent.practiceRec.name;
        this.practiceLbl.setText(buf);
        if (parent.doctorVect.size()>0) {
            currNdx=parent.DoctorTable.getSelectedRow();
            if (currNdx<0) currNdx=0;
            if (currNdx>=parent.doctorVect.size()) currNdx=0;
            displayDoctor(currNdx);
        }
    }

    public DoctorForm(LabForm p) 
    {
        this();
        this.F1sq.setVisible(false);
        this.F1lbl.setVisible(false);
        this.F1action.setVisible(false);
        this.F2sq.setVisible(false);
        this.F2lbl.setVisible(false);
        this.F2action.setVisible(false);
        this.F3sq.setVisible(false);
        this.F3lbl.setVisible(false);
        this.F3action.setVisible(false);
        this.F4sq.setVisible(false);
        this.F4lbl.setVisible(false);
        this.F4action.setVisible(false);
        this.parent2=p;
        this.parent2.setEnabled(false);
        this.dLogin=p.dbLogin;
        this.origin=LAB;
        String buf="ACCOUNT #";
        if (parent2.labRec.practice<10) buf=buf+"00";
        else if (parent2.labRec.practice<100) buf=buf+"0";
        buf=buf+parent2.labRec.practice+", "+parent2.labRec.practice_name;
        this.practiceLbl.setText(buf);
        this.addActions();
        this.transferFocus();
        this.drLName.requestFocus();
    }

    public DoctorForm(Login dLogin, DoctorRec dr)
    {
        this();
        this.dLogin=dLogin;
        this.dr=dr;
		drLName.setText(dr.lname);
	    drFName.setText(dr.fname);
		drMInit.setText(dr.mi);
		drUPIN.setText(dr.upin);
		drLicense.setText(dr.license);
		altLicense.setText(dr.alt_license);
		altState.setText(dr.alt_state);
		bsProvider.setText(dr.bs_provider);
		NPInumber.setText(dr.NPI);
		drLicLbl.setText(dr.state+" License");
    }        

    public DoctorForm(Login dLogin, int practice)
    {
        this();
        this.dLogin=dLogin;
        this.dr.practice=practice;    
    }        

	public void setVisible(boolean b)
	{
		if (b) setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new DoctorForm()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		Insets insets = getInsets();
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JTextField drLName = new javax.swing.JTextField();
	javax.swing.JTextField drFName = new javax.swing.JTextField();
	javax.swing.JTextField drMInit = new javax.swing.JTextField();
	javax.swing.JTextField docStatus = new javax.swing.JTextField();
	javax.swing.JTextField drTitle = new javax.swing.JTextField();
	javax.swing.JTextField drLicense = new javax.swing.JTextField();
	javax.swing.JTextField drUPIN = new javax.swing.JTextField();
	javax.swing.JTextField altLicense = new javax.swing.JTextField();
	javax.swing.JTextField altState = new javax.swing.JTextField();
	javax.swing.JTextField bsProvider = new javax.swing.JTextField();
	javax.swing.JLabel drNameLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel8 = new javax.swing.JLabel();
	javax.swing.JOptionPane mergeConfirm = new javax.swing.JOptionPane();
	javax.swing.JLabel JLabel11 = new javax.swing.JLabel();
	javax.swing.JTextField NPInumber = new javax.swing.JTextField();
	javax.swing.JLabel JLabel9 = new javax.swing.JLabel();
	javax.swing.JTextField mergeRetain = new javax.swing.JTextField();
	javax.swing.JLabel JLabel10 = new javax.swing.JLabel();
	javax.swing.JTextField mergeRemove = new javax.swing.JTextField();
	javax.swing.JLabel drMergeLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel7 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel5 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel6 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
	Square F1sq = new Square();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	Square F2sq = new Square();
	javax.swing.JLabel F2lbl = new javax.swing.JLabel();
	Square F3sq = new Square();
	javax.swing.JLabel F3lbl = new javax.swing.JLabel();
	Square F4sq = new Square();
	javax.swing.JLabel F4lbl = new javax.swing.JLabel();
	Square F9sq = new Square();
	javax.swing.JLabel F9lbl = new javax.swing.JLabel();
	Square F12sq = new Square();
	javax.swing.JLabel F12lbl = new javax.swing.JLabel();
	javax.swing.JLabel F1action = new javax.swing.JLabel();
	javax.swing.JLabel F2action = new javax.swing.JLabel();
	javax.swing.JLabel F3action = new javax.swing.JLabel();
	javax.swing.JLabel F4action = new javax.swing.JLabel();
	javax.swing.JLabel F9action = new javax.swing.JLabel();
	javax.swing.JLabel F12action = new javax.swing.JLabel();
	javax.swing.JLabel practiceLbl = new javax.swing.JLabel();
	javax.swing.JLabel msgLabel = new javax.swing.JLabel();
	javax.swing.JLabel drLicLbl = new javax.swing.JLabel();
	javax.swing.JLabel drUpinLbl = new javax.swing.JLabel();
	//}}
	

	//{{DECLARE_MENUS
	//}}


	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			
		}
	}

	public void addActions() {
		clearForm();
		currMode=Lab.ADD;
		setEnableAllFields(true);
		docStatus.setEnabled(false);
		drLName.requestFocus();
	}
	
	public void setEnableAllFields(boolean eVal) {
	    drLName.setEnabled(eVal);
	    drFName.setEnabled(eVal);
	    drMInit.setEnabled(eVal);
	    drUPIN.setEnabled(eVal);
	    drLicense.setEnabled(eVal);
	    drTitle.setEnabled(eVal);
	    altLicense.setEnabled(eVal);
	    altState.setEnabled(eVal);
	    docStatus.setEnabled(eVal);
	    bsProvider.setEnabled(eVal);
	    NPInumber.setEnabled(eVal);
    }	    

	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == DoctorForm.this)
				DoctorForm_keyPressed(event);
			else if (object == drLName)
				drLName_keyPressed(event);
			else if (object == drFName)
				drFName_keyPressed(event);
			else if (object == drMInit)
				drMInit_keyPressed(event);
			else if (object == drTitle)
				drTitle_keyPressed(event);
			else if (object == drLicense)
				drLicense_keyPressed(event);
			else if (object == drUPIN)
				drUPIN_keyPressed(event);
			else if (object == docStatus)
				docStatus_keyPressed(event);
			else if (object == bsProvider)
				bsProvider_keyPressed(event);
			else if (object == altLicense)
				altLicense_keyPressed(event);
			else if (object == altState)
				altState_keyPressed(event);
			else if (object == NPInumber)
				NPInumber_keyPressed(event);
		}


		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == drFName)
				drFName_keyTyped(event);
			else if (object == drMInit)
				drMInit_keyTyped(event);
			if (object == drLicense)
				drLicense_keyTyped(event);
			if (object == drLName)
				drLName_keyTyped(event);
			else if (object == drUPIN)
				drUPIN_keyTyped(event);
			else if (object == drTitle)
				drTitle_keyTyped(event);
			else if (object == docStatus)
				docStatus_keyTyped(event);
			else if (object == bsProvider)
				bsProvider_keyTyped(event);
			else if (object == altLicense)
				altLicense_keyTyped(event);
			else if (object == altState)
				altState_keyTyped(event);
			else if (object == NPInumber)
				NPInumber_keyTyped(event);
			
		}
	}

	void drFName_keyTyped(java.awt.event.KeyEvent event)
	{
        Utils.forceUpper(event,32);
	}

	void drMInit_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,1);
	}

	void drLicense_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,16);
	}

	void drLName_keyTyped(java.awt.event.KeyEvent event)
	{
	    Utils.forceUpper(event,64);
	    
	}

	public void finalActions()
	{
        CallableStatement cstmt = null;
        int prac = 0;
        int drNdx = 0;
        try  {
		    if (origin==PRACTICE) prac=parent.practiceRec.practice;
            else if (origin==LAB) prac=parent2.labRec.practice;
		    if (currMode==Lab.ADD) {
		        cstmt=DbConnection.process().prepareCall(
		            "{call pcs.doctors_add(?,?,?,?,?,?,?,?,?,?,?)}");
                cstmt.setInt(1,prac);
                cstmt.setString(2,(drLName.getText()));
                cstmt.setString(3,(drFName.getText()));
                cstmt.setString(4,(drMInit.getText()));
                cstmt.setString(5,(drUPIN.getText()));
                cstmt.setString(6,(drLicense.getText()));
                cstmt.setString(7,(drTitle.getText()));
                cstmt.setString(8,(altLicense.getText()));
                cstmt.setString(9,(altState.getText()));
                cstmt.setString(10,(bsProvider.getText()));
                cstmt.setString(11,(NPInumber.getText()));
                cstmt.executeUpdate();
                setEnableAllFields(false);
                currMode=Lab.IDLE;
                msgLabel.setText("Operation Succeeded");
                msgLabel.requestFocus();
                docStatus.setText("A");
            }		  
		    else if (currMode==Lab.MERGE) {
		        int dr_save = (int)Integer.parseInt(mergeRetain.getText());
		        int dr_delete = (int)Integer.parseInt(mergeRemove.getText());
		        int rv = mergeConfirm.showConfirmDialog(this,"Merge doctors "+dr_save+" and "+dr_delete+"?",
		            "Doctor Merge",mergeConfirm.YES_NO_OPTION,mergeConfirm.QUESTION_MESSAGE);
		        if (rv!=mergeConfirm.YES_OPTION) { 
		            currMode=Lab.IDLE;
		            mergeRetain.setText(null);
		            mergeRemove.setText(null);
		            return;
		        }
                setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
		        cstmt=DbConnection.process().prepareCall(
		            "{call pcs.doctor_merge(?,?)}");
                cstmt.setInt(1,dr_delete);
                cstmt.setInt(2,dr_save);
                cstmt.executeUpdate();
                currMode=Lab.IDLE;
                msgLabel.setText("Operation Succeeded");
                msgLabel.requestFocus();
                drNdx=0;
                if (parent.defaultDr.getText().equals(mergeRemove.getText())) {
                    parent.defaultDr.setText(mergeRetain.getText());
                    parent.practiceRec.default_doctor=dr_save;
                }
            }		  
		    else if (currMode==Lab.UPDATE) {
		        int doctor=0;
		        drNdx = parent.DoctorTable.getSelectedRow();
		        if (origin==PRACTICE) { 
		            DoctorRec d = (DoctorRec)parent.doctorVect.elementAt(currNdx);
		            doctor=d.doctor;
		        }
		        else if (origin==LAB) doctor=dr.doctor;
		        cstmt=DbConnection.process().prepareCall(
		            "{call pcs.doctors_update(?,?,?,?,?,?,?,?,?,?,?,?)}");
                cstmt.setInt(1,doctor);
                cstmt.setString(2,(drLName.getText()));
                cstmt.setString(3,(drFName.getText()));
                cstmt.setString(4,(drMInit.getText()));
                cstmt.setString(5,(drUPIN.getText()));
                cstmt.setString(6,(drLicense.getText()));
                cstmt.setString(7,(drTitle.getText())); 
                cstmt.setString(8,(altLicense.getText()));
                cstmt.setString(9,(altState.getText()));
                cstmt.setString(10,(docStatus.getText()));
                cstmt.setString(11,(bsProvider.getText()));
                cstmt.setString(12,(NPInumber.getText()));
                cstmt.executeUpdate();
                setEnableAllFields(false);
                currMode=Lab.IDLE;
                msgLabel.setText("Operation Succeeded");
                msgLabel.requestFocus();
            }		  
            try { cstmt.close(); }
            catch ( SQLException e ) {
                    System.out.println("SQLState: "+e.getSQLState());
                    System.out.println("Message:  "+e.getMessage());
                    System.out.println("Vendor code"+e.getErrorCode());
                    e.printStackTrace(System.out);
                    setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            }                
        }            
        catch( SQLException e ) {
            System.out.println("SQLState: "+e.getSQLState());
            System.out.println("Message:  "+e.getMessage());
            System.out.println("Vendor code"+e.getErrorCode());
            e.printStackTrace(System.out);
            msgLabel.setText("Operation Failed");
            setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        }
        if (origin==PRACTICE) { 
            parent.dbOps.getDoctors(parent.practiceRec.practice);
            parent.clearDoctorTable();
            parent.displayDoctorTable();
            parent.DoctorTable.setRowSelectionInterval(drNdx,drNdx);
            displayDoctor(drNdx);
        }
        if (origin==LAB) { 
            try {
                parent2.labOps.queryDoctorInfo(prac);
            }
            catch (Exception e) { }
            int maxDoctor=0;
	        for (int i=0;i<parent2.doctorVect.size();i++)  {
	            DoctorRec dRec = (DoctorRec)parent2.doctorVect.elementAt(i);
	            if (dRec.doctor>maxDoctor) {
	                parent2.labRec.doctor=dRec.doctor;
                    maxDoctor=dRec.doctor;	                
                }
            }
        }
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
	}

	void DoctorForm_keyPressed(java.awt.event.KeyEvent event)
	{
	    msgLabel.setText(null);
        try {
	        int key=event.getKeyCode();
            switch (key) {
                case KeyEvent.VK_ESCAPE:
	                clearForm();
	                msgLabel.setText(null);
	                msgLabel.requestFocus();
	                setEnableAllFields(false);
	                break;
	            case KeyEvent.VK_F2:
	                if (currMode==Lab.IDLE) addActions();
	                break;
	            case KeyEvent.VK_F3:
	                if (currMode==Lab.IDLE) updateActions();
	                break;
	            case KeyEvent.VK_F4:
	                if (currMode==Lab.IDLE && origin==PRACTICE) mergeActions();
	                break;
	            case KeyEvent.VK_F9:
	                if (currMode==Lab.IDLE) {
	                    if (origin==PRACTICE) {
	                        this.parent.setEnabled(true);
	                        this.parent.toFront();
	                    }
	                    else if (origin==LAB) {
	                        this.parent2.setEnabled(true);
	                        this.parent2.toFront();
	                    }
	                    this.dispose();
	                }
	                break;

                case java.awt.event.KeyEvent.VK_DOWN:
                    if (origin==PRACTICE) {
                        if (currNdx==(parent.doctorVect.size()-1))
                            msgLabel.setText("Bottom of List");
                        else {
                            parent.increment();
                            currNdx++;
                            displayDoctor(currNdx);
                        }
                    }
                    break;
                case java.awt.event.KeyEvent.VK_UP:
                    if (origin==PRACTICE) {
                        if (currNdx==0)
                            msgLabel.setText("Top of List");
                        else {
                            parent.decrement();
                            currNdx--;
                            displayDoctor(currNdx);
                        }
                    }
                    break;
            case java.awt.event.KeyEvent.VK_CONTROL:
                ((JTextField)getFocusOwner()).setText(null);
                break;
            }
        }
        catch (Exception e)  { System.out.println(e); }            
	}
	
	void clearForm() {
	    drLName.setText(null);
	    drFName.setText(null);
	    drMInit.setText(null);
	    drUPIN.setText(null);
	    drLicense.setText(null);
	    drTitle.setText(null);
	    altLicense.setText(null);
	    altState.setText(null);
	    docStatus.setText(null);
	    bsProvider.setText(null);
	    NPInumber.setText(null);
	    mergeRetain.setText(null);
	    mergeRemove.setText(null);
	    drLicLbl.setText("License");
	    currMode=Lab.IDLE;
    }
    
    void mergeActions()
    {
        if (parent.doctorVect.size()<2) {
            Utils.createErrMsg("There must be at least two doctors for a merge");
            return;
        }
        int ndx = parent.DoctorTable.getSelectedRow();
        if (ndx>=0 && ndx<parent.doctorVect.size()) {
            currMode=Lab.MERGE;
            DoctorRec d = (DoctorRec)parent.doctorVect.elementAt(ndx);
            mergeRetain.setText(Integer.toString(d.doctor));
        }
    }

	void drUPIN_keyTyped(java.awt.event.KeyEvent event)
	{
        Utils.forceUpper(event,16);
	}
	
	public void displayDoctor(int ndx) {
	    if (ndx>=parent.doctorVect.size()) ndx=0;
	    DoctorRec d = (DoctorRec)parent.doctorVect.elementAt(ndx);
	    drLName.setText(d.lname);
	    drFName.setText(d.fname);
	    drMInit.setText(d.mi);
	    drTitle.setText(d.title);
	    drUPIN.setText(d.upin);
	    drLicense.setText(d.license);
	    altLicense.setText(d.alt_license);
	    altState.setText(d.alt_state);
	    bsProvider.setText(d.bs_provider);
	    NPInumber.setText(d.NPI);
	    drLicLbl.setText(d.state+" License");
	    docStatus.setText(d.active_status);
	    if (currMode==Lab.MERGE) {
	        String dRemove = Integer.toString(d.doctor);
	        if (!dRemove.equals(mergeRetain.getText()))
	            mergeRemove.setText(dRemove);
	    }
	}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == DoctorForm.this)
				DoctorForm_windowClosing(event);
		}
	}

	void DoctorForm_windowClosing(java.awt.event.WindowEvent event)
	{
	    if (origin==PRACTICE) this.parent.setEnabled(true);
	    else if (origin==LAB) this.parent2.setEnabled(true);
	}
	
	public void updateActions() {
	    if (origin==LAB) {
	        queryDoctor(parent2.labRec.doctor);
	    }
	    currMode=Lab.UPDATE;
	    setEnableAllFields(true);
	    drLName.requestFocus();
	}

	void drTitle_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,16);
	}
	
	public void queryDoctor(int doctor)
	{
        try  {
            String query = 
                "SELECT lname,fname,mi,title,upin,license,alt_license, \n"+
                "   alt_state,active_status,bs_provider,NPI \n"+
                "FROM pcs.doctors \n"+
                "WHERE doctor="+doctor+" \n";

            System.out.println(query);                
            Statement stmt = DbConnection.process().createStatement();
            ResultSet rs = stmt.executeQuery(query);
            dr.doctor=doctor;
            while (rs.next()) {
                dr.lname=rs.getString(1);
                dr.fname=rs.getString(2);
                dr.mi=rs.getString(3);
                dr.title=rs.getString(4);
                dr.upin=rs.getString(5);
                dr.license=rs.getString(6);
                dr.alt_license=rs.getString(7);
                dr.alt_state=rs.getString(8);
                dr.active_status=rs.getString(9);
                dr.bs_provider=rs.getString(10);
                dr.NPI=rs.getString(11);
            }
            drLName.setText(dr.lname);
            drFName.setText(dr.fname);
            drMInit.setText(dr.mi);
            drTitle.setText(dr.title);
            drUPIN.setText(dr.upin);
            drLicense.setText(dr.license);
            altLicense.setText(dr.alt_license);
            altState.setText(dr.alt_state);
            docStatus.setText(dr.active_status);
            bsProvider.setText(dr.bs_provider);
            NPInumber.setText(dr.NPI);
            try { stmt.close(); rs.close(); }
            catch ( SQLException e ) {
                    System.out.println("SQLState: "+e.getSQLState());
                    System.out.println("Message:  "+e.getMessage());
                    System.out.println("Vendor code"+e.getErrorCode());
                    e.printStackTrace(System.out);
            }                
        }            
        catch( SQLException e ) {
            System.out.println("SQLState: "+e.getSQLState());
            System.out.println("Message:  "+e.getMessage());
            System.out.println("Vendor code"+e.getErrorCode());
            e.printStackTrace(System.out);
            msgLabel.setText("Operation Failed");
        }
	}

	void drLName_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER) {
		    if (Utils.required(drLName,"Last Name"))
		        drLName.transferFocus();
		}
	}

	void drFName_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER) {
		    if (Utils.required(drFName,"First Name"))
		        drFName.transferFocus();
		}
	}

	void drMInit_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER)
		    drMInit.transferFocus();
	}

	void drTitle_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER)
		    drTitle.transferFocus();
	}

	void drLicense_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER)
		    drLicense.transferFocus();
	}

	void drUPIN_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER)
		    drUPIN.transferFocus();
	}


	void docStatus_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,1);
	}

	void docStatus_keyPressed(java.awt.event.KeyEvent event)
	{
	    if (event.getKeyCode()==event.VK_ENTER) {
	        String s = docStatus.getText();
	        if (Utils.isNull(s) || (!s.equals("A") && !s.equals("I")))
	            Utils.createErrMsg("Status is (A)ctive or (I)nactive");
	        else docStatus.transferFocus();
	    }
	}

	void bsProvider_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    bsProvider.transferFocus();
	}

	void bsProvider_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,16);
	}

	void altLicense_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,16);
	}

	void altLicense_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    altLicense.transferFocus();
	}

	void altState_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,2);
	}

	void altState_keyPressed(java.awt.event.KeyEvent event)
	{
        if (event.getKeyCode()==event.VK_ENTER) {
		    if (!Utils.isNull(altLicense.getText())) {
		        if (Utils.required(
		            altState,"Must include state for alternate license"))
                    altState.transferFocus();
		    }
		    else altState.transferFocus();
		}
	}
	
	void resetColors()
	{
	    Utils.setColors(this.getContentPane());
	    drMergeLbl.setForeground(Color.white);
	    practiceLbl.setForeground(Color.white);
	    msgLabel.setForeground(Color.green);
	    this.repaint();
	}

	class SymFocus extends java.awt.event.FocusAdapter
	{
		public void focusGained(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			if (object == drLName)
				drLName_focusGained(event);
			else if (object == drFName)
				drFName_focusGained(event);
			else if (object == drMInit)
				drMInit_focusGained(event);
			else if (object == docStatus)
				docStatus_focusGained(event);
			else if (object == drTitle)
				drTitle_focusGained(event);
			else if (object == drLicense)
				drLicense_focusGained(event);
			else if (object == drUPIN)
				drUPIN_focusGained(event);
			else if (object == altLicense)
				altLicense_focusGained(event);
			else if (object == altState)
				altState_focusGained(event);
			else if (object == bsProvider)
				bsProvider_focusGained(event);
			else if (object == NPInumber)
				NPInumber_focusGained(event);
		}
	}
	
	void drLName_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}
	

	void drFName_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void drMInit_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void docStatus_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void drTitle_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void drLicense_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void drUPIN_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void altLicense_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void altState_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void bsProvider_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void NPInumber_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void NPInumber_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event);
	}

	void NPInumber_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    NPInumber.transferFocus();
	}
	@Override
	public void queryActions() {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void resetActions() {
		// TODO Auto-generated method stub
		
	}
	
}
