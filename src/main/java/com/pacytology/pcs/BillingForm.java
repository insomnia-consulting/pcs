package com.pacytology.pcs;/*

    PENNSYLVANIA CYTOLOGY SERVICES
    LABORATORY INFORMATION SYSTEM V1.0
    Copyright (C) 2001 by John Cardella
    All Rights Reserved
    
    File:       BillingForm.java
    Created By: John Cardella, Software Engineer
    
    Function:   Data entry form for managing billing changes
    and entering claim payments. 
    
    MODIFICATIONS ----------------------------------
    Date/Staff      Description:
*/

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.util.Vector;

import javax.swing.AbstractAction;
import javax.swing.JRootPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.border.TitledBorder;

import com.pacytology.pcs.actions.BillingFormActionMap;
import com.pacytology.pcs.actions.LabFormActionMap;
import com.pacytology.pcs.ui.PcsFrame;
import com.pacytology.pcs.ui.Square;


public class BillingForm extends PcsFrame
{
    
	int MAX_BILLING_CODES=10;
    int MAX_DIAG_CODES=1000;
    final int MAX_DRS=50;
    final int DATA_ENTRY = 0;
    final int RESULTED = 1;
    final int BILLED = 2;
    final int FIRST_PAYMENT = 3;
    final int FINISHED = 4;
    public int currMode=Lab.IDLE;
    public Login dbLogin;
    public BillingCodeRec[] labBillingCodes;
    public DiagnosisCodeRec[] labDiagnosisCodes;
    public TppRec[] tpps;
    public LabRec labRec = new LabRec();
	public int currentSection = 0;
    String[] diagnosisCodeList;
    String[] billingCodeList;
    public FunctionKeyControl fKeys = new FunctionKeyControl();
    public boolean hasComments=false;
    protected boolean dbThreadRunning=false;
    public BillingDbOps labOps;
    public Vector carrierVect = new Vector();
    public Vector doctorVect = new Vector();
    public boolean checkCarrier = true;
    public boolean carrierCommentsShown = true;
    public int currNdx = 0;
    public Vector itemVect = new Vector();
    public Vector claimStatusVect = new Vector();
    public int globalFinished = -1;
    public Vector reworkQueue = new Vector();
    public LogFile log;
    int originalBillingChoice = 0;
    boolean billingChanged = false;
    boolean dFlag = false;
    public boolean inBillingQueue = false;
    public boolean inRework = false;
    public boolean isClaimStatusLocked = false;
    public String lockedClaimStatus;
    boolean patientQuery = false;
    boolean carrierChanged = false;
    public boolean hasLetter = false;
    boolean inCollection = false;
    String collectionInfo;
	public JTextArea labComments = new javax.swing.JTextArea();
	public JTextArea practiceComments = new javax.swing.JTextArea();
	public JTextArea dbComments = new javax.swing.JTextArea();
	boolean hasSecondary = false;
	boolean claimStatusChanged = false;
	public BillingDetails billingAdd;

	public BillingForm()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Billing");
		setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.TEXT_CURSOR));
		getContentPane().setFont(new Font("Dialog", Font.PLAIN, 12));
		setSize(808,562);
		setVisible(false);
		patientPanel.setBorder(titledBorder1);
		patientPanel.setLayout(null);
		getContentPane().add(patientPanel);
		patientPanel.setBounds(74,4,420,238);
		labPrevLabNum.setEnabled(false);
		patientPanel.add(labPrevLabNum);
		labPrevLabNum.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labPrevLabNum.setBounds(76,26,80,20);
		labNumber.setEnabled(false);
		patientPanel.add(labNumber);
		labNumber.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labNumber.setBounds(200,26,80,20);
		labPatientNumber.setEnabled(false);
		patientPanel.add(labPatientNumber);
		labPatientNumber.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labPatientNumber.setBounds(348,208,54,20);
		labPractice.setEnabled(false);
		patientPanel.add(labPractice);
		labPractice.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labPractice.setBounds(76,48,30,20);
		labPatientLastName.setEnabled(false);
		patientPanel.add(labPatientLastName);
		labPatientLastName.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labPatientLastName.setBounds(50,74,160,20);
		labPatientFirstName.setEnabled(false);
		patientPanel.add(labPatientFirstName);
		labPatientFirstName.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labPatientFirstName.setBounds(246,74,110,20);
		labPatientMI.setEnabled(false);
		patientPanel.add(labPatientMI);
		labPatientMI.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labPatientMI.setBounds(378,74,24,20);
		labPaAddress.setEnabled(false);
		patientPanel.add(labPaAddress);
		labPaAddress.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labPaAddress.setBounds(76,96,326,20);
		labZip.setEnabled(false);
		patientPanel.add(labZip);
		labZip.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labZip.setBounds(76,118,80,20);
		labCity.setEnabled(false);
		patientPanel.add(labCity);
		labCity.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labCity.setBounds(192,118,142,20);
		labState.setEnabled(false);
		patientPanel.add(labState);
		labState.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labState.setBounds(378,118,24,20);
		labPhone.setEnabled(false);
		patientPanel.add(labPhone);
		labPhone.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labPhone.setBounds(60,140,108,20);
		labDOB.setEnabled(false);
		patientPanel.add(labDOB);
		labDOB.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labDOB.setBounds(203,140,76,20);
		labSSN.setEnabled(false);
		patientPanel.add(labSSN);
		labSSN.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labSSN.setBounds(316,140,86,20);
		labClientNotes.setEnabled(false);
		patientPanel.add(labClientNotes);
		labClientNotes.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labClientNotes.setBounds(100,162,302,20);
		labDateCollected.setEnabled(false);
		patientPanel.add(labDateCollected);
		labDateCollected.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labDateCollected.setBounds(80,184,76,20);
		labPatientID.setEnabled(false);
		patientPanel.add(labPatientID);
		labPatientID.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labPatientID.setBounds(230,184,80,20);
		labRush.setText(" Rush");
		labRush.setActionCommand(" Client Notes");
		labRush.setEnabled(false);
		patientPanel.add(labRush);
		labRush.setForeground(new java.awt.Color(102,102,153));
		labRush.setBounds(340,186,60,16);
		labNumLbl.setRequestFocusEnabled(false);
		labNumLbl.setText("Lab #");
		patientPanel.add(labNumLbl);
		labNumLbl.setBounds(164,28,40,14);
		labPatientIDlbl.setRequestFocusEnabled(false);
		labPatientIDlbl.setText("Pat. ID#");
		patientPanel.add(labPatientIDlbl);
		labPatientIDlbl.setBounds(180,186,50,12);
		labSSNLbl.setRequestFocusEnabled(false);
		labSSNLbl.setText("SSN");
		patientPanel.add(labSSNLbl);
		labSSNLbl.setBounds(287,142,36,12);
		labPracticeLbl.setRequestFocusEnabled(false);
		labPracticeLbl.setText("Practice");
		patientPanel.add(labPracticeLbl);
		labPracticeLbl.setForeground(new java.awt.Color(102,102,153));
		labPracticeLbl.setBounds(20,50,56,12);
		labCollDateLbl.setRequestFocusEnabled(false);
		labCollDateLbl.setText("Collected");
		patientPanel.add(labCollDateLbl);
		labCollDateLbl.setBounds(20,186,70,12);
		JLabel21.setRequestFocusEnabled(false);
		JLabel21.setText("Phone");
		patientPanel.add(JLabel21);
		JLabel21.setForeground(new java.awt.Color(102,102,153));
		JLabel21.setBounds(20,142,50,12);
		JLabel11.setRequestFocusEnabled(false);
		JLabel11.setText("Doctor");
		patientPanel.add(JLabel11);
		JLabel11.setForeground(new java.awt.Color(102,102,153));
		JLabel11.setBounds(20,210,50,12);
		labAddrLbl.setRequestFocusEnabled(false);
		labAddrLbl.setText("Address");
		patientPanel.add(labAddrLbl);
		labAddrLbl.setForeground(new java.awt.Color(102,102,153));
		labAddrLbl.setBounds(20,100,70,12);
		JLabel15.setRequestFocusEnabled(false);
		JLabel15.setText("DOB");
		patientPanel.add(JLabel15);
		JLabel15.setBounds(174,142,32,12);
		JLabel16.setRequestFocusEnabled(false);
		JLabel16.setText("Zip Code");
		patientPanel.add(JLabel16);
		JLabel16.setForeground(new java.awt.Color(102,102,153));
		JLabel16.setBounds(20,120,50,12);
		JLabel17.setRequestFocusEnabled(false);
		JLabel17.setText("City");
		patientPanel.add(JLabel17);
		JLabel17.setForeground(new java.awt.Color(102,102,153));
		JLabel17.setBounds(164,120,36,12);
		JLabel18.setRequestFocusEnabled(false);
		JLabel18.setText("State");
		patientPanel.add(JLabel18);
		JLabel18.setForeground(new java.awt.Color(102,102,153));
		JLabel18.setBounds(346,120,40,12);
		JLabel6.setRequestFocusEnabled(false);
		JLabel6.setText("Prev Lab");
		patientPanel.add(JLabel6);
		JLabel6.setBounds(20,28,50,14);
		JLabel20.setRequestFocusEnabled(false);
		JLabel20.setText("Client Notes");
		patientPanel.add(JLabel20);
		JLabel20.setBounds(20,164,70,12);
		JLabel22.setRequestFocusEnabled(false);
		JLabel22.setText("Last");
		patientPanel.add(JLabel22);
		JLabel22.setBounds(20,76,40,12);
		JLabel23.setRequestFocusEnabled(false);
		JLabel23.setText("First");
		patientPanel.add(JLabel23);
		JLabel23.setBounds(216,76,40,12);
		JLabel24.setRequestFocusEnabled(false);
		JLabel24.setText("MI");
		patientPanel.add(JLabel24);
		JLabel24.setBounds(360,76,24,12);
		labPracticeName.setRequestFocusEnabled(false);
		patientPanel.add(labPracticeName);
		labPracticeName.setFont(new Font("Dialog", Font.BOLD, 11));
		labPracticeName.setBounds(110,47,206,12);
		JLabel1.setRequestFocusEnabled(false);
		JLabel1.setText("Patient");
		patientPanel.add(JLabel1);
		JLabel1.setBounds(304,210,48,12);
		doctorText.setEnabled(false);
		patientPanel.add(doctorText);
		doctorText.setFont(new Font("DialogInput", Font.PLAIN, 12));
		doctorText.setBounds(64,208,230,20);
		practicePhone.setRequestFocusEnabled(false);
		practicePhone.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
		patientPanel.add(practicePhone);
		practicePhone.setForeground(new java.awt.Color(102,102,153));
		practicePhone.setFont(new Font("Dialog", Font.BOLD, 11));
		practicePhone.setBounds(110,56,118,14);
		labParent.setEnabled(false);
		patientPanel.add(labParent);
		labParent.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labParent.setBounds(372,48,30,20);
		JLabel5.setRequestFocusEnabled(false);
		JLabel5.setText("Parent");
		patientPanel.add(JLabel5);
		JLabel5.setForeground(new java.awt.Color(102,102,153));
		JLabel5.setBounds(330,50,38,12);
		pracType.setRequestFocusEnabled(false);
		pracType.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		patientPanel.add(pracType);
		pracType.setForeground(java.awt.Color.black);
		pracType.setFont(new Font("Dialog", Font.BOLD, 11));
		pracType.setBounds(226,10,80,12);
		pgmLabel.setRequestFocusEnabled(false);
		pgmLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		patientPanel.add(pgmLabel);
		pgmLabel.setForeground(java.awt.Color.black);
		pgmLabel.setFont(new Font("Dialog", Font.BOLD, 11));
		pgmLabel.setBounds(320,10,80,12);
		titledBorder1.setTitleFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
		titledBorder1.setTitle("PATIENT DETAILS");
		//$$ titledBorder1.move(64,560);
		historyPanel.setBorder(titledBorder5);
		historyPanel.setLayout(null);
		getContentPane().add(historyPanel);
		historyPanel.setBounds(498,4,300,118);
		JScrollPane1.setOpaque(true);
		JScrollPane1.setEnabled(false);
		historyPanel.add(JScrollPane1);
		JScrollPane1.setBounds(8,18,286,94);
		historyList.setEnabled(false);
		JScrollPane1.getViewport().add(historyList);
		historyList.setFont(new Font("DialogInput", Font.PLAIN, 10));
		historyList.setBounds(0,0,283,91);
		titledBorder5.setTitleFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
		titledBorder5.setTitle("BILLING HISTORY");
		//$$ titledBorder5.move(96,563);
		chargesPanel.setBorder(titledBorder6);
		chargesPanel.setLayout(null);
		getContentPane().add(chargesPanel);
		chargesPanel.setBounds(498,124,300,178);
		JScrollPane2.setOpaque(true);
		JScrollPane2.setEnabled(false);
		chargesPanel.add(JScrollPane2);
		JScrollPane2.setBounds(8,16,286,94);
		itemList.setEnabled(false);
		JScrollPane2.getViewport().add(itemList);
		itemList.setFont(new Font("DialogInput", Font.PLAIN, 10));
		itemList.setBounds(0,0,283,91);
		ttlCharges.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		ttlCharges.setEnabled(false);
		ttlAdjust.setEnabled(false);
		chargesPanel.add(ttlCharges);
		ttlCharges.setFont(new Font("DialogInput", Font.PLAIN, 12));
		ttlCharges.setBounds(106,114,60,20);
		ttlPayments.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		ttlPayments.setEnabled(false);
		chargesPanel.add(ttlPayments);
		ttlPayments.setFont(new Font("DialogInput", Font.PLAIN, 12));
		ttlPayments.setBounds(106,134,60,20);
		JLabel4.setRequestFocusEnabled(false);
		JLabel4.setText("Total Charges");
		chargesPanel.add(JLabel4);
		JLabel4.setBounds(8,116,86,14);
		JLabel9.setRequestFocusEnabled(false);
		JLabel9.setText("Total Payments");
		chargesPanel.add(JLabel9);
		JLabel9.setBounds(8,136,90,12);
		JLabel10.setRequestFocusEnabled(false);
		JLabel10.setText("Amt Due");
		chargesPanel.add(JLabel10);
		JLabel10.setBounds(176,116,50,12);
		thisBalance.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		thisBalance.setEnabled(false);
		chargesPanel.add(thisBalance);
		thisBalance.setFont(new Font("DialogInput", Font.PLAIN, 12));
		thisBalance.setBounds(232,114,60,20);
		thisRebill.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		thisRebill.setEnabled(false);
		chargesPanel.add(thisRebill);
		thisRebill.setFont(new Font("DialogInput", Font.PLAIN, 12));
		thisRebill.setBounds(272,134,20,20);
		billingLevel.setEnabled(false);
		chargesPanel.add(billingLevel);
		billingLevel.setFont(new Font("DialogInput", Font.PLAIN, 12));
		billingLevel.setBounds(232,134,30,20);
		ttlAdjust.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		chargesPanel.add(ttlAdjust);
		ttlAdjust.setFont(new Font("DialogInput", Font.PLAIN, 12));
		ttlAdjust.setBounds(106,154,60,20);
		JLabel3.setRequestFocusEnabled(false);
		JLabel3.setText("Adjustments");
		chargesPanel.add(JLabel3);
		JLabel3.setBounds(8,156,96,12);
		titledBorder6.setTitleFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
		titledBorder6.setTitle("CHARGES & PAYMENTS");
		//$$ titledBorder6.move(120,563);
		claimPanel.setBorder(titledBorder7);
		claimPanel.setLayout(null);
		getContentPane().add(claimPanel);
		claimPanel.setBounds(498,304,300,250);
		JLabel19.setText("Amount Paid");
		claimPanel.add(JLabel19);
		JLabel19.setBounds(32,62,86,12);
		claimStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		claimStatus.setEnabled(false);
		claimPanel.add(claimStatus);
		claimStatus.setFont(new Font("DialogInput", Font.PLAIN, 12));
		claimStatus.setBounds(174,40,30,20);
		paymentAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		paymentAmount.setEnabled(false);
		claimPanel.add(paymentAmount);
		paymentAmount.setFont(new Font("DialogInput", Font.PLAIN, 12));
		paymentAmount.setBounds(174,60,80,20);
		claimAllowable.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		claimAllowable.setEnabled(false);
		claimPanel.add(claimAllowable);
		claimAllowable.setFont(new Font("DialogInput", Font.PLAIN, 12));
		claimAllowable.setBounds(174,80,80,20);
		JLabel25.setText("Allowance");
		claimPanel.add(JLabel25);
		JLabel25.setBounds(32,82,86,12);
		JLabel26.setText("Amount Due");
		claimPanel.add(JLabel26);
		JLabel26.setBounds(32,102,100,12);
		patientAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		patientAmount.setEnabled(false);
		claimPanel.add(patientAmount);
		patientAmount.setFont(new Font("DialogInput", Font.PLAIN, 12));
		patientAmount.setBounds(174,100,80,20);
		JLabel27.setText("Reject Code");
		claimPanel.add(JLabel27);
		JLabel27.setBounds(32,122,110,12);
		altClaimID.setEnabled(false);
		claimPanel.add(altClaimID);
		altClaimID.setFont(new Font("DialogInput", Font.PLAIN, 12));
		altClaimID.setBounds(174,120,80,20);
		JLabel28.setText("Date Received");
		claimPanel.add(JLabel28);
		JLabel28.setBounds(32,142,86,12);
		dateReceived.setEnabled(false);
		claimPanel.add(dateReceived);
		dateReceived.setFont(new Font("DialogInput", Font.PLAIN, 12));
		dateReceived.setBounds(174,140,80,20);
		claimStatusDescr.setRequestFocusEnabled(false);
		claimStatusDescr.setText("Claim Status Description");
		claimPanel.add(claimStatusDescr);
		claimStatusDescr.setForeground(java.awt.Color.black);
		claimStatusDescr.setFont(new Font("Dialog", Font.PLAIN, 10));
		claimStatusDescr.setBounds(32,22,260,12);
		claimComment.setLineWrap(true);
		claimComment.setWrapStyleWord(true);
		claimComment.setEnabled(false);
		claimPanel.add(claimComment);
		claimComment.setFont(new Font("DialogInput", Font.PLAIN, 12));
		claimComment.setBounds(32,176,240,66);
		JLabel29.setRequestFocusEnabled(false);
		JLabel29.setText("Claim Status");
		claimPanel.add(JLabel29);
		JLabel29.setBounds(32,42,78,12);
		infoLbl.setText("Additional Information");
		claimPanel.add(infoLbl);
		infoLbl.setBounds(32,160,140,12);
		claimPanel.add(lockLbl);
		lockLbl.setForeground(java.awt.Color.black);
		lockLbl.setBounds(210,44,50,10);
		statusReset.setText("Reset");
		statusReset.setActionCommand("Set");
		statusReset.setEnabled(false);
		claimPanel.add(statusReset);
		statusReset.setFont(new Font("Dialog", Font.BOLD, 11));
		statusReset.setBounds(105,41,66,18);
		titledBorder7.setTitleFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
		titledBorder7.setTitle("INSURANCE CLAIM DETAILS");
		//$$ titledBorder7.move(144,563);
		functionKeyPanel.setRequestFocusEnabled(false);
		functionKeyPanel.setBorder(titledBorder3);
		functionKeyPanel.setLayout(null);
		getContentPane().add(functionKeyPanel);
		functionKeyPanel.setBounds(10,12,60,540);
		functionKeyPanel.add(F1sq);
		F1sq.setBounds(20,17,20,20);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F1");
		functionKeyPanel.add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(24,20,20,12);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("Query");
		functionKeyPanel.add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(5,37,50,16);
		functionKeyPanel.add(F2sq);
		F2sq.setBounds(20,70,20,20);
		F2lbl.setRequestFocusEnabled(false);
		F2lbl.setText("F2");
		functionKeyPanel.add(F2lbl);
		F2lbl.setForeground(java.awt.Color.black);
		F2lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F2lbl.setBounds(24,73,20,12);
		F2action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F2action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F2action.setText("Claims");
		functionKeyPanel.add(F2action);
		F2action.setForeground(java.awt.Color.black);
		F2action.setBounds(5,90,50,16);
		functionKeyPanel.add(F3sq);
		F3sq.setBounds(20,123,20,20);
		F3lbl.setRequestFocusEnabled(false);
		F3lbl.setText("F3");
		functionKeyPanel.add(F3lbl);
		F3lbl.setForeground(java.awt.Color.black);
		F3lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F3lbl.setBounds(24,126,20,12);
		F3action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F3action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F3action.setText("Update");
		functionKeyPanel.add(F3action);
		F3action.setForeground(java.awt.Color.black);
		F3action.setBounds(5,143,50,16);
		functionKeyPanel.add(F4sq);
		F4sq.setBounds(20,176,20,20);
		F4lbl.setRequestFocusEnabled(false);
		F4lbl.setText("F4");
		functionKeyPanel.add(F4lbl);
		F4lbl.setForeground(java.awt.Color.black);
		F4lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F4lbl.setBounds(24,179,20,12);
		F4action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F4action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F4action.setText("Rebill");
		functionKeyPanel.add(F4action);
		F4action.setForeground(java.awt.Color.black);
		F4action.setBounds(5,196,50,16);
		functionKeyPanel.add(F5sq);
		F5sq.setBounds(20,229,20,20);
		F5lbl.setRequestFocusEnabled(false);
		F5lbl.setText("F5");
		functionKeyPanel.add(F5lbl);
		F5lbl.setForeground(java.awt.Color.black);
		F5lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F5lbl.setBounds(24,232,20,12);
		F5action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F5action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F5action.setText("Patients");
		functionKeyPanel.add(F5action);
		F5action.setForeground(java.awt.Color.black);
		F5action.setBounds(5,249,50,16);
		functionKeyPanel.add(F6sq);
		F6sq.setBounds(20,282,20,20);
		F6lbl.setRequestFocusEnabled(false);
		F6lbl.setText("F6");
		functionKeyPanel.add(F6lbl);
		F6lbl.setForeground(java.awt.Color.black);
		F6lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F6lbl.setBounds(24,285,20,12);
		F6action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F6action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F6action.setText("Payers");
		functionKeyPanel.add(F6action);
		F6action.setForeground(java.awt.Color.black);
		F6action.setBounds(5,302,50,16);
		functionKeyPanel.add(F9sq);
		F9sq.setBounds(20,388,20,20);
		F9lbl.setRequestFocusEnabled(false);
		F9lbl.setText("F9");
		functionKeyPanel.add(F9lbl);
		F9lbl.setForeground(java.awt.Color.black);
		F9lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F9lbl.setBounds(24,391,20,12);
		F9action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F9action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F9action.setText("Exit");
		functionKeyPanel.add(F9action);
		F9action.setForeground(java.awt.Color.black);
		F9action.setBounds(5,408,50,16);
		functionKeyPanel.add(F10sq);
		F10sq.setBounds(20,440,20,20);
		F10lbl.setRequestFocusEnabled(false);
		F10lbl.setText("F10");
		functionKeyPanel.add(F10lbl);
		F10lbl.setForeground(java.awt.Color.black);
		F10lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F10lbl.setBounds(21,443,20,12);
		F10action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F10action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F10action.setText("Section");
		functionKeyPanel.add(F10action);
		F10action.setForeground(java.awt.Color.black);
		F10action.setBounds(5,460,50,16);
		functionKeyPanel.add(F12sq);
		F12sq.setBounds(20,493,20,20);
		F12lbl.setRequestFocusEnabled(false);
		F12lbl.setText("F12");
		functionKeyPanel.add(F12lbl);
		F12lbl.setForeground(java.awt.Color.black);
		F12lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F12lbl.setBounds(21,496,20,12);
		F12action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F12action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F12action.setText("Submit");
		functionKeyPanel.add(F12action);
		F12action.setForeground(java.awt.Color.black);
		F12action.setBounds(5,513,50,16);
		functionKeyPanel.add(F7sq);
		F7sq.setBounds(20,335,20,20);
		F7lbl.setRequestFocusEnabled(false);
		F7lbl.setText("F7");
		functionKeyPanel.add(F7lbl);
		F7lbl.setForeground(java.awt.Color.black);
		F7lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F7lbl.setBounds(24,338,20,12);
		F7action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F7action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F7action.setText("Letters");
		functionKeyPanel.add(F7action);
		F7action.setForeground(java.awt.Color.black);
		F7action.setBounds(5,355,50,16);
		JLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		JLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		functionKeyPanel.add(JLabel2);
		JLabel2.setForeground(java.awt.Color.black);
		JLabel2.setBounds(0,102,58,16);
		msgPanel.setBorder(titledBorder4);
		msgPanel.setLayout(null);
		getContentPane().add(msgPanel);
		msgPanel.setBounds(74,510,420,42);
		msgPanel.add(msgLabel);
		msgLabel.setForeground(java.awt.Color.red);
		msgLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		msgLabel.setBounds(12,6,390,14);
		msgPanel.add(msgLabel2);
		msgLabel2.setForeground(java.awt.Color.red);
		msgLabel2.setFont(new Font("Dialog", Font.BOLD, 12));
		msgLabel2.setBounds(12,20,390,14);
		//$$ titledBorder3.move(168,563);
		//$$ titledBorder4.move(192,563);
		createdLbl.setText("Created:");
		getContentPane().add(createdLbl);
		createdLbl.setForeground(java.awt.Color.darkGray);
		createdLbl.setFont(new Font("Dialog", Font.BOLD, 10));
		createdLbl.setBounds(82,493,200,14);
		changedLbl.setText("Updated:");
		getContentPane().add(changedLbl);
		changedLbl.setForeground(java.awt.Color.darkGray);
		changedLbl.setFont(new Font("Dialog", Font.BOLD, 10));
		changedLbl.setBounds(292,493,200,14);
		billingPanel.setBorder(titledBorder2);
		billingPanel.setLayout(null);
		getContentPane().add(billingPanel);
		billingPanel.setBounds(74,248,420,244);
		labBillingChoice.setEnabled(false);
		billingPanel.add(labBillingChoice);
		labBillingChoice.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labBillingChoice.setBounds(20,33,34,20);
		labOtherInsurance.setEnabled(false);
		billingPanel.add(labOtherInsurance);
		labOtherInsurance.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labOtherInsurance.setBounds(70,33,330,20);
		labPayerID.setEnabled(false);
		billingPanel.add(labPayerID);
		labPayerID.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labPayerID.setBounds(20,69,54,20);
		labPCSID.setEnabled(false);
		billingPanel.add(labPCSID);
		labPCSID.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labPCSID.setBounds(88,69,60,20);
		labDPAState.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		labDPAState.setEnabled(false);
		billingPanel.add(labDPAState);
		labDPAState.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labDPAState.setBounds(162,69,30,20);
		labBillingID.setEnabled(false);
		billingPanel.add(labBillingID);
		labBillingID.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labBillingID.setBounds(214,69,186,20);
		labGrpNum.setEnabled(false);
		billingPanel.add(labGrpNum);
		labGrpNum.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labGrpNum.setBounds(20,107,154,20);
		labRelCode.setText("S");
		labRelCode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		labRelCode.setEnabled(false);
		billingPanel.add(labRelCode);
		labRelCode.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labRelCode.setBounds(190,107,20,20);
		labMedicareType.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		labMedicareType.setEnabled(false);
		billingPanel.add(labMedicareType);
		labMedicareType.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labMedicareType.setBounds(308,107,20,20);
		labDiagCode.setEnabled(false);
		billingPanel.add(labDiagCode);
		labDiagCode.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labDiagCode.setBounds(42,132,48,20);
		labDiagCode2.setEnabled(false);
		billingPanel.add(labDiagCode2);
		labDiagCode2.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labDiagCode2.setBounds(42,152,48,20);
		labDiagCode3.setEnabled(false);
		billingPanel.add(labDiagCode3);
		labDiagCode3.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labDiagCode3.setBounds(42,172,48,20);
		labDiagCode4.setEnabled(false);
		billingPanel.add(labDiagCode4);
		labDiagCode4.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labDiagCode4.setBounds(42,192,48,20);
		labSubscrLName.setEnabled(false);
		billingPanel.add(labSubscrLName);
		labSubscrLName.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labSubscrLName.setBounds(86,216,110,20);
		labSubscrFName.setEnabled(false);
		billingPanel.add(labSubscrFName);
		labSubscrFName.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labSubscrFName.setBounds(234,216,102,20);
		labFormSigned.setText("N");
		labFormSigned.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		labFormSigned.setEnabled(false);
		billingPanel.add(labFormSigned);
		labFormSigned.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labFormSigned.setBounds(390,216,20,20);
		labBillingChoiceLbl.setRequestFocusEnabled(false);
		labBillingChoiceLbl.setText("Code");
		billingPanel.add(labBillingChoiceLbl);
		labBillingChoiceLbl.setBounds(20,20,34,10);
		labGrpNumLbl.setRequestFocusEnabled(false);
		labGrpNumLbl.setText("Group Number/Employer");
		billingPanel.add(labGrpNumLbl);
		labGrpNumLbl.setBounds(20,94,150,12);
		labBillingIDLbl.setRequestFocusEnabled(false);
		labBillingIDLbl.setText("Billing ID");
		billingPanel.add(labBillingIDLbl);
		labBillingIDLbl.setBounds(214,56,186,12);
		subscrLastLbl.setRequestFocusEnabled(false);
		subscrLastLbl.setText("Subscr Last");
		billingPanel.add(subscrLastLbl);
		subscrLastLbl.setBounds(12,218,72,12);
		subscrFirstLbl.setRequestFocusEnabled(false);
		subscrFirstLbl.setText("First");
		billingPanel.add(subscrFirstLbl);
		subscrFirstLbl.setBounds(204,218,32,12);
		labMedTypeLbl.setRequestFocusEnabled(false);
		labMedTypeLbl.setText("Medicare Type");
		billingPanel.add(labMedTypeLbl);
		labMedTypeLbl.setBounds(308,94,90,12);
		diag1lbl.setRequestFocusEnabled(false);
		billingPanel.add(diag1lbl);
		diag1lbl.setForeground(java.awt.Color.black);
		diag1lbl.setFont(new Font("SansSerif", Font.BOLD, 10));
		diag1lbl.setBounds(96,134,310,12);
		diag2lbl.setRequestFocusEnabled(false);
		billingPanel.add(diag2lbl);
		diag2lbl.setForeground(java.awt.Color.black);
		diag2lbl.setFont(new Font("SansSerif", Font.BOLD, 10));
		diag2lbl.setBounds(96,154,310,12);
		diag3lbl.setRequestFocusEnabled(false);
		billingPanel.add(diag3lbl);
		diag3lbl.setForeground(java.awt.Color.black);
		diag3lbl.setFont(new Font("SansSerif", Font.BOLD, 10));
		diag3lbl.setBounds(96,174,310,12);
		diag4lbl.setRequestFocusEnabled(false);
		billingPanel.add(diag4lbl);
		diag4lbl.setForeground(java.awt.Color.black);
		diag4lbl.setFont(new Font("SansSerif", Font.BOLD, 10));
		diag4lbl.setBounds(96,194,310,12);
		signedLbl.setText("Signed");
		billingPanel.add(signedLbl);
		signedLbl.setBounds(344,218,40,12);
		labDPAStateLbl.setRequestFocusEnabled(false);
		labDPAStateLbl.setText("State");
		billingPanel.add(labDPAStateLbl);
		labDPAStateLbl.setBounds(162,56,34,12);
		ICD9Lbl.setRequestFocusEnabled(false);
		ICD9Lbl.setText("ICD9");
		billingPanel.add(ICD9Lbl);
		ICD9Lbl.setForeground(new java.awt.Color(102,102,153));
		ICD9Lbl.setBounds(12,134,30,12);
		carrierNameLbl.setRequestFocusEnabled(false);
		carrierNameLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		billingPanel.add(carrierNameLbl);
		carrierNameLbl.setForeground(new java.awt.Color(102,102,153));
		carrierNameLbl.setFont(new Font("Dialog", Font.BOLD, 11));
		carrierNameLbl.setBounds(178,12,218,14);
		payerLbl.setRequestFocusEnabled(false);
		payerLbl.setText("Payer ID");
		billingPanel.add(payerLbl);
		payerLbl.setBounds(20,56,50,12);
		altLbl.setRequestFocusEnabled(false);
		altLbl.setText("Alt ID");
		billingPanel.add(altLbl);
		altLbl.setBounds(88,56,36,12);
		subscrLbl.setRequestFocusEnabled(false);
		subscrLbl.setText("Subscriber");
		billingPanel.add(subscrLbl);
		subscrLbl.setBounds(190,94,90,12);
		payerNameLbl.setRequestFocusEnabled(false);
		payerNameLbl.setText("Payer Name");
		billingPanel.add(payerNameLbl);
		payerNameLbl.setBounds(70,20,70,12);
		billingPanel.add(labSubscriber);
		labSubscriber.setBounds(216,113,80,12);
		billingPanel.add(labMedLbl);
		labMedLbl.setBounds(332,113,80,12);
		titledBorder2.setTitle("BILLING DETAILS");
		//$$ titledBorder2.move(216,563);
		confirmSecondary.setOptionType(javax.swing.JOptionPane.YES_NO_OPTION);
		//$$ confirmSecondary.move(240,563);
		creditBureauWarning.setMessageType(javax.swing.JOptionPane.WARNING_MESSAGE);
		//$$ creditBureauWarning.move(264,563);
		confirmPaymentDelete.setOptionType(javax.swing.JOptionPane.YES_NO_OPTION);
		//$$ confirmPaymentDelete.move(288,563);
		//$$ JOptionPane1.move(288,563);
		//}}
		
		titledBorder1.setTitleColor(Color.white);
		titledBorder2.setTitleColor(Color.white);
		titledBorder5.setTitleColor(Color.white);
		titledBorder6.setTitleColor(Color.white);
		titledBorder7.setTitleColor(Color.white);
		titledBorder1.setTitleFont(new java.awt.Font("Dialog",java.awt.Font.BOLD,12));
		titledBorder2.setTitleFont(new java.awt.Font("Dialog",java.awt.Font.BOLD,12));
		titledBorder5.setTitleFont(new java.awt.Font("Dialog",java.awt.Font.BOLD,12));
		titledBorder6.setTitleFont(new java.awt.Font("Dialog",java.awt.Font.BOLD,12));
		titledBorder7.setTitleFont(new java.awt.Font("Dialog",java.awt.Font.BOLD,12));

		//{{INIT_MENUS
		//}}
	
		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		SymKey aSymKey = new SymKey();
		
		this.addKeyListener(aSymKey);
		labNumber.addKeyListener(aSymKey);
		labPatientID.addKeyListener(aSymKey);
		labGrpNum.addKeyListener(aSymKey);
		labBillingID.addKeyListener(aSymKey);
		labPractice.addKeyListener(aSymKey);
		labSubscrLName.addKeyListener(aSymKey);
		labSubscrFName.addKeyListener(aSymKey);
		labDPAState.addKeyListener(aSymKey);
		labClientNotes.addKeyListener(aSymKey);
		labDateCollected.addKeyListener(aSymKey);
		labOtherInsurance.addKeyListener(aSymKey);
		SymFocus aSymFocus = new SymFocus();
		labBillingChoice.addKeyListener(aSymKey);
		labDiagCode2.addKeyListener(aSymKey);
		labDiagCode3.addKeyListener(aSymKey);
		labDiagCode4.addKeyListener(aSymKey);
		labDiagCode.addKeyListener(aSymKey);
		labDPAState.addActionListener(lSymAction);
		labGrpNum.addFocusListener(aSymFocus);
		labPayerID.addKeyListener(aSymKey);
		labPCSID.addKeyListener(aSymKey);
		labPaAddress.addKeyListener(aSymKey);
		labSSN.addKeyListener(aSymKey);
		labDOB.addKeyListener(aSymKey);
		labZip.addKeyListener(aSymKey);
		labState.addKeyListener(aSymKey);
		labCity.addKeyListener(aSymKey);
		labPatientNumber.addKeyListener(aSymKey);
		labPatientLastName.addKeyListener(aSymKey);
		labPatientFirstName.addKeyListener(aSymKey);
		labPatientMI.addKeyListener(aSymKey);
		labPhone.addKeyListener(aSymKey);
		labRelCode.addKeyListener(aSymKey);
		labRush.addKeyListener(aSymKey);
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		doctorText.addKeyListener(aSymKey);
		claimStatus.addKeyListener(aSymKey);
		paymentAmount.addKeyListener(aSymKey);
		claimAllowable.addKeyListener(aSymKey);
		patientAmount.addKeyListener(aSymKey);
		altClaimID.addKeyListener(aSymKey);
		dateReceived.addKeyListener(aSymKey);
		claimComment.addKeyListener(aSymKey);
		labMedicareType.addKeyListener(aSymKey);
		labFormSigned.addKeyListener(aSymKey);
		statusReset.addActionListener(lSymAction);
		//}}
		
        // Add focus listener to all text fields
		for (int i=0; i<this.getContentPane().getComponentCount(); i++) {
		    Component c = this.getContentPane().getComponent(i);
		    String s = c.getClass().getName();
		    if (s.equals("javax.swing.JTextField")
		    || s.equals("javax.swing.JTextArea")) {
		        c.addFocusListener(aSymFocus);
		    }
		    else if (s.equals("javax.swing.JPanel")) {
		        for (int j=0; j<((Container)c).getComponentCount(); j++) {
		            Component d = ((Container)c).getComponent(j);
		            String t = d.getClass().getName();
		            if (t.equals("javax.swing.JTextField")
		            || t.equals("javax.swing.JTextArea")) {
		                d.addFocusListener(aSymFocus);
		            }
		        }
		    }
		}
		actionMap = new BillingFormActionMap(this);
		setupKeyPressMap();
		
	}
	protected JRootPane setupKeyPressMap() {
		JRootPane rp = super.setupKeyPressMap();
		
		rp.getActionMap().put("F5", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				 statusReset.setEnabled(false);
		            if ((e.getModifiers() & ActionEvent.ALT_MASK) != 0) {
		                BillingDetails bd = 
		                    (BillingDetails)labRec.billing.details.elementAt(currNdx);
		                if (bd.billing_choice==Lab.DB) 
		                    (new PatientAccountsForm(
		                        dbLogin,labRec.lab_number)).setVisible(true);
		            }
		            else if (((e.getModifiers() & ActionEvent.SHIFT_MASK) != 0) && labRec.lab_number>0) {
		                String s = labBillingChoice.getText();
		                String c = Utils.isNull(claimStatus.getText()," ");
		                if (c.equals("D")||c.equals("R")||c.equals("PP")||c.equals("N")
		                ||c.equals("I")||(!Utils.isNull(s) && s.equals("DB")))
		                    (new DBCommentDialog(dbComments)).setVisible(true);
		                else
		                    Utils.createErrMsg(
		                        "Claim status is (D,R,PP,N,I) or billing choice is (DB)"+
		                        " for direct bill comments");
		            }
		            else {
		                if (globalFinished>=FINISHED)
		                    Utils.createErrMsg("(1) No action permitted on finished work");
		                else invokePatientForm();
		            }
			}
		});
		rp.getActionMap().put("F6", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				statusReset.setEnabled(false);
	            if (globalFinished>=FINISHED)
	                Utils.createErrMsg("(2) No action permitted on finished work");
	            else if (fKeys.isOn(fKeys.F6)==true) {
	                if ((labOtherInsurance.hasFocus()==true)||
	                    (labPayerID.hasFocus()==true)||
	                    (labPCSID.hasFocus()==true) )
	                    (new CarrierForm(BillingForm.this)).setVisible(true);			
	            }
	            else createErrMsg("Carrier Form Not Available");
			}
		});
		rp.getActionMap().put("F7", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				if (labRec.lab_number>0) {
	                if ((e.getModifiers() & ActionEvent.ALT_MASK) != 0) {
	                    if (labOps.buildBlankLetter())
	                        msgLabel.setText("Blank letter sent to info request queue.");
	                }
	                else {
	                    if (labBillingChoice.getText().equals("MED")) { 
	                        if (labOps.buildDiagnosisLetter())
	                            msgLabel.setText(
	                                "Blank letter sent to info request queue.");
	                    }
	                }
	            }
			}
		});
		rp.getActionMap().put("F8", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				 if (currMode==Lab.IDLE && reworkQueue.size()>0) {
		                String[] buf = new String[reworkQueue.size()];
		                for (int i=0;i<reworkQueue.size();i++) {
		                    ClaimRec c = (ClaimRec)reworkQueue.elementAt(i);
		                    buf[i]=Integer.toString(c.lab_number)+"  "+c.claim_status;
		                }
		                (new PickList("Rework Queue",50,50,160,400,
		                              reworkQueue.size(),buf)).setVisible(true);
		            }
		            else if (labDiagCode.hasFocus())  {
		                String[] buf = new String[MAX_DIAG_CODES];
		                for (int i=0;i<MAX_DIAG_CODES;i++)
		                    buf[i]=labDiagnosisCodes[i].formattedString;
		                (new PickList("Diagnosis Codes",
		                              200,10,376,
		                              MAX_DIAG_CODES,
		                              buf,diagnosisCodeList,
		                              labDiagCode)).setVisible(true);
		            }                                              
		            else if (labDiagCode2.hasFocus())  {
		                String[] buf = new String[MAX_DIAG_CODES];
		                for (int i=0;i<MAX_DIAG_CODES;i++)
		                    buf[i]=labDiagnosisCodes[i].formattedString;
		                (new PickList("Diagnosis Codes",
		                              200,10,376,
		                              MAX_DIAG_CODES,
		                              buf,diagnosisCodeList,
		                              labDiagCode2)).setVisible(true);
		            }                                              
		            else if (labDiagCode3.hasFocus())  {
		                String[] buf = new String[MAX_DIAG_CODES];
		                for (int i=0;i<MAX_DIAG_CODES;i++)
		                    buf[i]=labDiagnosisCodes[i].formattedString;
		                (new PickList("Diagnosis Codes",
		                              200,10,376,
		                              MAX_DIAG_CODES,
		                              buf,diagnosisCodeList,
		                              labDiagCode3)).setVisible(true);
		            }                                              
		            else if (labDiagCode4.hasFocus())  {
		                String[] buf = new String[MAX_DIAG_CODES];
		                for (int i=0;i<MAX_DIAG_CODES;i++)
		                    buf[i]=labDiagnosisCodes[i].formattedString;
		                (new PickList("Diagnosis Codes",
		                              200,10,376,
		                              MAX_DIAG_CODES,
		                              buf,diagnosisCodeList,
		                              labDiagCode4)).setVisible(true);
		            }                             
		            else if (claimStatus.hasFocus()) {
		                String[] buf1 = new String[claimStatusVect.size()];
		                String[] buf2 = new String[claimStatusVect.size()];
		                for (int i=0; i<claimStatusVect.size(); i++) {
		                    ClaimStatusRec c = (ClaimStatusRec)claimStatusVect.elementAt(i);
		                    buf1[i] = c.claim_status;
		                    if (Utils.length(c.claim_status)==1)
		                        buf2[i]=c.claim_status+"  "+c.description;
		                    else
		                        buf2[i]=c.claim_status+" "+c.description;
		                }
		                (new PickList("Claim Status Codes",
		                               200,200,240,190,
		                               claimStatusVect.size(),
		                               buf2,buf1,claimStatus)).setVisible(true);
		            }
		            else if (labBillingChoice.hasFocus())  {
		                String[] buf = new String[MAX_BILLING_CODES];
		                for (int i=0;i<MAX_BILLING_CODES;i++)
		                    buf[i]=labBillingCodes[i].formattedString;
		                (new PickList("Billing Codes",
		                               200,200,240,190,
		                               MAX_BILLING_CODES,buf,
		                               billingCodeList,
		                               labBillingChoice)).setVisible(true);
		            } 
		            else if (doctorText.hasFocus()) displayDoctorList();
			}
		});
		rp.getActionMap().put("F10", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				gotoNextSection();
			}
		});
		rp.getActionMap().put("F11", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				 if (((e.getModifiers() & ActionEvent.ALT_MASK) != 0) 
						 && labRec.claimHistoryVect.size()>0) {
		                String buf[] = new String[labRec.claimHistoryVect.size()+2];
		                buf[0]="PAYER:                    "+
		                    "ST: RECEIVED:   ENTERED:          USER:";
		                buf[1]="---------------------------------------------------------------------";
		                for (int i=2; i<labRec.claimHistoryVect.size()+2; i++) 
		                    buf[i]=(String)labRec.claimHistoryVect.elementAt(i-2);
		                (new PickList("Claim History",30,30,450,200,
		                    labRec.claimHistoryVect.size()+2,buf)).setVisible(true);
		            }
		            else if (labRec.doc.doctor>0) {
		                String buf[] = new String[9];
		                buf[0]="DOCTOR INFORMATION";
		                buf[1]="-------------------------------------------------";
		                buf[2]="LAST:         "+labRec.doc.lname;
		                buf[3]="FIRST:        "+Utils.isNull(labRec.doc.fname," ");
		                buf[4]="UPIN:         "+Utils.isNull(labRec.doc.upin," ");
		                buf[5]=Utils.isNull(labRec.doc.state,"  ")+" LICENSE:   "+
		                    Utils.isNull(labRec.doc.license," ");
		                buf[6]="BLUE SHIELD:  "+Utils.isNull(labRec.doc.bs_provider," ");
		                buf[7]="ALT STATE:    "+Utils.isNull(labRec.doc.alt_state," ");
		                buf[8]="ALT LICENSE:  "+Utils.isNull(labRec.doc.alt_license," ");
		                (new PickList("Doctor Information",100,270,380,230,9,buf)).setVisible(true);
		            }
		            else Utils.createErrMsg("Doctor information not available");
			}
		});
		rp.getActionMap().put("F12", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				if (globalFinished>=FINISHED)
	                Utils.createErrMsg("(3) No action permitted on finished work");
	            else if (!dbThreadRunning) {
	                finalActions();
	            }
	            else createErrMsg("Database is busy ... please retry");
			}
		});
					

		AbstractAction insertAction = new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				 if (!Utils.isNull(labRec.prac.comment_text))
		                displayComments(practiceComments,"Practice Comments");
		            if (labRec.lab_number>0) {
		                (new CommentForm(dbLogin,labRec.lab_number)).setVisible(true);
		            }
			}
		};
		rp.getActionMap().put("INSERT", insertAction);
		rp.getActionMap().put("VK_I", insertAction);
		rp.getActionMap().put("VK_CONTROL", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				dFlag=false;
                ((JTextField)getFocusOwner()).setText(null);
                if ((labOtherInsurance.hasFocus()) ||
                    (labPayerID.hasFocus()) ||
                    (labPCSID.hasFocus())) {
                        labOtherInsurance.setText(null);
                        labPayerID.setText(null);
                        labPCSID.setText(null);
                }
                else if (claimStatus.hasFocus()) {
                    setEnableClaimFields(false);
                    claimStatus.setEnabled(true);
                    paymentAmount.setText(null);
                    claimAllowable.setText(null);
                    patientAmount.setText(null);
                    altClaimID.setText(null);
                    dateReceived.setText(null);
                    claimComment.setText(null);
                }
			}
		});
		rp.getActionMap().put("VK_UP", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				increment();
			}
		});
		rp.getActionMap().put("VK_DOWN", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				decrement();
			}
		});
	    return rp;
	}
	public BillingForm(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

    public BillingForm(Login dbLogin)
    {
        this();
        this.dbLogin=dbLogin;
        this.log = new LogFile(
            dbLogin.logPath,"BillingForm",dbLogin.dateToday,dbLogin.userName);
        this.labOps = new BillingDbOps(this);
        this.labOps.labFormInit();
        this.resetActions();
        if (this.reworkQueue.size()>0)
            msgLabel.setText("There are "+reworkQueue.size()+
                " items in the claim rework queue - F8 to list");
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }        
    
    public BillingForm(Login dbLogin, int labNum)
    {
        this();
        this.dbLogin=dbLogin;
        this.log = new LogFile(
            dbLogin.logPath,"BillingForm",dbLogin.dateToday,dbLogin.userName);
        this.labOps = new BillingDbOps(this);
        this.labOps.labFormInit();
        this.resetActions();
        if (this.reworkQueue.size()>0)
            msgLabel.setText("There are "+reworkQueue.size()+
                " items in the claim rework queue - F8 to list");
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        labNumber.setText(Integer.toString(labNum));
        currMode=Lab.QUERY;
        finalActions();
    }        
    
	public void setVisible(boolean b)
	{
		if (b) setLocation(0,0);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new BillingForm()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		Insets insets = getInsets();
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JPanel patientPanel = new javax.swing.JPanel();
	javax.swing.JTextField labPrevLabNum = new javax.swing.JTextField();
	javax.swing.JTextField labNumber = new javax.swing.JTextField();
	javax.swing.JTextField labPatientNumber = new javax.swing.JTextField();
	javax.swing.JTextField labPractice = new javax.swing.JTextField();
	javax.swing.JTextField labPatientLastName = new javax.swing.JTextField();
	javax.swing.JTextField labPatientFirstName = new javax.swing.JTextField();
	javax.swing.JTextField labPatientMI = new javax.swing.JTextField();
	javax.swing.JTextField labPaAddress = new javax.swing.JTextField();
	javax.swing.JTextField labZip = new javax.swing.JTextField();
	javax.swing.JTextField labCity = new javax.swing.JTextField();
	javax.swing.JTextField labState = new javax.swing.JTextField();
	javax.swing.JTextField labPhone = new javax.swing.JTextField();
	javax.swing.JTextField labDOB = new javax.swing.JTextField();
	javax.swing.JTextField labSSN = new javax.swing.JTextField();
	javax.swing.JTextField labClientNotes = new javax.swing.JTextField();
	javax.swing.JTextField labDateCollected = new javax.swing.JTextField();
	javax.swing.JTextField labPatientID = new javax.swing.JTextField();
	javax.swing.JCheckBox labRush = new javax.swing.JCheckBox();
	javax.swing.JLabel labNumLbl = new javax.swing.JLabel();
	javax.swing.JLabel labPatientIDlbl = new javax.swing.JLabel();
	javax.swing.JLabel labSSNLbl = new javax.swing.JLabel();
	javax.swing.JLabel labPracticeLbl = new javax.swing.JLabel();
	javax.swing.JLabel labCollDateLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel21 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel11 = new javax.swing.JLabel();
	javax.swing.JLabel labAddrLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel15 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel16 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel17 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel18 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel6 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel20 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel22 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel23 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel24 = new javax.swing.JLabel();
	javax.swing.JLabel labPracticeName = new javax.swing.JLabel();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JTextField doctorText = new javax.swing.JTextField();
	javax.swing.JLabel practicePhone = new javax.swing.JLabel();
	javax.swing.JTextField labParent = new javax.swing.JTextField();
	javax.swing.JLabel JLabel5 = new javax.swing.JLabel();
	javax.swing.JLabel pracType = new javax.swing.JLabel();
	javax.swing.JLabel pgmLabel = new javax.swing.JLabel();
	TitledBorder titledBorder1 = new javax.swing.border.TitledBorder("");
	javax.swing.JPanel historyPanel = new javax.swing.JPanel();
	javax.swing.JScrollPane JScrollPane1 = new javax.swing.JScrollPane();
	javax.swing.JList historyList = new javax.swing.JList();
	javax.swing.border.TitledBorder titledBorder5 = new javax.swing.border.TitledBorder("");
	javax.swing.JPanel chargesPanel = new javax.swing.JPanel();
	javax.swing.JScrollPane JScrollPane2 = new javax.swing.JScrollPane();
	javax.swing.JList itemList = new javax.swing.JList();
	javax.swing.JTextField ttlCharges = new javax.swing.JTextField();
	javax.swing.JTextField ttlPayments = new javax.swing.JTextField();
	javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel9 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel10 = new javax.swing.JLabel();
	javax.swing.JTextField thisBalance = new javax.swing.JTextField();
	javax.swing.JTextField thisRebill = new javax.swing.JTextField();
	javax.swing.JTextField billingLevel = new javax.swing.JTextField();
	javax.swing.JTextField ttlAdjust = new javax.swing.JTextField();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	javax.swing.border.TitledBorder titledBorder6 = new javax.swing.border.TitledBorder("");
	javax.swing.JPanel claimPanel = new javax.swing.JPanel();
	javax.swing.JLabel JLabel19 = new javax.swing.JLabel();
	public javax.swing.JTextField claimStatus = new javax.swing.JTextField();
	javax.swing.JTextField paymentAmount = new javax.swing.JTextField();
	javax.swing.JTextField claimAllowable = new javax.swing.JTextField();
	javax.swing.JLabel JLabel25 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel26 = new javax.swing.JLabel();
	javax.swing.JTextField patientAmount = new javax.swing.JTextField();
	javax.swing.JLabel JLabel27 = new javax.swing.JLabel();
	javax.swing.JTextField altClaimID = new javax.swing.JTextField();
	javax.swing.JLabel JLabel28 = new javax.swing.JLabel();
	javax.swing.JTextField dateReceived = new javax.swing.JTextField();
	javax.swing.JLabel claimStatusDescr = new javax.swing.JLabel();
	javax.swing.JTextArea claimComment = new javax.swing.JTextArea();
	javax.swing.JLabel JLabel29 = new javax.swing.JLabel();
	javax.swing.JLabel infoLbl = new javax.swing.JLabel();
	public javax.swing.JLabel lockLbl = new javax.swing.JLabel();
	public javax.swing.JButton statusReset = new javax.swing.JButton();
	javax.swing.border.TitledBorder titledBorder7 = new javax.swing.border.TitledBorder("");
	javax.swing.JPanel functionKeyPanel = new javax.swing.JPanel();
	Square F1sq = new Square();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	javax.swing.JLabel F1action = new javax.swing.JLabel();
	Square F2sq = new Square();
	javax.swing.JLabel F2lbl = new javax.swing.JLabel();
	javax.swing.JLabel F2action = new javax.swing.JLabel();
	Square F3sq = new Square();
	javax.swing.JLabel F3lbl = new javax.swing.JLabel();
	javax.swing.JLabel F3action = new javax.swing.JLabel();
	Square F4sq = new Square();
	javax.swing.JLabel F4lbl = new javax.swing.JLabel();
	javax.swing.JLabel F4action = new javax.swing.JLabel();
	Square F5sq = new Square();
	javax.swing.JLabel F5lbl = new javax.swing.JLabel();
	javax.swing.JLabel F5action = new javax.swing.JLabel();
	Square F6sq = new Square();
	javax.swing.JLabel F6lbl = new javax.swing.JLabel();
	javax.swing.JLabel F6action = new javax.swing.JLabel();
	Square F9sq = new Square();
	javax.swing.JLabel F9lbl = new javax.swing.JLabel();
	javax.swing.JLabel F9action = new javax.swing.JLabel();
	Square F10sq = new Square();
	javax.swing.JLabel F10lbl = new javax.swing.JLabel();
	javax.swing.JLabel F10action = new javax.swing.JLabel();
	Square F12sq = new Square();
	javax.swing.JLabel F12lbl = new javax.swing.JLabel();
	javax.swing.JLabel F12action = new javax.swing.JLabel();
	Square F7sq = new Square();
	javax.swing.JLabel F7lbl = new javax.swing.JLabel();
	javax.swing.JLabel F7action = new javax.swing.JLabel();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JPanel msgPanel = new javax.swing.JPanel();
	javax.swing.JLabel msgLabel = new javax.swing.JLabel();
	javax.swing.JLabel msgLabel2 = new javax.swing.JLabel();
	javax.swing.border.TitledBorder titledBorder3 = new javax.swing.border.TitledBorder("");
	javax.swing.border.TitledBorder titledBorder4 = new javax.swing.border.TitledBorder("");
	javax.swing.JLabel createdLbl = new javax.swing.JLabel();
	javax.swing.JLabel changedLbl = new javax.swing.JLabel();
	javax.swing.JPanel billingPanel = new javax.swing.JPanel();
	javax.swing.JTextField labBillingChoice = new javax.swing.JTextField();
	javax.swing.JTextField labOtherInsurance = new javax.swing.JTextField();
	javax.swing.JTextField labPayerID = new javax.swing.JTextField();
	javax.swing.JTextField labPCSID = new javax.swing.JTextField();
	javax.swing.JTextField labDPAState = new javax.swing.JTextField();
	javax.swing.JTextField labBillingID = new javax.swing.JTextField();
	javax.swing.JTextField labGrpNum = new javax.swing.JTextField();
	javax.swing.JTextField labRelCode = new javax.swing.JTextField();
	javax.swing.JTextField labMedicareType = new javax.swing.JTextField();
	javax.swing.JTextField labDiagCode = new javax.swing.JTextField();
	javax.swing.JTextField labDiagCode2 = new javax.swing.JTextField();
	javax.swing.JTextField labDiagCode3 = new javax.swing.JTextField();
	javax.swing.JTextField labDiagCode4 = new javax.swing.JTextField();
	javax.swing.JTextField labSubscrLName = new javax.swing.JTextField();
	javax.swing.JTextField labSubscrFName = new javax.swing.JTextField();
	javax.swing.JTextField labFormSigned = new javax.swing.JTextField();
	javax.swing.JLabel labBillingChoiceLbl = new javax.swing.JLabel();
	javax.swing.JLabel labGrpNumLbl = new javax.swing.JLabel();
	javax.swing.JLabel labBillingIDLbl = new javax.swing.JLabel();
	javax.swing.JLabel subscrLastLbl = new javax.swing.JLabel();
	javax.swing.JLabel subscrFirstLbl = new javax.swing.JLabel();
	javax.swing.JLabel labMedTypeLbl = new javax.swing.JLabel();
	javax.swing.JLabel diag1lbl = new javax.swing.JLabel();
	javax.swing.JLabel diag2lbl = new javax.swing.JLabel();
	javax.swing.JLabel diag3lbl = new javax.swing.JLabel();
	javax.swing.JLabel diag4lbl = new javax.swing.JLabel();
	javax.swing.JLabel signedLbl = new javax.swing.JLabel();
	javax.swing.JLabel labDPAStateLbl = new javax.swing.JLabel();
	javax.swing.JLabel ICD9Lbl = new javax.swing.JLabel();
	javax.swing.JLabel carrierNameLbl = new javax.swing.JLabel();
	javax.swing.JLabel payerLbl = new javax.swing.JLabel();
	javax.swing.JLabel altLbl = new javax.swing.JLabel();
	javax.swing.JLabel subscrLbl = new javax.swing.JLabel();
	javax.swing.JLabel payerNameLbl = new javax.swing.JLabel();
	javax.swing.JLabel labSubscriber = new javax.swing.JLabel();
	javax.swing.JLabel labMedLbl = new javax.swing.JLabel();
	javax.swing.border.TitledBorder titledBorder2 = new javax.swing.border.TitledBorder("");
	javax.swing.JOptionPane confirmSecondary = new javax.swing.JOptionPane();
	javax.swing.JOptionPane creditBureauWarning = new javax.swing.JOptionPane();
	javax.swing.JOptionPane confirmPaymentDelete = new javax.swing.JOptionPane();
	//}}
	//{{DECLARE_MENUS
	//}}


	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == statusReset)
				statusReset_actionPerformed(event);
			
		}
	}
    
    public void invokePatientForm() {
        if (queryIsQualified()) {
            log.write("Calling PatientForm");
            resetColors();
            setEnableAllFields(false);
            (new PatientClaimForm(this)).setVisible(true);			
        }
        else Utils.createErrMsg("Insufficient data to query patient");
    }       
    
    public boolean queryIsQualified()
    {
        return (
            !Utils.isNull(labPatientLastName.getText()) ||
            !Utils.isNull(labPatientFirstName.getText()) ||
            !Utils.isNull(labPaAddress.getText()) ||
            !Utils.isNull(labPhone.getText()) ||
            !Utils.isNull(labSSN.getText()) ||
            !Utils.isNull(labDOB.getText()) ||
            !Utils.isNull(labPrevLabNum.getText())
        );
    }
    
    public void invokeDoctorForm() { }

    public void increment()
    {
        if (currNdx==labRec.billing.details.size()-1) return;
        currNdx++;
        BillingDetails bd = 
            (BillingDetails)labRec.billing.details.elementAt(currNdx);
        fillBillingDetails(bd);
        fillClaimDetails(bd);
        historyList.clearSelection();
        historyList.setSelectionInterval(bd.startNdx,bd.endNdx);
        if (bd.billing_choice==Lab.DB)
            msgLabel.setText("Press ALT + F5 for Patient Account Details");
    }
    
    public void decrement()
    {
        if (currNdx==0) return;
        currNdx--;
        BillingDetails bd = 
            (BillingDetails)labRec.billing.details.elementAt(currNdx);
        fillBillingDetails(bd);
        fillClaimDetails(bd);
        historyList.clearSelection();
        historyList.setSelectionInterval(bd.startNdx,bd.endNdx);
        if (bd.billing_choice==Lab.DB)
            msgLabel.setText("Press ALT + F5 for Patient Account Details");
    }

    public void setEnableClaimFields(boolean eVal)
    {
        claimStatus.setEnabled(eVal);
        paymentAmount.setEnabled(eVal);
        claimAllowable.setEnabled(eVal);
        patientAmount.setEnabled(eVal);
        altClaimID.setEnabled(eVal);
        dateReceived.setEnabled(eVal);
        claimComment.setEnabled(eVal);
        if (eVal) claimStatus.requestFocus();
    }

    public void setEnableAllFields(boolean eVal)  
    {
        msgLabel.requestFocus();
        labNumber.setEnabled(eVal);
        labPrevLabNum.setEnabled(eVal);
        setEnablePatientFields(eVal);
        setEnableBillingFields(eVal);
        setEnableClaimFields(eVal);
    }        

	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == labPrevLabNum)
				labPrevLabNum_keyTyped(event);
			else if (object == labNumber)
				labNumber_keyTyped(event);
			else if (object == labPatientID)
				labPatientID_keyTyped(event);
			else if (object == labGrpNum)
				labGrpNum_keyTyped(event);
			else if (object == labBillingID)
				labBillingID_keyTyped(event);
			else if (object == labPractice)
				labPractice_keyTyped(event);
			else if (object == labSubscrLName)
				labSubscrLName_keyTyped(event);
			else if (object == labSubscrFName)
				labSubscrFName_keyTyped(event);
			else if (object == labDPAState)
				labDPAState_keyTyped(event);
			if (object == labClientNotes)
				labClientNotes_keyTyped(event);
			if (object == labDateCollected)
				labDateCollected_keyTyped(event);
			else if (object == labOtherInsurance)
				labOtherInsurance_keyTyped(event);
			else if (object == labBillingChoice)
				labBillingChoice_keyTyped(event);
			else if (object == labDiagCode2)
				labDiagCode2_keyTyped(event);
			else if (object == labDiagCode3)
				labDiagCode3_keyTyped(event);
			else if (object == labDiagCode4)
				labDiagCode4_keyTyped(event);
			else if (object == labDiagCode)
				labDiagCode_keyTyped(event);
			else if (object == labPayerID)
				labPayerID_keyTyped(event);
			else if (object == labPCSID)
				labPCSID_keyTyped(event);
			else if (object == labPaAddress)
				labPaAddress_keyTyped(event);
			else if (object == labSSN)
				labSSN_keyTyped(event);
			else if (object == labDOB)
				labDOB_keyTyped(event);
			else if (object == labZip)
				labZip_keyTyped(event);
			else if (object == labState)
				labState_keyTyped(event);
			else if (object == labCity)
				labCity_keyTyped(event);
			else if (object == labPatientNumber)
				labPatientNumber_keyTyped(event);
			else if (object == labPatientLastName)
				labPatientLastName_keyTyped(event);
			else if (object == labPatientFirstName)
				labPatientFirstName_keyTyped(event);
			else if (object == labPatientMI)
				labPatientMI_keyTyped(event);
			else if (object == labPhone)
				labPhone_keyTyped(event);
			else if (object == labRelCode)
				labRelCode_keyTyped(event);
			if (object == doctorText)
				doctorText_keyTyped(event);
			else if (object == claimStatus)
				claimStatus_keyTyped(event);
			else if (object == paymentAmount)
				paymentAmount_keyTyped(event);
			else if (object == claimAllowable)
				claimAllowable_keyTyped(event);
			else if (object == patientAmount)
				patientAmount_keyTyped(event);
			else if (object == altClaimID)
				altClaimID_keyTyped(event);
			else if (object == dateReceived)
				dateReceived_keyTyped(event);
			else if (object == claimComment)
				claimComment_keyTyped(event);
			else if (object == labMedicareType)
				labMedicareType_keyTyped(event);
			else if (object == labFormSigned)
				labFormSigned_keyTyped(event);
		}

		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == labPrevLabNum)
				labPrevLabNum_keyPressed(event);
			else if (object == BillingForm.this)
				BillingForm_keyPressed(event);
			else if (object == labPractice)
				labPractice_keyPressed(event);
			else if (object == labNumber)
				labNumber_keyPressed(event);
			else if (object == labPatientNumber)
				labPatientNumber_keyPressed(event);
			else if (object == labPatientLastName)
				labPatientLastName_keyPressed(event);
			else if (object == labPatientFirstName)
				labPatientFirstName_keyPressed(event);
			else if (object == labPatientMI)
				labPatientMI_keyPressed(event);
			else if (object == labPaAddress)
				labPaAddress_keyPressed(event);
			else if (object == labZip)
				labZip_keyPressed(event);
			else if (object == labCity)
				labCity_keyPressed(event);
			else if (object == labState)
				labState_keyPressed(event);
			else if (object == labPhone)
				labPhone_keyPressed(event);
			else if (object == labDOB)
				labDOB_keyPressed(event);
			else if (object == labSSN)
				labSSN_keyPressed(event);
			else if (object == labClientNotes)
				labClientNotes_keyPressed(event);
			else if (object == labDateCollected)
				labDateCollected_keyPressed(event);
			else if (object == labPatientID)
				labPatientID_keyPressed(event);
			if (object == labBillingChoice)
				labBillingChoice_keyPressed(event);
			else if (object == labOtherInsurance)
				labOtherInsurance_keyPressed(event);
			else if (object == labPayerID)
				labPayerID_keyPressed(event);
			else if (object == labPCSID)
				labPCSID_keyPressed(event);
			else if (object == labBillingID)
				labBillingID_keyPressed(event);
			else if (object == labGrpNum)
				labGrpNum_keyPressed(event);
			if (object == labDPAState)
				labDPAState_keyPressed(event);
			if (object == labDiagCode)
				labDiagCode_keyPressed(event);
			else if (object == labDiagCode2)
				labDiagCode2_keyPressed(event);
			else if (object == labDiagCode3)
				labDiagCode3_keyPressed(event);
			else if (object == labDiagCode4)
				labDiagCode4_keyPressed(event);
			if (object == labSubscrLName)
				labSubscrLName_keyPressed(event);
			else if (object == labSubscrFName)
				labSubscrFName_keyPressed(event);
			if (object == labRelCode)
				labRelCode_keyPressed(event);
			else if (object == labRush)
				labRush_keyPressed(event);
			else if (object == doctorText)
				doctorText_keyPressed(event);
			else if (object == claimStatus)
				claimStatus_keyPressed(event);
			else if (object == paymentAmount)
				paymentAmount_keyPressed(event);
			else if (object == claimAllowable)
				claimAllowable_keyPressed(event);
			else if (object == patientAmount)
				patientAmount_keyPressed(event);
			else if (object == altClaimID)
				altClaimID_keyPressed(event);
			else if (object == dateReceived)
				dateReceived_keyPressed(event);
			else if (object == claimComment)
				claimComment_keyPressed(event);
			else if (object == labMedicareType)
				labMedicareType_keyPressed(event);
			else if (object == labFormSigned)
				labFormSigned_keyPressed(event);
		}
	}

	public void addActions()  
	{
	    fillForm();
	    clearBillingDetails(true);
	    fKeys.off();
	    fKeys.keyOn(fKeys.F12);
	    fKeys.keyOn(fKeys.F8);
	    fKeys.keyOn(fKeys.F5);
	    fKeys.keyOn(fKeys.F6);
	    currMode=Lab.REBILL_ADD;
	    if (hasSecondary && hasComments) {
	        infoLbl.setText("INTERNAL COMMENTS");
	        claimComment.setText(labRec.lab_comments);
	    }
	    if (isUpdatable()) {
		    setEnableAllFields(false);
		    labBillingChoice.setEnabled(true);
		    currentSection=2;
		    labBillingChoice.requestFocus();
		}
    }	    
    
    public void claimReworkActions()
    {
        setEnableAllFields(false);
        if (billingAdd.claim_status.equals("F")) { 
            setEnablePatientFields(true);
        }
        else if (billingAdd.claim_status.equals("LT")) {
            labMedicareType.setEnabled(true);
            labDiagCode.setEnabled(true);
            labDiagCode2.setEnabled(true);
            labDiagCode3.setEnabled(true);
            labDiagCode4.setEnabled(true);
            labMedicareType.requestFocus();
        }
        else if (billingAdd.claim_status.equals("P2")
        || billingAdd.claim_status.equals("R2")) {
            hasSecondary=true;
	        if (hasComments) {
	            infoLbl.setText("INTERNAL COMMENTS");
	            claimComment.setText(labRec.lab_comments);
	        }
	        if (isUpdatable()) {
		        setEnableAllFields(false);
		        clearBillingDetails(true);
		        labBillingChoice.setEnabled(true);
		        currentSection=2;
		        msgLabel.setText(
		            "Enter billing information for secondary insurance.");
		        labBillingChoice.requestFocus();
		    }
        }
        else { 
            labBillingChoice.setEnabled(true);
            labBillingChoice.requestFocus();
        }
    }
    

	void labPrevLabNum_keyTyped(java.awt.event.KeyEvent event)
	{
        Utils.forceDigits(event,10);
	}

	void labPrevLabNum_keyPressed(java.awt.event.KeyEvent event)
	{
	}
	

    /*
        General form; sets all billing section fields on or off
    */
    public void setEnableBillingFields(boolean eVal)  {
        labBillingChoice.setEnabled(eVal);
        labBillingID.setEnabled(eVal);
        labOtherInsurance.setEnabled(eVal);
        labPayerID.setEnabled(eVal);
        labPCSID.setEnabled(eVal);
        labDPAState.setEnabled(eVal);
        labBillingID.setEnabled(eVal);
        labGrpNum.setEnabled(eVal);
        labRelCode.setEnabled(eVal);
        labMedicareType.setEnabled(eVal);
        labDiagCode.setEnabled(eVal);
        labDiagCode2.setEnabled(eVal);
        labDiagCode3.setEnabled(eVal);
        labDiagCode4.setEnabled(eVal);
        labSubscrLName.setEnabled(eVal);
        labSubscrFName.setEnabled(eVal);
        labFormSigned.setEnabled(eVal);
        if (eVal) {
            currentSection=2;
            labBillingChoice.requestFocus();
        }
    }
    
    void setEnablePatientFields(boolean eVal)
    {
        labPatientLastName.setEnabled(eVal);
        labPatientFirstName.setEnabled(eVal);
        labPatientMI.setEnabled(eVal);
        labPaAddress.setEnabled(eVal);
        labZip.setEnabled(eVal);
        labCity.setEnabled(eVal);
        labState.setEnabled(eVal);
        labPhone.setEnabled(eVal);
        labDOB.setEnabled(eVal);
        labSSN.setEnabled(eVal);
        doctorText.setEnabled(eVal);
        labDateCollected.setEnabled(eVal);
        labPractice.setEnabled(eVal);
        labParent.setEnabled(false);
        if (eVal) {
            currentSection=1;
            labPractice.requestFocus();
        }
    }
    
	void BillingForm_keyPressed(java.awt.event.KeyEvent event)
	{
	    keyActions(event);
	}

	@Override
    public void resetActions()  {
    	
		lockedClaimStatus=null;
        isClaimStatusLocked=false;
        lockLbl.setText(null);
        setEnableAllFields(false);
        msgLabel.requestFocus();
        resetColors();
        dFlag=false;
        hasSecondary=false;
        claimStatusChanged=false;
        if (currMode!=Lab.IDLE) {
            if (labRec.billing.details.size()>0)
                fillForm();
            currMode=Lab.IDLE;
            return;
        }
        clearForm();
        dbComments=new javax.swing.JTextArea();
        labComments.setText(null);
        practiceComments.setText(null);
        currMode=Lab.IDLE;
        collectionInfo=null;
        inCollection=false;
        inRework=false;
        inBillingQueue=false;
        carrierChanged=false;
        patientQuery=false;
        createdLbl.setText("Created:");
        changedLbl.setText("Updated:");
        infoLbl.setText("Additional Information");
        billingChanged=false;
        originalBillingChoice=0;
        globalFinished=(-1);
        carrierCommentsShown=true;
        resetFKeys();
        hasComments=false;
        hasLetter=false;
        checkCarrier=true;
        labRec = new LabRec();
        billingAdd = new BillingDetails();
        carrierVect = new Vector();
        doctorVect = new Vector();
        itemVect = new Vector();
        String[] x = new String[1];
        historyList.setListData(x);
        historyList.repaint();
        historyList.revalidate();
        itemList.setListData(x);
        itemList.repaint();
        itemList.revalidate();
        statusReset.setEnabled(false);
    }        
    
    public void fillForm() 
    { 
        BillingDetails bd = null;
        fillPatientDetails();
        if (labRec.billing.details.size()>=0) {
            currNdx=labRec.billing.details.size()-1;
            bd = (BillingDetails)labRec.billing.details.elementAt(currNdx);
            fillBillingDetails(bd);
            fillClaimDetails(bd);
        }
        fillBillingHistory();
        fillChargesAndPayments();
        historyList.clearSelection();
        historyList.setSelectionInterval(bd.startNdx,bd.endNdx);
        if (!Utils.isNull(labRec.invoice))
            msgLabel.setText("INVOICE #"+labRec.invoice);
        else if (bd.billing_choice==Lab.DB)
            msgLabel.setText("Press ALT + F5 for Patient Account Details");
        switch(labRec.finished) {
            case Lab.EXPIRED_SPECIMEN: msgLabel2.setText("EXPIRED SPECIMEN"); break;
            case Lab.RESULTS_PENDING: msgLabel2.setText("RESULTS NOT ENTERED"); break;
            case Lab.BILLING_QUEUE: msgLabel2.setText("IN BILLING QUEUE"); break;
            case Lab.SUBMITTED: msgLabel2.setText("BILLED, PENDING FIRST RESPONSE"); break;
            case Lab.PENDING: msgLabel2.setText("RESPONSE RECEIVED, STILL PENDING"); break;
            case Lab.FINISHED: msgLabel2.setText("FINISHED");
        }
    }

	public void fillPatientDetails()  
	{
	    if (labRec.lab_number>0) {
	        labNumber.setText(Integer.toString(labRec.lab_number));
	        if (labRec.previous_lab>0)
	            labPrevLabNum.setText(Integer.toString(labRec.previous_lab));
	        else
	            labPrevLabNum.setText(null);
	        labPatientNumber.setText(Integer.toString(labRec.patient));
	        labPractice.setText(labRec.prac.getPractice());
	        labParent.setText(Integer.toString(labRec.prac.parent_account));
	        labPracticeName.setText(labRec.prac.name);
	        practicePhone.setText(Utils.addPhoneMask(labRec.prac.phone));
	        labPatientLastName.setText(labRec.pat.lname);
	        labPatientFirstName.setText(labRec.pat.fname);
	        labPatientMI.setText(labRec.pat.mi);
	        labPaAddress.setText(labRec.pat.address1);
	        labZip.setText(Utils.addZipMask(labRec.pat.zip));
	        labCity.setText(labRec.pat.city);
	        labState.setText(labRec.pat.state);
	        labPhone.setText(Utils.addPhoneMask(labRec.pat.phone));
	        labDOB.setText(Utils.addDateMask(labRec.pat.dob));
	        labSSN.setText(Utils.addSSNMask(labRec.pat.ssn));
	        labClientNotes.setText(labRec.client_note_text);
	        labDateCollected.setText(Utils.addDateMask(labRec.date_collected));
	        labPatientID.setText(labRec.patient_id);
	        if (labRec.rush.equals("Y")) labRush.setSelected(true);
	        else labRush.setSelected(false);
	        doctorText.setText(labRec.doctor_text);
	        labComments.setText(labRec.lab_comments);
	        practiceComments.setText(labRec.prac.comment_text);
	        pracType.setText(labRec.prac.practice_type);
	        if (!labRec.prac.program.equals("NONE"))
	            pgmLabel.setText(labRec.prac.program);
	        else
	            pgmLabel.setText(null);
	    }
    }        
    
    public void fillBillingDetails(BillingDetails bd)
    {
        clearBillingDetails(false);
        createdLbl.setText(
            "Created: "+labRec.LR_datestamp+", "+labRec.create_user);
        changedLbl.setText(
            "Updated: "+bd.change_date+", "+bd.change_user);
        ttlCharges.setText(labRec.billing.bill_amount.trim());
        ttlPayments.setText(labRec.billing.total_payments.trim());
        ttlAdjust.setText(labRec.billing.total_adjustments.trim());
        if (currNdx==labRec.billing.details.size()-1) {
            if (globalFinished==FINISHED)
                thisBalance.setText("0.00");
            else if (!Utils.isNull(bd.claim_status) 
            && bd.claim_status.equals("P"))
                thisBalance.setText("0.00");
            else if (labRec.billing.dAllowance()>0
            && (labRec.billing.dAmountDue()<0 || labRec.billing.dAmountDue()>labRec.billing.dAllowance())) {
                thisBalance.setText(labRec.billing.allowance);
            }
            else if (labRec.billing.dAllowance()>0) {
                double b = 
                    labRec.billing.dAllowance()+labRec.billing.dTotalPayments();
                String s = (new Double(b)).toString();
                boolean dFlag = false;
                int ndx = 0;
                for (int i=0; i<s.length(); i++) {
                    if (s.charAt(i)=='.') { 
                        dFlag=true;
                        ndx=i;
                    }
                }
                if (s.length()>ndx+2) s=s.substring(0,ndx+3);
                if (!dFlag) s=s+".00";
                else {
                    String t = s.substring(ndx+1);
                    if (t.length()==1) s=s+"0";
                }
                thisBalance.setText(s);
            }
            else
                thisBalance.setText(labRec.billing.balance);
        }
        else {
            thisBalance.setText("0.00");
        }
            labBillingChoice.setText(bd.choice_code.trim());
            setBillingLabels(bd.choice_code.trim());
            if (bd.billing_choice==Lab.DB) {
                labOtherInsurance.setText(
                    labRec.pat.lname+", "+labRec.pat.fname);
                dbComments.setText(bd.patAcct.comment_text);
            }
            else if (bd.billing_choice==Lab.DOC) {
                int pr = Integer.parseInt(bd.id_number.trim());
                if (pr!=labRec.practice) {
                    labOtherInsurance.setText(labOps.getPracticeName(pr));
                }
                else {
                    labOtherInsurance.setText(labRec.prac.name);
                }
            }
            else {
                labOtherInsurance.setText(bd.payer.name);
                labPayerID.setText(bd.payer.payer_id);
                labPCSID.setText(Integer.toString(bd.payer.id_number));
                if (bd.billing_choice==Lab.DPA)
                    labDPAState.setText(bd.payer.state);
                labGrpNum.setText(bd.group_number);
                if (bd.billing_choice!=Lab.MED) {
                    labSubscriber.setText(bd.subscriber);
                    if (bd.subscriber.equals("SELF"))
                        labRelCode.setText("S");
                    else if (bd.subscriber.equals("SPOUSE"))
                        labRelCode.setText("H");
                    else if (bd.subscriber.equals("DEPENDENT"))
                        labRelCode.setText("C");
                    else if (bd.subscriber.equals("OTHER"))
                        labRelCode.setText("O");
                }
                else {
                    if (Utils.isNull(bd.medicare_code))
                        bd.medicare_code="F";
                    else if (bd.medicare_code.equals("A"))
                        bd.medicare_code="D";
                    labMedicareType.setText(bd.medicare_code);
                    setMedLbl(bd.medicare_code.charAt(0));
                }
                labDiagCode.setText(bd.diagnosis_code);
                labDiagCode2.setText(bd.diagnosis_code2);
                labDiagCode3.setText(bd.diagnosis_code3);
                labDiagCode4.setText(bd.diagnosis_code4);
                diag1lbl.setText(getDiagDescr(labDiagCode.getText()));
                diag2lbl.setText(getDiagDescr(labDiagCode2.getText()));
                diag3lbl.setText(getDiagDescr(labDiagCode3.getText()));
                diag4lbl.setText(getDiagDescr(labDiagCode4.getText()));
                labSubscrLName.setText(bd.sub_lname);
                labSubscrFName.setText(bd.sub_fname);
                if (!Utils.isNull(bd.sign_date))
                    labFormSigned.setText("Y");
                else
                    labFormSigned.setText("N");
        }               
        labBillingID.setText(bd.id_number);
        billingLevel.setText(bd.billing_level);
        thisRebill.setText(Integer.toString(bd.rebilling));
        ttlPayments.setText(labRec.billing.total_payments);
        ttlAdjust.setText(labRec.billing.total_adjustments);
    }

    public void fillClaimDetails(BillingDetails bd)
    {
        clearClaimDetails();
        if (Utils.isNull(bd.claim_status)) return;
        claimStatus.setText(bd.claim_status);
        claimStatusDescr.setText(
            getClaimDescr(bd.claim_status)); 
        if (bd.dAmountPaid()>0)
            paymentAmount.setText(bd.amount_paid);
        else
            paymentAmount.setText(null);
        if (bd.dAllowance()>0 && bd.dAllowance()<labRec.billing.dBillAmount())
            claimAllowable.setText(bd.allowance);
        else
            claimAllowable.setText(null);
        //patientAmount.setText(null);
        patientAmount.setText(thisBalance.getText());
        altClaimID.setText(bd.alt_id);
        dateReceived.setText(Utils.addDateMask(bd.LC_change_date));
        claimComment.setText(bd.claim_comment);
    }
    
    public void clearClaimDetails()
    {
        claimStatusDescr.setText(null);
        claimStatus.setText(null);
        //lockLbl.setText(null);
        paymentAmount.setText(null);
        claimAllowable.setText(null);
        patientAmount.setText(null);
        altClaimID.setText(null);
        dateReceived.setText(null);
        claimComment.setText(null);
    }
    
	void setMedLbl(char c)
	{
	    switch (c) {
	        case 'L':
	            labMedLbl.setText("LOW RISK");
	            break;
	        case 'H':
	            labMedLbl.setText("HIGH RISK");
	            break;
	        case 'D':
	            labMedLbl.setText("DIAGNOSTIC");
	            break;
	        case 'F':
	            labMedLbl.setText("FAX FOR ICD9");
	            break;
	    }
	}
    
	public String getClaimDescr(String cs)
	{
	    String csDescr = null;
	    for (int i=0; i<claimStatusVect.size(); i++) {
	        ClaimStatusRec csRec = (ClaimStatusRec)claimStatusVect.elementAt(i);
	        if (csRec.claim_status.equals(cs)) {
	            csDescr = csRec.description;
	        }
	    }
	    return csDescr;
	}
    
    public void fillLabRecord()  {
        labRec.pat.lname=labPatientLastName.getText();
        labRec.pat.fname=labPatientFirstName.getText();
        labRec.pat.mi=labPatientMI.getText();
        labRec.pat.address1=labPaAddress.getText();
        labRec.pat.city=labCity.getText();
        labRec.pat.state=labState.getText();
        labRec.pat.zip=Utils.stripZipMask(labZip.getText());
        labRec.pat.ssn=Utils.stripSSNMask(labSSN.getText());
        labRec.pat.dob=Utils.stripDateMask(labDOB.getText());
        labRec.pat.phone=Utils.stripPhoneMask(labPhone.getText());
        labRec.date_collected=Utils.stripDateMask(labDateCollected.getText());
        labRec.doctor_text=doctorText.getText();
        labRec.lab_comments=labComments.getText();
        
        
        billingAdd.billing_choice=getBillingCode(
            labBillingChoice.getText().trim());
        billingAdd.choice_code=labBillingChoice.getText().trim();
        billingAdd.carrier_id=billingAdd.payer.carrier_id;
        billingAdd.lab_number=labRec.lab_number;
        if (labBillingChoice.getText().equals("DOC"))
            billingAdd.id_number=labPractice.getText();
        else billingAdd.id_number=labBillingID.getText();
        billingAdd.group_number=labGrpNum.getText();
        if (labRelCode.getText().equals("S")||labRelCode.getText().equals("O")) 
            billingAdd.subscriber="SELF";
        else if (labRelCode.getText().equals("H")) 
            billingAdd.subscriber="SPOUSE";
        else if (labRelCode.getText().equals("C")) 
            billingAdd.subscriber="DEPENDENT";
        else billingAdd.subscriber="SELF";
        billingAdd.sub_lname=labSubscrLName.getText();
        billingAdd.sub_fname=labSubscrFName.getText();
        billingAdd.diagnosis_code=labDiagCode.getText();
        billingAdd.diagnosis_code2=labDiagCode2.getText();
        billingAdd.diagnosis_code3=labDiagCode3.getText();
        billingAdd.diagnosis_code4=labDiagCode4.getText();
        
        if (billingAdd.billing_choice==Lab.MED) {
            billingAdd.medicare_code=labMedicareType.getText();
            if (billingAdd.medicare_code.equals("D"))
                billingAdd.medicare_code="A";
            if (labFormSigned.getText().equals("Y"))
		        billingAdd.sign_date=Utils.stripDateMask(labDateCollected.getText());
		    else billingAdd.sign_date=null;
        }
        else billingAdd.medicare_code=null;
        
        labRec.rebilling = labRec.billing.details.size()-1;

        BillingDetails bd = (BillingDetails)labRec.billing.details.elementAt(
            labRec.billing.details.size()-1);
            
        billingAdd.claim_id=bd.claim_id;
        billingAdd.claim_status=claimStatus.getText();
        billingAdd.amount_paid=Utils.isNull(paymentAmount.getText(),"0.00");
        billingAdd.allowance=Utils.isNull(claimAllowable.getText(),"0.00");
        billingAdd.alt_id=altClaimID.getText();
        billingAdd.LC_datestamp=Utils.stripDateMask(dateReceived.getText());
        billingAdd.claim_comment=claimComment.getText();
        billingAdd.patAcct.comment_text=dbComments.getText();

        billingAdd.billing_level=bd.billing_level;
        if (currMode==Lab.REBILL_ADD) {
            if (!bd.billing_level.equals("PRT"))
                billingAdd.billing_level="RBL";
            if (!Utils.isNull(billingAdd.claim_status)) {
                if (billingAdd.claim_status.equals("PP")
                || billingAdd.claim_status.equals("P2"))
                    billingAdd.billing_level="PRT";
            }
            else {
                if (hasSecondary) billingAdd.claim_status="X";
            }
        }
    }        
    
    public void clearForm()  {
        msgLabel.setText(null);
        msgLabel2.setText(null);
        clearPatientDetails();
        clearBillingDetails(false);
        clearClaimDetails();
        clearBillingHistory();
        clearChargesAndPayments();
    }         
    
    public void resetColors()  {
        Utils.setColors(this.getContentPane());
		claimStatusDescr.setFont(new Font("Dialog", Font.PLAIN, 10));
        labPracticeName.setForeground(Color.white);
        carrierNameLbl.setForeground(Color.white);
        practicePhone.setForeground(Color.white);
        labSubscriber.setForeground(Color.white);
        diag1lbl.setForeground(Color.white);
        diag2lbl.setForeground(Color.white);
        diag3lbl.setForeground(Color.white);
        diag4lbl.setForeground(Color.white);
        labMedLbl.setForeground(Color.white);
        createdLbl.setForeground(Color.white);
        changedLbl.setForeground(Color.white);
        claimStatusDescr.setForeground(Color.white);
        msgLabel.setForeground(Color.green.brighter());
        msgLabel2.setForeground(Color.green.brighter());
        labPracticeName.setFont(new Font("Dialog", Font.BOLD, 11));
        carrierNameLbl.setFont(new Font("Dialog", Font.BOLD, 11));
        practicePhone.setFont(new Font("Dialog", Font.BOLD, 11));
        diag1lbl.setFont(new Font("SansSerif", Font.BOLD, 10));
        diag2lbl.setFont(new Font("SansSerif", Font.BOLD, 10));
        diag3lbl.setFont(new Font("SansSerif", Font.BOLD, 10));
        diag4lbl.setFont(new Font("SansSerif", Font.BOLD, 10));
        createdLbl.setFont(new Font("Dialog", Font.BOLD, 10));
        changedLbl.setFont(new Font("Dialog", Font.BOLD, 10));
        historyList.setFont(new Font("MonoSpaced", Font.PLAIN, 11));
        itemList.setFont(new Font("MonoSpaced", Font.PLAIN, 11));
        statusReset.setForeground(Color.white.brighter());
        pgmLabel.setFont(new Font("Dialog", Font.BOLD, 11));
        pgmLabel.setForeground(Color.white);
        pracType.setFont(new Font("Dialog", Font.BOLD, 11));
        pracType.setForeground(Color.white);
    }        
    
    void fillChargesAndPayments()
    {
        clearChargesAndPayments();
        Vector v = new Vector();
        for (int i = 0; i<labRec.billing.charges.size(); i++) {
            ChargeDetails c = (ChargeDetails)labRec.billing.charges.elementAt(i);
            String s = c.procedure_code+" "+c.description+c.item_amount;
            v.addElement(s);
            if (c.item_amount.trim().equals("LC")) {
                s="    **WILL NOT GO ON CLAIM/DB**";
                v.addElement(s);
            }
        }
        for (int i = 0; i<labRec.billing.payments.size(); i++) {
            PaymentDetails p = (PaymentDetails)labRec.billing.payments.elementAt(i);
            if (p.payment_type.trim().equals("PLUS ADJUST")) 
                p.payment_amount=p.payment_amount.replace('-',' ');
            String s = p.choice_code+" "+Utils.addDateMask(p.receive_date)+" "+
                p.payment_type+p.payment_amount;
            v.addElement(s);
        }
        itemList.setListData(v);
    }
    
    void fillBillingHistory()
    {
        clearBillingHistory();
        Vector v = new Vector();
        int ndx = 0;
        if (!Utils.isNull(labRec.billing.BQ_datestamp)) {
            if (labRec.billing.billing_route.equals("WKS"))
                v.addElement("    "+Utils.addDateMask(labRec.billing.BQ_datestamp)+
                    " WORKSHEET IN QUEUE");
            else
                v.addElement("    "+Utils.addDateMask(labRec.billing.BQ_datestamp)+
                    " IN BILLING QUEUE");
        }
        if (labRec.billing.in_queue>=0) {
            String s = null;
            if (labRec.billing.in_queue==1) 
                s = "    "+Utils.addDateMask(labRec.billing.date_sent)+
                    " "+labRec.billing.letter_type+" LETTER NEEDS PRINTED";
            else
                s = "    "+Utils.addDateMask(labRec.billing.date_sent)+
                    " "+labRec.billing.letter_type+" LETTER SENT";
            v.addElement(s);
        }
        for (int i = labRec.billing.details.size()-1; i>=0; i--) {
            BillingDetails bd = 
                (BillingDetails)labRec.billing.details.elementAt(i);
            if (i==labRec.billing.details.size()-1) {
                originalBillingChoice=bd.billing_choice;
                bd.startNdx=ndx;
                ndx+=v.size();
            }
            else {
                bd.startNdx=ndx;
                if (bd.billing_choice==Lab.DB) {
                    if (bd.patAcct.past_due==bd.patAcct.PAID_IN_FULL)
                        bd.patAcct.past_due=bd.patAcct.CURRENT;
                }
            }
            StringBuffer s = new StringBuffer(bd.choice_code+" ");
            if (bd.billing_choice==Lab.DB) {
                if (!Utils.isNull(bd.patAcct.PA_create_date))
                    s.append(Utils.addDateMask(bd.patAcct.PA_create_date)+" ");
                else if (!Utils.isNull(bd.date_sent))
                    s.append(Utils.addDateMask(bd.date_sent)+" ");
                else 
                    s.append(Utils.addDateMask(bd.BD_datestamp)+" ");
                s.append(labRec.pat.lname+", "+labRec.pat.fname);
                v.addElement(s);
                ndx++;
                s = new StringBuffer();
                if (!Utils.isNull(bd.patAcct.past_30_datestamp)) {
                    s.append("    "+
                        Utils.addDateMask(bd.patAcct.past_30_datestamp)+
                        " PAST 30 DAYS");
                    v.addElement(s.toString());
                    ndx++;
                    s = new StringBuffer();
                }
                if (!Utils.isNull(bd.patAcct.fnotice_datestamp)) {
                    s.append("    "+
                        Utils.addDateMask(bd.patAcct.fnotice_datestamp)+
                        " FINAL NOTICE");
                    v.addElement(s.toString());
                    ndx++;
                    s = new StringBuffer();
                }
                if (i!=labRec.billing.details.size()-1)
                    bd.patAcct.past_due=bd.patAcct.CURRENT;
                switch (bd.patAcct.past_due) {
                    case PatientAccountRec.ACCOUNT_NOT_ACTIVATED:
                        s.append("    "+"ACCOUNT NOT ACTIVATED");
                        v.addElement(s.toString());
                        ndx++;
                        break;
                    case PatientAccountRec.PAID_IN_FULL:
                        s.append("    "+
                            Utils.addDateMask(labRec.billing.date_paid)+
                            " PAID IN FULL");
                        v.addElement(s.toString());
                        ndx++;
                        break;
                    case PatientAccountRec.PAST_30:
                        if (Utils.isNull(bd.patAcct.past_30_datestamp)) {
                            s.append("    "+"PAST DUE ACCOUNT");
                            v.addElement(s.toString());
                            ndx++;
                        }
                        break;
                    case PatientAccountRec.INDEFINITE_HOLD:
                        s.append("    "+Utils.addDateMask(bd.patAcct.datestamp)+
                            " HOLD UNTIL FURTHER NOTICE");
                        v.addElement(s.toString());
                        ndx++;
                        break;
                    case PatientAccountRec.HOLD_TO_DATE:
                        s.append("    "+"HOLD UNTIL: "+
                            Utils.addDateMask(bd.patAcct.due_date_start));
                        v.addElement(s.toString());
                        ndx++;
                        break;
                }
                if (bd.patAcct.collectionInfo.size()>0) {
                    for (int j=0; j<bd.patAcct.collectionInfo.size(); j++) {
                        String t = (String)bd.patAcct.collectionInfo.elementAt(j);
                        v.addElement(t);
                        ndx++;
                    }
                }
            }
            else if (bd.billing_choice==Lab.DOC) {
                if (!Utils.isNull(bd.date_sent))
                    s.append(Utils.addDateMask(bd.BD_datestamp/*date_sent*/)+" ");
                else 
                    s.append(Utils.addDateMask(bd.BD_datestamp)+" ");
                int pr = (int)Integer.parseInt(bd.id_number.trim());
                if (pr!=labRec.practice)
                    s.append(labOps.getPracticeName(pr));
                else
                    s.append(labRec.prac.name);
                v.addElement(s.toString());
                ndx++;
            }
            else {
                if (!Utils.isNull(bd.claim_status))
                    s.append(Utils.addDateMask(bd.LC_datestamp)+" ");
                else if (!Utils.isNull(bd.date_sent))
                    s.append(Utils.addDateMask(bd.BD_datestamp/*date_sent*/)+" ");
                else 
                    s.append(Utils.addDateMask(bd.BD_datestamp)+" ");
                s.append(Utils.isNull(
                    bd.payer.name,dbLogin.getBillingDescription(bd.billing_choice)));
                v.addElement(s.toString());
                ndx++;
                if (!Utils.isNull(bd.letter_date)) {
                    String ltrDate = Utils.addDateMask(bd.BD_datestamp/*letter_date*/);
                    s = new StringBuffer();
                    s.append("    ");
                    if (bd.rework_queue==1) {
                        s.append(ltrDate+" NMN LETTER PENDING");
                    }
                    else {
                        s.append(ltrDate+" NMN LETTER");
                    }
                    v.addElement(s.toString());
                    ndx++;
                }
                if (bd.rework_queue==1) {
                    s = new StringBuffer();
                    s.append("    CLAIM NEEDS REWORK");
                    v.addElement(s.toString());
                    ndx++;
                }
                if (bd.billing_choice==Lab.MED && labRec.pap_class==1) {
                    s = new StringBuffer();
                    s.append("    UNSATISFACTORY RESULTS");
                    v.addElement(s.toString());
                    ndx++;
                }
            }
            bd.endNdx=ndx-1;
        }
        historyList.setListData(v);
    }
    
    void clearBillingHistory()
    {
        String[] x = new String[1];
        historyList.setListData(x);
        historyList.repaint();
        historyList.revalidate();
    }
    
    void clearChargesAndPayments()
    {
        String[] x = new String[1];
        itemList.setListData(x);
        itemList.repaint();
        itemList.revalidate();
    }

	public void finalActions()  
	{
	    boolean success=false;
	    if (currMode==Lab.QUERY || currMode==Lab.UPDATE ) {
		    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            if (labOps.query(labNumber.getText())) {
                fillForm();
                setEnableAllFields(false);
                Utils.setComponent(labNumber);
                if (!Utils.isNull(labRec.prac.comment_text))
                    displayComments(practiceComments,"Practice Comments");
                if (labOps.hasLabComments(labRec.lab_number))
                    displayComments();
                currentSection=0;
            }
            else {
                resetActions();
                msgLabel.setText("Query Operation Failed");
            }
		    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
	    }
		else if (currMode==Lab.REBILL_ADD)  {
		    if (!hasSecondary) verifySecondary();
		    this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
		    fillLabRecord();
		    if (!labBillingChoice.getText().equals("DOC") &&
		        !labBillingChoice.getText().equals("DB") &&
		        !labBillingChoice.getText().equals("PRC") &&
		        !labBillingChoice.getText().equals("PPN") &&
		        !labBillingChoice.getText().equals("PPD"))
            {
		        if (billingAdd.payer.carrier_id==(-1)) {
                    createErrMsg("Payer for Code "+
                        (String)labBillingChoice.getText()+ 
                        " does not exist");
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                    return;
                }
                boolean rv = billingValidation();
                if (!rv) { 
                    this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                    return;
                }
            }
            labOps.updatePatient();
            success=labOps.add();
            if (success) {
                boolean wasInCollection=inCollection;
                setEnableAllFields(false);
                msgLabel.requestFocus();
                String lnum = Integer.toString(labRec.lab_number);
                currMode=Lab.IDLE;
                resetActions();
                success=labOps.query(lnum);
                if (success) {
                    fillForm();
                    if (wasInCollection && !inCollection) {
                        displayCreditBureauWarning();
                    }
                    fKeys.off();
                    fKeys.keyOn(fKeys.F2);
                    fKeys.keyOn(fKeys.F3);
                    fKeys.keyOn(fKeys.F9);
                }
                else  {
                    createErrMsg("Operation Failed");
                }                
            }
            this.setCursor(new Cursor(DEFAULT_CURSOR));
        }	
		else if (currMode==Lab.PATIENT_UPDATE)  {
		    this.setCursor(new Cursor(WAIT_CURSOR));
		    fillLabRecord();
            labOps.updatePatient();
            this.setCursor(new Cursor(DEFAULT_CURSOR));
            setEnableAllFields(false);
            currMode=Lab.IDLE;
        }	
        else if (currMode==Lab.REBILL) {
            if (labRec.lab_number<=0) {
		        this.setCursor(new Cursor(WAIT_CURSOR));
                if (labOps.query(labNumber.getText())) {
                    fillForm();
                    setEnableAllFields(false);
                    Utils.setComponent(labNumber);
                    if (!Utils.isNull(labRec.prac.comment_text))
                        displayComments(practiceComments,"Practice Comments");
                    if (labOps.hasLabComments(labRec.lab_number))
                        displayComments();
                    currentSection=0;
                }
                else {
                    resetActions();
                    msgLabel.setText("Query Operation Failed");
                }
		        this.setCursor(new Cursor(DEFAULT_CURSOR));
		    }
            currMode=Lab.REBILL_ADD;
            addActions();
        }
        else if (currMode==Lab.REBILL_UPDATE) {
		    this.setCursor(new Cursor(WAIT_CURSOR));
		    fillLabRecord();
		    if (!labBillingChoice.getText().equals("DOC") &&
		        !labBillingChoice.getText().equals("DB") &&
		        !labBillingChoice.getText().equals("PRC") &&
		        !labBillingChoice.getText().equals("PPN") &&
		        !labBillingChoice.getText().equals("PPD"))
            {
		        if (billingAdd.payer.carrier_id==(-1)) {
                    createErrMsg("Payer for Code "+
                        (String)labBillingChoice.getText()+ 
                        " does not exist");
                    this.setCursor(new Cursor(DEFAULT_CURSOR));
                    return;
                }
                boolean rv = billingValidation();
                if (!rv) { 
                    this.setCursor(new Cursor(DEFAULT_CURSOR));
                    return;
                }
            }
            labOps.updatePatient();
            success=labOps.rebillUpdate();
            if (success) {
                boolean wasInCollection=inCollection;
                setEnableAllFields(false);
                msgLabel.requestFocus();
                String lnum = Integer.toString(labRec.lab_number);
                resetActions();
                success=labOps.query(lnum);
                if (success) {
                    if (wasInCollection && !inCollection) {
                        displayCreditBureauWarning();
                    }
                    fillForm();
                    fKeys.off();
                    fKeys.keyOn(fKeys.F2);
                    fKeys.keyOn(fKeys.F3);
                    fKeys.keyOn(fKeys.F9);
                }
                else createErrMsg("Operation Failed");
            }
            this.setCursor(new Cursor(DEFAULT_CURSOR));
        }
        else if (currMode==Lab.CLAIM)  {
            success=labOps.query(labNumber.getText());
            if (success) {
                fKeys.off();
                fKeys.keyOn(fKeys.F2);
                fKeys.keyOn(fKeys.F3);
                fKeys.keyOn(fKeys.F9);
                resetColors();
                fillForm();
                setEnableAllFields(false);
                msgLabel.requestFocus();
                if (!Utils.isNull(labRec.prac.comment_text))
                    displayComments(practiceComments,"Practice Comments");
                if (labOps.hasLabComments(labRec.lab_number))
                    displayComments();
                claimActions();
            }
            else  {
                currMode=Lab.IDLE;
                resetActions();
                Utils.createErrMsg("No data located");
            }                
        }
        else if (currMode==Lab.CLAIM_ADD) {
            this.setCursor(new Cursor(WAIT_CURSOR));
            fillLabRecord();
            labOps.updatePatient();
	        labOps.claimPaymentAdd();
	        if (claimStatus.getText().equals("B")) 
	            labOps.resubmitClaim();
	        boolean wasInCollection = inCollection;
	        if (hasSecondary) {
	            String lnum = labNumber.getText();
	            currMode=Lab.IDLE;
	            resetActions();
	            labNumber.setText(lnum);
	            labOps.query(lnum);
	            if (wasInCollection && !inCollection) {
	                displayCreditBureauWarning();
	            }
	            this.setCursor(new Cursor(DEFAULT_CURSOR));
                currMode=Lab.REBILL_ADD;
                hasSecondary=true;
                addActions();
                msgLabel.setText("Enter billing information for secondary insurance.");
	        }
	        else {
	            this.setCursor(new Cursor(DEFAULT_CURSOR));
	            currMode=Lab.IDLE;
	            resetActions();
	            claimActions();
            }
        }
        else if (currMode==Lab.REWORK_ADD) {
            fillLabRecord();
            this.setCursor(new Cursor(WAIT_CURSOR));
            labOps.updatePatient();
            if (billingAdd.claim_status.equals("F")||billingAdd.claim_status.equals("LT"))
                success=labOps.resubmitClaim();
            else success=labOps.add();
            boolean wasInCollection = inCollection;
            if (success) {
	            String lnum = labNumber.getText();
	            currMode=Lab.IDLE;
	            resetActions();
	            labNumber.setText(lnum);
	            labOps.query(lnum);
	            if (wasInCollection && !inCollection) {
	                displayCreditBureauWarning();
	            }
	        }
	        else {
	            currMode=Lab.IDLE;
	            resetActions();
	        }
            this.setCursor(new Cursor(DEFAULT_CURSOR));
        }
        else if (currMode==Lab.REVERSE_PAYMENT) {
            this.setCursor(new Cursor(WAIT_CURSOR));
            PaymentDetails p = 
                (PaymentDetails)labRec.billing.payments.elementAt(0);
            labOps.reversePayment(p.payment_id);
		    String lnum = labNumber.getText();
		    currMode=Lab.IDLE;
		    resetActions();
            if (labOps.query(lnum)) {
                fillForm();
                setEnableAllFields(false);
                Utils.setComponent(labNumber);
                if (!Utils.isNull(labRec.prac.comment_text))
                    displayComments(practiceComments,"Practice Comments");
                if (labOps.hasLabComments(labRec.lab_number))
                    displayComments();
                currentSection=0;
            }
            this.setCursor(new Cursor(DEFAULT_CURSOR));
        }
        if (currMode==Lab.UPDATE) { 
            if (labRec.billing.details.size()>0) {
                billingAdd = (BillingDetails)labRec.billing.details.elementAt(
                    labRec.billing.details.size()-1);
                updateActions();
            }
        }
    }	    
    
    boolean isUpdatable()
    {
        boolean canUpdate = true;
        if (globalFinished==DATA_ENTRY) {
            Utils.createErrMsg("Cannot perform any billing actions on LAB #"+
                labNumber.getText()+" because results have not been entered.");
            canUpdate=false;
        }
        else if (globalFinished==RESULTED) {
            Utils.createErrMsg("Cannot perform any billing actions on LAB #"+
                labNumber.getText()+" from this screen. Update in requisition screen.");
            canUpdate=false;
        }
        else if (globalFinished==BILLED && currMode==Lab.REWORK_ADD) {
            Utils.createErrMsg("Cannot perform rework actions on LAB #"+
                labNumber.getText()+" as it has only been billed once.");
            canUpdate=false;
        }
        else if (inBillingQueue && globalFinished>RESULTED) {
            Utils.createErrMsg("Cannot perform any billing actions on LAB #"+
                labNumber.getText()+" - must remove from billing queue first.");
            canUpdate=false;
        }
        else if (globalFinished>=FINISHED) {
            Utils.createErrMsg("Cannot perform any billing actions on LAB #"+
                labNumber.getText()+" as the billing status is FINISHED.");
            canUpdate=false;
        }
        String s = claimStatus.getText();
        if (!Utils.isNull(s)
        && currMode!=Lab.CLAIM_ADD
        && (s.equals("S") || s.equals("B") || s.equals("SU"))) {
            Utils.createErrMsg("Cannot perform any billing actions on LAB #"+
                labNumber.getText()+" - still awaiting response from payer.");
            canUpdate=false;                
        }
        if (!canUpdate) {
            setEnableAllFields(false);
            msgLabel.requestFocus();
            currMode=Lab.IDLE;
        }
        return (canUpdate);        
    }

	void labNumber_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event,10);
	}

	void labPatientID_keyTyped(java.awt.event.KeyEvent event)
	{
	}

	void labGrpNum_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,32);
	}

	void labBillingID_keyTyped(java.awt.event.KeyEvent event)
	{
	    if (labBillingChoice.getText().equals("DPA")) {
	        if (labDPAState.getText().equals("PA"))
	            Utils.forceUpper(event,10);
	        else if (labDPAState.getText().equals("OH"))
	            Utils.forceUpper(event,12);
	        else if (labDPAState.getText().equals("WV"))
	            Utils.forceUpper(event,12);
	        else if (labDPAState.getText().equals("AL"))
	            Utils.forceUpper(event,13);
	    }
		else Utils.forceUpper(event,32);
	}

	void labPractice_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event,3);
	}

	void labSubscrLName_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,32);
	}

	void labSubscrFName_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,32);
	}

	void labDPAState_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,2);
	}

	void labClientNotes_keyTyped(java.awt.event.KeyEvent event)
	{
	}

	void labDateCollected_keyTyped(java.awt.event.KeyEvent event)
	{
	    Utils.buildDateMask(event);
	}
	
	void labOtherInsurance_keyTyped(java.awt.event.KeyEvent event)
	{
	    carrierChanged=true;
		Utils.forceUpper(event,128);
	}

	class SymFocus extends java.awt.event.FocusAdapter
	{
		public void focusGained(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			Utils.deselect(event);
			msgLabel.setText(null);
			msgLabel2.setText(null);
			if (object == labDiagCode)
				labDiagCode_focusGained(event);
			else if (object == labBillingChoice)
				labBillingChoice_focusGained(event);
			else if (object == labBillingID)
				labBillingID_focusGained(event);
			if (object == labDiagCode2)
				labDiagCode2_focusGained(event);
			else if (object == labDiagCode3)
				labDiagCode3_focusGained(event);
			else if (object == labDiagCode4)
				labDiagCode4_focusGained(event);
			else if (object == labOtherInsurance)
				labOtherInsurance_focusGained(event);
			else if (object == labSubscrFName)
				labSubscrFName_focusGained(event);
			if (object == labRelCode)
				labRelCode_focusGained(event);
			if (object == labNumber)
				labNumber_focusGained(event);
			else if (object == claimStatus)
				claimStatus_focusGained(event);
			else if (object == labMedicareType)
				labMedicareType_focusGained(event);
		}

		public void focusLost(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			if (object == labDiagCode)
				labDiagCode_focusLost(event);
			else if (object == labOtherInsurance)
				labOtherInsurance_focusLost(event);
			if (object == doctorText)
				doctorText_focusLost(event);
		}
	}

	void labDiagCode_focusGained(java.awt.event.FocusEvent event)
	{
        msgLabel.setText("F8 = Diagnosis Code List");
	    labDiagCode2.setEnabled(true);
	    labDiagCode3.setEnabled(true);
	    labDiagCode4.setEnabled(true);
        if (labBillingChoice.getText().equals("MED")) {
            if (labMedicareType.getText().equals("L")) {
                if (Utils.isNull(labDiagCode.getText())) {
                    setMedPrimaryDiag();
                    return;
                }
                diag1lbl.setText(getDiagDescr(labDiagCode.getText()));
                labDiagCode.setEnabled(false);
                labDiagCode2.setText("V72.6");
                diag2lbl.setText(getDiagDescr("V72.6"));
                labDiagCode2.setEnabled(false);
                labDiagCode3.setText(null);
                labDiagCode4.setText(null);
                diag3lbl.setText(null);
                diag4lbl.setText(null);
                labDiagCode3.requestFocus();
                return;
            }
            else if (labMedicareType.getText().equals("H")) {
                labDiagCode.setText("V15.89");
                diag1lbl.setText(getDiagDescr("V15.89"));
                labDiagCode.setEnabled(false);
                labDiagCode2.setText("V72.6");
                diag2lbl.setText(getDiagDescr("V72.6"));
                labDiagCode2.setEnabled(false);
                labDiagCode3.setText(null);
                labDiagCode4.setText(null);
                diag3lbl.setText(null);
                diag4lbl.setText(null);
                labDiagCode3.requestFocus();
                return;
            }
            else { clearDiagCodeDisplay(); }
        }
	}

	void labDiagCode_focusLost(java.awt.event.FocusEvent event)
	{
	}

	void labBillingChoice_focusGained(java.awt.event.FocusEvent event)
	{
	    carrierCommentsShown=false;
		msgLabel.setText("F8 = Billing Code List");
	}

    public void rebillActions(boolean canRebill)
    {
        if (labRec.lab_number<=0) {
            currMode=Lab.IDLE;
		    resetActions();
		    setEnableAllFields(false);
		    labNumber.setEnabled(true);
		    labNumber.setBackground(Color.white);
		    labNumber.setForeground(Color.black);
		    labNumber.setCaretColor(Color.black);
            currMode=Lab.REBILL;
		    labNumber.requestFocus();
		}
		else {
		    String s = Utils.isNull(claimStatus.getText(),"X");
		    if (s.equals("P2") || s.equals("R2"))
		        hasSecondary=true;
            if (inRework && !canRebill) {
                currMode=Lab.REWORK_ADD;
                if (isUpdatable()) claimReworkActions();
            }
            else {
		        currMode=Lab.REBILL_ADD;
		        addActions();
		    }
		}
    }
    
	void keyActions(java.awt.event.KeyEvent event) {
	    msgLabel.setText(null);
	    msgLabel2.setText(null);
	    if (event.getKeyCode()==event.VK_CONTROL) {
                
        }
        else if (event.getKeyCode()==event.VK_DOWN) {
            decrement();
        }
        else if (event.getKeyCode()==event.VK_UP) {
            increment();
        }
    }	    
    
    public void patientActions()
    {
        currMode=Lab.PATIENT_UPDATE;
        setEnableAllFields(false);
        setEnablePatientFields(true);
    }
    
    public void displayDoctorList()
    {
        String[] buf = new String[doctorVect.size()];
        for (int i=0;i<doctorVect.size();i++) {
	        DoctorRec dRec = (DoctorRec)doctorVect.elementAt(i);
            buf[i]=dRec.doctor+" "+Utils.doctorName(dRec);
        }
        if (doctorVect.size()>1) {
            (new PickList("Doctors",300,100,240,190,
                doctorVect.size(),buf,buf,doctorText)).setVisible(true);
        }
        else {
            doctorText.setText(buf[0]);
            msgLabel.setText("This account has ONE doctor.");
        }
        return;            
    }

    public void displayComments(JTextArea txt, String title) 
    {
        boolean isUpdatable = false;
        if (currMode!=Lab.IDLE) isUpdatable=true;
        if (title.equals("Practice Comments")) isUpdatable=false;
        (new CommentForm(title,txt,isUpdatable)).setVisible(true);
    }        
    
    public void displayComments()
    {
        (new CommentForm(dbLogin,labRec.lab_number)).setVisible(true);
    }

	void labBillingChoice_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,3);
	}

	void labBillingID_focusGained(java.awt.event.FocusEvent event)
	{
	    if (!Utils.isNull(billingAdd.payer.comment_text))
	        displayCarrierComments();
	}

	void labDiagCode2_focusGained(java.awt.event.FocusEvent event)
	{
        msgLabel.setText("F8 = Diagnosis Code List");
	}

	void labDiagCode3_focusGained(java.awt.event.FocusEvent event)
	{
        msgLabel.setText("F8 = Diagnosis Code List");
	}

	void labDiagCode2_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,16);
	}

	void labDiagCode3_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,16);
	}

	void labDiagCode4_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,16);
	}
	
	public boolean compareDiag(JTextField diag1, JTextField diag2)  {
	    boolean rv=false;
	    if (diag1.getText().equals(diag2.getText()))  {
	        String msg = "Diagnosis Codes: ["+diag1.getText()+"] and ["+diag2.getText()+"] are the same";
	        createErrMsg(msg);
	        diag2.setText(null);
	        diag2.requestFocus();
	        rv=true;
        }	        
        return (rv);
    }        	    

	public boolean checkDiag(JTextField diag)  {
	    boolean rv=false;
	    for (int i=0;i<MAX_DIAG_CODES;i++)  {
	        if (diag.getText().equals(labDiagnosisCodes[i].diagnosis_code))  {
	            rv=true;
	            break;
            }	            
        }	        
        if (!rv)  {
            String msg = "Diagnosis Code does not exist ["+diag.getText()+"]";
	        createErrMsg(msg);
	        diag.setText(null);
	        diag.requestFocus();
        }	        
        return (rv);
    }        	    

	public void createErrMsg(String msg)  {
        (new ErrorDialog(msg)).setVisible(true);
    }	    
	

	void labDiagCode_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,16);
	}


	void labDiagCode4_focusGained(java.awt.event.FocusEvent event)
    {
        msgLabel.setText("F8 = Diagnosis Code List");
	}

    boolean validateBillingChoice() {
		boolean rv = Utils.requiredField(labBillingChoice,"Billing Choice");
		if (rv) {
            msgLabel.setText(null);
            msgLabel2.setText(null);
            boolean found = false;
            for (int i=0;i<MAX_BILLING_CODES;i++)  {
                if (labBillingCodes[i].choice_code.equals(labBillingChoice.getText()))  {
	                labRec.billing_choice=labBillingCodes[i].billing_choice;
	                labRec.description=labBillingCodes[i].description;
	                found=true;
	                break;
                }
            }         
            if (!found)  {
                createErrMsg("Invalid Billing Code: "+(String)labBillingChoice.getText());
                labBillingChoice.setText(null);
                labBillingChoice.requestFocus();
                rv=false;
            }            
        }
        return (rv);
    }

	void labOtherInsurance_focusGained(java.awt.event.FocusEvent event)
	{
	    String bChoice = labBillingChoice.getText();
	    if (!bChoice.equals("OI") && !bChoice.equals("DOC") && 
		    !bChoice.equals("DB") && !bChoice.equals("PRC") && !bChoice.equals("PPD")) 
        {
            labOtherInsurance.setEnabled(false);
            labPayerID.setEnabled(false);
            labPCSID.setEnabled(false);
		    labBillingID.requestFocus();
        }
	}
	
	void invokePrepaidDialog() 
	{
	    (new PpdLabDialog(this)).setVisible(true);
	}

	void labSubscrFName_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.requiredField(labSubscrLName,"Subscriber Last Name");
	}


	public void resetFKeys()  {
	    fKeys.off();
	    fKeys.keyOn(fKeys.F1);
	    //fKeys.keyOn(fKeys.F2);
	    fKeys.keyOn(fKeys.F9);
    }	    

	public void updateActions() {
	    if (currMode==Lab.IDLE) {
	        resetActions();
	        currMode=Lab.UPDATE;
	        labNumber.setBackground(Color.white);
	        labNumber.setForeground(Color.black);
	        labNumber.setCaretColor(Color.black);
	        labNumber.setEnabled(true);
	        labNumber.requestFocus();
	        return;
	    }
	    if (claimStatus.getText().equals("P")) {
	        /*
	            Enables reversal of a payment made iff
	            there has (to date) only been one payment
	            made. Payment is deleted, reveral recorded,
	            status back to S, and screen updated when
	            dB actions completed.
	        */
	        if (labRec.billing.payments.size()==1) {
		        int rv = confirmPaymentDelete.showConfirmDialog(
		            this,"Reverse Claim Payment?",
		            "Payment Removal",confirmPaymentDelete.YES_NO_OPTION,
		            confirmPaymentDelete.QUESTION_MESSAGE);
                if (rv==confirmPaymentDelete.YES_OPTION) {
                    currMode=Lab.REVERSE_PAYMENT;
                    finalActions();
		        }
		    }
		    else Utils.createErrMsg("Cannot reverse multiple payments");
	    }
	    else if (inRework || hasLetter) {
	        billingAdd = (BillingDetails)labRec.billing.details.elementAt(
	            labRec.billing.details.size()-1);
	    }
	    else {
	        Utils.createErrMsg("Update only for REWORK or items that "+
	            "have a pending fax letter.");
	        return;
	    }
        if (inRework) {
            currMode=Lab.REWORK_ADD;
            if (isUpdatable()) claimReworkActions();
        }
		else if (hasLetter) {
		    currMode=Lab.REBILL_UPDATE;
		    if (isUpdatable()) {
		        setEnableAllFields(false);
		        setEnablePatientFields(true);
		    }
		}
	}
	
	void labPayerID_keyTyped(java.awt.event.KeyEvent event)
	{
	    carrierChanged=true;
		Utils.forceUpper(event,32);
	}

	void labPCSID_keyTyped(java.awt.event.KeyEvent event)
	{
	    carrierChanged=true;
		Utils.forceUpper(event,5);
	}

	void labPractice_keyPressed(java.awt.event.KeyEvent event)
	{
	    if (event.getKeyCode()==event.VK_ENTER) {
	        if (Utils.required(labPractice,"Practice")) {
                int pr = (int)Integer.parseInt(labPractice.getText());
	            if (labBillingChoice.getText().equals("DOC")
	            && labRec.billing_choice==Lab.DOC) {
	                if (pr==labRec.practice) {
	                    Utils.createErrMsg(
	                        "Cannot do DOC to DOC rebilling on same practice");
	                    labPractice.setText(null);
	                }
	                else {
	                    labRec.prac.practice=pr;
	                    labOps.getPracticeInfo();
	                    labPractice.transferFocus();
	                }
	            }
	            else {
	                labRec.prac.practice=pr;
	                labOps.getPracticeInfo();
	                labPractice.transferFocus();
	            }
	        }
	    }
	}

	void labOtherInsurance_focusLost(java.awt.event.FocusEvent event)
	{
	}
	
    int getBillingCode(String bChoice) {
        int billingCode=0;
        for (int i=0;i<labBillingCodes.length;i++) {
            if (labBillingCodes[i].choice_code.equals(bChoice)) {
                billingCode=labBillingCodes[i].billing_choice;
                break;
            }
        }
        return billingCode;
    }
    
    String getBillingDescr(String bChoice) {
        String billingDescr = new String();
        for (int i=0;i<labBillingCodes.length;i++) {
            if (labBillingCodes[i].choice_code.equals(bChoice)) {
                billingDescr=labBillingCodes[i].description;
                break;
            }
        }
        return billingDescr;
    }
    
    void clearPatientDetails()
    {
        labPrevLabNum.setText(null);
        labNumber.setText(null);
        labPatientNumber.setText(null);
        labPractice.setText(null);
        labParent.setText(null);
        labPracticeName.setText(null);
        practicePhone.setText(null);
        labPatientLastName.setText(null);
        labPatientFirstName.setText(null);
        labPatientMI.setText(null);
        labPaAddress.setText(null);
        labZip.setText(null);
        labCity.setText(null);
        labState.setText(null);
        labPhone.setText(null);
        labDOB.setText(null);
        labSSN.setText(null);
        labClientNotes.setText(null);
        labDateCollected.setText(null);
        labPatientID.setText(null);
        labRush.setSelected(false);
        //labNumSlides.setText(null);
        doctorText.setText(null);
        pracType.setText(null);
        pgmLabel.setText(null);
    }
    
    void clearBillingDetails(boolean retainICD9) {
        createdLbl.setText("Created: ");
        changedLbl.setText("Updated: ");
        labBillingChoice.setText(null);
        labOtherInsurance.setText(null);
        labPayerID.setText(null);
        labPCSID.setText(null);
        labSubscriber.setText("SELF");
        labRelCode.setText("S");
        labBillingID.setText(null);
        labGrpNum.setText(null);
        labDPAState.setText(null);
        labFormSigned.setText("N");
        labSubscrLName.setText(null);
        labSubscrFName.setText(null);
        labMedicareType.setText(null);
        labMedLbl.setText(null);
        carrierNameLbl.setText(null);
        labBillingIDLbl.setText("Billing ID");
        if (!retainICD9) { clearDiagCodeDisplay(); }
        ttlCharges.setText(null);
        ttlPayments.setText(null);
        ttlAdjust.setText(null);
        thisBalance.setText(null);
        billingLevel.setText(null);
        thisRebill.setText(null);
    }
    
    void setBillingLabels(String bChoice) {
        carrierNameLbl.setText(getBillingDescr(bChoice));
        if (bChoice.equals("DOC")) labBillingIDLbl.setText("Account #");
        else if (bChoice.equals("DB")) labBillingIDLbl.setText("Patient #");
        else if (bChoice.equals("OI")) labBillingIDLbl.setText("Insurance ID#");
        else if (bChoice.equals("BS")) labBillingIDLbl.setText("Blue Shield ID#");
        else if (bChoice.equals("MED")) labBillingIDLbl.setText("Medicare # (including letter)");
        else if (bChoice.equals("DPA")) labBillingIDLbl.setText("Medical Assistance #");
        else labBillingIDLbl.setText(null);
    }

    boolean billingValidation() {
        boolean rv = true;
        String bChoice = labBillingChoice.getText();
        int slen = 0;
        if (labRec.doc.doctor==(-1)) {
            Utils.createErrMsg("Doctor not selected");
            setEnableAllFields(false);
            setEnablePatientFields(true);
            doctorText.setText(null);
            doctorText.requestFocus();
            displayDoctorList();
            return (false);
        }
        if (bChoice.equals("PPD")) {
            if (labRec.payment_amount<=0) {
                Utils.createErrMsg("Missing Required Billing Fields");
                currentSection=1;
                gotoNextSection();
                return (false);
            }
        }
        if (bChoice.equals("MED") || bChoice.equals("BS") || 
        bChoice.equals("DPA") || bChoice.equals("OI")) {
            if (Utils.isNull(labBillingID.getText())) {
                Utils.createErrMsg("Missing Required Billing Fields");
                currentSection=1;
                gotoNextSection();
                return (false);
            }
        }
        if (bChoice.equals("BS")) {
        if (Utils.isNull(labGrpNum.getText())) {
            Utils.createErrMsg("Missing Required Billing Fields");
            currentSection=1;
            gotoNextSection();
            return (false);
        }
        }
        slen=Utils.length(labDiagCode.getText());
        String state = labDPAState.getText();
        if (bChoice.equals("DPA") && !state.equals("WV") && !state.equals("OH")) slen=1;
        else if (bChoice.equals("MED") && labMedicareType.getText().equals("F")) slen=1;
        if (slen==0) {
            Utils.createErrMsg("Missing Required Billing Fields");
            currentSection=1;
            gotoNextSection();
            return (false);
        }
        if (bChoice.equals("OI")) {
            if (Utils.isNull(labOtherInsurance.getText())) {
                Utils.createErrMsg("Missing Required Billing Fields");
                currentSection=1;
                gotoNextSection();
                return (false);
            }
        }
        return (true);
    }

	void labPaAddress_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,64);
	}

	void labSSN_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.buildSSNMask(event);
	}

	void labDOB_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.buildDateMask(event);
	}

	void labZip_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.buildZipMask(event);
	}

	void labState_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,2);
	}

	void labCity_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,32);
	}

	void displayCarrierComments() {
	    if (Utils.isNull(billingAdd.payer.comment_text)) return;
        if (!carrierCommentsShown) {
	        JTextArea comments = new javax.swing.JTextArea();
	        comments.setText(billingAdd.payer.comment_text);
            (new CommentForm("Payer Comments",comments,false)).setVisible(true);
            carrierCommentsShown=true;
        }
	}

	void labNumber_keyPressed(java.awt.event.KeyEvent event)
	{
	    if (event.getKeyCode()==event.VK_ENTER) {
	        if (!Utils.isNull(labNumber.getText())) {
	            finalActions();
	        }
	        else {
	            queryPatientActions();
	        }
		}
	}

	void labPatientNumber_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event,8);
	}

	void labPatientNumber_keyPressed(java.awt.event.KeyEvent event)
	{
	}

	void labPatientLastName_keyTyped(java.awt.event.KeyEvent event)
	{
	    Utils.forceUpper(event,32);
	}

	void labPatientLastName_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
	        if (currMode!=Lab.CLAIM_QUERY) {
	            if (Utils.required(labPatientLastName,"Patient Last Name"))
		            labPatientLastName.transferFocus();
		    }
		    else labPatientLastName.transferFocus();
        }
	}

	void labPatientFirstName_keyTyped(java.awt.event.KeyEvent event)
	{
	    Utils.forceUpper(event,32);
	}

	void labPatientFirstName_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
	        if (currMode!=Lab.CLAIM_QUERY) {
	            if (Utils.required(labPatientFirstName,"Patient First Name"))
		            labPatientFirstName.transferFocus();
		    }
		    else labPatientFirstName.transferFocus();
		}
	}

	void labPatientMI_keyTyped(java.awt.event.KeyEvent event)
	{
	    Utils.forceUpper(event,1);
	}

	void labPatientMI_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) 
		    labPatientMI.transferFocus();
	}

	void labPaAddress_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    labPaAddress.transferFocus();
	}

	void labZip_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    labPhone.requestFocus();
            if (!Utils.isNull(labZip.getText()) &&
                 Utils.isNull(labCity.getText()) &&
                 Utils.isNull(labState.getText())) labOps.getZipInfo();
		}
	}

	void labCity_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    labCity.transferFocus();
	}

	void labState_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    labState.transferFocus();
	}

	void labPhone_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.buildPhoneMask(event);
	}

	void labPhone_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    labPhone.transferFocus();
	}

	void labDOB_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    labDOB.transferFocus();
	}

	void labSSN_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    labSSN.transferFocus();
	}

	void labClientNotes_keyPressed(java.awt.event.KeyEvent event)
	{
	}

	void labDateCollected_keyPressed(java.awt.event.KeyEvent event)
	{
	    if (event.getKeyCode()==event.VK_ENTER) {
	        if (Utils.required(labDateCollected,"Date Collected")) {
	            if (Utils.dateVerify(labDateCollected)) {
	                labDateCollected.transferFocus();
	                if (currMode!=Lab.UPDATE) displayDoctorList();
	            }
	        }
	    }
	}

	void labPatientID_keyPressed(java.awt.event.KeyEvent event)
	{
	}
	
	void labBillingChoice_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    labBillingChoice_enterActions();
	}

	void labOtherInsurance_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    labOtherInsurance.transferFocus();
	}

	void labPayerID_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    labPayerID.transferFocus();
	}

	void labPCSID_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
            if (Utils.isNull(labOtherInsurance.getText()) 
            && Utils.isNull(labPayerID.getText()) 
            && Utils.isNull(labPCSID.getText())) {
	            Utils.createErrMsg("Missing payer information");
	            labOtherInsurance.requestFocus();
	            return;
            }
            else labOps.getCarrierInfo();
		    labPCSID.transferFocus();
		}
	}

	void labBillingID_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.requiredField(labBillingID,"Billing ID")) {
		        if (labBillingChoice.getText().equals("MED")) {
		            char c = labBillingID.getText().charAt(0);
		            if (c>='A' && c<='Z') {
                        CarrierRec cRec = (CarrierRec)carrierVect.elementAt(1);
                        labOtherInsurance.setText(cRec.name);
                        labPayerID.setText(cRec.payer_id);
                        labPCSID.setText(Integer.toString(cRec.id_number));
                        billingAdd.payer.carrier_id=cRec.carrier_id;
                    }
                }
                else if (labBillingChoice.getText().equals("DPA")) {
                    if (!(labDPAState.getText().equals("WV")
                        ||labDPAState.getText().equals("OH"))) {
                        labDiagCode.setEnabled(false);
                        labDiagCode2.setEnabled(false);
                        labDiagCode3.setEnabled(false);
                        labDiagCode4.setEnabled(false);
                    }
                }
                labBillingID.transferFocus();		
            }
        }
	}
	
	void labGrpNum_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    labGrpNum.transferFocus();
	}

	void labDPAState_keyPressed(java.awt.event.KeyEvent event)
	{
	    boolean found = false;
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(labDPAState,"DPA State")) {
		        carrierVect = dbLogin.getCarrierVect("DPA");
		        for (int i=0; i<carrierVect.size(); i++) {
		            CarrierRec cRec = (CarrierRec)carrierVect.elementAt(i);
		            if (cRec.state.equals(labDPAState.getText())) {
		                //labRec.carrier_id=cRec.carrier_id;
		                billingAdd.payer.carrier_id=cRec.carrier_id;
		                labOtherInsurance.setText(cRec.name);
		                labPCSID.setText(Integer.toString(cRec.id_number));
		                found=true;
		            }
		        }
		        if (!found) Utils.createErrMsg("Invalid DPA State");
		        else labDPAState.transferFocus();
		    }
		}
	}

	void labDiagCode_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
	        if (!Utils.requiredField(labDiagCode,"Primary Diagnosis")) return;
	        if (!checkDiag(labDiagCode)) return;
	        diag1lbl.setText(getDiagDescr(labDiagCode.getText()));
		    labDiagCode.transferFocus();
		}
	}

	void labDiagCode2_keyPressed(java.awt.event.KeyEvent event)
	{
	    boolean transfer = false;
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.isNull(labDiagCode2.getText())) {
                msgLabel.setText(null);
                msgLabel2.setText(null);
                labDiagCode2.setText(null);
                labDiagCode3.setText(null);
                labDiagCode4.setText(null);
                labDiagCode2.setEnabled(false);
                labDiagCode3.setEnabled(false);
                labDiagCode4.setEnabled(false);
                /*
                if (labBillingChoice.getText().equals("DPA"))
                    transfer=true;
                else if (labBillingChoice.getText().equals("BS")) {
                    if (labRelCode.getText().equals("S"))
                        transfer=true;
                }
                */
		    }
		    else { 
		        if (!checkDiag(labDiagCode2)) return;
		        if (compareDiag(labDiagCode,labDiagCode2)) return;
		    }
		    labRec.diagnosis_code2=labDiagCode2.getText();
		    diag2lbl.setText(getDiagDescr(labDiagCode2.getText()));
		    if (transfer) gotoNextSection();
            else labDiagCode2.transferFocus();
		}
	}

	void labDiagCode3_keyPressed(java.awt.event.KeyEvent event)
	{
	    boolean transfer = false;
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.isNull(labDiagCode3.getText())) {
                msgLabel.setText(null);
                msgLabel2.setText(null);
                labDiagCode3.setText(null);
                labDiagCode4.setText(null);
                labDiagCode3.setEnabled(false);
                labDiagCode4.setEnabled(false);
                /*
                if (labBillingChoice.getText().equals("DPA"))
                    transfer=true;
                else if (labBillingChoice.getText().equals("BS")) {
                    if (labRelCode.getText().equals("S"))
                        transfer=true;
                }
                */
		    }
		    else {
	            if (!checkDiag(labDiagCode3)) return;
                if (compareDiag(labDiagCode,labDiagCode3)) return;
                if (compareDiag(labDiagCode2,labDiagCode3)) return;
		    }
		    labRec.diagnosis_code3=labDiagCode3.getText();
		    diag3lbl.setText(getDiagDescr(labDiagCode3.getText()));
		    if (transfer) gotoNextSection();
            else labDiagCode3.transferFocus();
		}
	}

	void labDiagCode4_keyPressed(java.awt.event.KeyEvent event)
	{
	    boolean transfer = false;
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (!Utils.isNull(labDiagCode4.getText())) {
	            if (!checkDiag(labDiagCode4)) return;
                if (compareDiag(labDiagCode,labDiagCode4)) return;
                if (compareDiag(labDiagCode2,labDiagCode4)) return;
                if (compareDiag(labDiagCode3,labDiagCode4)) return;
		    }
		    labRec.diagnosis_code4=labDiagCode4.getText();
		    diag4lbl.setText(getDiagDescr(labDiagCode4.getText()));
		    /*
            if (labBillingChoice.getText().equals("DPA"))
                transfer=true;
            else if (labBillingChoice.getText().equals("BS")) {
                if (labRelCode.getText().equals("S"))
                    transfer=true;
            }
            */
		    if (transfer) gotoNextSection();
            else labDiagCode4.transferFocus();
		}
	}

	void labSubscrLName_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    labSubscrLName.transferFocus();
	}

	void labSubscrFName_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    labSubscrFName.transferFocus();
	}

	void labRelCode_keyPressed(java.awt.event.KeyEvent event)
	{
	    int key = event.getKeyCode();
		if (key==event.VK_ENTER) {
		    if (Utils.requiredField(labRelCode,"Subscriber")) {
                labSubscrLName.setEnabled(true);
		        labSubscrFName.setEnabled(true);
		        labSubscrLName.setText(labPatientLastName.getText());
		        if (labRelCode.getText().equals("S"))
		            labSubscrFName.setText(labPatientFirstName.getText());
		        labRelCode.transferFocus();
		    }
		}
		else if (key!=event.VK_ESCAPE && key!=event.VK_F9) {
		    char c = event.getKeyChar();
		    int x = event.getKeyCode();
		    labRelCode.setText(null);
		    event.consume();
		    if (c=='S' || c=='s' || x==event.VK_S) { 
		        labRelCode.setText("S");
		        labSubscriber.setText("SELF");
		    }
		    else if (c=='H' || c=='h' || x==event.VK_H) { 
		        labRelCode.setText("H");
		        labSubscriber.setText("SPOUSE");
		    }
		    else if (c=='C' || c=='c' || x==event.VK_C) { 
		        labRelCode.setText("C");
		        labSubscriber.setText("DEPENDENT");
		    }
		    else if (c=='O' || c=='o' || x==event.VK_O) {
		        labRelCode.setText("O");
		        labSubscriber.setText("OTHER");
		    }
		    else {
		        labRelCode.setText("S");
		        labSubscriber.setText("SELF");
		        msgLabel.setText("S=SELF, H=SPOUSE, C=DEPENDENT, O=OTHER");
		    }
		}
	}

	void labRelCode_keyTyped(java.awt.event.KeyEvent event)
	{
	    event.consume();
	}

	void labRelCode_focusGained(java.awt.event.FocusEvent event)
	{
		msgLabel.setText("S=SELF, H=SPOUSE, C=DEPENDENT, O=OTHER");
	}
	
	void queryPatientActions() 
	{
	    patientQuery=true;
	    clearForm();
	    resetColors();
	    fKeys.keyOn(fKeys.F12);
	    msgLabel.setText("Enter search criteria, then press F5");
        setEnableAllFields(false);
        setEnablePatientFields(true);
        labPrevLabNum.setEnabled(true);
        labNumber.setEnabled(false);
        labPatientMI.setEnabled(false);
        doctorText.setEnabled(false);
        labPrevLabNum.setBackground(Color.white);
        labPrevLabNum.setForeground(Color.black);
        labPrevLabNum.setCaretColor(Color.black);
        labPatientFirstName.setBackground(Color.white);
        labPatientFirstName.setForeground(java.awt.Color.black);
        labPatientFirstName.setCaretColor(java.awt.Color.black);
        labPatientLastName.setBackground(Color.white);
        labPatientLastName.setForeground(java.awt.Color.black);
        labPatientLastName.setCaretColor(java.awt.Color.black);
        labPaAddress.setBackground(Color.white);
        labPaAddress.setForeground(java.awt.Color.black);
        labPaAddress.setCaretColor(java.awt.Color.black);
        labCity.setBackground(Color.white);
        labCity.setForeground(java.awt.Color.black);
        labCity.setCaretColor(java.awt.Color.black);
        labState.setBackground(Color.white);
        labState.setForeground(java.awt.Color.black);
        labState.setCaretColor(java.awt.Color.black);
        labZip.setBackground(Color.white);
        labZip.setForeground(java.awt.Color.black);
        labZip.setCaretColor(java.awt.Color.black);
        labPhone.setBackground(Color.white);
        labPhone.setForeground(java.awt.Color.black);
        labPhone.setCaretColor(java.awt.Color.black);
        labSSN.setBackground(Color.white);
        labSSN.setForeground(java.awt.Color.black);
        labDOB.setBackground(Color.white);
        labDOB.setForeground(java.awt.Color.black);
        labDOB.setCaretColor(java.awt.Color.black);
        labPatientLastName.requestFocus();
	}

	void labRush_keyPressed(java.awt.event.KeyEvent event)
	{
	}
	

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == BillingForm.this)
				BillingForm_windowClosing(event);
		}
	}

	void closingActions()
	{
	    log.stop();
	    this.dispose();
	}

	void labNumber_focusGained(java.awt.event.FocusEvent event)
	{
		if (currMode==Lab.REBILL)
		    msgLabel.setText("Enter Lab Number to rebill");
		else if (currMode==Lab.CLAIM) {
		    String msg = "Type lab number, or leave blank to query patient";
		    if (isClaimStatusLocked) msg+=" - ALT + F2 unlocks claim status";
		    msgLabel.setText(msg);
		}
		else if (currMode==Lab.REWORK)
		    msgLabel.setText("Enter Lab Number of claim for rework");
	}
	
	boolean billingDetailEntry()
	{
	    boolean transfer = false;    
	    String bChoice = labBillingChoice.getText().trim();
	    int bCode = getBillingCode(bChoice);
	    
	    /*
	        Illegal Rebilling options
	    */
	    if (bCode==originalBillingChoice && originalBillingChoice==Lab.DB) {
	        Utils.createErrMsg("Cannot rebill from DB to DB");
	        return false;
	    }
	    /*
	    else if (bCode==originalBillingChoice && originalBillingChoice==labRec.DPA) {
	        Utils.createErrMsg("Cannot rebill from DPA to DPA");
	        return false;
	    }
	    */
	    else if (originalBillingChoice==Lab.PPD) {
	        Utils.createErrMsg("Cannot rebill a PrePaid lab");
	        return false;
	    }
	    else if (bCode==Lab.PPD) {
	        Utils.createErrMsg("PrePaid is not a valid Rebill option");
	        return false;
	    }
	    else if (originalBillingChoice==Lab.PRC) {
	        Utils.createErrMsg("Cannot rebill a Professional Courtesy");
	        return false;
	    }
	    else if (originalBillingChoice==Lab.DOC) {
	        if (labRec.prac.stop_code.equals("D") && !bChoice.equals("DOC")) {
	            Utils.createErrMsg(
	                "DOC only accounts can only be rebilled to DOC");
	            return false;
	        }
	    }
	    
	    setBillingLabels(bChoice);
	    setEnableAllFields(false);
	    checkCarrier=false;
	    switch (bCode) {
	        case Lab.DOC:   
		        if (labRec.prac.stop_code.equals("Y")) {
		            Utils.createErrMsg(
		                "DOC billing not available for this practice");
		            labBillingChoice.setText(null);
		            labBillingChoice.setEnabled(true);
		            labBillingChoice.requestFocus();
		            break;
		        }
	            labOtherInsurance.setText(labPracticeName.getText());
                labBillingID.setText(labPractice.getText());
                labSubscriber.setText("SELF");
                labRelCode.setText("S");
                labGrpNum.setText(null);
                clearDiagCodeDisplay();
                labPayerID.setText(null);
                labPCSID.setText(null);
                labDPAState.setText(null);
                labFormSigned.setText("N");
                labSubscrLName.setText(null);
                labSubscrFName.setText(null);
                transfer=true;
	            break;
	        case Lab.DB:
	            labOtherInsurance.setText(
	                labPatientLastName.getText()+", "+labPatientFirstName.getText());
                labBillingID.setText(Integer.toString(labRec.patient));	  
                labSubscriber.setText("SELF");
                labRelCode.setText("S");
                labGrpNum.setText(null);
                clearDiagCodeDisplay();
                labPayerID.setText(null);
                labPCSID.setText(null);
                labDPAState.setText(null);
                labFormSigned.setText("N");
                labSubscrLName.setText(null);
                labSubscrFName.setText(null);
                transfer=true;
                break;
	        case Lab.PRC:
                labBillingID.setText(null);
                labSubscriber.setText("SELF");
                labRelCode.setText("S");
                labGrpNum.setText(null);
                clearDiagCodeDisplay();
                labOtherInsurance.setText("PENNSYLVANIA CYTOLOGY SERVICES");
                labPayerID.setText(null);
                labPCSID.setText(null);
                labDPAState.setText(null);
                labFormSigned.setText("N");
                labSubscrLName.setText(null);
                labSubscrFName.setText(null);
                transfer=true;
	            break;
	        case Lab.DPA:
	            labDPAState.setEnabled(true);
                labBillingID.setEnabled(true);
                labDiagCode.setEnabled(true);
                labDiagCode2.setEnabled(true);
                labDiagCode3.setEnabled(true);
                labDiagCode4.setEnabled(true);
                labSubscriber.setText("SELF");
                labRelCode.setText("S");
                labGrpNum.setText(null);
                labPayerID.setText(null);
                labPCSID.setText(null);
                labFormSigned.setText("N");
                labSubscrLName.setText(null);
                labSubscrFName.setText(null);
	            break;
	        case Lab.BS:
                labBillingID.setEnabled(true);
                labRelCode.setEnabled(true);
                labGrpNum.setEnabled(true);
                labDiagCode.setEnabled(true);
                labDiagCode2.setEnabled(true);
                labDiagCode3.setEnabled(true);
                labDiagCode4.setEnabled(true);
                labDPAState.setText(null);
                labFormSigned.setText("N");
	            break;
	        case Lab.MED:
                labGrpNum.setText(null);
                labBillingID.setEnabled(true);
                labSubscriber.setText("SELF");
                labRelCode.setText("S");
                labFormSigned.setEnabled(true);
                labFormSigned.setText("N");
                labDiagCode.setEnabled(true);
                labDiagCode2.setEnabled(true);
                labDiagCode3.setEnabled(true);
                labDiagCode4.setEnabled(true);
                labMedicareType.setEnabled(true);
                labPayerID.setText(null);
                labPCSID.setText(null);
                labDPAState.setText(null);
	            labRec.subscriber="SELF";
	            break;
	        case Lab.OI:
                labBillingID.setEnabled(true);
                labRelCode.setEnabled(true);
                labGrpNum.setEnabled(true);
                labOtherInsurance.setEnabled(true);
                labPayerID.setEnabled(true);
                labPCSID.setEnabled(true);
                labFormSigned.setEnabled(true);
                labFormSigned.setText("N");
                labDiagCode.setEnabled(true);
                labDiagCode2.setEnabled(true);
                labDiagCode3.setEnabled(true);
                labDiagCode4.setEnabled(true);
                labDPAState.setText(null);
                checkCarrier=true;
                break;	        
	    }
	    return (transfer);
	}
	
	void doctorText_focusLost(java.awt.event.FocusEvent event)
	{
	}

	void doctorText_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER || event.getKeyCode()==event.VK_F10) {
		    if (Utils.required(doctorText,"Doctor Info")) {
	            int x = 0;
	            String s = null;
	            try {
	                s=doctorText.getText().substring(
	                    0,(doctorText.getText().indexOf((int)' ')));
		            x=Integer.parseInt(s);
		        } catch (Exception e) { x=0; }
		        if (x>0) { 
		            labRec.doc.doctor = 
		            labRec.doctor = x;
		            doctorText.setText(doctorText.getText().substring(Utils.length(s)+1));
		        }
		        boolean drExists = false;
		        for (int i=0; i<doctorVect.size(); i++) {
		            DoctorRec dRec = (DoctorRec)doctorVect.elementAt(i);
		            if (labRec.doctor==dRec.doctor) {
		                drExists=true;
		                break;
		            }
		        }
		        if (!drExists) Utils.createErrMsg("Must select NEW doctor");
		        else gotoNextSection();
		    }
		}
	}

	void doctorText_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event);
	}

	void claimStatus_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(claimStatus,"Claim Status Code")) {
		        claimStatusKeyActions();
		        claimStatusChanged=false;
		    }
		}
	    else if (!claimStatusChanged) {
            claimStatus.setText(null);
            claimStatusChanged=true;
	    }
	}
	
	void claimStatusKeyActions()
	{
        if (!Utils.required(claimStatus,"Claim Status Code")) return;
		String cs = claimStatus.getText();
        if (cs.equals("D") || cs.equals("I") || cs.equals("N") 
        || cs.equals("PP") || cs.equals("R")) {
	        if (labRec.prac.block_patient.equals("Y")) {
	            Utils.createErrMsg("Direct Billing NOT allowed for this Account");
	            claimStatus.setText(null);
	            claimStatus.requestFocus();
	            return;
	        }
        }
        if (paymentAmount.getText().trim().equals("0.00")) paymentAmount.setText(null);
        dateReceived.setText(null);
		setEnableAllFields(false);
		if (!isClaimStatusLocked) claimStatus.setEnabled(true);
        clearClaimDetails();
		BillingDetails bd = (BillingDetails)labRec.billing.details.elementAt(
		    labRec.billing.details.size()-1);
	    fillClaimDetails(bd);
		claimStatus.setText(cs);
		claimStatusDescr.setText(getClaimDescr(cs));
		patientAmount.setText(labRec.billing.bill_amount);
		if (cs.equals("P")) {
		    paymentAmount.setEnabled(true);
		    dateReceived.setEnabled(true);
		    dateReceived.setText(null);
            paymentAmount.requestFocus();
        }
		else if (cs.equals("S")) {
		    claimComment.setEnabled(true);
		    claimComment.requestFocus();
        }
        else if (cs.equals("B")) {
            altClaimID.setEnabled(true);
            dateReceived.setEnabled(true);
            claimComment.setEnabled(true);
            dateReceived.setText(null);
            altClaimID.requestFocus();
        }
		else if (cs.equals("F")) {
		    altClaimID.setEnabled(true);
		    dateReceived.setEnabled(true);
		    claimComment.setEnabled(true);
		    dateReceived.setText(null);
		    altClaimID.requestFocus();
        }
		else if (cs.equals("R2")) {
		    claimAllowable.setEnabled(true);
		    altClaimID.setEnabled(true);
		    dateReceived.setEnabled(true);
		    claimComment.setEnabled(true);
		    dateReceived.setText(null);
		    claimAllowable.requestFocus();
        }
		else if (cs.equals("R")) {
		    claimAllowable.setEnabled(true);
		    altClaimID.setEnabled(true);
		    dateReceived.setEnabled(true);
		    claimComment.setEnabled(true);
		    dateReceived.setText(null);
		    claimAllowable.requestFocus();
        }
		else if (cs.equals("D")) {
		    claimAllowable.setEnabled(true);
		    altClaimID.setEnabled(true);
		    dateReceived.setEnabled(true);
		    claimComment.setEnabled(true);
		    dateReceived.setText(null);
		    claimAllowable.requestFocus();
        }
		else if (cs.equals("P2")) {
		    paymentAmount.setEnabled(true);
		    claimAllowable.setEnabled(true);
		    altClaimID.setEnabled(true);
		    dateReceived.setEnabled(true);
		    claimComment.setEnabled(true);
		    dateReceived.setText(null);
		    paymentAmount.requestFocus();
        }
		else if (cs.equals("PP")) {
		    paymentAmount.setEnabled(true);
		    claimAllowable.setEnabled(true);
		    dateReceived.setEnabled(true);
		    claimComment.setEnabled(true);
		    dateReceived.setText(null);
		    paymentAmount.requestFocus();
        }
		else if (cs.equals("SU")) {
		    if (!labBillingChoice.getText().equals("MED")) {
		        clearClaimDetails();
		        claimStatus.setText(null);
		        claimStatus.requestFocus();
		        Utils.createErrMsg("SU claim status is only for Medicare claims");
		        return;
		    }
		    paymentAmount.setEnabled(true);
		    claimAllowable.setEnabled(true);
		    altClaimID.setEnabled(true);
		    dateReceived.setEnabled(true);
		    claimComment.setEnabled(true);
		    dateReceived.setText(null);
		    paymentAmount.requestFocus();
        }
		else if (cs.equals("LT")) {
		    if (!labBillingChoice.getText().equals("MED")) {
		        clearClaimDetails();
		        claimStatus.setText(null);
		        claimStatus.requestFocus();
		        Utils.createErrMsg("LT claim status is only for Medicare claims");
		        return;
		    }
		    claimAllowable.setEnabled(true);
		    altClaimID.setEnabled(true);
		    dateReceived.setEnabled(true);
		    claimComment.setEnabled(true);
		    dateReceived.setText(null);
		    claimAllowable.requestFocus();
        }
        else if (cs.equals("N")) {
		    claimAllowable.setEnabled(true);
		    altClaimID.setEnabled(true);
		    dateReceived.setEnabled(true);
		    claimComment.setEnabled(true);
		    dateReceived.setText(null);
		    claimAllowable.requestFocus();
        }
        else if (cs.equals("I")) {
		    altClaimID.setEnabled(true);
		    dateReceived.setEnabled(true);
		    claimComment.setEnabled(true);
		    dateReceived.setText(null);
		    altClaimID.requestFocus();
        }
        else if (cs.equals("L")) {
            altClaimID.setEnabled(true);
            dateReceived.setEnabled(true);
            claimComment.setEnabled(true);
            paymentAmount.setText("0.00");
            patientAmount.setText("0.00");
            dateReceived.setText(null);
            altClaimID.requestFocus();
        }
        else if (cs.equals("O")) {
            altClaimID.setEnabled(true);
            dateReceived.setEnabled(true);
            claimComment.setEnabled(true);
            paymentAmount.setText("0.00");
            patientAmount.setText("0.00");
            dateReceived.setText(null);
            altClaimID.requestFocus();
        }
        else if (cs.equals("MR")) {
            altClaimID.setEnabled(true);
            dateReceived.setEnabled(true);
            claimComment.setEnabled(true);
            paymentAmount.setText("0.00");
            patientAmount.setText("0.00");
            dateReceived.setText(null);
            altClaimID.requestFocus();
        }
		else Utils.createErrMsg("Invalid Claim Status Code");
	}

	void claimStatus_keyTyped(java.awt.event.KeyEvent event)
	{
		//event.consume();
		Utils.forceUpper(event,2);
	}

	void paymentAmount_keyPressed(java.awt.event.KeyEvent event)
	{
		char key=event.getKeyChar();
		if (key=='\b') {
		    try {
		        int x = ((String)paymentAmount.getText()).length();
		        if (((String)paymentAmount.getText()).charAt(x-1)=='.')
		            dFlag=false;
		    }
		    catch (Exception e) { dFlag=false; }
		}
		else if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.requiredField(paymentAmount,"Payment Amount")) {
		        if ((Double.valueOf(paymentAmount.getText())).doubleValue()==0) {
		            paymentAmount.setText(null);
		            Utils.createErrMsg("Payment must be greater than zero");
		            dFlag=false;
		            return;
		        }
		        try {
		            String buf = (String)paymentAmount.getText();
		            int x = buf.length();
		            int decimalPos=x;
		            for (int i=0;i<x;i++) {
		                if (buf.charAt(i)=='.') {
		                    decimalPos=i;
		                    break;
		                }
		            }
		            if (x>0) {
		                if (x-decimalPos==0) buf=buf+".00";
		                else if (x-decimalPos==1) buf=buf+"00";
		                else if (x-decimalPos==2) buf=buf+"0";
		            }   else buf="0.00";
		            paymentAmount.setText(buf);
		            dFlag=false;
		            
		            Double d1 = Double.valueOf(paymentAmount.getText());
		            Double d2 = Double.valueOf(patientAmount.getText());
		            double d3 = d2.doubleValue()-d1.doubleValue();
		            buf = Double.toString(d3);
		            x = buf.length();
		            decimalPos=x;
		            for (int i=0;i<x;i++) {
		                if (buf.charAt(i)=='.') {
		                    decimalPos=i;
		                    break;
		                }
		            }
		            if (x>0) {
		                if (x-decimalPos==0) buf=buf+".00";
		                else if (x-decimalPos==1) buf=buf+"00";
		                else if (x-decimalPos==2) buf=buf+"0";
		            }   else buf="0.00";
		            patientAmount.setText(buf);
		            paymentAmount.transferFocus();
		        }
		        catch (Exception e) {  }
		    }
		}
	}

	void paymentAmount_keyTyped(java.awt.event.KeyEvent event)
	{
		forceDigits(event,true);
	}

	void claimAllowable_keyPressed(java.awt.event.KeyEvent event)
	{
		char key=event.getKeyChar();
		if (key=='\b') {
		    try {
		        int x = ((String)claimAllowable.getText()).length();
		        if (((String)claimAllowable.getText()).charAt(x-1)=='.')
		            dFlag=false;
		    }
		    catch (Exception e) { dFlag=false; }
		}
		else if (event.getKeyCode()==event.VK_ENTER) {
		    if (!Utils.isNull(claimAllowable.getText())) {
		        try {
		            String buf = (String)claimAllowable.getText();
		            int x = buf.length();
		            int decimalPos=x;
		            for (int i=0;i<x;i++) {
		                if (buf.charAt(i)=='.') {
		                    decimalPos=i;
		                    break;
		                }
		            }
		            if (x>0) {
		                if (x-decimalPos==0) buf=buf+".00";
		                else if (x-decimalPos==1) buf=buf+"00";
		                else if (x-decimalPos==2) buf=buf+"0";
		            }   else buf="0.00";
		            claimAllowable.setText(buf);
		            dFlag=false;
		            if (Utils.isNull(paymentAmount.getText())) paymentAmount.setText("0.00");
		            double paid = (Double.valueOf(paymentAmount.getText())).doubleValue();
		            double allow = (Double.valueOf(claimAllowable.getText())).doubleValue();
		            double diff = allow-paid;
		            if (diff<0) {
		                Utils.createErrMsg("Allowable cannot be less than amount paid");
		                claimAllowable.setText(null);
		                dFlag=false;
		                claimAllowable.requestFocus();
		                return;
		            }
		            patientAmount.setText(Utils.dblToString(diff));
		            buf = (String)patientAmount.getText();
		            x = buf.length();
		            decimalPos=x;
		            for (int i=0;i<x;i++) {
		                if (buf.charAt(i)=='.') {
		                    decimalPos=i;
		                    break;
		                }
		            }
		            if (x>0) {
		                if (x-decimalPos==0) buf=buf+".00";
		                else if (x-decimalPos==1) buf=buf+"00";
		                else if (x-decimalPos==2) buf=buf+"0";
		            }   else buf="0.00";
		            patientAmount.setText(buf);
		            patientAmount.setEnabled(false);
		            if (claimStatus.getText().equals("R"))
		                patientAmount.setText(claimAllowable.getText());
		            //claimAllowable.transferFocus();
		        }
		        catch (Exception e) { dFlag=false; }
		    }
		    claimAllowable.transferFocus();
		}
	}

	void claimAllowable_keyTyped(java.awt.event.KeyEvent event)
	{
		forceDigits(event,true);
	}

	void patientAmount_keyPressed(java.awt.event.KeyEvent event)
	{
		char key=event.getKeyChar();
		if (key=='\b') {
		    try {
		        int x = ((String)patientAmount.getText()).length();
		        if (((String)patientAmount.getText()).charAt(x-1)=='.')
		            dFlag=false;
		    }
		    catch (Exception e) { dFlag=false; }
		}
		else if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.requiredField(patientAmount,"Patient Amount")) {
		        try {
		            String buf = (String)patientAmount.getText();
		            int x = buf.length();
		            int decimalPos=x;
		            for (int i=0;i<x;i++) {
		                if (buf.charAt(i)=='.') {
		                    decimalPos=i;
		                    break;
		                }
		            }
		            if (x>0) {
		                if (x-decimalPos==0) buf=buf+".00";
		                else if (x-decimalPos==1) buf=buf+"00";
		                else if (x-decimalPos==2) buf=buf+"0";
		            }   else buf="0.00";
		            patientAmount.setText(buf);
		            dFlag=false;
		            patientAmount.transferFocus();
		        }
		        catch (Exception e) {  }
		    }
		}
	}

	void patientAmount_keyTyped(java.awt.event.KeyEvent event)
	{
		forceDigits(event,true);
	}

	void altClaimID_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    String s = claimStatus.getText();
		    boolean isRequired = true;
		    if (s.equals("B") || s.equals("F")
		    || s.equals("LT") || s.equals("R") || s.equals("R2") 
		    || s.equals("I") || s.equals("O") || s.equals("MR")) {
		        isRequired=Utils.required(altClaimID,"Reject Code");
		    }
		    if (isRequired) altClaimID.transferFocus();
        }
	}

	void altClaimID_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event);
	}

	void dateReceived_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
            if (Utils.dateVerify(dateReceived)) {
		        String s = claimStatus.getText();
		        boolean isRequired = true;
		        if (!s.equals("N") && !s.equals("S")) {
		            isRequired=Utils.required(dateReceived,"Date Received");
		        }
		        if (isRequired) {
		            // dateReceived is the last field for status P
		            if (s.equals("P")) finalActions();
		            else dateReceived.transferFocus();
		        }
            }
        }
	}

	void dateReceived_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.buildDateMask(event);
	}

	void claimComment_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    event.consume();
		    boolean isRequired = true;
		    String s = claimStatus.getText();
		    if (s.equals("N") || s.equals("L") || s.equals("MR")) {
		        String t = claimComment.getText();
		        if (Utils.isNull(t)) {
		            isRequired=false;
		            Utils.createErrMsg("Required Field: Additional Information");
		        }
		    }
            if (isRequired) {
                if (s.equals("P2") || s.equals("R2")) {
                    hasSecondary=true;
                }
                String pLab = labNumber.getText();
                finalActions();
                if (s.equals("F")) {
                    labNumber.setText(pLab);
                    currMode=Lab.QUERY;
                    finalActions();
                    currMode=Lab.UPDATE;
                    updateActions();
                }
            }
        }
	}

	void claimComment_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event);
	}
	
	public void forceDigits(java.awt.event.KeyEvent event, boolean b)  {
	    try {
	        char key=event.getKeyChar();
	        if (key=='.') {
	            if (dFlag==false) dFlag=true;
	            else event.consume();
	        }
	        else if ( (key<'0')||(key>'9') ) 
	            event.consume();
        }
        catch (Exception e)  { log.write(e.toString()); }
    }        
    
    public ClaimStatusRec getStatusRec(String cs)
    {
        ClaimStatusRec cRec = null;
        for (int i=0; i<claimStatusVect.size(); i++) {
            cRec = (ClaimStatusRec)claimStatusVect.elementAt(i);
            if (cRec.claim_status.equals(cs)) break;
        }
        return (cRec);
    }
	

	void claimStatus_focusGained(java.awt.event.FocusEvent event)
	{
	    claimStatusMessages();
	}
	
	void claimStatusMessages()
	{
	    if (!Utils.isNull(claimStatus.getText())) {
	        if (claimStatus.getText().equals("S")||claimStatus.getText().equals("B"))
	            msgLabel.setText("Press F8 for list of claim status codes");
		    else if (isClaimStatusLocked) msgLabel.setText("Press ALT + F2 to Unlock Claim Status");
		    else msgLabel.setText("Press ALT + F2 to Lock Claim Status");
		}
	}

	void labMedicareType_keyPressed(java.awt.event.KeyEvent event)
	{
	    int key = event.getKeyCode();
	    if (key==event.VK_F12) return;
		if (key==event.VK_ENTER) {
		    if (Utils.required(labMedicareType,"Medicare Type")) {
                if (Utils.isNull(labRec.medicare_code)) {
                    labRec.medicare_code=labMedicareType.getText();
                }
		        if (labRec.medicare_code.equals("L")) {
		            setMedPrimaryDiag();
		        }
		        labMedicareType.transferFocus();
		    }
		}
		else if (key!=event.VK_ESCAPE && key!=event.VK_F9 && key!=event.VK_F10) {
		    char c = event.getKeyChar();
		    int x = event.getKeyCode();
		    labMedicareType.setText(null);
		    event.consume();
		    if (c=='L' || x==event.VK_L) { 
		        labMedicareType.setText("L");
		        labRec.medicare_code="L";
		    }
		    else if (c=='H' || x==event.VK_H) {
		        labMedicareType.setText("H");
		        labRec.medicare_code="H";
		    }
		    else if (c=='D' || x==event.VK_D) {
		        labMedicareType.setText("D");
		        labRec.medicare_code="A";
		    }
		    else if (c=='F' || x==event.VK_F) {
		        labMedicareType.setText("F");
		        labRec.medicare_code="F";
		    }
		    setMedLbl();
		}
	}

	void labMedicareType_keyTyped(java.awt.event.KeyEvent event)
	{
		event.consume();
	}

	void labMedicareType_focusGained(java.awt.event.FocusEvent event)
	{
	    msgLabel.setText("L = Low;  H = High;  D = Diagnostic;  F = Fax for ICD9");
	}
	
	void setMedLbl()
	{
	    if (!Utils.isNull(labMedicareType.getText())) {
	        if (labMedicareType.getText().equals("L"))
	            labMedLbl.setText("LOW RISK");
	        else if (labMedicareType.getText().equals("H"))
	            labMedLbl.setText("HIGH RISK");
	        else if (labMedicareType.getText().equals("D"))
	            labMedLbl.setText("DIAGNOSTIC");
	        else if (labMedicareType.getText().equals("F"))
	            labMedLbl.setText("FAX FOR ICD9");
	    }
	}

	void labFormSigned_keyPressed(java.awt.event.KeyEvent event)
	{
	    int key = event.getKeyCode();
		if (key==event.VK_ENTER) {
		    //required field code needed here
		    labFormSigned.transferFocus();
		}
		else if (key!=event.VK_ESCAPE && key!=event.VK_F9 && key!=event.VK_F10) {
		    char c = event.getKeyChar();
		    int x = event.getKeyCode();
		    event.consume();
		    if (c=='Y' || x==event.VK_Y) { 
		        labFormSigned.setText("Y");
		        labRec.sign_date=Utils.stripDateMask(labDateCollected.getText());
		    }
		    else if (c=='N' || x==event.VK_N) {
		        labFormSigned.setText("N");
		        labRec.sign_date=null;
		    }
		}
	}

	void labFormSigned_keyTyped(java.awt.event.KeyEvent event)
	{
		event.consume();
	}
	
	public void queryActions()
	{
	    resetActions();
	    currMode=Lab.QUERY;
	    statusReset.setEnabled(true);
	    labNumber.setBackground(Color.white);
	    labNumber.setForeground(Color.black);
	    labNumber.setCaretColor(Color.black);
	    labNumber.setEnabled(true);
	    labNumber.requestFocus();
	}
	
	public void claimActions()
	{
	    if (!Utils.isNull(labNumber.getText()) && labRec.lab_number>0) {
            billingAdd = (BillingDetails)labRec.billing.details.elementAt(
                labRec.billing.details.size()-1);
            if (globalFinished>=FINISHED) {
                currMode=Lab.IDLE;
                Utils.createErrMsg("(4) No action permitted on finished work");
            }
            else if (inRework && !billingAdd.claim_status.equals("LT")) {
                currMode=Lab.IDLE;
                Utils.createErrMsg("Cannot enter claim response on rework");
            }
            else if (billingAdd.billing_choice==Lab.DB && billingAdd.rebilling>0) {
		        int rv = confirmSecondary.showConfirmDialog(
		            this,"Revert to PRIOR billing?",
		            "Reverse Direct Bill",confirmSecondary.YES_NO_OPTION,
		            confirmSecondary.QUESTION_MESSAGE);
		        if (rv==confirmSecondary.YES_OPTION) {
		            boolean b = labOps.reverseDB(billingAdd.lab_number);
		            if (b) {
		                String ln = labNumber.getText();
		                currMode=Lab.IDLE;
		                resetActions();
		                labNumber.setText(ln);
		                currMode=Lab.QUERY;
		                finalActions();
                        currMode=Lab.CLAIM_ADD;
                        if (isUpdatable()) {
                            if (!isClaimStatusLocked) {
                                claimStatus.setEnabled(true);
                                claimStatus.requestFocus();
                            }
                            else {
                                claimStatus.setText(lockedClaimStatus);
                                claimStatus.setEnabled(false);
                                claimStatusKeyActions();
                            }
                            currentSection=3;
                        }
		            }
		        }
            }
            else if (inBillingQueue) {
                currMode=Lab.IDLE;
                Utils.createErrMsg("Cannot enter claim response for work in billing queue");
            }
            else if (!Utils.isNull(billingAdd.claim_status)
            && (billingAdd.claim_status.equals("S")
            ||billingAdd.claim_status.equals("B")
            ||billingAdd.claim_status.equals("SU")
            ||billingAdd.claim_status.equals("O")
            ||billingAdd.claim_status.equals("MR")
            ||billingAdd.claim_status.equals("LT"))) {
                currMode=Lab.CLAIM_ADD;
                if (isUpdatable()) {
                    if (!isClaimStatusLocked) {
                        claimStatus.setEnabled(true);
                        claimStatus.requestFocus();
                    }
                    else {
                        claimStatus.setText(lockedClaimStatus);
                        claimStatus.setEnabled(false);
                        claimStatusKeyActions();
                    }
                    currentSection=3;
                }
            }
            else {
                currMode=Lab.IDLE;
                Utils.createErrMsg("Cannot enter claim response for this claim status");
            }
        }
	    else {
	        resetActions();
	        currMode=Lab.CLAIM;
	        labNumber.setBackground(Color.white);
	        labNumber.setForeground(Color.black);
	        labNumber.setCaretColor(Color.black);
	        labNumber.setEnabled(true);
	        labNumber.requestFocus();
	    }
	}
	
	public String getDiagDescr(String ICD9)  {
	    String s = null;
	    for (int i=0;i<MAX_DIAG_CODES;i++)  {
	        if (ICD9.equals(labDiagnosisCodes[i].diagnosis_code))  {
	            s=labDiagnosisCodes[i].description;
	            break;
            }	            
        }	        
        return (s);
    }        	    
    
	void labBillingChoice_enterActions() 
	{
	    if (labRec.prac.practice_type.equals("WV")) {
	        int age = Utils.getAge(Utils.stripDateMask(labDOB.getText()));
	        if (age<18) {
	            String msg = "Patient is younger than 18!";
	            if (age<0) msg="Missing DOB info!";
	            Utils.createErrMsg(msg,"WARNING!");
	        }
	    }
	    String bChoice = labBillingChoice.getText();
	    if (bChoice.equals("DB")) {
	        if (labRec.prac.block_patient.equals("Y")) {
	            Utils.createErrMsg("Direct Billing NOT allowed for this Account");
	            labBillingChoice.setText(null);
	            return;
	        }
	    }
	    else if (bChoice.equals("DOC")) labBillingID.setText(labPractice.getText());
	    if (hasSecondary) {
	        if (!bChoice.equals("OI") && !bChoice.equals("BS")
	        && !bChoice.equals("MED") && !bChoice.equals("DOC") && !bChoice.equals("DPA")) {
	            Utils.createErrMsg("Invalid choice for secondary payer");
	            labBillingChoice.setText(null);
	            return;
	        }
	    }
        if (billingDetailEntry()) {
            setEnableAllFields(false);
            gotoNextSection();
            return;
        }
	    if (!bChoice.equals("OI")) {
            CarrierRec cRec = null;
            carrierVect=dbLogin.getCarrierVect(bChoice);
            if (dbLogin.billingCodeCount(bChoice)>0) {                            
                cRec = (CarrierRec)carrierVect.elementAt(0);
                labOtherInsurance.setText(cRec.name);
                labPayerID.setText(cRec.payer_id);
                labPCSID.setText(Integer.toString(cRec.id_number));
                billingAdd.payer.carrier_id=cRec.carrier_id;
            }
        }
        if (inRework) {
            String c = claimStatus.getText();
            if (!c.equals("P2") && !c.equals("R2")) {
                labOtherInsurance.setEnabled(false);
                labPayerID.setEnabled(false);
                labPCSID.setEnabled(false);
            }
        }
        labSubscrLName.setEnabled(true);
		labSubscrFName.setEnabled(true);
		labSubscrLName.setText(labPatientLastName.getText());
        if (labRelCode.getText().equals("S"))
		    labSubscrFName.setText(labPatientFirstName.getText());
        labBillingChoice.transferFocus();
	}
	
	void gotoNextSection()
	{
	    if (!canAdvance()) return;
	    currentSection++;
	    setEnableAllFields(false);
	    if (currentSection==4) currentSection=1;
	    switch (currentSection) {
	        case 1:
	            setEnablePatientFields(true);
	            break;
            case 2:
                if (!inRework) {
                    labBillingChoice.setEnabled(true);
                    labBillingChoice.requestFocus();                
                }
                else {
                    setEnableBillingFields(true);
                    labBillingChoice_enterActions();
                }
                break;
            case 3:
                if (!inRework && currMode==Lab.CLAIM_ADD) 
                    setEnableClaimFields(true);
                else {
                    gotoNextSection();
                    return;
                }
                break;
	    }
	}
	
	boolean canAdvance()
	{
	    boolean move = true;
	    if (currMode==Lab.CLAIM_ADD) {
	        if (claimStatus.getText().equals("P2") 
	        || claimStatus.getText().equals("R2")
	        || claimStatus.getText().equals("S")
	        || claimStatus.getText().equals("P"))
	            move=false;
	    }
	    else if (currMode==Lab.IDLE || currMode==Lab.PATIENT_UPDATE) move=false;
	    return move;
	}

	void BillingForm_windowClosing(java.awt.event.WindowEvent event)
	{
		closingActions();
	}
	
	boolean verifySecondary()
	{
	    boolean hasPrimary = false;
	    for (int i=0; i<labRec.billing.details.size(); i++) {
	        if (hasPrimary) break;
	        BillingDetails bd = (BillingDetails)
	            labRec.billing.details.elementAt(i);
	        String s = bd.choice_code.trim();
	        if (s.equals("BS")||s.equals("DPA")||s.equals("MED")||s.equals("OI"))
	            hasPrimary=true;
	    }
	    String s = labBillingChoice.getText();
	    if (hasPrimary) {
	        if (s.equals("BS")||s.equals("DPA")||s.equals("MED")||s.equals("OI"))
	            hasSecondary=true;
	    }
	    if (hasSecondary) {
		    int rv = confirmSecondary.showConfirmDialog(
		        this,"Submit claim as SECONDARY payer?",
		        "Verify Secondary",confirmSecondary.YES_NO_OPTION,
		        confirmSecondary.QUESTION_MESSAGE);
		    if (rv==confirmSecondary.YES_OPTION) hasSecondary=true;
		    else hasSecondary=false;
		}
		return (hasSecondary);
	}
	
	void displayCreditBureauWarning()
	{
        creditBureauWarning.showConfirmDialog(
		    this,"Account will be taken OUT of collection.\n"+
		    "  Please fax MUST NOTIFY list to agency.",
		    "Please Note",creditBureauWarning.DEFAULT_OPTION,
		    creditBureauWarning.INFORMATION_MESSAGE);
	}
	
	void setMedPrimaryDiag()
	{
	    String[] diagChoices = new String[2];
	    diagChoices[0]="V76.2";
	    diagChoices[1]="V72.31";
        (new PickList("Select One",120,280,180,90,
            2,diagChoices,diagChoices,
            labDiagCode)).setVisible(true);
	}
	
	void clearDiagCodeDisplay()
	{
	    labDiagCode.setText(null);
	    labDiagCode2.setText(null);
	    labDiagCode3.setText(null);
	    labDiagCode4.setText(null);
	    diag1lbl.setText(null);
	    diag2lbl.setText(null);
	    diag3lbl.setText(null);
	    diag4lbl.setText(null);
	}

	void statusReset_actionPerformed(java.awt.event.ActionEvent event)
	{
	    if (currMode==Lab.QUERY) {
		    if (labOps.resetClaimStatus()) {
		        finalActions();
		        statusReset.setEnabled(false);
		    }
		}
		else Utils.createErrMsg("Illegal Operation");
	}
	
	
}   
