package com.pacytology.pcs;/*    PENNSYLVANIA CYTOLOGY SERVICES    LABORATORY INFORMATION SYSTEM V1.0    Copyright (C) 2001 by John Cardella    All Rights Reserved        File:       TissuePathDbOps.java    Created By: John Cardella, Software Engineer        Function:   Database operations for Tissue    Pathology Screen        MODIFICATIONS ----------------------------------    Date/Staff      Description:*/import java.sql.*;import java.util.Vector;public class TissuePathDbOps implements Runnable{    Thread dbThread;    int tMode;    TissuePathologyForm parent;    ResultRec tResultRec;    final int INIT=(-1);    final int IDLE=100;    final int ADD=102;    final int UPDATE=103;        int iDatestamp;        public TissuePathDbOps(TissuePathologyForm p) {         parent = p;         tResultRec = new ResultRec();    }    public synchronized void run() {        if (tMode==ADD) add();        else if (tMode==UPDATE) update();        else if (tMode==INIT) {            parent.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));            queryAllTechs();            queryAllPaths();            queryTissueCodes();            parent.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));        }        parent.dbThreadRunning=false;    }        synchronized void DB_action() {        parent.dbThreadRunning=true;        dbThread = new Thread(this);        dbThread.setPriority(Thread.MAX_PRIORITY);        dbThread.start();    }    public void DB_prep() {        tMode=parent.currMode;        copyResultData();    }        public void tissuePathFormInit() {        tMode=INIT;        parent.dbThreadRunning=true;        dbThread = new Thread(this);        dbThread.setPriority(Thread.MAX_PRIORITY);        dbThread.start();    }        public boolean queryAllTechs()  {        boolean exitStatus=true;        try  {            String query =                 "SELECT cytotech,lname,fname,cytotech_code \n"+                "FROM pcs.cytotechs WHERE active_status='A' \n"+                "ORDER BY lname,fname \n";                            parent.log.write("queryAllTechs");            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(query);            int rowsReturned=0;            while (rs.next()) { rowsReturned++; }                   rs.close(); stmt.close();            if (rowsReturned>0) {                parent.MAX_TECHS=rowsReturned;                parent.techs = new TechRec[parent.MAX_TECHS];                int ndx=0;                stmt=DbConnection.process().createStatement();                rs=stmt.executeQuery(query);                while (rs.next()) {                        parent.techs[ndx] = new TechRec();                        parent.techs[ndx].cytotech=rs.getInt(1);                        parent.techs[ndx].lname=rs.getString(2);                        parent.techs[ndx].fname=rs.getString(3);                        parent.techs[ndx].cytotech_code=rs.getString(4).trim();                        ndx++;                }                rs.close(); stmt.close();            }            else { exitStatus=false; }        }        catch (SQLException e) {             parent.log.write("ERROR: Closing statement \n"+e);            exitStatus=false;         }                        catch( Exception e ) {            parent.log.write(e+" queryAllTechs");            exitStatus=false;        }        return(exitStatus);                }        public boolean queryAllPaths()  {        boolean exitStatus=true;        try  {            String query =                 "SELECT \n"+                "   pathologist,lname,fname,address1,city, \n"+                "   state,zip,phone,pathologist_code,mi, \n"+                "   degree,title \n"+                "FROM pcs.pathologists \n"+                "WHERE active_status='A' \n"+                "ORDER BY lname,fname \n";            parent.log.write("queryAllPaths");            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(query);            int rowsReturned=0;            while (rs.next()) { rowsReturned++; }            rs.close(); stmt.close();            if (rowsReturned>0) {                parent.MAX_PATHS=rowsReturned;                parent.paths=new PathRec[parent.MAX_PATHS];                String ctItem=" ";                int ndx=0;                stmt=DbConnection.process().createStatement();                rs=stmt.executeQuery(query);                while (rs.next()) {                    parent.paths[ndx]=new PathRec();                    parent.paths[ndx].pathologist=rs.getInt(1);                    parent.paths[ndx].lname=rs.getString(2);                    parent.paths[ndx].fname=rs.getString(3);                    parent.paths[ndx].address1=rs.getString(4);                    parent.paths[ndx].city=rs.getString(5);                    parent.paths[ndx].state=rs.getString(6);                    parent.paths[ndx].zip=rs.getString(7);                    parent.paths[ndx].phone=rs.getString(8);                    parent.paths[ndx].pathologist_code=rs.getString(9);                    parent.paths[ndx].mi=rs.getString(10);                    parent.paths[ndx].degree=rs.getString(11);                    parent.paths[ndx].title=rs.getString(12);                    ndx++;                                    }                  rs.close(); stmt.close();            }            else { exitStatus=false; }        }        catch (SQLException e) {             parent.log.write("ERROR: Closing statement \n"+e);            exitStatus=false;         }                        catch( Exception e ) {            parent.log.write(e+" queryAllPaths");            exitStatus=false;        }        return(exitStatus);                }        public boolean queryTissueCodes()  {        boolean exitStatus=true;        try  {            String query =                 "SELECT RPAD(tissue_code,7),description \n"+                "FROM pcs.tissue_codes WHERE active_status='A' \n"+                "ORDER BY tissue_code \n";                            parent.log.write("queryTissueCodes");            Statement stmt = DbConnection.process().createStatement();            parent.tissueCodes = new Vector();            parent.tissueCodeDescriptions = new Vector();            ResultSet rs=stmt.executeQuery(query);            while (rs.next()) {                parent.tissueCodes.addElement(rs.getString(1));                parent.tissueCodeDescriptions.addElement(rs.getString(2));            }            rs.close(); stmt.close();        }        catch (SQLException e) {             parent.log.write("ERROR: Closing statement \n"+e);            exitStatus=false;         }                        catch( Exception e ) {            parent.log.write(e+" queryTissueCodes");            exitStatus=false;        }        return(exitStatus);                }    public void copyResultData() {        tResultRec = new ResultRec();        tResultRec.lab_number=parent.resultRec.lab_number;        tResultRec.prev_lab_number=parent.resultRec.prev_lab_number;        tResultRec.date_collected=parent.resultRec.date_collected;        tResultRec.patient=parent.resultRec.patient;        tResultRec.ssn=parent.resultRec.ssn;        tResultRec.dob=parent.resultRec.dob;        tResultRec.address=parent.resultRec.address;        tResultRec.phone=parent.resultRec.phone;        tResultRec.practice=parent.resultRec.practice;        tResultRec.practice_name=parent.resultRec.practice_name;        tResultRec.doctor=parent.resultRec.doctor;        tResultRec.dr_name=parent.resultRec.dr_name;        tResultRec.billing_choice=parent.resultRec.billing_choice;        tResultRec.choice_code=parent.resultRec.choice_code;        tResultRec.comment_text=parent.resultRec.comment_text;        tResultRec.lab_comments=parent.resultRec.lab_comments;        tResultRec.date_completed=parent.resultRec.date_completed;        tResultRec.cytotech_code=parent.resultRec.cytotech_code;        tResultRec.cytotech=parent.resultRec.cytotech;        tResultRec.pathologist=parent.resultRec.pathologist;        tResultRec.path_date=parent.resultRec.path_date;        tResultRec.finished=parent.resultRec.finished;        tResultRec.first_print=parent.resultRec.first_print;        tResultRec.datestamp=parent.resultRec.datestamp;        tResultRec.pap_class=parent.resultRec.pap_class;        tResultRec.slide_qty=parent.resultRec.slide_qty;        tResultRec.preparation=parent.resultRec.preparation;        tResultRec.biopsy_code=parent.resultRec.biopsy_code;        tResultRec.limited=parent.resultRec.limited;        tResultRec.fax_letter=parent.resultRec.fax_letter;    }        public boolean query(int lnum)    {        boolean exitStatus=true;        try  {            String SQL = new String(                 "SELECT \n"+                "   TO_CHAR(lab.date_collected,'MMDDYYYY'), \n"+    // 01                "   lab.patient, \n"+                               // 02                "   lab.practice, \n"+                              // 03                "   lab.doctor, \n"+                                // 04                "   lab.billing_choice, \n"+                        // 05                "   pat.last_lab, \n"+                              // 06                "   pat.lname, \n"+                                 // 07                "   pat.fname, \n"+                                 // 08                "   pat.address1, \n"+                              // 09                "   pat.city, \n"+                                  // 10                "   pat.state, \n"+                                 // 11                "   pat.zip, \n"+                                   // 12                "   pat.ssn, \n"+                                   // 13                "   TO_CHAR(pat.dob,'MMDDYYYY'), \n"+               // 14                "   pat.phone, \n"+                                 // 15                "   bc.choice_code, \n"+                            // 16                "   dr.lname, \n"+                                  // 17                "   dr.fname, \n"+                                  // 18                "   NULL, \n"+                                      // 19                "   lab.finished, \n"+                              // 20                "   pr.name, \n"+                                   // 21                "   lab.preparation, \n"+                           // 22                "   lab.previous_lab, \n"+                          // 23                "   lab.slide_qty, \n"+                             // 24                "   NVL(f.in_queue,-1), \n"+                        // 25                "   TO_CHAR(lab.receive_date,'MMDDYYYY'), \n"+      // 26                "   pr.phone, \n"+                                  // 27                "   TO_NUMBER(TO_CHAR(SysDate,'YYYYMMDD')), \n"+    // 28                "   lab.lmp, \n"+                                   // 29                "   pr.practice_type, \n"+                          // 30                "   pat.mi, \n"+                                    // 31                "   pr.address1, \n"+                               // 32                "   pr.address2, \n"+                               // 33                "   pr.city, \n"+                                   // 34                "   pr.state, \n"+                                  // 35                "   pr.zip, \n"+                                    // 36                "   lab.doctor_text \n"+                            // 37                "FROM \n"+                "   pcs.lab_requisitions lab, \n"+                "   pcs.patients pat, \n"+                "   pcs.doctors dr, \n"+                "   pcs.billing_choices bc, \n"+                "   pcs.practices pr, \n"+                "   pcs.fax_letters f \n"+                "WHERE \n"+                "   lab.patient=pat.patient and \n"+                "   lab.doctor=dr.doctor and \n"+                "   lab.practice=pr.practice and \n"+                "   lab.billing_choice=bc.billing_choice and \n"+                "   lab.lab_number=f.lab_number(+) and \n"+                "   bc.active_status='A' and \n"+                "   lab.lab_number="+lnum+" \n");                        parent.log.write("Query("+lnum+") MODE: "+parent.currMode);            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(SQL);            int rowsReturned=0;            String LMP = null;            while (rs.next()) {                parent.resultRec.date_collected=rs.getString(1);                parent.resultRec.patient=rs.getInt(2);                parent.resultRec.practice=rs.getInt(3);                parent.resultRec.doctor=rs.getInt(4);                parent.resultRec.billing_choice=rs.getInt(5);                String f7=rs.getString(7);                if (rs.wasNull()) f7=" ";                String f8=rs.getString(8);                if (rs.wasNull()) f8=" ";                parent.resultRec.patient_name=f7.trim()+", "+f8.trim();                parent.resultRec.pat_lname=f7;                parent.resultRec.pat_fname=f8;                String f9=rs.getString(9);                if (rs.wasNull()) f9=" ";                String f10=rs.getString(10);                if (rs.wasNull()) f10=" ";                String f11=rs.getString(11);                if (rs.wasNull()) f11=" ";                String f12=rs.getString(12);                if (rs.wasNull()) f12=" ";                parent.resultRec.address=f9.trim()+", "+f10.trim()+", "+f11.trim()+" "+f12;                parent.resultRec.ssn=rs.getString(13);                parent.resultRec.dob=rs.getString(14);                parent.resultRec.phone=rs.getString(15);                parent.resultRec.choice_code=rs.getString(16);                String f17=rs.getString(17);                if (rs.wasNull()) f17=" ";                String f18=rs.getString(18);                if (rs.wasNull()) f18=" ";                parent.resultRec.dr_name=f17.trim()+", "+f18.trim();                parent.resultRec.lab_comments=rs.getString(19);                parent.resultRec.finished=rs.getInt(20);                parent.resultRec.practice_name=rs.getString(21);                parent.resultRec.preparation=rs.getInt(22);                parent.resultRec.prev_lab_number=rs.getInt(23);                parent.resultRec.slide_qty=rs.getInt(24);                parent.resultRec.fax_letter=rs.getInt(25);                parent.resultRec.receive_date=rs.getString(26);                parent.resultRec.practice_phone=rs.getString(27);                parent.resultRec.iDatestamp=rs.getInt(28);                LMP=rs.getString(29);                parent.resultRec.practice_type=rs.getString(30);                parent.resultRec.pat_mi=rs.getString(31);                parent.labReport.prac_address1=rs.getString(32);                parent.labReport.prac_address2=rs.getString(33);                parent.labReport.prac_city=rs.getString(34);                parent.labReport.prac_state=rs.getString(35);                parent.labReport.prac_zip=rs.getString(36);                parent.labReport.doctor_text=rs.getString(37);                rowsReturned++;            }                   rs.close(); stmt.close();            if (rowsReturned>0) {                if (!Utils.isNull(LMP)) {                    char[] c = LMP.toCharArray();                    for (int i=0; i<c.length; i++) {                        if ((c[i]>='a'&&c[i]<='z')||(c[i]>='A'&&c[i]<='Z')) {                            parent.resultRec.LMP=LMP;                            break;                        }                    }                }                rs.close(); stmt.close();                /* Text for detail code 63: Tissues Submitted                */                SQL = new String(                    "SELECT da.comment_text \n"+                    "FROM pcs.lab_req_details d, \n"+                    "   pcs.lab_req_details_additional da \n"+                    "WHERE d.lab_number="+lnum+" \n"+                    "AND d.detail_id=da.detail_id \n"+                    "AND d.detail_code=63 \n");                stmt=DbConnection.process().createStatement();                rs=stmt.executeQuery(SQL);                while (rs.next()) { parent.labReport.remarks=rs.getString(1); }                rs.close(); stmt.close();                if (parent.currMode!=Lab.ADD) {                                        SQL = new String(                        "SELECT \n"+                        "   TO_CHAR(lr.date_completed,'MMDDYYYY'), \n"+         // 01                        "   c.cytotech_code, \n"+                               // 02                        "   lr.pathologist, \n"+                                // 03                        "   lrc.comment_text, \n"+                              // 04                        "   lr.qc_status, \n"+                                  // 05                        "   TO_CHAR(lr.datestamp,'MMDDYYYY'), \n"+              // 06                        "   lr.first_print, \n"+                                // 07                        "   NVL(lr.pap_class,0), \n"+                           // 08                        "   lr.path_status, \n"+                                // 09                        "   lr.biopsy_code, \n"+                                // 10                        "   TO_CHAR(lr.datestamp,'MM/DD/YY HH:Mi'), \n"+        // 11                        "   lr.sys_user, \n"+                                   // 12                        "   TO_CHAR(lr.change_date,'MM/DD/YY HH:Mi'), \n"+      // 13                        "   lr.change_user \n,"+                                // 14                        "   TO_NUMBER(TO_CHAR(lr.datestamp,'YYYYMMDD')), \n"+   // 15                        "   p.description \n"+                                  // 16                        "FROM \n"+                        "   pcs.lab_results lr, \n"+                        "   pcs.lab_result_comments lrc, \n"+                        "   pcs.cytotechs c, \n"+                        "   pcs.pap_classes p \n"+                        "WHERE \n"+                        "   lr.lab_number=lrc.lab_number(+) and \n"+                        "   c.cytotech=lr.cytotech(+) and \n"+                        "   lr.pap_class=p.pap_class and \n"+                        "   lr.lab_number="+lnum+" \n");                    stmt=DbConnection.process().createStatement();                    rs=stmt.executeQuery(SQL);                    rowsReturned=0;                    while (rs.next()) {                        rowsReturned++;                        parent.resultRec.date_completed=rs.getString(1);                        parent.resultRec.cytotech_code=rs.getString(2);                        parent.resultRec.pathologist=rs.getString(3);                        parent.resultRec.comment_text=rs.getString(4);                        parent.resultRec.qc_status=rs.getString(5);                        parent.resultRec.datestamp=rs.getString(6);                        parent.resultRec.first_print=rs.getInt(7);                        parent.resultRec.pap_class=rs.getInt(8);                        parent.resultRec.path_status=rs.getString(9);                        parent.resultRec.biopsy_code=rs.getString(10);                        parent.resultRec.create_date=rs.getString(11);                        int uid = rs.getInt(12);                        parent.resultRec.create_user=DbConnection.getUserName(uid);                        parent.resultRec.change_date=rs.getString(13);                        uid=rs.getInt(14);                        parent.resultRec.change_user=DbConnection.getUserName(uid);                        parent.resultRec.iDatestamp=rs.getInt(15);                        parent.resultRec.p_descr=rs.getString(16);                    }                    rs.close(); stmt.close();                    if (rowsReturned>0) {                            SQL = new String(                                "SELECT \n"+                                "   TO_CHAR(pc.path_date,'MMDDYYYY'),pc.pathologist_code \n"+                                "FROM \n"+                                "   pcs.pathologist_control pc \n"+                                "WHERE \n"+                                "   pc.lab_number="+lnum+" \n"+                                "   ORDER BY pc.rowid");                             stmt=DbConnection.process().createStatement();                            rs=stmt.executeQuery(SQL);                            while (rs.next()) {                                parent.resultRec.path_date=rs.getString(1);                                parent.resultRec.pathologist=rs.getString(2);                            }                            rs.close(); stmt.close();                        SQL = new String(                            "SELECT result_letter,result_label,result_type,result_text,p_seq \n"+                            "FROM pcs.tissue_results \n"+                            "WHERE lab_number="+lnum+" \n"+                            "ORDER by p_seq \n");                        stmt=DbConnection.process().createStatement();                        rs=stmt.executeQuery(SQL);                        while (rs.next()) {                            TissueRec t = new TissueRec();                            t.result_letter=rs.getString(1);                            t.result_label=rs.getString(2);                            t.result_type=rs.getString(3);                            t.result_text=rs.getString(4);                            t.p_seq=rs.getInt(5);                            parent.labReport.tissueResults.addElement(t);                        }                        rs.close(); stmt.close();                    }                    else {                        exitStatus=false;                         if (parent.resultRec.finished==(-1))                            Utils.createErrMsg("EXPIRED SPECIMEN");                    }                }                            }            else { exitStatus=false; }            try { rs.close(); stmt.close(); }            catch (SQLException e) {                 parent.log.write("ERROR: Closing statement \n"+e);                exitStatus=false;             }                        }        catch (Exception e) {            parent.log.write(e+" query");            exitStatus=false;        }        return(exitStatus);                }        private void add()    {        boolean exitStatus=true;        try  {            CallableStatement cstmt;	        cstmt=DbConnection.process().prepareCall(	            "{call pcs.tissue_results_add(?,?,?,?,?)}");            cstmt.setInt(1,tResultRec.lab_number);            cstmt.setString(2,tResultRec.date_completed);            cstmt.setInt(3,tResultRec.cytotech);            cstmt.setString(4,tResultRec.path_date);            cstmt.setString(5,tResultRec.pathologist);            cstmt.executeUpdate();            cstmt.close();            parent.log.write("add \n"+tResultRec.toString());            TissueRec t;            for (int i=0;i<parent.labReport.tissueResults.size();i++)  {                t = (TissueRec)parent.labReport.tissueResults.elementAt(i);                cstmt=DbConnection.process().prepareCall(	                "{call pcs.tissue_result_details_add(?,?,?,?,?,?)}");                cstmt.setInt(1,tResultRec.lab_number);                cstmt.setString(2,t.result_letter);                cstmt.setString(3,t.result_label);                cstmt.setString(4,t.result_type);                cstmt.setString(5,t.result_text);                cstmt.setInt(6,t.p_seq);                cstmt.executeUpdate();                cstmt.close();            }           }        catch (SQLException e) {             parent.log.write("ERROR: Closing statement \n"+e);            exitStatus=false;         }                        catch( Exception e ) {            parent.log.write(e+" tissue result add procedures");            exitStatus=false;            String msg = "Add Operation for Lab #"+                tResultRec.lab_number+" failed";            Utils.createErrMsg(msg);        }        if (exitStatus) add_cost();    }            public void update()    {        boolean exitStatus=true;        try  {            CallableStatement cstmt;	        cstmt=DbConnection.process().prepareCall(	            "{call pcs.tissue_results_update(?,?,?,?,?)}");            cstmt.setInt(1,parent.resultRec.lab_number);            cstmt.setString(2,parent.resultRec.date_completed);            cstmt.setInt(3,parent.resultRec.cytotech);            cstmt.setString(4,parent.resultRec.path_date);            cstmt.setString(5,parent.resultRec.pathologist);            cstmt.executeUpdate();            cstmt.close();            TissueRec t;            for (int i=0;i<parent.labReport.tissueResults.size();i++)  {                t = (TissueRec)parent.labReport.tissueResults.elementAt(i);                cstmt=DbConnection.process().prepareCall(	                "{call pcs.tissue_result_details_update(?,?,?)}");                cstmt.setInt(1,parent.resultRec.lab_number);                cstmt.setString(2,t.result_text);                cstmt.setInt(3,t.p_seq);                cstmt.executeUpdate();                cstmt.close();            }               parent.log.write("update \n"+parent.resultRec.toString());        }        catch (SQLException e) {             parent.log.write("ERROR: Closing statement \n"+e);            exitStatus=false;         }                        catch( Exception e ) {            parent.log.write(e+" tissue result update procedures");            exitStatus=false;            String msg = "Update Operation for Lab #"+                parent.resultRec.lab_number+" failed";            Utils.createErrMsg(msg);        }        if (exitStatus) add_cost();    }                public boolean add_cost()  {        boolean exitStatus=true;        try  {            CallableStatement cstmt;	        cstmt=DbConnection.process().prepareCall(	            "{call pcs.calculate_cost(?)}");            cstmt.setInt(1,parent.resultRec.lab_number);            cstmt.executeUpdate();            try { cstmt.close(); }            catch (SQLException e) {                 parent.log.write("ERROR: Closing statementm \n"+e);                exitStatus=false;             }                        }        catch( Exception e ) {            parent.log.write(e+" add cost procedure");            exitStatus=false;        }        return(exitStatus);                }        public boolean hasLabComments(int labNum)     {        boolean hasComments = false;        try  {            String query =                 "SELECT comment_text \n"+                "FROM pcs.lab_req_comments "+                "WHERE lab_number="+labNum+" \n";            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(query);            while (rs.next()) { hasComments=true; }            try { rs.close(); stmt.close(); }            catch (SQLException e) { parent.log.write(e); }                        }        catch( Exception e ) { parent.log.write(e); }        return(hasComments);                }        public boolean queryReport(int lab)  {        parent.log.write("query("+lab+")");        boolean exitStatus=true;        try  {            String SQL = new String(                "SELECT \n"+        /*01*/  "   lab.lab_number, \n"+        /*02*/  "   lab.patient, \n"+           /*03*/  "   lab.practice,\n"+           /*04*/  "   lab.doctor, \n"+            /*05*/  "   lab.patient_id, \n"+        /*06*/  "   TO_CHAR(lab.date_collected,'MM/DD/YYYY'), \n"+        /*07*/  "   TO_CHAR(lab.receive_date,'MM/DD/YYYY'), \n"+        /*08*/  "   lab.lmp, \n"+               /*09*/  "   lab.finished, \n"+          /*10*/  "   pat.lname, \n"+             /*11*/  "   pat.fname, \n"+             /*12*/  "   pat.ssn, \n"+               /*13*/  "   TO_CHAR(pat.dob,'MM/DD/YYYY'), \n"+        /*14*/  "   cn.client_notes, \n"+            /*15*/  "   pr.practice, \n"+        /*16*/  "   pr.name, \n"+        /*17*/  "   pr.address1, \n"+        /*18*/  "   pr.address2, \n"+        /*19*/  "   pr.city, \n"+        /*20*/  "   pr.state, \n"+        /*21*/  "   pr.zip, \n"+        /*22*/  "   pr.client_notes, \n"+        /*23*/  "   pr.report_copies, \n"+        /*24*/  "   dr.lname, \n"+        /*25*/  "   dr.fname, \n"+        /*26*/  "   lab.previous_lab, \n"+        /*27*/  "   RTRIM(TO_CHAR(SysDate,'fmDay, fmMonth'))||' '||TO_CHAR(SysDate,'DD, fmYYYY'), \n"+        /*28*/  "   ct.cytotech_code, \n"+        /*29*/  "   res.pathologist, \n"+        /*30*/  "   res.qc_status, \n"+        /*31*/  "   rem.comment_text, \n"+        /*32*/  "   to_char(mat.superficial,999)||'%', \n"+        /*33*/  "   to_char(mat.intermediate,999)||'%', \n"+        /*34*/  "   to_char(mat.parabasal,999)||'%', \n"+        /*35*/  "   p.lname, \n"+        /*36*/  "   p.fname, \n"+        /*37*/  "   p.mi, \n"+        /*38*/  "   p.title, \n"+        /*39*/  "   p.degree, \n"+        /*40*/  "   lab.preparation, \n"+        /*41*/  "   lab.rush, \n"+        /*42*/  "   NVL(mat.superficial,0)+NVL(mat.intermediate,0)+NVL(mat.parabasal,0), \n"+        /*43*/  "   res.path_status, \n"+        /*44*/  "   lab.doctor_text, \n"+        /*45*/  "   pat.mi, \n"+        /*46*/  "   TO_NUMBER(TO_CHAR(res.datestamp,'YYYYMMDD')), \n"+        /*47*/  "   TO_CHAR(res.datestamp,'MM/DD/YYYY') \n"+                "FROM \n"+                "   pcs.lab_requisitions lab, \n"+                "   pcs.patients pat, \n"+                "   pcs.practices pr, \n"+                "   pcs.lab_req_client_notes cn, \n"+                "   pcs.doctors dr, \n"+                "   pcs.cytotechs ct, \n"+                "   pcs.lab_results res, \n"+                "   pcs.lab_result_comments rem, \n"+                "   pcs.lab_mat_index mat, \n"+                "   pcs.pathologists p \n"+                "WHERE \n"+                "   lab.lab_number=res.lab_number and \n"+                "   lab.lab_number=cn.lab_number(+) and \n"+                "   lab.practice=pr.practice and \n"+                "   lab.doctor=dr.doctor and \n"+                "   lab.patient=pat.patient and \n"+                "   res.cytotech=ct.cytotech and \n"+                "   res.lab_number=rem.lab_number(+) and \n"+                "   res.lab_number=mat.lab_number(+) and \n"+                "   res.pathologist=p.pathologist_code(+) and \n"+                "   lab.finished>0 and \n"+                "   lab.lab_number="+lab+" \n");            // get the current date for report(s)            String dateQuery = new String(                "SELECT RTRIM(TO_CHAR(SysDate,'fmDay, fmMonth'))"+                "||' '||TO_CHAR(SysDate,'DD, fmYYYY') FROM DUAL");                            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(dateQuery);            while (rs.next()) { parent.reportDate=rs.getString(1); }              // retrieve the data            rs = stmt.executeQuery(SQL);            while (rs.next()) {                parent.labReport.lab_number=rs.getInt(1);                parent.labReport.patient=rs.getInt(2);                parent.labReport.practice=rs.getInt(3);                parent.labReport.doctor=rs.getInt(4);                parent.labReport.patient_id=rs.getString(5);                parent.labReport.date_collected=rs.getString(6);                parent.labReport.receive_date=rs.getString(7);                parent.labReport.lmp=rs.getString(8);                parent.labReport.finished=rs.getInt(9);                parent.labReport.pat_lname=rs.getString(10);                parent.labReport.pat_fname=rs.getString(11);                parent.labReport.pat_ssn=rs.getString(12);                parent.labReport.pat_dob=rs.getString(13);                parent.labReport.client_notes=rs.getString(14);                parent.labReport.practice=rs.getInt(15);                parent.labReport.prac_name=rs.getString(16);                parent.labReport.prac_address1=rs.getString(17);                parent.labReport.prac_address2=rs.getString(18);                parent.labReport.prac_city=rs.getString(19);                parent.labReport.prac_state=rs.getString(20);                parent.labReport.prac_zip=rs.getString(21);                parent.labReport.prac_client_notes=rs.getString(22);                parent.labReport.report_copies=rs.getInt(23);                parent.labReport.doc_lname=rs.getString(24);                parent.labReport.doc_fname=rs.getString(25);                parent.labReport.pat_last_lab=rs.getInt(26);                parent.labReport.cytotech_code=rs.getString(28);                parent.labReport.pathologist_code=rs.getString(29);                parent.labReport.qc_status=rs.getString(30);                parent.labReport.remarks=rs.getString(31);                parent.labReport.superficial=rs.getString(32);                parent.labReport.intermediate=rs.getString(33);                parent.labReport.parabasal=rs.getString(34);                parent.labReport.path_lname=rs.getString(35);                parent.labReport.path_fname=rs.getString(36);                parent.labReport.path_mi=rs.getString(37);                parent.labReport.path_title=rs.getString(38);                parent.labReport.path_degree=rs.getString(39);                parent.labReport.preparation=rs.getInt(40);                parent.labReport.rush=rs.getString(41);                parent.labReport.sumMatNdx=rs.getInt(42);                parent.labReport.path_status=rs.getString(43);                parent.labReport.doctor_text=rs.getString(44);                parent.labReport.pat_mi=rs.getString(45);                iDatestamp=rs.getInt(46);                parent.labReport.iDatestamp=iDatestamp;                parent.labReport.datestamp=rs.getString(47);                if (!Utils.isNull(parent.labReport.remarks)) {                    parent.labReport.formatRemarks();                }                // get details for lab currently pointed to                queryDetails(parent.labReport);            }            parent.msgLabel.setText(null);            try { rs.close(); stmt.close(); }            catch (SQLException e) { parent.log.write(e); exitStatus=false; }                        }        catch (Exception e) {            parent.log.write(e);            exitStatus=false;        }        return(exitStatus);                }		/*	    Query the lab details from the requisition	    for the lab number indicated in labReport	*/    public boolean queryDetails(LabReportRec labReport)      {        boolean exitStatus = true;        try  {            String SQL = new String(                    "SELECT \n"+                    "   dc.description, \n"+                    "   dc.additional_info, \n"+                    "   ld.detail_code, \n"+                    "   NVL(ldc.comment_text,'  '), \n"+                    "   dc.detail_type \n"+                    "FROM \n"+                    "   pcs.detail_codes dc, \n"+                    "   pcs.lab_req_details ld, \n"+                    "   pcs.lab_req_details_additional ldc \n"+                    "WHERE \n"+                    "   ld.detail_code=dc.detail_code and \n"+                    "   ld.detail_id=ldc.detail_id(+) and \n"+                    //"   ld.detail_code<>63 and \n"+                    "   ld.lab_number="+parent.labReport.lab_number+" \n"+                    "ORDER BY ld.detail_code \n");                            DetailCodeRec dCodeRec = null;            // Was this lab a rush job?            if (parent.labReport.rush.equals("Y")) {                dCodeRec = new DetailCodeRec();                dCodeRec.description = new String("RUSH");                dCodeRec.additional_info = new String("N");                dCodeRec.detail_code=0;                dCodeRec.textEntered = new String();                dCodeRec.isSelected=true;                dCodeRec.detail_type = new String("OTHER");                parent.labReport.numOthers++;                parent.labReport.detailVect.addElement(dCodeRec);                parent.labReport.numDetails++;            }            // Is LMP data available?            if (!Utils.isNull(parent.labReport.lmp)) {                dCodeRec = new DetailCodeRec();                dCodeRec.description = new String("LMP");                dCodeRec.additional_info = new String("Y");                dCodeRec.detail_code=1;                dCodeRec.textEntered = new String(parent.labReport.lmp);                dCodeRec.isSelected=true;                dCodeRec.detail_type = new String("HISTORY");                parent.labReport.numHistory++;                parent.labReport.detailVect.addElement(dCodeRec);                parent.labReport.numDetails++;            }            // Retrieve the details            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(SQL);            dCodeRec = new DetailCodeRec();            while (rs.next()) {                dCodeRec.description=rs.getString(1);                dCodeRec.additional_info=rs.getString(2);                dCodeRec.detail_code=rs.getInt(3);                dCodeRec.textEntered=rs.getString(4);                dCodeRec.isSelected=true;                dCodeRec.detail_type=rs.getString(5);                int code = rs.getInt(3);                /*                    The various types of details are tallied; this is necessary                    in order to format the layout of this section of the report                */                if (dCodeRec.detail_type.equals("SOURCE")) parent.labReport.numSources++;                else if (dCodeRec.detail_type.equals("DEVICE")) parent.labReport.numDevices++;                else if (dCodeRec.detail_type.equals("CONDITION")) parent.labReport.numConditions++;                else if (dCodeRec.detail_type.equals("OTHER")) parent.labReport.numOthers++;                else if (dCodeRec.detail_type.equals("HISTORY")) parent.labReport.numHistory++;                else if (dCodeRec.detail_type.equals("TISSUE PATHOLOGY")) parent.labReport.numPathology++;                parent.labReport.numDetails++;                parent.labReport.detailVect.addElement(dCodeRec);                dCodeRec = new DetailCodeRec();            }            try { rs.close(); stmt.close(); }            catch (SQLException e) { parent.log.write(e); exitStatus=false; }        }        catch (Exception e) {            parent.log.write(e);            exitStatus=false;        }        return(exitStatus);                }    }
