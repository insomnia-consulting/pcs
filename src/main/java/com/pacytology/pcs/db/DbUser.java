package com.pacytology.pcs.db;
/*
    PENNSYLVANIA CYTOLOGY SERVICES
    LABORATORY INFORMATION SYSTEM V1.0
    Copyright (C) 2001 by John Cardella
    All Rights Reserved
    
    File:       DbUser.java
    Created By: John Cardella, Software Engineer
    
    Function: Establishes validity of user in Oracle database.
    If successful, provides data to parent Login Class which
    is provided to all form classes in application.
    
    MODIFICATIONS ----------------------------------
    Date/Staff      Description:
*/

import java.awt.*;
import java.awt.event.ActionEvent;
import java.sql.*;
import javax.swing.*;

import com.pacytology.pcs.DocStmtDialogActionMap;
import com.pacytology.pcs.PCSLabEntry;
import com.pacytology.pcs.Utils;
import com.pacytology.pcs.ui.PcsDialog;

public class DbUser extends PcsDialog
{
    /**
	 * 
	 */
	private static final long serialVersionUID = 531915272205384696L;
	String userName;
    String userPassword;
    String driver;
    String URL;
    String dateToday;
    String dayNumber;
    String dayOfWeek;
    String yearToday;
    String monthToday;
    Connection dbProc;
    static boolean loginEstablished=false;
    public boolean pwdMode=false;
    private int dailyJobStatus;
    
	public PCSLabEntry parent;
	
	public DbUser()
	{
		this.setBounds(40,48,289,178);
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Login");
		setResizable(false);
		setModal(true);
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(282,96);
		setVisible(false);
		getContentPane().add(userTextField);
		userTextField.setFont(new Font("SansSerif", Font.BOLD, 12));
		userTextField.setBounds(110,16,160,20);
		getContentPane().add(userPwdField);
		userPwdField.setFont(new Font("DialogInput", Font.BOLD, 12));
		userPwdField.setBounds(110,40,160,20);
		userLabel.setText("User Name");
		getContentPane().add(userLabel);
		userLabel.setForeground(java.awt.Color.black);
		userLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		userLabel.setBounds(18,18,84,12);
		pwdLabel.setText("Password");
		getContentPane().add(pwdLabel);
		pwdLabel.setForeground(java.awt.Color.black);
		pwdLabel.setBounds(18,42,72,12);
		errorLabel.setHorizontalAlignment(SwingConstants.CENTER);
		errorLabel.setOpaque(true);
		getContentPane().add(errorLabel);
		errorLabel.setBackground(java.awt.Color.red);
		errorLabel.setForeground(java.awt.Color.white);
		errorLabel.setBounds(14,68,254,18);
		errorLabel.setVisible(false);
		//}}
		
		pwdLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		errorLabel.setFont(new Font("Dialog", Font.BOLD,12));
		errorLabel.setBackground((Color.red).darker());

		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		SymFocus aSymFocus = new SymFocus();
		userTextField.addFocusListener(aSymFocus);
		SymKey aSymKey = new SymKey();
		//this.addKeyListener(aSymKey);
		userTextField.addKeyListener(aSymKey);
		userPwdField.addKeyListener(aSymKey);
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		//}}
		this.actionMap = new DocStmtDialogActionMap(this);
		this.setupKeyPressMap();
		
	}
	protected JRootPane setupKeyPressMap() {
		JRootPane rp = super.setupKeyPressMap();


		rp.getActionMap().put("F9", new AbstractAction() { 
			public void actionPerformed(ActionEvent e) { 
				DbUser.this.dispose();
			}
		});

		rp.getActionMap().put("ESC", new AbstractAction() { 
			public void actionPerformed(ActionEvent e) { 
				userTextField.setText(null);
				userPwdField.setText(null);
				errorLabel.setText(null);
				errorLabel.setText(null);
				userTextField.requestFocus();
			}
		});

		return rp;
	}


    public DbUser(PCSLabEntry p) {
        this();
        this.parent=p;
    }

	public DbUser(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

	public void setVisible(boolean b)
	{
		if (b) setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new DbUser()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	JTextField userTextField = new JTextField();
	JPasswordField userPwdField = new JPasswordField();
	JLabel userLabel = new JLabel();
	JLabel pwdLabel = new JLabel();
	JLabel errorLabel = new JLabel();
	//}}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowOpened(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == DbUser.this)
				DbUser_windowOpened(event);
		}

		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == DbUser.this)
				DbUser_windowClosing(event);
		}
	}

	void DbUser_windowClosing(java.awt.event.WindowEvent event)
	{
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			
		}
	}
	
	void okButtonActions()
	{
	    validateLogin();
	    if (dailyJobStatus==0) {
	        Utils.createErrMsg("SYSTEM LOCKED - RUNNING DAILY JOBS");
	        this.dispose();
	    }
	    else if (loginEstablished) this.setVisible(false);
	}

    synchronized void validateLogin() {
        this.setCursor(new Cursor(java.awt.Cursor.WAIT_CURSOR));
        parent.setCursor(new Cursor(java.awt.Cursor.WAIT_CURSOR));
		userName=userTextField.getText();
		userPassword=new String(userPwdField.getPassword());
        dailyJobStatus=999;
        try  {
            Class.forName(parent.dbLogin.driver);
            dbProc = DriverManager.getConnection(
                      parent.dbLogin.URL,userName,userPassword);
            loginEstablished=true;                      
            String query = 
                "SELECT TO_CHAR(SysDate,'MMDDYYYY'), \n"+
                "   LTRIM(TO_CHAR(CEIL(SysDate- \n"+
                "   TO_DATE(('0101'||TO_CHAR(SysDate,'YYYY')),'MMDDYYYY')),'009')), \n"+
                "   TO_CHAR(SysDate,'DY'), job_status, \n"+
                "   TO_CHAR(SysDate,'YYYY'),TO_CHAR(SysDate,'MM') \n"+
                "FROM pcs.job_control WHERE job_descr='JOB_STATUS' \n";
            Statement stmt = dbProc.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) { 
                dateToday=rs.getString(1);
                dayNumber=rs.getString(2);
                dayOfWeek=rs.getString(3);
                dailyJobStatus=rs.getInt(4);
                yearToday=rs.getString(5);
                monthToday=rs.getString(6);
            }
            if (dailyJobStatus!=0) {
                parent.dbLogin.userName = (userName);
                parent.dbLogin.setUserPassword(userPassword);
                parent.dbLogin.setLoginEstablished(true);
                parent.dbLogin.dateToday=dateToday;
                parent.dbLogin.dayNumber=dayNumber;
                parent.dbLogin.dayOfWeek=dayOfWeek;
                parent.dbLogin.yearToday=yearToday;
                parent.dbLogin.monthToday=monthToday;
            }
		    try { dbProc.close(); } 
		    catch (Exception e) { }
		    if (parent.dbLogin.isLoginEstablished())
		        System.out.println("User "+parent.dbLogin.userName+
		            " successfully logged on to system on day "+dayNumber);
        }
        catch( Exception e ) {
            errorLabel.setVisible(true);
 	        errorLabel.setText("Login denied ... check User ID and password");
		    //getContentPane().add(errorLabel);
		    //errorLabel.setBackground(new java.awt.Color(204,204,204));
		    //errorLabel.setForeground(java.awt.Color.red);
 	        System.out.println("Trying to connect to " + parent.dbLogin.URL);
            System.out.println(e);
            e.printStackTrace();
            this.setCursor(new Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        }
        this.setCursor(new Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }
	
	String getUser() { return (this.userName); }
    String getPassword() { return (this.userPassword); }
    String getDriver() { return (this.driver); }
    String getURL() { return (this.URL); }      
    boolean getLoginStatus() { return (this.loginEstablished); }	
    String getDate() { return (this.dateToday); }

	class SymFocus extends java.awt.event.FocusAdapter
	{
		public void focusGained(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			if (object == userTextField)
				userTextField_focusGained(event);
			
		}
	}

	void userTextField_focusGained(java.awt.event.FocusEvent event)
	{
	}
	
	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == DbUser.this)
				DbUser_keyPressed(event);
			else if (object == userTextField)
				userTextField_keyPressed(event);
		
			else if (object == userPwdField)
				userPwdField_keyPressed(event);
		}
	}

	void DbUser_keyPressed(java.awt.event.KeyEvent event)
	{
		int key = event.getKeyCode();
		switch (key) {
		    case java.awt.event.KeyEvent.VK_F9:
                parent.setCursor(new Cursor(java.awt.Cursor.DEFAULT_CURSOR));
		        this.dispose();
		        break;
		    case java.awt.event.KeyEvent.VK_ESCAPE:
		        userTextField.setText(null);
		        userPwdField.setText(null);
		        errorLabel.setVisible(false);
		        errorLabel.setText(null);
		        userTextField.requestFocus();
		        break;
		}
	}

	void userTextField_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (!Utils.isNull(userTextField.getText()))
		        userTextField.transferFocus();
		}
	}

	void userPwdField_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (!Utils.isNull(userTextField.getText())) {
		        if (!Utils.isNull(userPwdField.getText())) {
		            okButtonActions();
		        }
		    }
		}
	}

	void DbUser_windowOpened(java.awt.event.WindowEvent event)
	{
		userTextField.requestFocus();
	}
	@Override
	public void queryActions() {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void addActions() {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void updateActions() {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void finalActions() {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void resetActions() {
		// TODO Auto-generated method stub
		
	}
}

	