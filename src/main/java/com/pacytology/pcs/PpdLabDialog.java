package com.pacytology.pcs;

/*
		A basic implementation of the JDialog class.
*/

import java.awt.*;
import java.awt.event.KeyEvent;

import javax.swing.*;
import com.pacytology.pcs.ui.Square;

public class PpdLabDialog extends javax.swing.JDialog
{
    LabForm labParent;
    BillingForm billingParent;
    boolean dFlag = false;
    int currMode = 0;
    int formMode = 0;
    final int LAB=201;
    final int BILLING=202;
    
	public PpdLabDialog()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Payment Information");
		setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(230,221);
		setVisible(false);
		labNumber.setEnabled(false);
		getContentPane().add(labNumber);
		labNumber.setFont(new Font("SansSerif", Font.BOLD, 12));
		labNumber.setBounds(140,64,80,20);
		checkNumber.setEnabled(false);
		getContentPane().add(checkNumber);
		checkNumber.setFont(new Font("SansSerif", Font.BOLD, 12));
		checkNumber.setBounds(140,100,80,20);
		paymentAmount.setEnabled(false);
		getContentPane().add(paymentAmount);
		paymentAmount.setFont(new Font("SansSerif", Font.BOLD, 12));
		paymentAmount.setBounds(140,124,80,20);
		prepayComments.setLineWrap(true);
		prepayComments.setWrapStyleWord(true);
		prepayComments.setEnabled(false);
		getContentPane().add(prepayComments);
		prepayComments.setFont(new Font("SansSerif", Font.BOLD, 12));
		prepayComments.setBounds(18,172,202,40);
		JLabel1.setText("Check Number");
		getContentPane().add(JLabel1);
		JLabel1.setForeground(java.awt.Color.black);
		JLabel1.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel1.setBounds(18,102,96,12);
		JLabel6.setText("Lab Number");
		getContentPane().add(JLabel6);
		JLabel6.setForeground(java.awt.Color.black);
		JLabel6.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel6.setBounds(18,66,80,12);
		getContentPane().add(F1sq);
		F1sq.setBounds(35,6,20,20);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F3");
		getContentPane().add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(39,6,20,20);
		getContentPane().add(F2sq);
		F2sq.setBounds(97,6,20,20);
		F2lbl.setRequestFocusEnabled(false);
		F2lbl.setText("F9");
		getContentPane().add(F2lbl);
		F2lbl.setForeground(java.awt.Color.black);
		F2lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F2lbl.setBounds(101,6,20,20);
		getContentPane().add(F3sq);
		F3sq.setBounds(159,6,20,20);
		F3lbl.setRequestFocusEnabled(false);
		F3lbl.setText("F12");
		getContentPane().add(F3lbl);
		F3lbl.setForeground(java.awt.Color.black);
		F3lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F3lbl.setBounds(160,6,20,20);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("Update");
		getContentPane().add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(10,30,70,18);
		F2action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F2action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F2action.setText("Exit");
		getContentPane().add(F2action);
		F2action.setForeground(java.awt.Color.black);
		F2action.setBounds(72,30,70,16);
		F3action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F3action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F3action.setText("Submit");
		getContentPane().add(F3action);
		F3action.setForeground(java.awt.Color.black);
		F3action.setBounds(134,30,70,16);
		JLabel2.setText("Payment Amount");
		getContentPane().add(JLabel2);
		JLabel2.setForeground(java.awt.Color.black);
		JLabel2.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel2.setBounds(18,126,110,12);
		JLabel3.setText("Additional Information:");
		getContentPane().add(JLabel3);
		JLabel3.setForeground(java.awt.Color.black);
		JLabel3.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel3.setBounds(18,154,140,12);
		//}}
	
		//{{REGISTER_LISTENERS
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		checkNumber.addKeyListener(aSymKey);
		SymFocus aSymFocus = new SymFocus();
		paymentAmount.addFocusListener(aSymFocus);
		paymentAmount.addKeyListener(aSymKey);
		prepayComments.addKeyListener(aSymKey);
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		//}}
	}

	/*public prepaidLabDialog()
	{
		this((Frame)null);
	}*/
	
	public PpdLabDialog(LabForm p)
	{
	    this();
	    this.labParent=p;
	    this.formMode=LAB;
	}

	public PpdLabDialog(BillingForm p)
	{
	    this();
	    this.billingParent=p;
	    this.formMode=BILLING;
	}

	public PpdLabDialog(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

	public void setVisible(boolean b)
	{
		if (b) setLocation(50,50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new PpdLabDialog()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling labParents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JTextField labNumber = new javax.swing.JTextField();
	javax.swing.JTextField checkNumber = new javax.swing.JTextField();
	javax.swing.JTextField paymentAmount = new javax.swing.JTextField();
	javax.swing.JTextArea prepayComments = new javax.swing.JTextArea();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel6 = new javax.swing.JLabel();
	Square F1sq = new Square();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	Square F2sq = new Square();
	javax.swing.JLabel F2lbl = new javax.swing.JLabel();
	Square F3sq = new Square();
	javax.swing.JLabel F3lbl = new javax.swing.JLabel();
	javax.swing.JLabel F1action = new javax.swing.JLabel();
	javax.swing.JLabel F2action = new javax.swing.JLabel();
	javax.swing.JLabel F3action = new javax.swing.JLabel();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	//}}

	public void forceDigits(java.awt.event.KeyEvent event, boolean b)  {
	    try {
	        char key=event.getKeyChar();
	        if (key=='.') {
	            if (dFlag==false) dFlag=true;
	            else event.consume();
	        }
	        else if ( (key<'0')||(key>'9') && key!='\b' ) 
	            event.consume();
        }
        catch (Exception e)  {
            System.out.println(e);                
        }            
    }        
    
    void initForm_lab()
    {
        labNumber.setText(labParent.labNumber.getText());
        if (labParent.labRec.check_number==(-1)) checkNumber.setText(null);
        else checkNumber.setText(Integer.toString(labParent.labRec.check_number));
        if (labParent.labRec.payment_amount==(-1)) { 
            paymentAmount.setText("0.00");
            currMode=Lab.ADD;
        }
        else {
            if (labParent.labRec.payment_amount==0)
                paymentAmount.setText("0.00");
            else
                paymentAmount.setText(Double.toString(labParent.labRec.payment_amount));
            currMode=Lab.UPDATE;
        }
        if (Utils.isNull(labParent.labRec.payment_info)) prepayComments.setText(null);
        else prepayComments.setText(labParent.labRec.payment_info);
        if (currMode==Lab.ADD) {
            checkNumber.setEnabled(true);
            paymentAmount.setEnabled(true);
            prepayComments.setEnabled(true);
            checkNumber.requestFocus();
        }
    }

    void initForm_billing()
    {
        labNumber.setText(billingParent.labNumber.getText());
        if (billingParent.labRec.check_number==(-1)) checkNumber.setText(null);
        else checkNumber.setText(Integer.toString(billingParent.labRec.check_number));
        if (billingParent.labRec.payment_amount==(-1)) { 
            paymentAmount.setText("0.00");
            currMode=Lab.ADD;
        }
        else {
            if (billingParent.labRec.payment_amount==0)
                paymentAmount.setText("0.00");
            else
                paymentAmount.setText(Double.toString(billingParent.labRec.payment_amount));
            currMode=Lab.UPDATE;
        }
        if (Utils.isNull(billingParent.labRec.payment_info)) prepayComments.setText(null);
        else prepayComments.setText(billingParent.labRec.payment_info);
        if (currMode==Lab.ADD) {
            checkNumber.setEnabled(true);
            paymentAmount.setEnabled(true);
            prepayComments.setEnabled(true);
            checkNumber.requestFocus();
        }
    }


	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == checkNumber)
				checkNumber_keyTyped(event);
			else if (object == paymentAmount)
				paymentAmount_keyTyped(event);
			else if (object == prepayComments)
				prepayComments_keyTyped(event);
		}

		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == PpdLabDialog.this)
				PpdLabDialog_keyPressed(event);
			else if (object == paymentAmount)
				paymentAmount_keyPressed(event);
			else if (object == prepayComments)
				prepayComments_keyPressed(event);
			else if (object == checkNumber)
				checkNumber_keyPressed(event);
		}
	}

	void PpdLabDialog_keyPressed(java.awt.event.KeyEvent event)
	{
		int key = event.getKeyCode();
		switch (key) {
		    case KeyEvent.VK_ESCAPE:
		        if (formMode==LAB) initForm_lab();
		        else if (formMode==BILLING) initForm_billing();
		        break;
            case KeyEvent.VK_CONTROL:
                ((JTextField)getFocusOwner()).setText(null);
                dFlag=false;
                break;
            case KeyEvent.VK_F9:
                if (formMode==LAB) { 
                    labParent.currentSection=1;
                    labParent.gotoNextSection();
                }
                this.dispose();
                break;
            case KeyEvent.VK_F12:
                updateLab();
                this.dispose();
                break;
            case KeyEvent.VK_F3:
                if (currMode==Lab.UPDATE) {
                    checkNumber.setEnabled(true);
                    paymentAmount.setEnabled(true);
                    prepayComments.setEnabled(true);
                    checkNumber.requestFocus();
                }
                break;
		}
	}
	
	void updateLab() 
	{
	    if (formMode==LAB) {
	        if (Utils.isNull(checkNumber.getText())) labParent.labRec.check_number=(-1);
	        else labParent.labRec.check_number=Integer.parseInt(checkNumber.getText());
	        if (Utils.isNull(paymentAmount.getText())) labParent.labRec.payment_amount=(-1);
	        else labParent.labRec.payment_amount=(
	            Double.valueOf(paymentAmount.getText())).doubleValue();
	        labParent.labRec.payment_info=prepayComments.getText();
	        if (!Utils.isNull(checkNumber.getText())) 
	            labParent.labRec.payment_type="CHECK";
	        else labParent.labRec.payment_type="CASH";
	    }
	    else if (formMode==BILLING) {
	        if (Utils.isNull(checkNumber.getText())) billingParent.labRec.check_number=(-1);
	        else billingParent.labRec.check_number=Integer.parseInt(checkNumber.getText());
	        if (Utils.isNull(paymentAmount.getText())) billingParent.labRec.payment_amount=(-1);
	        else billingParent.labRec.payment_amount=(
	            Double.valueOf(paymentAmount.getText())).doubleValue();
	        billingParent.labRec.payment_info=prepayComments.getText();
	        if (!Utils.isNull(checkNumber.getText())) 
	            billingParent.labRec.payment_type="CHECK";
	        else billingParent.labRec.payment_type="CASH";
	    }
	}

	void checkNumber_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event);
	}

	class SymFocus extends java.awt.event.FocusAdapter
	{
		public void focusLost(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			if (object == paymentAmount)
				paymentAmount_focusLost(event);
		}

		public void focusGained(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			if (object == paymentAmount)
				paymentAmount_focusGained(event);
		}
	}

	void paymentAmount_focusGained(java.awt.event.FocusEvent event)
	{
		try { 
		    int x = ((String)paymentAmount.getText()).length(); 
		    if (((String)paymentAmount.getText()).equals("0.00"))
		        paymentAmount.setText(null);
        }
		catch (Exception e) { dFlag=false; }
	}

	void paymentAmount_keyPressed(java.awt.event.KeyEvent event)
	{
		char key=event.getKeyChar();
		if (key=='\b') {
		    try {
		        int x = ((String)paymentAmount.getText()).length();
		        if (((String)paymentAmount.getText()).charAt(x-1)=='.')
		            dFlag=false;
		    }
		    catch (Exception e) { dFlag=false; }
		}
		else if (key==event.VK_ENTER) {
            if (Utils.required(paymentAmount,"Payment Amount"))
                paymentAmount.transferFocus();
		}
	}

	void paymentAmount_keyTyped(java.awt.event.KeyEvent event)
	{
		forceDigits(event,true);
	}

	void prepayComments_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event);
	}

	void paymentAmount_focusLost(java.awt.event.FocusEvent event)
	{
		try {
		    String buf = (String)paymentAmount.getText();
		    int x = buf.length();
		    int decimalPos=x;
		    for (int i=0;i<x;i++) {
		        if (buf.charAt(i)=='.') {
		            decimalPos=i;
		            break;
		        }
		    }
		    if (x>0) {
		        if (x-decimalPos==0) buf=buf+".00";
		        else if (x-decimalPos==1) buf=buf+"00";
		        else if (x-decimalPos==2) buf=buf+"0";
		    }   else buf="0.00";
		    paymentAmount.setText(buf);
		}
		catch (Exception e) {  }
	}

	void prepayComments_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    event.consume();
		    prepayComments.transferFocus();
		}
	}
	

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowOpened(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == PpdLabDialog.this)
				PpdLabDialog_windowOpened(event);
		}
	}

	void PpdLabDialog_windowOpened(java.awt.event.WindowEvent event)
	{
	    if (formMode==LAB) initForm_lab();
	    else if (formMode==BILLING) initForm_billing();
	}

	void checkNumber_keyPressed(java.awt.event.KeyEvent event)
	{
	    if (event.getKeyCode()==event.VK_ENTER) {
            checkNumber.transferFocus();
	    }
	}
	
}
