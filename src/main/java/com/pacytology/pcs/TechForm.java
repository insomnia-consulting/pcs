package com.pacytology.pcs;

/*
		A basic implementation of the JFrame class.
 */

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;

import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;

import com.pacytology.pcs.ui.PcsFrame;
import com.pacytology.pcs.ui.Square;
import com.pacytology.pcs.utils.StringUtils;

public class TechForm extends PcsFrame {

	public Login tLogin;
	public int MAX_TECHS = 0;
	public TechRec[] cTechRec;
	public TechDbOps techOps;
	public int currNdx = 0;
	/*
	 * final int IDLE=100; final int QUERY=101; final int ADD=102; final int
	 * UPDATE=103; final int DELETE=104;
	 */
	public int currMode = Lab.IDLE;
	protected StringUtils format = new StringUtils();
	public TechTableData tData;
	public JTable techTable;
	public JTableHeader header;
	public JScrollPane tblScrollPane;

	public TechForm() {
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		// {{INIT_CONTROLS
		setTitle("Cytotechnologists");
		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(485, 351);
		setVisible(false);
		ctCode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		ctCode.setEnabled(false);
		getContentPane().add(ctCode);
		ctCode.setFont(new Font("DialogInput", Font.PLAIN, 12));
		ctCode.setBounds(30, 112, 30, 20);
		ctStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		ctStatus.setEnabled(false);
		getContentPane().add(ctStatus);
		ctStatus.setFont(new Font("DialogInput", Font.PLAIN, 12));
		ctStatus.setBounds(66, 112, 20, 20);
		ctLName.setEnabled(false);
		getContentPane().add(ctLName);
		ctLName.setFont(new Font("DialogInput", Font.PLAIN, 12));
		ctLName.setBounds(102, 112, 160, 20);
		ctFName.setEnabled(false);
		getContentPane().add(ctFName);
		ctFName.setFont(new Font("DialogInput", Font.PLAIN, 12));
		ctFName.setBounds(270, 112, 150, 20);
		ctMI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		ctMI.setEnabled(false);
		getContentPane().add(ctMI);
		ctMI.setFont(new Font("DialogInput", Font.PLAIN, 12));
		ctMI.setBounds(432, 112, 20, 20);
		ctCodeLbl.setText("Code");
		getContentPane().add(ctCodeLbl);
		ctCodeLbl.setBounds(30, 96, 30, 12);
		ctLNameLbl.setText("Last");
		getContentPane().add(ctLNameLbl);
		ctLNameLbl.setBounds(102, 96, 48, 12);
		ctFNameLbl.setText("First");
		getContentPane().add(ctFNameLbl);
		ctFNameLbl.setBounds(270, 96, 28, 12);
		getContentPane().add(msgLabel);
		msgLabel.setForeground(java.awt.Color.red);
		msgLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		msgLabel.setBounds(30, 52, 368, 14);
		getContentPane().add(F1sq);
		F1sq.setBounds(35, 6, 20, 20);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F1");
		getContentPane().add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(39, 6, 20, 20);
		getContentPane().add(F2sq);
		F2sq.setBounds(97, 6, 20, 20);
		F2lbl.setRequestFocusEnabled(false);
		F2lbl.setText("F2");
		getContentPane().add(F2lbl);
		F2lbl.setForeground(java.awt.Color.black);
		F2lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F2lbl.setBounds(101, 6, 20, 20);
		getContentPane().add(F3sq);
		F3sq.setBounds(159, 6, 20, 20);
		F3lbl.setRequestFocusEnabled(false);
		F3lbl.setText("F3");
		getContentPane().add(F3lbl);
		F3lbl.setForeground(java.awt.Color.black);
		F3lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F3lbl.setBounds(163, 6, 20, 20);
		getContentPane().add(F4sq);
		F4sq.setBounds(221, 6, 20, 20);
		F4lbl.setRequestFocusEnabled(false);
		F4lbl.setText("F4");
		getContentPane().add(F4lbl);
		F4lbl.setForeground(java.awt.Color.black);
		F4lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F4lbl.setBounds(225, 6, 20, 20);
		getContentPane().add(F5sq);
		F5sq.setBounds(283, 6, 20, 20);
		F9lbl.setRequestFocusEnabled(false);
		F9lbl.setText("F9");
		getContentPane().add(F9lbl);
		F9lbl.setForeground(java.awt.Color.black);
		F9lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F9lbl.setBounds(287, 6, 20, 20);
		getContentPane().add(F12sq);
		F12sq.setBounds(345, 6, 20, 20);
		F12lbl.setRequestFocusEnabled(false);
		F12lbl.setText("F12");
		getContentPane().add(F12lbl);
		F12lbl.setForeground(java.awt.Color.black);
		F12lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F12lbl.setBounds(346, 6, 20, 20);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("Query");
		getContentPane().add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(10, 30, 70, 18);
		F2action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F2action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F2action.setText("Add");
		getContentPane().add(F2action);
		F2action.setForeground(java.awt.Color.black);
		F2action.setBounds(72, 30, 70, 16);
		F3action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F3action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F3action.setText("Update");
		getContentPane().add(F3action);
		F3action.setForeground(java.awt.Color.black);
		F3action.setBounds(134, 30, 70, 16);
		F4action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F4action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F4action.setText("Print");
		getContentPane().add(F4action);
		F4action.setForeground(java.awt.Color.black);
		F4action.setBounds(196, 30, 70, 16);
		F9action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F9action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F9action.setText("Exit");
		getContentPane().add(F9action);
		F9action.setForeground(java.awt.Color.black);
		F9action.setBounds(258, 30, 70, 16);
		F11action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F11action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F11action.setText("Submit");
		getContentPane().add(F11action);
		F11action.setForeground(java.awt.Color.black);
		F11action.setBounds(320, 30, 70, 16);
		miLbl.setText("MI");
		getContentPane().add(miLbl);
		miLbl.setBounds(432, 96, 20, 12);
		statusLbl.setText("ST");
		getContentPane().add(statusLbl);
		statusLbl.setBounds(66, 96, 30, 12);
		printerConfirm.setMessageType(javax.swing.JOptionPane.QUESTION_MESSAGE);
		// $$ printerConfirm.move(0,352);
		// }}

		for (int i = 0; i < MAX_TECHS; i++)
			cTechRec[i] = new TechRec();

		tData = new TechTableData();
		techTable = new JTable();
		techTable.setEnabled(false);
		techTable.setAutoCreateColumnsFromModel(false);
		techTable.setModel(tData);

		for (int k = 0; k < TechTableData.columns.length; k++) {
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setHorizontalAlignment(TechTableData.columns[k].alignment);
			renderer.setFont(TechTableData.columns[k].font);
			TableColumn column = new TableColumn(k,
					TechTableData.columns[k].width, renderer, null);
			techTable.addColumn(column);
		}

		header = techTable.getTableHeader();
		header.setFont(new Font("Dialog", Font.BOLD, 12));

		tblScrollPane = new JScrollPane();
		tblScrollPane.getViewport().add(techTable);
		getContentPane().add(tblScrollPane);
		tblScrollPane.setBounds(30, 140, 440, 200);
		tblScrollPane.setAutoscrolls(true);
		tblScrollPane.setEnabled(false);

		techTable.setFont(new Font("SansSerif", Font.PLAIN, 11));
		techTable.setBounds(0, 0, 397, 197);
		techTable.setRowHeight(12);
		techTable.setCellSelectionEnabled(false);
		techTable.setEnabled(false);

		// {{INIT_MENUS
		// }}

		// {{REGISTER_LISTENERS
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		ctCode.addKeyListener(aSymKey);
		ctLName.addKeyListener(aSymKey);
		ctFName.addKeyListener(aSymKey);
		SymFocus aSymFocus = new SymFocus();
		ctCode.addFocusListener(aSymFocus);
		ctMI.addKeyListener(aSymKey);
		ctStatus.addKeyListener(aSymKey);
		// }}
		setupKeyPressMap();
	}
	protected JRootPane setupKeyPressMap() {
		JRootPane rp = super.setupKeyPressMap();

		rp.getActionMap().put("F8", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				
			}
		});
		return rp;
	}
	public TechForm(String sTitle) {
		this();
		setTitle(sTitle);
	}

	public TechForm(Login tLogin) {
		this();
		this.tLogin = tLogin;
		this.techOps = new TechDbOps(this);
		this.techOps.queryAllTechs();
		this.fillForm(this.currNdx);
		this.displayTable();
		this.displayRow(this.currNdx);
		this.resetColors();
	}

	@Override
	public void setVisible(boolean b) {
		if (b)
			setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[]) {
		(new TechForm()).setVisible(true);
	}

	@Override
	public void addNotify() {
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		Insets insets = getInsets();
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		setSize(insets.left + insets.right + size.width, insets.top
				+ insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	// {{DECLARE_CONTROLS
	javax.swing.JTextField ctCode = new javax.swing.JTextField();
	javax.swing.JTextField ctStatus = new javax.swing.JTextField();
	javax.swing.JTextField ctLName = new javax.swing.JTextField();
	javax.swing.JTextField ctFName = new javax.swing.JTextField();
	javax.swing.JTextField ctMI = new javax.swing.JTextField();
	javax.swing.JLabel ctCodeLbl = new javax.swing.JLabel();
	javax.swing.JLabel ctLNameLbl = new javax.swing.JLabel();
	javax.swing.JLabel ctFNameLbl = new javax.swing.JLabel();
	javax.swing.JLabel msgLabel = new javax.swing.JLabel();
	Square F1sq = new Square();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	Square F2sq = new Square();
	javax.swing.JLabel F2lbl = new javax.swing.JLabel();
	Square F3sq = new Square();
	javax.swing.JLabel F3lbl = new javax.swing.JLabel();
	Square F4sq = new Square();
	javax.swing.JLabel F4lbl = new javax.swing.JLabel();
	Square F5sq = new Square();
	javax.swing.JLabel F9lbl = new javax.swing.JLabel();
	Square F12sq = new Square();
	javax.swing.JLabel F12lbl = new javax.swing.JLabel();
	javax.swing.JLabel F1action = new javax.swing.JLabel();
	javax.swing.JLabel F2action = new javax.swing.JLabel();
	javax.swing.JLabel F3action = new javax.swing.JLabel();
	javax.swing.JLabel F4action = new javax.swing.JLabel();
	javax.swing.JLabel F9action = new javax.swing.JLabel();
	javax.swing.JLabel F11action = new javax.swing.JLabel();
	javax.swing.JLabel miLbl = new javax.swing.JLabel();
	javax.swing.JLabel statusLbl = new javax.swing.JLabel();
	javax.swing.JOptionPane printerConfirm = new javax.swing.JOptionPane();

	// }}

	// {{DECLARE_MENUS
	// }}

	public void fillForm(int ndx) {
		ctCode.setText(cTechRec[ndx].cytotech_code);
		ctStatus.setText(cTechRec[ndx].active_status);
		ctLName.setText(cTechRec[ndx].lname);
		ctFName.setText(cTechRec[ndx].fname);
		ctMI.setText(cTechRec[ndx].mi);
	}

	public void clearForm() {
		ctCode.setText(null);
		ctStatus.setText(null);
		ctLName.setText(null);
		ctFName.setText(null);
		ctMI.setText(null);
	}

	class SymKey extends java.awt.event.KeyAdapter {
		@Override
		public void keyTyped(java.awt.event.KeyEvent event) {
			Object object = event.getSource();
			if (object == ctCode)
				ctCode_keyTyped(event);
			else if (object == ctLName)
				ctLName_keyTyped(event);
			else if (object == ctFName)
				ctFName_keyTyped(event);
			if (object == ctMI)
				ctMI_keyTyped(event);
			if (object == ctStatus)
				ctStatus_keyTyped(event);
		}

		@Override
		public void keyPressed(java.awt.event.KeyEvent event) {
			Object object = event.getSource();
			if (object == TechForm.this)
				TechForm_keyPressed(event);
			else if (object == ctCode)
				ctCode_keyPressed(event);
			else if (object == ctLName)
				ctLName_keyPressed(event);
			else if (object == ctFName)
				ctFName_keyPressed(event);
			if (object == ctMI)
				ctMI_keyPressed(event);
			if (object == ctStatus)
				ctStatus_keyPressed(event);
		}
	}

	void TechForm_keyPressed(java.awt.event.KeyEvent event) {
		int key = event.getKeyCode();
		msgLabel.setText(null);
		switch (key) {
		case KeyEvent.VK_DOWN:
			if (currMode == Lab.IDLE) {
				currNdx++;
				if (currNdx == MAX_TECHS) {
					msgLabel.setText("Bottom of List");
					currNdx--;
				} else {
					fillForm(currNdx);
					displayRow(currNdx);
				}
			}
			break;
		case KeyEvent.VK_UP:
			if (currMode == Lab.IDLE) {
				currNdx--;
				if (currNdx == (-1)) {
					msgLabel.setText("Top of List");
					currNdx++;
				} else {
					fillForm(currNdx);
					displayRow(currNdx);
				}
			}
			break;
		case KeyEvent.VK_F2:
			if (currMode == Lab.IDLE)
				addActions();
			break;
		case KeyEvent.VK_F3:
			if (currMode == Lab.IDLE)
				updateActions();
			break;
		case KeyEvent.VK_F4:
			if (MAX_TECHS > 0) {
				if (verifyPrinter())
					techOps.printTechList();
			}
			break;
		case KeyEvent.VK_F12:
			if ((currMode == Lab.ADD) || (currMode == Lab.UPDATE))
				finalActions();
			break;
		case KeyEvent.VK_ESCAPE:
			currNdx = 0;
			clearForm();
			currMode = Lab.IDLE;
			setEnableAllFields(false);
			msgLabel.requestFocus();
			fillForm(currNdx);
			displayRow(currNdx);
			break;
		case KeyEvent.VK_F1:
			if (currMode == Lab.IDLE)
				queryActions();
			break;
		case KeyEvent.VK_F9:
			if (currMode == Lab.IDLE)
				this.dispose();
			break;
		case KeyEvent.VK_HOME:
			if (currMode == Lab.IDLE) {
				currNdx = 0;
				fillForm(currNdx);
				displayRow(currNdx);
			}
			break;
		case KeyEvent.VK_END:
			if (currMode == Lab.IDLE) {
				currNdx = MAX_TECHS - 1;
				fillForm(currNdx);
				displayRow(currNdx);
			}
			break;
		case KeyEvent.VK_CONTROL:
			((JTextField) getFocusOwner()).setText(null);
			break;
		}
	}

	public void resetTechForm() {
		if (techOps.queryAllTechs()) {
			currNdx = 0;
			clearForm();
			currMode = Lab.IDLE;
			setEnableAllFields(false);
			msgLabel.requestFocus();
			fillForm(currNdx);
			clearTable();
			displayTable();
			displayRow(currNdx);
		}
	}

	public void addActions() {
		clearForm();
		currMode = Lab.ADD;
		setEnableAllFields(true);
		ctCode.requestFocus();
	}

	public void setEnableAllFields(boolean eVal) {
		ctCode.setEnabled(eVal);
		ctStatus.setEnabled(eVal);
		ctLName.setEnabled(eVal);
		ctFName.setEnabled(eVal);
		ctMI.setEnabled(eVal);
	}

	void ctCode_keyTyped(java.awt.event.KeyEvent event) {
		format.forceUpper(event, 3);
	}

	void ctLName_keyTyped(java.awt.event.KeyEvent event) {
		format.forceUpper(event);
	}

	void ctFName_keyTyped(java.awt.event.KeyEvent event) {
		format.forceUpper(event);
	}

	public void finalActions() {
		boolean rv = false;
		String queryCode = ctCode.getText();
		if (currMode == Lab.ADD) {
			for (int i = 0; i < MAX_TECHS; i++) {
				if (cTechRec[i].cytotech_code.compareTo(ctCode.getText()) == 0) {
					String msg = "Cytotech " + ctCode.getText()
							+ " already exists";
					format.createErrMsg(msg);
					return;
				}
			}
			rv = techOps.add();
			if (rv) {
				resetTechForm();
				ctCode.setText(queryCode);
				currMode = Lab.QUERY;
				finalActions();
			}
		} else if (currMode == Lab.UPDATE) {
			rv = techOps.update(cTechRec[currNdx].cytotech);
			if (rv) {
				resetTechForm();
				ctCode.setText(queryCode);
				currMode = Lab.QUERY;
				finalActions();
			}
		} else if (currMode == Lab.QUERY) {
			boolean found = false;
			for (int i = 0; i < MAX_TECHS; i++) {
				if (cTechRec[i].cytotech_code.equals(queryCode)) {
					currNdx = i;
					found = true;
					break;
				}
			}
			setEnableAllFields(false);
			msgLabel.requestFocus();
			currMode = Lab.IDLE;
			fillForm(currNdx);
			displayRow(currNdx);
			if (!found)
				format.createErrMsg("Cytotech " + queryCode + " does not exist");
		}

	}

	public void queryActions() {
		currMode = Lab.QUERY;
		setEnableAllFields(false);
		clearForm();
		ctCode.setEnabled(true);
		ctCode.requestFocus();
	}

	class SymFocus extends java.awt.event.FocusAdapter {
		@Override
		public void focusGained(java.awt.event.FocusEvent event) {
			Object object = event.getSource();
			if (object == ctCode)
				ctCode_focusGained(event);
		}
	}

	void ctCode_focusGained(java.awt.event.FocusEvent event) {
	}

	public void createErrMsg(String msg) {
		(new ErrorDialog(msg)).setVisible(true);
	}

	public void updateActions() {
		currMode = Lab.UPDATE;
		setEnableAllFields(true);
		ctCode.setEnabled(false);
		ctStatus.requestFocus();
	}

	void ctMI_keyTyped(java.awt.event.KeyEvent event) {
		format.forceUpper(event, 1);
	}

	void ctCode_keyPressed(java.awt.event.KeyEvent event) {
		if (event.getKeyCode() == KeyEvent.VK_ENTER) {
			if (format.required(ctCode, "CytoTech Code")) {
				if (currMode == Lab.QUERY)
					finalActions();
				else
					ctCode.transferFocus();
			}
		}
	}

	void ctLName_keyPressed(java.awt.event.KeyEvent event) {
		if (event.getKeyCode() == KeyEvent.VK_ENTER) {
			if (format.required(ctLName, "Last Name"))
				ctLName.transferFocus();
		}
	}

	void ctFName_keyPressed(java.awt.event.KeyEvent event) {
		if (event.getKeyCode() == KeyEvent.VK_ENTER) {
			if (format.required(ctFName, "First Name"))
				ctFName.transferFocus();
		}
	}

	void ctMI_keyPressed(java.awt.event.KeyEvent event) {
		if (event.getKeyCode() == KeyEvent.VK_ENTER)
			ctMI.transferFocus();
	}

	void ctStatus_keyPressed(java.awt.event.KeyEvent event) {
		if (event.getKeyCode() == KeyEvent.VK_ENTER) {
			if (format.required(ctStatus, "Active Status")) {
				if (!ctStatus.getText().equals("A")
						&& !ctStatus.getText().equals("I"))
					format.createErrMsg("Status is (A)ctive or (I)nactive");
				else
					ctStatus.transferFocus();
			}
		}
	}

	void ctStatus_keyTyped(java.awt.event.KeyEvent event) {
		format.forceUpper(event, 1);
	}

	public void displayTable() {
		if (tData.getRowCount() == 0) {
			for (int ndx = 0; ndx < MAX_TECHS; ndx++) {
				tData.addRow(cTechRec[ndx].cytotech_code,
						cTechRec[ndx].active_status, cTechRec[ndx].lname,
						cTechRec[ndx].fname, cTechRec[ndx].mi);
			}
		}
	}

	void clearTable() {
		tData.removeAllRows();
		techTable.selectAll();
		techTable.clearSelection();
		techTable.revalidate();
		techTable.repaint();
	}

	void displayRow(int ndx) {
		techTable.clearSelection();
		techTable.addRowSelectionInterval(ndx, ndx);
		techTable.scrollRectToVisible(techTable.getCellRect(ndx, 0, true));
	}

	boolean verifyPrinter() {
		boolean status = false;
		int rv = JOptionPane.showConfirmDialog(this,
				"Make sure printer is ready. \nPrint list now?",
				this.getTitle(), JOptionPane.YES_NO_OPTION,
				JOptionPane.QUESTION_MESSAGE);
		if (rv == JOptionPane.YES_OPTION) {
			status = true;
		}
		return (status);
	}

	void resetColors() {
		format.setColors(this.getContentPane());
		ctCodeLbl.setForeground(Color.white);
		statusLbl.setForeground(Color.white);
		ctLNameLbl.setForeground(Color.white);
		// ctFNameLbl.setForeground(Color.white):
		ctFNameLbl.setForeground(Color.white);
		miLbl.setForeground(Color.white);
	}
	@Override
	public void resetActions() {
		// TODO Auto-generated method stub
		
	}

}
