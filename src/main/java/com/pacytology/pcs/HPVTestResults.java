package com.pacytology.pcs;

/*
    PENNSYLVANIA CYTOLOGY SERVICES
    LABORATORY INFORMATION SYSTEM V1.0
    Copyright (C) 2001 by John Cardella
    All Rights Reserved
    
    File:       HPVTestDialog.java
    Created By: John Cardella, Software Engineer
    
    Function:   Data entry form for batch input of HPV test data.
    
    MODIFICATIONS --------------------------------------------------------------------
    Date          Description:
*/

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;

import javax.swing.*;

import com.pacytology.pcs.ui.Square;
import java.sql.*;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;

public class HPVTestResults extends javax.swing.JDialog
{
    int lab_number = 0;
    String test_results = null;
    String results_received = null;
    int cytotech = -1;
    int results_added = 0;
    boolean needsVerified = true;
    boolean setLocks = false;
    int currMode = Lab.IDLE;
    int cytopathMode = Lab.NO_PRINT;
    
    /* This array is used to keep track of which fields are
       actively enabled; used to determine when to submit
       new data to the database
    */
    boolean submitField[] = new boolean[4];
    final int NOT_SET = -1;
    final int LAB_NUMBER = 0;
    final int TEST_RESULTS = 1;
    final int RESULTS_RECEIVED = 2;
    final int CYTOTECH = 3;
    
	public HPVTestResults(Frame parent)
	{
		super(parent);
		
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("HPV Test Result Input");
		setResizable(false);
		getContentPane().setLayout(null);
		setSize(276,313);
		setVisible(false);
		JLabel2.setRequestFocusEnabled(false);
		JLabel2.setText("HPV Test Results");
		getContentPane().add(JLabel2);
		JLabel2.setBounds(20,190,100,14);
		JLabel4.setRequestFocusEnabled(false);
		JLabel4.setText("Lab Number");
		getContentPane().add(JLabel4);
		JLabel4.setBounds(20,100,80,12);
		labNumber.setEnabled(false);
		getContentPane().add(labNumber);
		labNumber.setFont(new Font("DialogInput", Font.PLAIN, 12));
		labNumber.setBounds(98,98,90,20);
		hpvResults.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		getContentPane().add(hpvResults);
		hpvResults.setFont(new Font("DialogInput", Font.PLAIN, 12));
		hpvResults.setBounds(144,188,20,20);
		getContentPane().add(F1sq);
		F1sq.setBounds(25,6,20,20);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F1");
		getContentPane().add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(29,6,20,20);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("Query");
		getContentPane().add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(10,30,50,16);
		message.setRequestFocusEnabled(false);
		message.setText("HPV Results Input");
		getContentPane().add(message);
		message.setBounds(20,60,256,14);
		patientName.setRequestFocusEnabled(false);
		patientName.setText("Patient Name");
		getContentPane().add(patientName);
		patientName.setFont(new Font("Dialog", Font.BOLD, 16));
		patientName.setBounds(20,124,250,20);
		hpvCompletedLbl.setText("Date Completed");
		getContentPane().add(hpvCompletedLbl);
		hpvCompletedLbl.setBounds(20,218,90,12);
		hpvCompleted.setEnabled(false);
		getContentPane().add(hpvCompleted);
		hpvCompleted.setFont(new Font("DialogInput", Font.PLAIN, 12));
		hpvCompleted.setBounds(144,216,76,20);
		CytoTechLbl.setText("Cytotechnologist");
		getContentPane().add(CytoTechLbl);
		CytoTechLbl.setBounds(20,246,100,16);
		hpvCytoTech.setEnabled(false);
		getContentPane().add(hpvCytoTech);
		hpvCytoTech.setFont(new Font("DialogInput", Font.PLAIN, 12));
		hpvCytoTech.setBounds(144,244,76,20);
		lockPanel.setBorder(lockPanelBorder);
		lockPanel.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		getContentPane().add(lockPanel);
		lockPanel.setBounds(220,162,44,112);
		resultLock.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		resultLock.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		lockPanel.add(resultLock);
		resultLock.setBounds(11,26,23,23);
		dateLock.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		dateLock.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		dateLock.setActionCommand("jcheckBox");
		lockPanel.add(dateLock);
		dateLock.setBounds(11,54,23,23);
		techLock.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		techLock.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		techLock.setActionCommand("jcheckBox");
		lockPanel.add(techLock);
		techLock.setBounds(11,82,23,23);
		lockPanelBorder.setTitleFont(new java.awt.Font("Dialog", java.awt.Font.BOLD, 12));
		lockPanelBorder.setTitle("Lock");
		//$$ lockPanelBorder.move(24,391);
		//$$ titledBorder1.move(24,391);
		getContentPane().add(F2sq);
		F2sq.setBounds(77,6,20,20);
		F2lbl.setRequestFocusEnabled(false);
		F2lbl.setText("F2");
		getContentPane().add(F2lbl);
		F2lbl.setForeground(java.awt.Color.black);
		F2lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F2lbl.setBounds(81,6,20,20);
		getContentPane().add(F3sq);
		F3sq.setBounds(129,6,20,20);
		F3lbl.setRequestFocusEnabled(false);
		F3lbl.setText("F3");
		getContentPane().add(F3lbl);
		F3lbl.setForeground(java.awt.Color.black);
		F3lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F3lbl.setBounds(133,6,20,20);
		getContentPane().add(F4sq);
		F4sq.setBounds(181,6,20,20);
		F4lbl.setRequestFocusEnabled(false);
		F4lbl.setText("F4");
		getContentPane().add(F4lbl);
		F4lbl.setForeground(java.awt.Color.black);
		F4lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F4lbl.setBounds(185,6,25,18);
		F2action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F2action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F2action.setText("Add");
		getContentPane().add(F2action);
		F2action.setForeground(java.awt.Color.black);
		F2action.setBounds(62,30,50,16);
		F3action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F3action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F3action.setText("Update");
		getContentPane().add(F3action);
		F3action.setForeground(java.awt.Color.black);
		F3action.setBounds(114,30,50,16);
		F4action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F4action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F4action.setText("Lock");
		getContentPane().add(F4action);
		F4action.setForeground(java.awt.Color.black);
		F4action.setBounds(166,30,50,16);
		getContentPane().add(F6sq);
		F6sq.setBounds(233,6,20,20);
		F6lbl.setRequestFocusEnabled(false);
		F6lbl.setText("F9");
		getContentPane().add(F6lbl);
		F6lbl.setForeground(java.awt.Color.black);
		F6lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F6lbl.setBounds(238,6,20,20);
		F6action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F6action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F6action.setText("Exit");
		getContentPane().add(F6action);
		F6action.setForeground(java.awt.Color.black);
		F6action.setBounds(218,30,50,16);
		addLbl.setRequestFocusEnabled(false);
		addLbl.setText("HPV Results Entered:");
		getContentPane().add(addLbl);
		addLbl.setFont(new Font("Dialog", Font.BOLD, 11));
		addLbl.setBounds(120,288,120,14);
		resultsAdded.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		resultsAdded.setEnabled(false);
		getContentPane().add(resultsAdded);
		resultsAdded.setFont(new Font("MonoSpaced", Font.PLAIN, 10));
		resultsAdded.setBounds(242,288,20,16);
		//}}
		
		resetColors();
		resetForm();
	
		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		hpvResults.addKeyListener(aSymKey);
		hpvCompleted.addKeyListener(aSymKey);
		labNumber.addKeyListener(aSymKey);
		hpvCytoTech.addKeyListener(aSymKey);
		SymAction lSymAction = new SymAction();
		resultLock.addActionListener(lSymAction);
		dateLock.addActionListener(lSymAction);
		techLock.addActionListener(lSymAction);
		//}}
		setupKeyPressMap();
		
	}
	protected JRootPane setupKeyPressMap() {
		JRootPane rp = getRootPane();

		KeyStroke f2 = KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0, false);
		KeyStroke f4 = KeyStroke.getKeyStroke(KeyEvent.VK_F4, 0, false);
		KeyStroke f9 = KeyStroke.getKeyStroke(KeyEvent.VK_F9, 0, false);
		KeyStroke esc = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0, false);		
		rp.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(f2, "F2");
		rp.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(f4, "F4");
		rp.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(f9, "F9");
		rp.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(esc, "ESC");
		rp.getActionMap().put("F2", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				 if (!setLocks) addActions();
			}
		});
		rp.getActionMap().put("F4", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				if (setLocks) {
			        if (verifyLocks()) { 
	                    if (initializeLockedFields()) {
			                setLocks=false;
			                message.setText(null);
			                lockPanel.requestFocus();
			            }
			            else resetForm();
			        }
			        else resetForm();
			    }
			    else {
			        setLocks=true;
			        lockFields();
			    }
			}
		});
		rp.getActionMap().put("F9", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				HPVTestResults.this.dispose();
			}
		});
		rp.getActionMap().put("ESC", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				HPVTestResults.this.resetForm();
			}
		});
		
		return rp;
	}
	public HPVTestResults()
	{
		this((Frame)null);
	}

	public HPVTestResults(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

	public void setVisible(boolean b)
	{
		if (b) setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new HPVTestResults()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
	javax.swing.JTextField labNumber = new javax.swing.JTextField();
	javax.swing.JTextField hpvResults = new javax.swing.JTextField();
	Square F1sq = new Square();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	javax.swing.JLabel F1action = new javax.swing.JLabel();
	javax.swing.JLabel message = new javax.swing.JLabel();
	javax.swing.JLabel patientName = new javax.swing.JLabel();
	javax.swing.JLabel hpvCompletedLbl = new javax.swing.JLabel();
	javax.swing.JTextField hpvCompleted = new javax.swing.JTextField();
	javax.swing.JLabel CytoTechLbl = new javax.swing.JLabel();
	javax.swing.JTextField hpvCytoTech = new javax.swing.JTextField();
	javax.swing.JPanel lockPanel = new javax.swing.JPanel();
	javax.swing.JCheckBox resultLock = new javax.swing.JCheckBox();
	javax.swing.JCheckBox dateLock = new javax.swing.JCheckBox();
	javax.swing.JCheckBox techLock = new javax.swing.JCheckBox();
	javax.swing.border.TitledBorder lockPanelBorder = new javax.swing.border.TitledBorder("");
	Square F2sq = new Square();
	javax.swing.JLabel F2lbl = new javax.swing.JLabel();
	Square F3sq = new Square();
	javax.swing.JLabel F3lbl = new javax.swing.JLabel();
	Square F4sq = new Square();
	javax.swing.JLabel F4lbl = new javax.swing.JLabel();
	javax.swing.JLabel F2action = new javax.swing.JLabel();
	javax.swing.JLabel F3action = new javax.swing.JLabel();
	javax.swing.JLabel F4action = new javax.swing.JLabel();
	Square F6sq = new Square();
	javax.swing.JLabel F6lbl = new javax.swing.JLabel();
	javax.swing.JLabel F6action = new javax.swing.JLabel();
	javax.swing.JLabel addLbl = new javax.swing.JLabel();
	javax.swing.JTextField resultsAdded = new javax.swing.JTextField();
	//}}

	void resetColors()
	{
	    Utils.setColors(this.getContentPane());
	    patientName.setFont(new Font("Dialog",Font.BOLD,16));
	    patientName.setForeground(Color.green.brighter());
	    lockPanelBorder.setTitleColor(Color.white);
	    message.setForeground(Color.green.brighter());
	    patientName.setForeground(Color.yellow);
	}



	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowOpened(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == HPVTestResults.this)
				HPVTestResults_windowOpened(event);
		}
	}

	void HPVTestResults_windowOpened(java.awt.event.WindowEvent event)
	{
		resetForm();
	}
	
	void resetForm()
	{
	    currMode=Lab.IDLE;
	    cytopathMode=Lab.NO_PRINT;
	    hpvResults.setEnabled(false);
	    hpvCompleted.setEnabled(false);
	    hpvCytoTech.setEnabled(false);
	    labNumber.setEnabled(false);
	    hpvResults.setText(null);
	    hpvCompleted.setText(null);
	    hpvCytoTech.setText(null);
	    labNumber.setText(null);
	    patientName.setText(null);
	    resultLock.setSelected(false);
	    resultLock.setEnabled(false);
	    dateLock.setSelected(false);
	    dateLock.setEnabled(false);
	    techLock.setSelected(false);
	    techLock.setEnabled(false);
	    setLocks=false;
	    needsVerified=true;
        lab_number=0;
        test_results=null;
        results_received=null;
        cytotech=(-1);
	    resetSubmitField();
	    resultsAdded.setText("0");
	    results_added=0;
	    message.setText("HPV Results Input");
	    lockPanel.requestFocus();
	}

	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == hpvCompleted)
				hpvCompleted_keyTyped(event);
			else if (object == labNumber)
				labNumber_keyTyped(event);
			else if (object == hpvCytoTech)
				hpvCytoTech_keyTyped(event);
			else if (object == hpvResults)
				hpvResults_keyTyped(event);
		}

		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == hpvResults)
				hpvResults_keyPressed(event);
			else if (object == hpvCompleted)
				hpvCompleted_keyPressed(event);
			else if (object == labNumber)
				labNumber_keyPressed(event);
			else if (object == hpvCytoTech)
				hpvCytoTech_keyPressed(event);
		}
	}


	
	boolean initializeLockedFields()
	{
	    boolean canProceed = true;
	    if (resultLock.isSelected()) canProceed=setResult();
	    if (dateLock.isSelected()) canProceed=setCompleted();
	    if (techLock.isSelected()) canProceed=setCytotech();
	    return(canProceed);
	}
	
	void addActions()
	{
	    if (currMode==Lab.ADD) resetForm();
	    else {
	        currMode=Lab.ADD;
	        hpvResults.setEnabled(!resultLock.isSelected());
	        hpvCompleted.setEnabled(!dateLock.isSelected());
	        hpvCytoTech.setEnabled(!techLock.isSelected());
	        setSubmitField();
	        labNumber.setEnabled(true);
	        labNumber.requestFocus();
	    }
	}
	
	void finalActions()
	{
	    boolean trxStatus = false;
	    if (currMode==Lab.ADD) {
	        trxStatus=updateHPV();
	        if (trxStatus) {
	            resultsAdded.setText(Integer.toString(++results_added));
	            addCost();
	            if (cytotech!=Lab.HPV) insertPrintQueue();
	            if (cytopathMode==Lab.HOLD_HPV) releaseCytopathReport();
	            reinitializeVariables();
	            labNumber.requestFocus();
	        }
	        else resetForm();
	    }
	}
	
	void reinitializeVariables()
	{
	    lab_number=0;
	    cytopathMode=Lab.NO_PRINT;
	    labNumber.setText(null);
	    patientName.setText(null);
	    if (!resultLock.isSelected()) {
	        test_results=null;
	        hpvResults.setText(null);
	    }
	    if (!dateLock.isSelected()) {
	        results_received=null;
	        hpvCompleted.setText(null);
	    }
	    if (!techLock.isSelected()) {
	        cytotech=(-1);
	        hpvCytoTech.setText(null);
	    }
	}
	
	void resetSubmitField()
	{
	    submitField[LAB_NUMBER]=
	    submitField[TEST_RESULTS]=
	    submitField[RESULTS_RECEIVED]=
	    submitField[CYTOTECH]=false;
	}
	
	void setSubmitField()
	{
	    resetSubmitField();
	    if (!techLock.isSelected()) submitField[CYTOTECH]=true;
	    else if (!dateLock.isSelected()) submitField[RESULTS_RECEIVED]=true;
	    else if (!resultLock.isSelected()) submitField[TEST_RESULTS]=true;
	    else submitField[LAB_NUMBER]=true;
	    
	}
	
	int getSubmitField()
	{
	    int sField = NOT_SET;
	    if (submitField[LAB_NUMBER]) sField=LAB_NUMBER;
	    else if (submitField[TEST_RESULTS]) sField=TEST_RESULTS;
	    else if (submitField[RESULTS_RECEIVED]) sField=RESULTS_RECEIVED;
	    else if (submitField[CYTOTECH]) sField=CYTOTECH;
	    return (sField);
	}
	
	boolean verifyLocks() 
	{
	    boolean status = false;
	    if (resultLock.isSelected()) {
	        if (Utils.isNull(hpvResults.getText())) {
	            Utils.createErrMsg("Result MUST have value to be locked!");
	            status=false;
	        }
	        else {
	            status=true;
	            hpvResults.setEnabled(false);
	        }
	    }
	    else {
	        hpvResults.setText(null);
	        status=true;
	    }
	    if (status) {
	        if (dateLock.isSelected()) {
	            if (Utils.isNull(hpvCompleted.getText())) {
	                Utils.createErrMsg("Date Completed MUST have value to be locked!");
	                status=false;
	            }
	            else {
	                status=true;
	                hpvCompleted.setEnabled(false);
	            }
	        }
	        else {
	            hpvCompleted.setText(null);
	            status=true;
	        }
	    }
	    if (status) {
	        if (techLock.isSelected()) {
	            if (Utils.isNull(hpvCytoTech.getText())) {
	                Utils.createErrMsg("Cytotech MUST have value to be locked!");
	                status=false;
	            }
	            else {
	                status=true;
	                hpvCytoTech.setEnabled(false);
	            }
	        }
	        else {
	            hpvCytoTech.setText(null);
	            status=true;
	        }
	    }
	    if (status) {
	        resultLock.setEnabled(false);
	        dateLock.setEnabled(false);
	        techLock.setEnabled(false);
	    }
	    return(status);
	}
	
	void lockFields() 
	{
	    message.setText("LOCK MODE");
        hpvResults.setEnabled(true);
        hpvCompleted.setEnabled(true);
        hpvCytoTech.setEnabled(true);
        resultLock.setEnabled(true);
        dateLock.setEnabled(true);
        techLock.setEnabled(true);
        hpvResults.requestFocus();
	}

	void hpvResults_keyPressed(java.awt.event.KeyEvent event)
	{
	    boolean canProceed = false;
        if (event.getKeyCode()==event.VK_ENTER) {
            if (!Utils.isNull(hpvResults.getText())) {
                canProceed=setResult();
            }
            else {
                if (setLocks) canProceed=true;
                else canProceed=Utils.required(hpvResults,"Must enter valid HPV result!");
            }
            if (canProceed) {
                if (setLocks) { 
		            if (hpvCompleted.isEnabled()) hpvCompleted.requestFocus();
		            else if (hpvCytoTech.isEnabled()) hpvCytoTech.requestFocus();
		            else if (hpvResults.isEnabled()) hpvResults.requestFocus();
                    else {
		                if (verifyLocks()) { 
		                    setLocks=false;
		                    message.setText(null);
		                    lockPanel.requestFocus();
		                }
		                else {
		                    resetForm();
		                    setLocks=true;
		                    lockFields();
		                }
                    }
                }
                else { 
		            if (submitField[TEST_RESULTS]) {
                        finalActions();		                
		            }
		            else hpvResults.transferFocus();
                }
            }
            else {
                hpvResults.setText(null);
                hpvResults.requestFocus();
            }
		}
	}

	void hpvCompleted_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.buildDateMask(event);
	}

	void hpvCompleted_keyPressed(java.awt.event.KeyEvent event)
	{
	    boolean canProceed = false;
        if (event.getKeyCode()==event.VK_ENTER) {
            if (!Utils.isNull(hpvCompleted.getText())) {
                canProceed=setCompleted();
            }
            else {
                if (setLocks) canProceed=true;
                else canProceed=Utils.required(hpvCompleted,"Must enter valid date!");
            }
            if (canProceed) {
                if (setLocks) {
                    if (hpvCytoTech.isEnabled()) hpvCytoTech.requestFocus();
                    else if (hpvResults.isEnabled()) hpvResults.requestFocus();
                    else if (hpvCompleted.isEnabled()) hpvCompleted.requestFocus();
                    else {
		                if (verifyLocks()) { 
		                    setLocks=false;
		                    message.setText(null);
		                    lockPanel.requestFocus();
		                }
		                else {
		                    resetForm();
		                    setLocks=true;
		                    lockFields();
		                }
                    }
                }
                else {
                    if (submitField[RESULTS_RECEIVED]) {
                        finalActions();                        
                    }
                    else hpvCompleted.transferFocus();
                }
            }
            else {
                hpvCompleted.setText(null);
                hpvCompleted.requestFocus();
            }
		}
	}

	void labNumber_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event,10);
	}

	void labNumber_keyPressed(java.awt.event.KeyEvent event)
	{
        if (event.getKeyCode()==event.VK_ENTER) {
	        if (Utils.required(labNumber,"Lab Number")) {
                lab_number=(int)Integer.parseInt(labNumber.getText());
                String p = null;
	            if (currMode==Lab.ADD) {
	                if (needsVerified) {
	                    if (Utils.isNull(patientName.getText()))
	                        p = Utils.getPatientName(lab_number);
	                    if (!Utils.isNull(p)) {
	                        patientName.setText(p);
	                        if (!verifyData(lab_number)) {
	                            patientName.setText(null);
	                            labNumber.setText(null);
	                            labNumber.requestFocus();
	                        }
	                        else {
	                            needsVerified=false;
	                        }
	                    }
	                    else Utils.createErrMsg("Patient not located!");
	                }
	                else {
	                    needsVerified=true;
	                    if (submitField[LAB_NUMBER]) {
                            finalActions();
	                    }
	                    else {
	                        labNumber.transferFocus();
	                    }
	                }
	            }
	            else Utils.createErrMsg("Cannot ADD data!");
	        }
        }
	}
	
	boolean verifyData(int lab_number)
	{
	    PreparedStatement pstmt = null;
	    String sent = null;
	    String results = null;
	    int rcnt = 0;
	    boolean dataVerified = true;
	    String errMsg = null;
	    cytopathMode=Lab.NO_PRINT;
	    try {
	        String SQL =
                "SELECT H.test_sent,H.test_results,NVL(C.first_print,0) \n"+
                "FROM pcs.hpv_requests H, pcs.cytopath_print_queue C \n"+
                "WHERE H.lab_number=C.lab_number(+) \n"+
                "AND H.lab_number = ? \n";
	        pstmt = DbConnection.process().prepareStatement(SQL); 
	        pstmt.setInt(1,lab_number);
	        ResultSet rs = pstmt.executeQuery();
	        while (rs.next()) {
	            sent=rs.getString(1);
	            results=rs.getString(2);
	            cytopathMode=rs.getInt(3);
	            rcnt++;
	        }
	        pstmt.close(); rs.close();
	        if (Utils.isNull(sent)||rcnt==0) {
	            dataVerified=false;
	            errMsg="HPV record not located!";
	        }
	        else if (sent.equals("Q")) {
	            dataVerified=false;
	            errMsg="HPV results already entered as (Q)!";
	        }
	        else if (!Utils.isNull(results)) {
	            dataVerified=false;
	            errMsg="HPV results already entered as ("+results+")";
	        }
	    }
	    catch (SQLException e) { System.out.println(e.toString()); }
	    catch (Exception e) { System.out.println(e); }
	    if (!dataVerified) Utils.createErrMsg(errMsg);
	    return (dataVerified);
	}
	
	boolean insertPrintQueue()
	{
	    boolean trxStatus = true;
	    PreparedStatement pstmt = null;
	    try {
	        String SQL =
                "insert into pcs.hpv_print_queue (lab_number,first_print) \n"+
                "values (?,?) \n";
	        pstmt = DbConnection.process().prepareStatement(SQL); 
	        pstmt.setInt(1,lab_number);
	        pstmt.setInt(2,Lab.CURR_FINAL);
	        pstmt.executeUpdate();
	        pstmt.close(); 
	    }
	    catch (SQLException e) { 
	        Utils.createErrMsg("insert[1]: "+e.toString());
	        trxStatus=false;
	    }
	    catch (Exception e) { 
	        Utils.createErrMsg("insert[2]: "+e.toString());
	        trxStatus=false;
	    }
	    return(trxStatus);
	}

	boolean releaseCytopathReport()
	{
	    boolean trxStatus = true;
	    PreparedStatement pstmt = null;
	    try {
	        String SQL =
                "UPDATE pcs.cytopath_print_queue \n"+
                "SET first_print = ? \n"+
                "WHERE lab_number = ? \n";
	        pstmt = DbConnection.process().prepareStatement(SQL); 
	        pstmt.setInt(1,Lab.CURR_HPV);
	        pstmt.setInt(2,lab_number);
	        pstmt.executeUpdate();
	        pstmt.close(); 
	    }
	    catch (SQLException e) { 
	        Utils.createErrMsg("releaseCytopath[1]: "+e.toString());
	        trxStatus=false;
	    }
	    catch (Exception e) { 
	        Utils.createErrMsg("releaseCytopath[2]: "+e.toString());
	        trxStatus=false;
	    }
	    return(trxStatus);
	}

	boolean updateHPV()
	{
	    boolean trxStatus = true;
	    PreparedStatement pstmt = null;
	    String hpv_lab = null;
	    try {
	        String test_sent = "Y";
	        String actual_results = test_results;
	        if (test_results.equals("Q")) {
	            test_sent="Q";
	            actual_results=null;
	        }
	        if (cytotech==Lab.HPV) hpv_lab="CLEARPATH";
	        else hpv_lab="PCS";
	        String SQL =
                "update pcs.hpv_requests set \n"+
                "   test_sent = ?, \n"+
                "   test_results = ?, \n"+
                "   results_received = TO_DATE(?,'MMDDYYYY'), \n"+
                "   cytotech = ?, \n"+
                "   hpv_lab = ? \n"+
                "where lab_number = ? \n";
	        pstmt = DbConnection.process().prepareStatement(SQL); 
	        pstmt.setString(1,test_sent);
	        pstmt.setString(2,actual_results);
	        pstmt.setString(3,results_received);
	        pstmt.setInt(4,cytotech);
	        pstmt.setString(5,hpv_lab);
	        pstmt.setInt(6,lab_number);
	        pstmt.executeUpdate();
	        pstmt.close(); 
	    }
	    catch (SQLException e) { 
	        Utils.createErrMsg("update[1]: "+e.toString());
	        trxStatus=false;
	    }
	    catch (Exception e) { 
	        Utils.createErrMsg("update[2]: "+e.toString());
	        trxStatus=false;
	    }
	    return(trxStatus);
	}
	
    public boolean addCost()  {
        boolean trxStatus=true;
        try  {
            CallableStatement cstmt;
	        cstmt=DbConnection.process().prepareCall(
	            "{call pcs.calculate_cost(?)}");
            cstmt.setInt(1,lab_number);
            cstmt.executeUpdate();
            try { cstmt.close(); }
            catch (SQLException e) { 
                Utils.createErrMsg("HPV[1] updated BUT cost not calculated: "+e.toString());
                trxStatus=false; 
            }      
            catch (Exception e) {
                Utils.createErrMsg("HPV[2] updated BUT cost not calculated: "+e.toString());
                trxStatus=false; 
            }
	        cstmt=DbConnection.process().prepareCall(
	            "{call pcs.calculate_rebill(?)}");
            cstmt.setInt(1,lab_number);
            cstmt.executeUpdate();
            try { cstmt.close(); }
            catch (SQLException e) { 
                Utils.createErrMsg("HPV[3] cost calculated BUT no rebill check: "+e.toString());
                trxStatus=false; 
            }      
            catch (Exception e) {
                Utils.createErrMsg("HPV[4] cost calculated BUT no rebill check: "+e.toString());
                trxStatus=false; 
            }
        }
        catch (SQLException e) {
            Utils.createErrMsg("HPV[5] updated BUT cost not calculated: "+e.toString());
            trxStatus=false;
        }
        catch( Exception e ) {
            Utils.createErrMsg("HPV[6] updated BUT cost not calculated: "+e.toString());
            trxStatus=false;
        }
        return(trxStatus);            
    }        

	void hpvCytoTech_keyPressed(java.awt.event.KeyEvent event)
	{
	    boolean canProceed = false;
        if (event.getKeyCode()==event.VK_ENTER) {
            if (!Utils.isNull(hpvCytoTech.getText())) {
                canProceed=setCytotech();
            }
            else {
                if (setLocks) canProceed=true;
                else canProceed=Utils.required(hpvCytoTech,"Must enter valid Tech initials!");
            }
            if (canProceed) {
                if (setLocks) {
                    if (hpvResults.isEnabled()) hpvResults.requestFocus();
                    else if (hpvCompleted.isEnabled()) hpvCompleted.requestFocus();
                    else if (hpvCytoTech.isEnabled()) hpvCytoTech.requestFocus();
                    else {
		                if (verifyLocks()) { 
		                    setLocks=false;
		                    message.setText(null);
		                    lockPanel.requestFocus();
		                }
		                else {
		                    resetForm();
		                    setLocks=true;
		                    lockFields();
		                }
                    }
                }
                else {
                    if (submitField[CYTOTECH]) {
                        finalActions();                        
                    }
                    else hpvCytoTech.transferFocus();
                }
            }
            else {
                hpvCytoTech.setText(null);
                hpvCytoTech.requestFocus();
            }
		}
	}

	void hpvCytoTech_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,3);
	}

	void hpvResults_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,1);
	}
	
	boolean setResult()
	{
	    boolean verified=false;
		String s = hpvResults.getText();
		if (!Utils.isNull(s)) {
		    verified=true;
		    if (s.equals("+")) test_results="+";
		    else if (s.equals("-")) test_results="-";
		    else if (s.equals("Q")) test_results="Q";
		    else {
		        Utils.createErrMsg("Valid results are +, -, or Q");
		        test_results=null;
		        verified=false;
		    }
		}
		return(verified);
	}
	
	boolean setCompleted()
	{
	    boolean verified=false;
	    if (!Utils.isNull(hpvCompleted.getText())) {
	        verified=true;
	        if (Utils.dateVerify(hpvCompleted)) {
	            results_received=Utils.stripDateMask(hpvCompleted.getText());
	        }
	        else {
	            results_received=null;
	            verified=false;
	        }
	    }
	    return(verified);
	}
	
	boolean setCytotech()
	{
	    boolean verified=false;
	    if (!Utils.isNull(hpvCytoTech.getText())) {
	        verified=true;
		    cytotech=Utils.getCytotech(hpvCytoTech.getText());
	        if (cytotech<0) {
	            verified=false;
	            Utils.createErrMsg("Invalid Tech initials entered!");
	        }
	    }
	    return(verified);
	}
	

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == resultLock)
				resultLock_actionPerformed(event);
			else if (object == dateLock)
				dateLock_actionPerformed(event);
			else if (object == techLock)
				techLock_actionPerformed(event);
		}
	}

	void resultLock_actionPerformed(java.awt.event.ActionEvent event)
	{
		if (resultLock.isSelected()) {
		    if (Utils.isNull(hpvResults.getText())) {
	            Utils.createErrMsg("Result MUST have value to be locked!");
	            hpvResults.setEnabled(true);
	            hpvResults.requestFocus();
		    }
		}
	}

	void dateLock_actionPerformed(java.awt.event.ActionEvent event)
	{
		if (dateLock.isSelected()) {
		    if (Utils.isNull(hpvCompleted.getText())) {
	            Utils.createErrMsg("Date Completed MUST have value to be locked!");
	            hpvCompleted.setEnabled(true);
	            hpvCompleted.requestFocus();
		    }
		}
	}

	void techLock_actionPerformed(java.awt.event.ActionEvent event)
	{
		if (techLock.isSelected()) {
		    if (Utils.isNull(hpvCytoTech.getText())) {
	            Utils.createErrMsg("CytoTech MUST have value to be locked!");
	            hpvCytoTech.setEnabled(true);
	            hpvCytoTech.requestFocus();
		    }
		}
	}
	
}
