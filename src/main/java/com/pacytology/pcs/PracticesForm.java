package com.pacytology.pcs;

/*
    PENNSYLVANIA CYTOLOGY SERVICES
    LABORATORY INFORMATION SYSTEM V1.0
    Copyright (C) 2001 by John Cardella
    All Rights Reserved
    
    File:       PracticesForm.java
    Created By: John Cardella, Software Engineer
    
    Function:   Data entry form for practices.
    
    MODIFICATIONS ----------------------------------------------------------------
    Date/Staff:   Description:
    12/09/2009    Field on form pStatements being "recycled"; no longer will
                  link to Oracle field practices.statement_copies as this is
                  an obsolete field (will still need to default field to 1 in
                  database); pStatements will now link to practices.e_reporting.
    02/03/2010    Changes to practice_type (pType) field; new type was added for
                  West Virginia accounts (WV); also, any account that is not assigned
                  a type will now default to type PCS.
*/

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;

import javax.swing.AbstractAction;
import javax.swing.JLabel;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;

import com.pacytology.pcs.ui.PcsFrame;
import com.pacytology.pcs.ui.Square;


public class PracticesForm extends PcsFrame
{
    public Login dbLogin;
    public LogFile log;
    /*
    final int IDLE = 100;
    final int QUERY = 101;
    final int ADD = 102;
    final int UPDATE = 103;
    final int DELETE = 104;
    */
    final int MAILER = 105;
    public int currMode = Lab.IDLE;
    public PracticeRec practiceRec;
    public int rowsReturned;
    public FunctionKeyControl fKeys = new FunctionKeyControl();
    public DoctorTableData dData;
    public JTable DoctorTable;
    public JTableHeader header;
    public JScrollPane drTblScrollPane;
    public Vector doctorVect = new Vector();
    public Vector pPriceCodes = new Vector();
    public PracticeDbOps dbOps;
	public JTextArea practiceComments = new javax.swing.JTextArea();
    
	public PracticesForm()
	{

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Practices");
		setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(808,562);
		setVisible(false);
		pAcctNum.setNextFocusableComponent(pAddress1);
		pAcctNum.setEnabled(false);
		getContentPane().add(pAcctNum);
		pAcctNum.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pAcctNum.setBounds(108,84,36,20);
		parentAccount.setNextFocusableComponent(pAddress1);
		parentAccount.setEnabled(false);
		getContentPane().add(parentAccount);
		parentAccount.setFont(new Font("DialogInput", Font.PLAIN, 12));
		parentAccount.setBounds(270,84,36,20);
		pStatus.setEnabled(false);
		getContentPane().add(pStatus);
		pStatus.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pStatus.setBounds(400,84,64,20);
		pName.setEnabled(false);
		getContentPane().add(pName);
		pName.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pName.setBounds(108,106,356,20);
		pAddress1.setEnabled(false);
		getContentPane().add(pAddress1);
		pAddress1.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pAddress1.setBounds(108,132,356,20);
		pAddress2.setEnabled(false);
		getContentPane().add(pAddress2);
		pAddress2.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pAddress2.setBounds(108,154,356,20);
		pZip.setNextFocusableComponent(pAddress1);
		pZip.setEnabled(false);
		getContentPane().add(pZip);
		pZip.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pZip.setBounds(108,176,80,20);
		pCity.setEnabled(false);
		getContentPane().add(pCity);
		pCity.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pCity.setBounds(230,176,165,20);
		pState.setEnabled(false);
		getContentPane().add(pState);
		pState.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pState.setBounds(440,176,24,20);
		pContactLast.setEnabled(false);
		getContentPane().add(pContactLast);
		pContactLast.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pContactLast.setBounds(108,200,356,20);
		pPhone.setEnabled(false);
		getContentPane().add(pPhone);
		pPhone.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pPhone.setBounds(108,224,90,20);
		pFax.setEnabled(false);
		getContentPane().add(pFax);
		pFax.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pFax.setBounds(230,224,90,20);
		pType.setEnabled(false);
		getContentPane().add(pType);
		pType.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pType.setBounds(360,224,104,20);
		pProgram.setEnabled(false);
		getContentPane().add(pProgram);
		pProgram.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pProgram.setBounds(360,248,104,20);
		attnMessage.setEnabled(false);
		getContentPane().add(attnMessage);
		attnMessage.setFont(new Font("DialogInput", Font.PLAIN, 12));
		attnMessage.setBounds(108,272,356,20);
		pReportCopies.setText("1");
		pReportCopies.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		pReportCopies.setNextFocusableComponent(pName);
		pReportCopies.setEnabled(false);
		getContentPane().add(pReportCopies);
		pReportCopies.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pReportCopies.setBounds(564,84,24,20);
		pStatements.setText("N");
		pStatements.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		pStatements.setNextFocusableComponent(pName);
		pStatements.setEnabled(false);
		getContentPane().add(pStatements);
		pStatements.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pStatements.setBounds(672,84,24,20);
		pPatCards.setText("Patient Cards");
		pPatCards.setActionCommand(" Patient Cards");
		pPatCards.setEnabled(false);
		getContentPane().add(pPatCards);
		pPatCards.setForeground(new java.awt.Color(102,102,153));
		pPatCards.setBounds(520,106,110,14);
		pClientNotes.setText("Client Notes");
		pClientNotes.setActionCommand(" Client Notes");
		pClientNotes.setEnabled(false);
		getContentPane().add(pClientNotes);
		pClientNotes.setForeground(new java.awt.Color(102,102,153));
		pClientNotes.setBounds(520,121,110,14);
		printDoctors.setText("Print Doctors");
		printDoctors.setActionCommand(" Client Notes");
		printDoctors.setEnabled(false);
		getContentPane().add(printDoctors);
		printDoctors.setForeground(new java.awt.Color(102,102,153));
		printDoctors.setBounds(520,136,110,14);
		blockDBs.setText("Block Direct Billing");
		blockDBs.setActionCommand(" Client Notes");
		blockDBs.setEnabled(false);
		getContentPane().add(blockDBs);
		blockDBs.setForeground(new java.awt.Color(102,102,153));
		blockDBs.setBounds(520,151,130,14);
		STDclinic.setText("STD Clinic");
		STDclinic.setActionCommand(" Client Notes");
		STDclinic.setEnabled(false);
		getContentPane().add(STDclinic);
		STDclinic.setForeground(new java.awt.Color(102,102,153));
		STDclinic.setBounds(520,166,110,14);
		HPVtesting.setText("HPV Testing");
		HPVtesting.setActionCommand(" Client Notes");
		HPVtesting.setEnabled(false);
		getContentPane().add(HPVtesting);
		HPVtesting.setForeground(new java.awt.Color(102,102,153));
		HPVtesting.setBounds(520,181,110,14);
		HPVPermission.setText("Permission for HPV");
		HPVPermission.setActionCommand(" Client Notes");
		HPVPermission.setEnabled(false);
		getContentPane().add(HPVPermission);
		HPVPermission.setForeground(new java.awt.Color(102,102,153));
		HPVPermission.setBounds(520,196,170,14);
		holdFinal.setText("Hold Final Report (until HPV)");
		holdFinal.setActionCommand(" Client Notes");
		holdFinal.setEnabled(false);
		getContentPane().add(holdFinal);
		holdFinal.setForeground(new java.awt.Color(102,102,153));
		holdFinal.setBounds(520,211,180,14);
		verifyDoctor.setText("Verify Doctor for HPV");
		verifyDoctor.setActionCommand(" Client Notes");
		verifyDoctor.setEnabled(false);
		getContentPane().add(verifyDoctor);
		verifyDoctor.setForeground(new java.awt.Color(102,102,153));
		verifyDoctor.setBounds(520,226,180,14);
		disableCoverSheet.setText("Disable Cover Sheet");
		disableCoverSheet.setActionCommand(" Client Notes");
		disableCoverSheet.setEnabled(false);
		getContentPane().add(disableCoverSheet);
		disableCoverSheet.setForeground(new java.awt.Color(102,102,153));
		disableCoverSheet.setBounds(520,241,180,14);
		oneMonthBill.setText("One Bill Per Month");
		oneMonthBill.setActionCommand(" Client Notes");
		oneMonthBill.setEnabled(false);
		getContentPane().add(oneMonthBill);
		oneMonthBill.setForeground(new java.awt.Color(102,102,153));
		oneMonthBill.setBounds(520,256,180,14);
		imagedSlides.setText("Imaged");
		imagedSlides.setActionCommand(" Client Notes");
		imagedSlides.setEnabled(false);
		getContentPane().add(imagedSlides);
		imagedSlides.setForeground(new java.awt.Color(102,102,153));
		imagedSlides.setBounds(520,271,180,14);
		sendFax.setText("Fax Final Reports");
		sendFax.setActionCommand(" Client Notes");
		sendFax.setEnabled(false);
		getContentPane().add(sendFax);
		sendFax.setForeground(new java.awt.Color(102,102,153));
		sendFax.setBounds(520,286,180,14);
		HPVonSummary.setText("HPV Result on Summary");
		HPVonSummary.setActionCommand(" Client Notes");
		HPVonSummary.setEnabled(false);
		getContentPane().add(HPVonSummary);
		HPVonSummary.setForeground(new java.awt.Color(102,102,153));
		HPVonSummary.setBounds(520,301,180,14);
		HPVregardless.setText("HPV Regardless");
		HPVregardless.setActionCommand(" Client Notes");
		HPVregardless.setEnabled(false);
		getContentPane().add(HPVregardless);
		HPVregardless.setForeground(new java.awt.Color(102,102,153));
		HPVregardless.setBounds(520,316,180,14);
		priceCode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		priceCode.setNextFocusableComponent(pName);
		priceCode.setEnabled(false);
		getContentPane().add(priceCode);
		priceCode.setFont(new Font("DialogInput", Font.PLAIN, 12));
		priceCode.setBounds(584,344,32,20);
		stopCode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		stopCode.setNextFocusableComponent(pName);
		stopCode.setEnabled(false);
		getContentPane().add(stopCode);
		stopCode.setFont(new Font("DialogInput", Font.PLAIN, 12));
		stopCode.setBounds(684,344,24,20);
		defaultDr.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		defaultDr.setNextFocusableComponent(pName);
		defaultDr.setEnabled(false);
		getContentPane().add(defaultDr);
		defaultDr.setFont(new Font("DialogInput", Font.PLAIN, 12));
		defaultDr.setBounds(590,366,56,20);
		pDoctorLbl.setText("Doctors:");
		getContentPane().add(pDoctorLbl);
		pDoctorLbl.setBounds(38,368,60,12);
		pNameLbl.setText("Name");
		getContentPane().add(pNameLbl);
		pNameLbl.setBounds(38,108,48,12);
		pAcctNumLbl.setText("Account #");
		getContentPane().add(pAcctNumLbl);
		pAcctNumLbl.setBounds(38,86,60,12);
		pAddressLbl.setText("Address");
		getContentPane().add(pAddressLbl);
		pAddressLbl.setBounds(38,134,48,12);
		pCityLbl.setText("City");
		getContentPane().add(pCityLbl);
		pCityLbl.setBounds(200,178,38,12);
		pStateLbl.setText("State");
		getContentPane().add(pStateLbl);
		pStateLbl.setBounds(406,178,30,12);
		pZipLbl.setText("Zip");
		getContentPane().add(pZipLbl);
		pZipLbl.setBounds(38,178,24,12);
		pContactLbl.setText("Contact");
		getContentPane().add(pContactLbl);
		pContactLbl.setBounds(38,202,48,14);
		pPhoneLbl.setText("Phone");
		getContentPane().add(pPhoneLbl);
		pPhoneLbl.setBounds(40,226,48,12);
		pFaxLbl.setText("Fax");
		getContentPane().add(pFaxLbl);
		pFaxLbl.setBounds(206,226,34,12);
		pStopCodeLbl.setText("Stop Code");
		getContentPane().add(pStopCodeLbl);
		pStopCodeLbl.setBounds(624,346,60,12);
		pPriceCodeLbl.setText("Price Code");
		getContentPane().add(pPriceCodeLbl);
		pPriceCodeLbl.setBounds(520,346,70,14);
		pReportCopiesLbl.setText("Copies");
		getContentPane().add(pReportCopiesLbl);
		pReportCopiesLbl.setBounds(520,86,42,12);
		getContentPane().add(msgLabel);
		msgLabel.setForeground(java.awt.Color.red);
		msgLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		msgLabel.setBounds(44,52,372,20);
		getContentPane().add(JLabel1);
		JLabel1.setForeground(java.awt.Color.red);
		JLabel1.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel1.setBounds(34,46,372,20);
		getContentPane().add(F1sq);
		F1sq.setBounds(25,4,20,20);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F1");
		getContentPane().add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(29,4,20,20);
		getContentPane().add(F2sq);
		F2sq.setBounds(87,4,20,20);
		F2lbl.setRequestFocusEnabled(false);
		F2lbl.setText("F2");
		getContentPane().add(F2lbl);
		F2lbl.setForeground(java.awt.Color.black);
		F2lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F2lbl.setBounds(91,4,20,20);
		getContentPane().add(F3sq);
		F3sq.setBounds(149,4,20,20);
		F3lbl.setRequestFocusEnabled(false);
		F3lbl.setText("F3");
		getContentPane().add(F3lbl);
		F3lbl.setForeground(java.awt.Color.black);
		F3lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F3lbl.setBounds(153,4,20,20);
		getContentPane().add(F4sq);
		F4sq.setBounds(211,4,20,20);
		F4lbl.setRequestFocusEnabled(false);
		F4lbl.setText("F4");
		getContentPane().add(F4lbl);
		F4lbl.setForeground(java.awt.Color.black);
		F4lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F4lbl.setBounds(215,4,20,20);
		getContentPane().add(F5sq);
		F5sq.setBounds(273,4,20,20);
		F5lbl.setRequestFocusEnabled(false);
		F5lbl.setText("F5");
		getContentPane().add(F5lbl);
		F5lbl.setForeground(java.awt.Color.black);
		F5lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F5lbl.setBounds(277,4,20,20);
		getContentPane().add(F9sq);
		F9sq.setBounds(335,4,20,20);
		F9lbl.setRequestFocusEnabled(false);
		F9lbl.setText("F9");
		getContentPane().add(F9lbl);
		F9lbl.setForeground(java.awt.Color.black);
		F9lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F9lbl.setBounds(339,4,20,20);
		getContentPane().add(F12sq);
		F12sq.setBounds(397,4,20,20);
		F12lbl.setRequestFocusEnabled(false);
		F12lbl.setText("F12");
		getContentPane().add(F12lbl);
		F12lbl.setForeground(java.awt.Color.black);
		F12lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F12lbl.setBounds(398,4,20,20);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("Query");
		getContentPane().add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(0,28,70,18);
		F2action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F2action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F2action.setText("Add");
		getContentPane().add(F2action);
		F2action.setForeground(java.awt.Color.black);
		F2action.setBounds(62,28,70,16);
		F3action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F3action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F3action.setText("Update");
		getContentPane().add(F3action);
		F3action.setForeground(java.awt.Color.black);
		F3action.setBounds(124,28,70,16);
		F4action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F4action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F4action.setText("Status");
		getContentPane().add(F4action);
		F4action.setForeground(java.awt.Color.black);
		F4action.setBounds(186,28,70,16);
		F5action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F5action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F5action.setText("Doctors");
		getContentPane().add(F5action);
		F5action.setForeground(java.awt.Color.black);
		F5action.setBounds(248,28,70,18);
		F9action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F9action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F9action.setText("Exit");
		getContentPane().add(F9action);
		F9action.setForeground(java.awt.Color.black);
		F9action.setBounds(310,28,70,16);
		F12action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F12action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F12action.setText("Submit");
		getContentPane().add(F12action);
		F12action.setForeground(java.awt.Color.black);
		F12action.setBounds(372,28,70,16);
		rowLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		getContentPane().add(rowLabel);
		rowLabel.setForeground(java.awt.Color.black);
		rowLabel.setFont(new Font("Dialog", Font.BOLD, 10));
		rowLabel.setBounds(632,550,48,10);
		rowLabel.setVisible(false);
		JLabel2.setText("Default DR#");
		getContentPane().add(JLabel2);
		JLabel2.setBounds(520,368,70,12);
		JLabel3.setText("Acct. Status:");
		getContentPane().add(JLabel3);
		JLabel3.setBounds(324,86,76,12);
		JLabel4.setText("Electronic");
		getContentPane().add(JLabel4);
		JLabel4.setBounds(610,86,60,12);
		dateAdded.setText("Added On:");
		getContentPane().add(dateAdded);
		dateAdded.setBounds(474,6,230,12);
		JLabel5.setText("Type");
		getContentPane().add(JLabel5);
		JLabel5.setBounds(330,226,34,14);
		JLabel6.setText("ATTN Msg.");
		getContentPane().add(JLabel6);
		JLabel6.setBounds(40,274,60,14);
		JLabel7.setText("CYTOPATHOLOGY REPORTS:");
		getContentPane().add(JLabel7);
		JLabel7.setBounds(520,70,200,12);
		JLabel8.setText("Parent Account #");
		getContentPane().add(JLabel8);
		JLabel8.setBounds(168,86,100,12);
		JLabel9.setText("Program");
		getContentPane().add(JLabel9);
		JLabel9.setBounds(306,250,54,14);
		parentLinks.setText("LINKS");
		getContentPane().add(parentLinks);
		parentLinks.setBounds(40,306,420,14);
		//}}

        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        /*  Build and display table of doctors on screen
        */
		dData = new DoctorTableData();
		DoctorTable = new JTable();
		DoctorTable.setEnabled(false);
		DoctorTable.setAutoCreateColumnsFromModel(false);
		DoctorTable.setModel(dData);

		for (int k=0;k<dData.columns.length;k++) {
		    DefaultTableCellRenderer renderer = new
		        DefaultTableCellRenderer();
            renderer.setHorizontalAlignment(
                dData.columns[k].alignment);
            renderer.setFont(
                dData.columns[k].font);
            TableColumn column = new TableColumn(k,
                dData.columns[k].width,renderer,null);
            DoctorTable.addColumn(column);
		}
		
		header = DoctorTable.getTableHeader();
		header.setFont(new Font("Dialog",Font.BOLD, 11));
	
		drTblScrollPane = new JScrollPane();
		drTblScrollPane.getViewport().add(DoctorTable);
		getContentPane().add(drTblScrollPane);
		// original values: 36,370,746,170
		drTblScrollPane.setBounds(36,390,746,150);
        drTblScrollPane.setAutoscrolls(true);
        drTblScrollPane.setEnabled(false);
		
		DoctorTable.setFont(new Font("SansSerif", Font.PLAIN, 11));
		// original values: 0,0,743,167
		DoctorTable.setBounds(0,0,743,147);
        DoctorTable.setRowHeight(12);
        DoctorTable.setCellSelectionEnabled(false);
        DoctorTable.setEnabled(false);    
            
        practiceRec = new PracticeRec();

		//{{INIT_MENUS
		//}}
	
		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		SymKey aSymKey = new SymKey();
		pName.addKeyListener(aSymKey);
		pAddress1.addKeyListener(aSymKey);
		pAddress2.addKeyListener(aSymKey);
		pCity.addKeyListener(aSymKey);
		pState.addKeyListener(aSymKey);
		pContactLast.addKeyListener(aSymKey);
		pAcctNum.addKeyListener(aSymKey);
		pReportCopies.addKeyListener(aSymKey);
		this.addKeyListener(aSymKey);
		pZip.addKeyListener(aSymKey);
		pPhone.addKeyListener(aSymKey);
		pFax.addKeyListener(aSymKey);
		pPatCards.addKeyListener(aSymKey);
		pClientNotes.addKeyListener(aSymKey);
		printDoctors.addKeyListener(aSymKey);
		stopCode.addKeyListener(aSymKey);
		priceCode.addKeyListener(aSymKey);
		defaultDr.addKeyListener(aSymKey);
		SymFocus aSymFocus = new SymFocus();
		pAcctNum.addFocusListener(aSymFocus);
		pName.addFocusListener(aSymFocus);
		pAddress1.addFocusListener(aSymFocus);
		pAddress2.addFocusListener(aSymFocus);
		pZip.addFocusListener(aSymFocus);
		pCity.addFocusListener(aSymFocus);
		pState.addFocusListener(aSymFocus);
		pContactLast.addFocusListener(aSymFocus);
		pPhone.addFocusListener(aSymFocus);
		pFax.addFocusListener(aSymFocus);
		pReportCopies.addFocusListener(aSymFocus);
		stopCode.addFocusListener(aSymFocus);
		priceCode.addFocusListener(aSymFocus);
		defaultDr.addFocusListener(aSymFocus);
		blockDBs.addKeyListener(aSymKey);
		STDclinic.addKeyListener(aSymKey);
		HPVtesting.addKeyListener(aSymKey);
		pStatements.addKeyListener(aSymKey);
		HPVPermission.addKeyListener(aSymKey);
		pType.addKeyListener(aSymKey);
		HPVPermission.addFocusListener(aSymFocus);
		attnMessage.addKeyListener(aSymKey);
		attnMessage.addFocusListener(aSymFocus);
		holdFinal.addKeyListener(aSymKey);
		verifyDoctor.addKeyListener(aSymKey);
		disableCoverSheet.addKeyListener(aSymKey);
		oneMonthBill.addKeyListener(aSymKey);
		HPVregardless.addKeyListener(aSymKey);
		imagedSlides.addKeyListener(aSymKey);
		sendFax.addKeyListener(aSymKey);
		HPVonSummary.addKeyListener(aSymKey);
		parentAccount.addKeyListener(aSymKey);
		parentAccount.addFocusListener(aSymFocus);
		pProgram.addKeyListener(aSymKey);
		//}}
		actionMap = new PraticesFormActionMap(this);
		setupKeyPressMap();
		
	}
	protected JRootPane setupKeyPressMap() {
		JRootPane rp = super.setupKeyPressMap();
		rp.getActionMap().put("F1", new AbstractAction() {

			public void actionPerformed(ActionEvent e) {
				if (fKeys.isOn(fKeys.F1)) queryActions();
		        else Utils.createErrMsg("Query Option Not Available");
			}
		});
		
		rp.getActionMap().put("F2", new AbstractAction() {

			public void actionPerformed(ActionEvent e) {
				if (fKeys.isOn(fKeys.F2))
                    addActions();
		        
			}
		});
		rp.getActionMap().put("F3", new AbstractAction() {

			public void actionPerformed(ActionEvent e) {
				if (fKeys.isOn(fKeys.F3))
                    updateActions();
		        
			}
		});
		rp.getActionMap().put("F4", new AbstractAction() {

			public void actionPerformed(ActionEvent e) {
				if (currMode==Lab.UPDATE) {
                    if (practiceRec.active_status.equals("A")) {
                        practiceRec.active_status="I";
                        practiceRec.practice_type="NOT USED";
                        pStatus.setText("INACTIVE");
                    }
                    else {
                        practiceRec.active_status="A";
                        pStatus.setText("ACTIVE");
                    }
                }
		        
			}
		});
		rp.getActionMap().put("F5", new AbstractAction() {

			public void actionPerformed(ActionEvent e) {
                if (fKeys.isOn(fKeys.F5))
                    doctorActions();
		        
			}
		});
		rp.getActionMap().put("F8", new AbstractAction() {

			public void actionPerformed(ActionEvent e) {
				 if (priceCode.hasFocus()) {
                     displayPriceCodes();
                 }
		        
			}
		});
		rp.getActionMap().put("F9", new AbstractAction() {

			public void actionPerformed(ActionEvent e) {
                if (currMode==Lab.IDLE) closingActions();
			}
		});
		rp.getActionMap().put("F11", new AbstractAction() {

			public void actionPerformed(ActionEvent e) {
				mailerActions()	;
			}
		});
		rp.getActionMap().put("ESC", new AbstractAction() {

			public void actionPerformed(ActionEvent e) {
				resetForm();
			}
		});
		AbstractAction showRemarks = new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				if (practiceRec.practice>0) displayComments();
			}
		};
		rp.getActionMap().put("INSERT", showRemarks);
		//Let's add 'I' as a way of calling VK_INSERT ON Mac
		String osName = System.getProperty("os.name").toLowerCase();
		boolean isMacOs = osName.startsWith("mac os x");
		if (isMacOs) rp.getActionMap().put("VK_I", showRemarks);
		return rp; 
	}
	public PracticesForm(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

    public PracticesForm(Login dbLogin)
    {
        this();
        this.dbLogin=dbLogin;
        this.log = new LogFile(
            dbLogin.logPath,"PracticesForm",dbLogin.dateToday,dbLogin.userName);
        this.dbOps = new PracticeDbOps(this);
        this.dbOps.practiceFormInit();
        this.resetForm();
    }        

	public void setVisible(boolean b)
	{
		if (b) setLocation(0,0);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new PracticesForm()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		Insets insets = getInsets();
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JTextField pAcctNum = new javax.swing.JTextField();
	javax.swing.JTextField parentAccount = new javax.swing.JTextField();
	javax.swing.JTextField pStatus = new javax.swing.JTextField();
	javax.swing.JTextField pName = new javax.swing.JTextField();
	javax.swing.JTextField pAddress1 = new javax.swing.JTextField();
	javax.swing.JTextField pAddress2 = new javax.swing.JTextField();
	javax.swing.JTextField pZip = new javax.swing.JTextField();
	javax.swing.JTextField pCity = new javax.swing.JTextField();
	javax.swing.JTextField pState = new javax.swing.JTextField();
	javax.swing.JTextField pContactLast = new javax.swing.JTextField();
	javax.swing.JTextField pPhone = new javax.swing.JTextField();
	javax.swing.JTextField pFax = new javax.swing.JTextField();
	javax.swing.JTextField pType = new javax.swing.JTextField();
	javax.swing.JTextField pProgram = new javax.swing.JTextField();
	javax.swing.JTextField attnMessage = new javax.swing.JTextField();
	javax.swing.JTextField pReportCopies = new javax.swing.JTextField();
	javax.swing.JTextField pStatements = new javax.swing.JTextField();
	javax.swing.JCheckBox pPatCards = new javax.swing.JCheckBox();
	javax.swing.JCheckBox pClientNotes = new javax.swing.JCheckBox();
	javax.swing.JCheckBox printDoctors = new javax.swing.JCheckBox();
	javax.swing.JCheckBox blockDBs = new javax.swing.JCheckBox();
	javax.swing.JCheckBox STDclinic = new javax.swing.JCheckBox();
	javax.swing.JCheckBox HPVtesting = new javax.swing.JCheckBox();
	javax.swing.JCheckBox HPVPermission = new javax.swing.JCheckBox();
	javax.swing.JCheckBox holdFinal = new javax.swing.JCheckBox();
	javax.swing.JCheckBox verifyDoctor = new javax.swing.JCheckBox();
	javax.swing.JCheckBox disableCoverSheet = new javax.swing.JCheckBox();
	javax.swing.JCheckBox oneMonthBill = new javax.swing.JCheckBox();
	javax.swing.JCheckBox imagedSlides = new javax.swing.JCheckBox();
	javax.swing.JCheckBox sendFax = new javax.swing.JCheckBox();
	javax.swing.JCheckBox HPVonSummary = new javax.swing.JCheckBox();
	javax.swing.JCheckBox HPVregardless = new javax.swing.JCheckBox();
	javax.swing.JTextField priceCode = new javax.swing.JTextField();
	javax.swing.JTextField stopCode = new javax.swing.JTextField();
	javax.swing.JTextField defaultDr = new javax.swing.JTextField();
	javax.swing.JLabel pDoctorLbl = new javax.swing.JLabel();
	javax.swing.JLabel pNameLbl = new javax.swing.JLabel();
	javax.swing.JLabel pAcctNumLbl = new javax.swing.JLabel();
	javax.swing.JLabel pAddressLbl = new javax.swing.JLabel();
	javax.swing.JLabel pCityLbl = new javax.swing.JLabel();
	javax.swing.JLabel pStateLbl = new javax.swing.JLabel();
	javax.swing.JLabel pZipLbl = new javax.swing.JLabel();
	javax.swing.JLabel pContactLbl = new javax.swing.JLabel();
	javax.swing.JLabel pPhoneLbl = new javax.swing.JLabel();
	javax.swing.JLabel pFaxLbl = new javax.swing.JLabel();
	javax.swing.JLabel pStopCodeLbl = new javax.swing.JLabel();
	javax.swing.JLabel pPriceCodeLbl = new javax.swing.JLabel();
	javax.swing.JLabel pReportCopiesLbl = new javax.swing.JLabel();
	javax.swing.JLabel msgLabel = new javax.swing.JLabel();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	Square F1sq = new Square();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	Square F2sq = new Square();
	javax.swing.JLabel F2lbl = new javax.swing.JLabel();
	Square F3sq = new Square();
	javax.swing.JLabel F3lbl = new javax.swing.JLabel();
	Square F4sq = new Square();
	javax.swing.JLabel F4lbl = new javax.swing.JLabel();
	Square F5sq = new Square();
	javax.swing.JLabel F5lbl = new javax.swing.JLabel();
	Square F9sq = new Square();
	javax.swing.JLabel F9lbl = new javax.swing.JLabel();
	Square F12sq = new Square();
	javax.swing.JLabel F12lbl = new javax.swing.JLabel();
	javax.swing.JLabel F1action = new javax.swing.JLabel();
	javax.swing.JLabel F2action = new javax.swing.JLabel();
	javax.swing.JLabel F3action = new javax.swing.JLabel();
	javax.swing.JLabel F4action = new javax.swing.JLabel();
	javax.swing.JLabel F5action = new javax.swing.JLabel();
	javax.swing.JLabel F9action = new javax.swing.JLabel();
	javax.swing.JLabel F12action = new javax.swing.JLabel();
	javax.swing.JLabel rowLabel = new javax.swing.JLabel();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
	javax.swing.JLabel dateAdded = new javax.swing.JLabel();
	javax.swing.JLabel JLabel5 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel6 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel7 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel8 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel9 = new javax.swing.JLabel();
	javax.swing.JLabel parentLinks = new javax.swing.JLabel();
	//}}


	//{{DECLARE_MENUS
	//}}


	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			
		}
	}

	public void addActions() {
	    currMode=Lab.ADD;
	    fKeys.keyOn(fKeys.F12);
	    clearForm();
	    clearDoctorTable();
		setEnableAllFields(false);
		setEnableDetails(true);
		pStatus.setText("ACTIVE");
		practiceRec.active_status="A";
		pAcctNum.requestFocus();
		msgLabel.setText(null);
	}

	public void setEnableOptions(boolean eVal)
	{
	    pReportCopies.setEnabled(eVal);
	    pStatements.setEnabled(eVal);
	    pPatCards.setEnabled(eVal);
	    pClientNotes.setEnabled(eVal);
	    printDoctors.setEnabled(eVal);
	    blockDBs.setEnabled(eVal);
	    STDclinic.setEnabled(eVal);
	    HPVtesting.setEnabled(eVal);
	    HPVPermission.setEnabled(false);
	    holdFinal.setEnabled(eVal);
	    verifyDoctor.setEnabled(eVal);
	    disableCoverSheet.setEnabled(eVal);
	    oneMonthBill.setEnabled(eVal);
	    imagedSlides.setEnabled(eVal);
	    sendFax.setEnabled(eVal);
	    HPVregardless.setEnabled(eVal);
	    HPVonSummary.setEnabled(eVal);
	    priceCode.setEnabled(eVal);
	    stopCode.setEnabled(eVal);
	    defaultDr.setEnabled(eVal);
	    if (currMode!=Lab.UPDATE) defaultDr.setEnabled(false);
	}
	
	public void setEnableDetails(boolean eVal) {
	    pName.setEnabled(eVal);
	    pAddress1.setEnabled(eVal);
	    pAddress2.setEnabled(eVal);
	    pCity.setEnabled(eVal);
	    pState.setEnabled(eVal);
	    pZip.setEnabled(eVal);
	    pAcctNum.setEnabled(eVal);
	    parentAccount.setEnabled(eVal);
	    pContactLast.setEnabled(eVal);
	    pPhone.setEnabled(eVal);
	    pFax.setEnabled(eVal);
	    pType.setEnabled(eVal);
	    pProgram.setEnabled(eVal);
	    attnMessage.setEnabled(eVal);
    }	    
    
    public void setEnableAllFields(boolean eVal)
    {
        setEnableDetails(eVal);
        setEnableOptions(eVal);
    }
    

	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == PracticesForm.this)
				PracticesForm_keyPressed(event);
			else if (object == pReportCopies)
				pReportCopies_keyPressed(event);
			else if (object == pAcctNum)
				pAcctNum_keyPressed(event);
			else if (object == pName)
				pName_keyPressed(event);
			else if (object == pAddress1)
				pAddress1_keyPressed(event);
			else if (object == pAddress2)
				pAddress2_keyPressed(event);
			else if (object == pZip)
				pZip_keyPressed(event);
			else if (object == pCity)
				pCity_keyPressed(event);
			else if (object == pState)
				pState_keyPressed(event);
			else if (object == pContactLast)
				pContactLast_keyPressed(event);
			else if (object == pPhone)
				pPhone_keyPressed(event);
			else if (object == pFax)
				pFax_keyPressed(event);
			else if (object == pPatCards)
				pPatCards_keyPressed(event);
			else if (object == pClientNotes)
				pClientNotes_keyPressed(event);
			else if (object == printDoctors)
				printDoctors_keyPressed(event);
			else if (object == stopCode)
				stopCode_keyPressed(event);
			else if (object == priceCode)
				priceCode_keyPressed(event);
			else if (object == defaultDr)
				defaultDr_keyPressed(event);
			else if (object == blockDBs)
				blockDBs_keyPressed(event);
			else if (object == STDclinic)
				STDclinic_keyPressed(event);
			else if (object == HPVtesting)
				HPVtesting_keyPressed(event);
			else if (object == pStatements)
				pStatements_keyPressed(event);
			else if (object == HPVPermission)
				HPVPermission_keyPressed(event);
			else if (object == pType)
				pType_keyPressed(event);
			else if (object == attnMessage)
				attnMessage_keyPressed(event);
			else if (object == holdFinal)
				holdFinal_keyPressed(event);
			else if (object == verifyDoctor)
				verifyDoctor_keyPressed(event);
			else if (object == disableCoverSheet)
				disableCoverSheet_keyPressed(event);
			else if (object == oneMonthBill)
				oneMonthBill_keyPressed(event);
			else if (object == HPVregardless)
				HPVregardless_keyPressed(event);
			else if (object == imagedSlides)
				imagedSlides_keyPressed(event);
			else if (object == sendFax)
				sendFax_keyPressed(event);
			else if (object == HPVonSummary)
				HPVonSummary_keyPressed(event);
			else if (object == parentAccount)
				parentAccount_keyPressed(event);
			else if (object == pProgram)
				pProgram_keyPressed(event);
		}


		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == pName)
				pName_keyTyped(event);
			else if (object == pAddress1)
				pAddress1_keyTyped(event);
			else if (object == pCity)
				pCity_keyTyped(event);
			else if (object == pAddress2)
				pAddress2_keyTyped(event);
			else if (object == pState)
				pState_keyTyped(event);
			else if (object == pContactLast)
				pContactLast_keyTyped(event);
			if (object == pAcctNum)
				pAcctNum_keyTyped(event);
			else if (object == pReportCopies)
				pReportCopies_keyTyped(event);
			else if (object == pZip)
				pZip_keyTyped(event);
			else if (object == pPhone)
				pPhone_keyTyped(event);
			else if (object == pFax)
				pFax_keyTyped(event);
			else if (object == stopCode)
				stopCode_keyTyped(event);
			else if (object == priceCode)
				priceCode_keyTyped(event);
			else if (object == defaultDr)
				defaultDr_keyTyped(event);
			else if (object == pStatements)
				pStatements_keyTyped(event);
			else if (object == pType)
				pType_keyTyped(event);
			else if (object == attnMessage)
				attnMessage_keyTyped(event);
			else if (object == parentAccount)
				parentAccount_keyTyped(event);
			else if (object == pProgram)
				pProgram_keyTyped(event);
		}
	}

	void pName_keyTyped(java.awt.event.KeyEvent event)
	{
        Utils.forceUpper(event,64);   
	}

	void pAddress1_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,64);
	}

	void pAddress2_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,64);
	}

	void pCity_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,32);
	}

	void pState_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,2);
	}

	void pContactLast_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,64);
	}

	void pAcctNum_keyTyped(java.awt.event.KeyEvent event)
	{
	    Utils.forceDigits(event,3);
	}

	void pReportCopies_keyTyped(java.awt.event.KeyEvent event)
	{
	    Utils.forceDigits(event,2);
	}

    public void queryActions() {
        currMode=Lab.QUERY;
	    clearForm();
	    clearDoctorTable();
        msgLabel.setText(null);
        setEnableAllFields(false);
        pName.setEnabled(true);
        pAcctNum.setEnabled(true);
        fKeys.keyOff(fKeys.F2);
        fKeys.keyOff(fKeys.F3);
        fKeys.keyOff(fKeys.F4);
        fKeys.keyOff(fKeys.F5);
        fKeys.keyOn(fKeys.F12);
        pName.setBackground(Color.white);
        pName.setCaretColor(Color.black);
        pName.setForeground(Color.black);
        pAcctNum.setBackground(Color.white);
        pAcctNum.setCaretColor(Color.black);
        pAcctNum.setForeground(Color.black);
		pAcctNum.requestFocus();
    }

	public void doctorActions() {
        if (doctorVect.size()>0) {
            DoctorRec dr = new DoctorRec();
            int tRow = DoctorTable.getSelectedRow();
            if (tRow==(-1)) tRow=0;
            dr.doctor = (int)Integer.parseInt((String)DoctorTable.getValueAt(tRow,0));
            dr.active_status = (String)DoctorTable.getValueAt(tRow,1);
            dr.practice = practiceRec.practice;
            dr.lname = (String)DoctorTable.getValueAt(tRow,1);
            dr.fname = (String)DoctorTable.getValueAt(tRow,2);
            dr.mi = (String)DoctorTable.getValueAt(tRow,3);
            dr.upin = (String)DoctorTable.getValueAt(tRow,4);
            dr.license = (String)DoctorTable.getValueAt(tRow,5);
            dr.bs_provider = (String)DoctorTable.getValueAt(tRow,6);
        }
        (new DoctorForm(this)).setVisible(true);
	}

    public void finalActions()
    {
        if (currMode==Lab.ADD) {
            fillPracticeRecord();
            if (dbOps.add()) {
                int acct = practiceRec.practice;
                resetForm();
                practiceRec.practice=acct;
                pAcctNum.setText(Integer.toString(acct));
                if (dbOps.query()) {
                    displayResults(practiceRec);
                    setEnableAllFields(false);
                    msgLabel.setText("Press F5 to update default doctor");
                    msgLabel.requestFocus();
                    currMode=Lab.IDLE;
                    fKeys.off();
                    fKeys.keyOn(fKeys.F1);
                    fKeys.keyOn(fKeys.F2);
                    fKeys.keyOn(fKeys.F9);
                    fKeys.keyOn(fKeys.F3);
                    fKeys.keyOn(fKeys.F5);
                }
            }
            else { }
        }
        else if (currMode==Lab.QUERY) {
            clearDoctorTable();
            if (dbOps.query()) {
                displayResults(practiceRec);
                setEnableAllFields(false);
                msgLabel.setText("Operation Succeeded");
                msgLabel.requestFocus();
                currMode=Lab.IDLE;
                fKeys.off();
                fKeys.keyOn(fKeys.F1);
                fKeys.keyOn(fKeys.F2);
                fKeys.keyOn(fKeys.F9);
                fKeys.keyOn(fKeys.F3);
                fKeys.keyOn(fKeys.F5);

            }
            else { }
        }
        else if (currMode==Lab.UPDATE) {
            fillPracticeRecord();
            if (dbOps.update()) {
                displayResults(practiceRec);
                setEnableAllFields(false);
                msgLabel.setText("Operation Succeeded");
                msgLabel.requestFocus();
                currMode=Lab.IDLE;
                fKeys.off();
                fKeys.keyOn(fKeys.F1);
                fKeys.keyOn(fKeys.F2);
                fKeys.keyOn(fKeys.F9);
                fKeys.keyOn(fKeys.F3);
                fKeys.keyOn(fKeys.F5);
            }
        }
    }

    public void fillPracticeRecord()
    {
        try { 
            practiceRec.practice=Integer.parseInt(pAcctNum.getText()); 
            if (!Utils.isNull(parentAccount.getText()))
                practiceRec.parent_account=Integer.parseInt(parentAccount.getText());
            else practiceRec.parent_account=(-1);
        }
        catch (Exception e) { log.write(e); }
        practiceRec.name=pName.getText();
        practiceRec.address1=pAddress1.getText();
        practiceRec.address2=pAddress2.getText();
        practiceRec.city=pCity.getText();
        practiceRec.state=pState.getText();
        practiceRec.zip=Utils.stripZipMask(pZip.getText());
        practiceRec.contact=pContactLast.getText();
        practiceRec.phone=Utils.stripPhoneMask(pPhone.getText());
        practiceRec.fax=Utils.stripPhoneMask(pFax.getText());
        // practice_type should default to PCS if nothing is entered
        if (Utils.isNull(pType.getText())) practiceRec.practice_type="PCS";
        else practiceRec.practice_type=pType.getText();
        practiceRec.program=pProgram.getText();
        practiceRec.stop_code=stopCode.getText();
        practiceRec.price_code=priceCode.getText();
        if (pPatCards.isSelected()) practiceRec.patient_cards="Y";
        else practiceRec.patient_cards="N";
        if (pClientNotes.isSelected()) practiceRec.client_notes="Y";
        else practiceRec.client_notes="N";
        if (printDoctors.isSelected()) practiceRec.print_doctors="Y";
        else practiceRec.print_doctors="N";
        if (blockDBs.isSelected()) practiceRec.block_patient="Y";
        else practiceRec.block_patient="N";
        if (STDclinic.isSelected()) practiceRec.std_clinic="Y";
        else practiceRec.std_clinic="N";
        if (HPVtesting.isSelected()) practiceRec.hpv_testing="Y";
        else practiceRec.hpv_testing="N";
        if (HPVPermission.isSelected()) practiceRec.hpv_permission="Y";
        else practiceRec.hpv_permission="N";
        if (holdFinal.isSelected()) practiceRec.hold_final="Y";
        else practiceRec.hold_final="N";
        if (verifyDoctor.isSelected()) practiceRec.verify_doctor="Y";
        else practiceRec.verify_doctor="N";
        if (disableCoverSheet.isSelected()) practiceRec.cover_sheet="D";
        else practiceRec.cover_sheet="N";
        if (oneMonthBill.isSelected()) practiceRec.block_mid_month="Y";
        else practiceRec.block_mid_month="N";
        if (imagedSlides.isSelected()) practiceRec.imaged="Y";
        else practiceRec.imaged="N";
        if (sendFax.isSelected()) practiceRec.send_fax="Y";
        else practiceRec.send_fax="N";
        if (HPVregardless.isSelected()) practiceRec.hpv_regardless="Y";
        else practiceRec.hpv_regardless="N";
        if (HPVonSummary.isSelected()) practiceRec.hpv_on_summary="Y";
        else practiceRec.hpv_on_summary="N";
        practiceRec.report_copies=Integer.parseInt(pReportCopies.getText());
        practiceRec.statement_copies=1;
        practiceRec.e_reporting=pStatements.getText();
        if (!Utils.isNull(defaultDr.getText()))
            practiceRec.default_doctor=Integer.parseInt(defaultDr.getText());
        practiceRec.comment_text=practiceComments.getText();
        practiceRec.attn_message=attnMessage.getText();
    }

	void clearForm() {
	    dateAdded.setText("ADDED ON: ");
	    defaultDr.setText(null);
	    pName.setText(null);
	    pAddress1.setText(null);
	    pAddress2.setText(null);
	    pCity.setText(null);
	    pState.setText(null);
	    pZip.setText(null);
	    pAcctNum.setText(null);
	    parentAccount.setText(null);
	    pStatus.setText(null);
	    pContactLast.setText(null);
	    pPhone.setText(null);
	    pFax.setText(null);
	    pType.setText(null);
	    pProgram.setText(null);
	    attnMessage.setText(null);
	    stopCode.setText("N");
	    pPatCards.setSelected(false);
	    pClientNotes.setSelected(false);
	    printDoctors.setSelected(false);
	    blockDBs.setSelected(false);
	    STDclinic.setSelected(false);
	    HPVtesting.setSelected(false);
	    HPVPermission.setSelected(false);
	    holdFinal.setSelected(false);
	    verifyDoctor.setSelected(false);
	    disableCoverSheet.setSelected(false);
	    oneMonthBill.setSelected(false);
	    imagedSlides.setSelected(false);
	    sendFax.setSelected(false);
	    HPVregardless.setSelected(false);
	    HPVonSummary.setSelected(false);
	    pReportCopies.setText("1");
	    pStatements.setText("N");
	    priceCode.setText(null);
	    parentLinks.setText("LINKS");
	    parentLinks.setVisible(false);
	    msgLabel.setText(null);
	    msgLabel.requestFocus();
    }

	void PracticesForm_keyPressed(java.awt.event.KeyEvent event)
	{
        try {
            msgLabel.setText(null);
            int ndx=0;
	        int key=event.getKeyCode();
            switch (key) {

                case KeyEvent.VK_ESCAPE:
                    resetForm();
                    break;

                case KeyEvent.VK_DOWN:
                    increment();
                    break;
                case KeyEvent.VK_UP:
                    decrement();
                    break;
                case KeyEvent.VK_CONTROL:
                    if (pZip.hasFocus()) {
                        pZip.setText(null);
                        pCity.setText(null);
                        pState.setText(null);
                    }
                    else ((JTextField)getFocusOwner()).setText(null);
                    break;
            }
        }
        catch (Exception e)  { log.write(e); }            
		
	}
	
	public void displayPriceCodes()
	{
        String[] buf = new String[pPriceCodes.size()];
        for (int i=0;i<pPriceCodes.size();i++)
            buf[i]=(String)pPriceCodes.elementAt(i);
        (new PickList("Price Codes",
                              280,180,100,200,
                              pPriceCodes.size(),
                              buf,buf,
                              priceCode)).setVisible(true);
	    
	}
	
    public void mailerActions()
    {
        this.resetForm();
        currMode=MAILER;
        pName.setEnabled(true);
        pAddress1.setEnabled(true);
        pAddress2.setEnabled(true);
        pZip.setEnabled(true);
        pCity.setEnabled(true);
        pState.setEnabled(true);
        pName.requestFocus();
    }

	public void increment()
	{
        int ndx=DoctorTable.getSelectedRow();
        if (ndx<0) ndx=0;
        else if (ndx<doctorVect.size()-2) ndx++;
        else ndx=doctorVect.size()-1;
        DoctorTable.clearSelection();
        DoctorTable.addRowSelectionInterval(ndx,ndx);
        DoctorTable.scrollRectToVisible(DoctorTable.getCellRect(ndx,0,true));
        ndx++;
        rowLabel.setText(ndx+" of "+doctorVect.size());
	}
	
	public void decrement()
	{
        int ndx=DoctorTable.getSelectedRow();
        if (ndx>doctorVect.size()) ndx=doctorVect.size()-1;
        else if (ndx>1) ndx--;
        else ndx=0;
        DoctorTable.clearSelection();
        DoctorTable.addRowSelectionInterval(ndx,ndx);
        DoctorTable.scrollRectToVisible(DoctorTable.getCellRect(ndx,0,true));
        ndx++;
        rowLabel.setText(ndx+" of "+doctorVect.size());
	}
	
    public void displayComments() {
        boolean isUpdatable = false;
        if (currMode==Lab.ADD || currMode==Lab.UPDATE) isUpdatable=true;
        (new CommentForm("Practice Comments",practiceComments,isUpdatable)).setVisible(true);
    }        

    public void displayResults(PracticeRec p) {
        clearForm();
        resetColors();
        practiceComments.setText(p.comment_text);
        if (!Utils.isNull(practiceRec.comment_text) && currMode==Lab.QUERY)
            displayComments();
        pName.setText(p.name);
        String buf=Integer.toString(p.practice);
        if (p.practice<10) buf="00"+buf;
        else if (p.practice<100) buf="0"+buf;
        pAcctNum.setText(buf);
        if (p.parent_account>0) {
            buf=Integer.toString(p.parent_account);
            if (p.parent_account<10) buf="00"+buf;
            else if (p.parent_account<100) buf="0"+buf;
            parentAccount.setText(buf);
        }
        pAddress1.setText(p.address1);
        pAddress2.setText(p.address2);
        pCity.setText(p.city);
        pState.setText(p.state);
        pZip.setText(Utils.addZipMask(p.zip));
        pContactLast.setText(p.contact);
        pPhone.setText(Utils.addPhoneMask(p.phone));
        pFax.setText(Utils.addPhoneMask(p.fax));
        pType.setText(p.practice_type);
        pProgram.setText(p.program);
        attnMessage.setText(p.attn_message);
        pReportCopies.setText(Integer.toString(p.report_copies));
        pStatements.setText(p.e_reporting);
        dateAdded.setText("ADDED ON: "+p.date_added);
        if (p.patient_cards.equals("Y")) pPatCards.setSelected(true);
        if (p.client_notes.equals("Y")) pClientNotes.setSelected(true);
        if (p.print_doctors.equals("Y")) printDoctors.setSelected(true);
        if (p.block_patient.equals("Y")) blockDBs.setSelected(true);
        if (p.std_clinic.equals("Y")) STDclinic.setSelected(true);
        if (p.hpv_testing.equals("Y")) HPVtesting.setSelected(true);
        if (!Utils.isNull(p.hpv_permission)) {
            if (p.hpv_permission.equals("Y")) HPVPermission.setSelected(true);
        }
        if (p.hold_final.equals("Y")) holdFinal.setSelected(true);
        if (p.verify_doctor.equals("Y")) verifyDoctor.setSelected(true);
        if (p.cover_sheet.equals("D")) disableCoverSheet.setSelected(true);
        if (p.block_mid_month.equals("Y")) oneMonthBill.setSelected(true);
        if (p.imaged.equals("Y")) imagedSlides.setSelected(true);
        if (p.send_fax.equals("Y")) sendFax.setSelected(true);
        if (p.hpv_regardless.equals("Y")) HPVregardless.setSelected(true);
        if (p.hpv_on_summary.equals("Y")) HPVonSummary.setSelected(true);
        priceCode.setText(p.price_code);
        stopCode.setText(p.stop_code);
        if (p.active_status.equals("A")) pStatus.setText("ACTIVE");
        else {
            pStatus.setText("INACTIVE");
            pType.setText("NOT USED");
        }
        if (p.parent_account>0&&p.parent_links.size()>0) {
            StringBuffer s = new StringBuffer();
            s.append("ACCOUNT #"+pAcctNum.getText()+" PARENT ACCOUNT TO:  ");
            for (int i=0; i<p.parent_links.size(); i++) {
                String t = (String)p.parent_links.elementAt(i);
                s.append("[#"+t+"]   ");
            }
            parentLinks.setText(s.toString());
            parentLinks.setVisible(true);
        }
        else {
            parentLinks.setText("LINKS");
            parentLinks.setVisible(false);
        }
        defaultDr.setText(Integer.toString(p.default_doctor));
        clearDoctorTable();
        displayDoctorTable();
        DoctorTable.repaint();
        DoctorTable.revalidate();
    }

    public void updateActions() {
        currMode=Lab.UPDATE;
        fKeys.keyOn(fKeys.F12);
	    this.setEnableAllFields(true);
	    pAcctNum.setEnabled(false);
	    /*
	    pName.requestFocus();
	    pName.select(0,0);
	    */
	    parentAccount.requestFocus();
        msgLabel.setText(null);
    }

    void clearDoctorTable()  {
        dData.removeAllRows();
        DoctorTable.selectAll();
        DoctorTable.clearSelection();
        DoctorTable.revalidate();
        DoctorTable.repaint();
    }            

    public void resetForm() {
        practiceComments.setText(null);
        rowLabel.setText(null);
        rowLabel.setVisible(false);
        currMode=Lab.IDLE;
        resetColors();
        fKeys.off();
        fKeys.keyOn(fKeys.F1);
        fKeys.keyOn(fKeys.F2);
        fKeys.keyOn(fKeys.F9);
        setEnableAllFields(false);
        msgLabel.requestFocus();
        doctorVect = new Vector();
        clearForm();
        clearDoctorTable();
        practiceRec = new PracticeRec();        
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }

	void pReportCopies_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.requiredField(pReportCopies,"Report Copies")) 
		        pReportCopies.transferFocus();
		}
	}
	
	public void displayDoctorTable()
	{
	    for (int i=0; i<dData.getRowCount(); i++) 
            dData.removeRow(i);
        for (int i=0; i<doctorVect.size(); i++) {
            DoctorRec d = (DoctorRec)doctorVect.elementAt(i);
            dData.addRow(
                Integer.toString(d.doctor),d.active_status,
                d.lname,d.fname,d.mi,d.title,d.license,d.upin,d.bs_provider,d.NPI);
        }
        rowLabel.setVisible(true);
        rowLabel.setText("1 of "+doctorVect.size());
        DoctorTable.setRowSelectionInterval(0,0);
	}
	

	void pAcctNum_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (currMode==Lab.QUERY) {
		        if (Utils.isNull(pAcctNum.getText()))
		            pAcctNum.transferFocus();
		        else finalActions();
		    }
		    else if (Utils.requiredField(pAcctNum,"Account Number"))
		        pAcctNum.transferFocus();
		}
	}

	void pName_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.requiredField(pName,"Practice Name"))
		        pName.transferFocus();
		}
	}

	void pAddress1_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    pAddress1.transferFocus();
	}

	void pAddress2_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    pAddress2.transferFocus();
	}

	void pZip_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.buildZipMask(event);
	}

	void pZip_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    pContactLast.requestFocus();
            if (!Utils.isNull(pZip.getText()) &&
                 Utils.isNull(pCity.getText()) &&
                 Utils.isNull(pState.getText())) dbOps.getZipInfo();
		}
	}

	void pCity_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) 
		    pCity.transferFocus();
	}

	void pState_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    pState.transferFocus();
	}

	void pContactLast_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (currMode==MAILER) { dbOps.mailerAdd(); mailerActions(); }
		    else pContactLast.transferFocus();
		}
	}

	void pPhone_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.buildPhoneMask(event);
	}

	void pPhone_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    pPhone.transferFocus();
	}

	void pFax_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.buildPhoneMask(event);
	}

	void pFax_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    pFax.transferFocus();
		}
	}

	void pPatCards_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    pPatCards.transferFocus();
	}

	void pClientNotes_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    pClientNotes.transferFocus();
	}

	void printDoctors_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    printDoctors.transferFocus();
	}

	void stopCode_keyTyped(java.awt.event.KeyEvent event)
	{
		event.consume();
	}

	void stopCode_keyPressed(java.awt.event.KeyEvent event)
	{
	    int key = event.getKeyCode();
		if (key==event.VK_ENTER) {
		    msgLabel.setText(null);
		    if (Utils.requiredField(stopCode,"Stop Code")) 
		        if (currMode!=Lab.UPDATE) {
		            setEnableAllFields(false);
		            setEnableDetails(true);
		            pAcctNum.requestFocus();
		        }
		        else stopCode.transferFocus();
		}
		else if (key!=event.VK_ESCAPE && key!=event.VK_F9) {
		    char c = event.getKeyChar();
		    int x = event.getKeyCode();
		    stopCode.setText(null);
		    event.consume();
		    if (c=='Y' || x==event.VK_Y) { 
		        stopCode.setText("Y");
		        msgLabel.setText("Account will NOT accept billing");
		    }
		    else if (c=='D' || x==event.VK_D) {
		        stopCode.setText("D");
		        msgLabel.setText("ALL labwork is billed to account");
		    }
		    else  {
		        stopCode.setText("N");
		        msgLabel.setText("Account will accept billing");
		    }
		}
	}

	void priceCode_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,2);
	}

	void priceCode_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.requiredField(priceCode,"Price Code")) {
		        /*
		        if (currMode!=Lab.UPDATE) {
		            setEnableAllFields(false);
		            setEnableDetails(true);
		            pAcctNum.requestFocus();
		        }
		        else priceCode.transferFocus();
		        */
		        priceCode.transferFocus();
		    }
		}
	}
	
	void getZipInfo() { }

	void defaultDr_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER || event.getKeyCode()==event.VK_F12) {
		    if (Utils.requiredField(defaultDr,"Default DR#")) {
		        int x = (int)Integer.parseInt(defaultDr.getText());
		        boolean found=false;
		        for (int i=0; i<doctorVect.size(); i++) {
		            DoctorRec d = (DoctorRec)doctorVect.elementAt(i);
		            if (d.doctor==x) {
		                found=true;
		                break;
		            }
		        }
		        if (!found) Utils.createErrMsg("DR# does not exist");
		        else {
		            setEnableAllFields(false);
		            setEnableDetails(true);
		            pAcctNum.requestFocus();
		        }
		    }
		}
	}

	void defaultDr_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event);
	}
	
	private void closingActions()
	{
	    log.stop();
	    dbOps.close();
	    this.dispose();
	}
	
	void resetColors()
	{
        Utils.setColors(this.getContentPane());
        msgLabel.setForeground(Color.green);
        parentLinks.setForeground(Color.white);
        rowLabel.setForeground(Color.white);
        dateAdded.setForeground(Color.white);
        this.repaint();
	}
	

	class SymFocus extends java.awt.event.FocusAdapter
	{
		public void focusGained(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			if (object == pAcctNum)
				pAcctNum_focusGained(event);
			else if (object == pName)
				pName_focusGained(event);
			else if (object == pAddress1)
				pAddress1_focusGained(event);
			else if (object == pAddress2)
				pAddress2_focusGained(event);
			else if (object == pZip)
				pZip_focusGained(event);
			else if (object == pCity)
				pCity_focusGained(event);
			else if (object == pState)
				pState_focusGained(event);
			else if (object == pContactLast)
				pContactLast_focusGained(event);
			else if (object == pPhone)
				pPhone_focusGained(event);
			else if (object == pFax)
				pFax_focusGained(event);
			else if (object == pReportCopies)
				pReportCopies_focusGained(event);
			else if (object == stopCode)
				stopCode_focusGained(event);
			else if (object == priceCode)
				priceCode_focusGained(event);
			else if (object == defaultDr)
				defaultDr_focusGained(event);
			else if (object == HPVPermission)
				HPVPermission_focusGained(event);
			else if (object == attnMessage)
				attnMessage_focusGained(event);
			else if (object == parentAccount)
				parentAccount_focusGained(event);
		}
	}

	void pAcctNum_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void pName_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void pAddress1_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void pAddress2_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void pZip_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void pCity_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void pState_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void pContactLast_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void pPhone_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void pFax_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void pReportCopies_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void stopCode_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void priceCode_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void defaultDr_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void blockDBs_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    blockDBs.transferFocus();
	}

	void STDclinic_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    STDclinic.transferFocus();
	}

	void HPVtesting_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    if (HPVtesting.isSelected()) HPVPermission.setEnabled(true);
		    HPVtesting.transferFocus();
	}

	void pStatements_keyTyped(java.awt.event.KeyEvent event)
	{
		event.consume();
	}

    /* This screen field "recycled"; no longer used for obsolete
       field statement_copies; now used for field e_reporting
    */
	void pStatements_keyPressed(java.awt.event.KeyEvent event)
	{
	    int key = event.getKeyCode();
		if (key==event.VK_ENTER) {
		    msgLabel.setText(null);
		    if (Utils.requiredField(pStatements,"Electronic Reporting")) 
		        pStatements.transferFocus();
		}
		else if (key!=event.VK_ESCAPE && key!=event.VK_F9) {
		    char c = event.getKeyChar();
		    int x = event.getKeyCode();
		    pStatements.setText(null);
		    event.consume();
		    if (c=='Y' || x==event.VK_Y) { 
		        pStatements.setText("Y");
		        msgLabel.setText("Reports sent electronically");
		    }
		    else if (c=='B' || x==event.VK_B) {
		        pStatements.setText("B");
		        msgLabel.setText("Reports BOTH electronic and printed");
		    }
		    else  {
		        pStatements.setText("N");
		        msgLabel.setText("Reports printed only");
		    }
		}
	}
	
	void dateAddedList()
	{
	    (new PracticesAddedDialog()).setVisible(true);
	}

	void HPVPermission_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    HPVPermission.transferFocus();
	}

	// 02/03/2010: If no type is entered it defaults to PCS
	void pType_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.isNull(pType.getText())) pType.setText("PCS");
		    pType.transferFocus();
		}
	}

	void pType_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,32);
	}

	void HPVPermission_focusGained(java.awt.event.FocusEvent event)
	{
		//Utils.deselect(event);
	}
	
	void attnMessage_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,64);
	}

	void attnMessage_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    setEnableAllFields(false);
		    setEnableOptions(true);
		    pReportCopies.requestFocus();
		}
	}
	
	void attnMessage_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void holdFinal_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    holdFinal.transferFocus();
	}

	void verifyDoctor_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    verifyDoctor.transferFocus();
	}

	void disableCoverSheet_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    disableCoverSheet.transferFocus();
	}

	void oneMonthBill_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    oneMonthBill.transferFocus();
	}

	void HPVregardless_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    HPVregardless.transferFocus();
	}

	void imagedSlides_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    imagedSlides.transferFocus();
	}

	void sendFax_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    sendFax.transferFocus();
	}

	void HPVonSummary_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    HPVonSummary.transferFocus();
	}
	

	void parentAccount_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) 
		    parentAccount.transferFocus();
	}

	void parentAccount_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event,3);
	}

	void parentAccount_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
	}

	void pProgram_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (!Utils.isNull(parentAccount.getText())) {
		        if (Utils.requiredField(pProgram,"Program"))
		            pProgram.transferFocus();
		    }
		    else pProgram.transferFocus();
		}
	}

	void pProgram_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,16);
	}
	@Override
	public void resetActions() {
		// TODO Auto-generated method stub
		
	}
	
}


class DoctorData 
{
    public String doctor;
    public String active_status;
    public String lname;
    public String fname;
    public String mi;
    public String title;
    public String license;
    public String upin;
    public String bs_provider;
    public String NPI;
    
    public DoctorData(String doctor, String active_status, String lname, String fname, 
        String mi, String title, String license, String upin, String bs_provider, String NPI)
    {
        this.doctor=doctor;
        this.active_status=active_status;
        this.lname=lname;
        this.fname=fname;
        this.mi=mi;
        this.title=title;
        this.license=license;
        this.upin=upin;
        this.bs_provider=bs_provider;
        this.NPI=NPI;
    }
    
}    

class DoctorTableData extends AbstractTableModel
{
    static final public ColumnData columns[] = {
        new ColumnData("DR#",22,JLabel.LEFT,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("ST",12,JLabel.CENTER),
        new ColumnData("LAST",94,JLabel.LEFT,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("FIRST",34,JLabel.LEFT,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("MI",10,JLabel.CENTER,(new Font("DialogInput",Font.PLAIN,12))),
        new ColumnData("TITLE",16,JLabel.CENTER,(new Font("DialogInput",Font.PLAIN,10))),
        new ColumnData("LICENSE",38,JLabel.LEFT,(new Font("DialogInput",Font.PLAIN,10))),
        new ColumnData("UPIN",38,JLabel.LEFT,(new Font("DialogInput",Font.PLAIN,10))),
        new ColumnData("BS PROV",38,JLabel.LEFT,(new Font("DialogInput",Font.PLAIN,10))),
        new ColumnData("NPI",38,JLabel.LEFT,(new Font("DialogInput",Font.PLAIN,10))),
    };

    private Vector dVect;

    public DoctorTableData() { dVect = new Vector(); }
    
    public void addRow(String doctor, String active_status, String lname, String fname, String mi, 
        String title, String license, String upin, String bs_provider, String NPI) {
        dVect.addElement(new DoctorData(
            doctor,active_status,lname,fname,mi,title,license,upin,bs_provider,NPI));
    }

    public void removeRow(int nRow) { dVect.removeElementAt(nRow); }
    
    public void removeAllRows() {
        dVect.removeAllElements();
    }
    
    public void setValueAt(Object value, int row, int column) {
        DoctorData cRow = (DoctorData)dVect.elementAt(row);
        switch (column) {
            case 0: cRow.doctor=(String)value;break;
            case 1: cRow.active_status=(String)value;break;
            case 2: cRow.lname=(String)value;break;
            case 3: cRow.fname=(String)value;break;
            case 4: cRow.mi=(String)value;break;
            case 5: cRow.title=(String)value;break;
            case 6: cRow.license=(String)value;break;
            case 7: cRow.upin=(String)value;break;
            case 8: cRow.bs_provider=(String)value;break;
            case 9: cRow.NPI=(String)value;break;
        }
        dVect.setElementAt(cRow,row);
    }

    public Object getValueAt(int row, int column) { 
        if (row<0 || row>=getRowCount()) return "";
        DoctorData cRow = (DoctorData)dVect.elementAt(row);
        switch (column) {
            case 0: return cRow.doctor;
            case 1: return cRow.active_status;
            case 2: return cRow.lname;
            case 3: return cRow.fname;
            case 4: return cRow.mi;
            case 5: return cRow.title;
            case 6: return cRow.license;            
            case 7: return cRow.upin;        
            case 8: return cRow.bs_provider;
            case 9: return cRow.NPI;
        }
        return "";
    }
    
    public int getRowCount() { return dVect.size(); }
    public int getColumnCount() { return columns.length; }
    public boolean isCellEditable(int row, int column) { return (true); }
    public String getColumnName(int column) { return columns[column].title; }
    
}
