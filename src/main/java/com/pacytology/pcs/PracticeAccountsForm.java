package com.pacytology.pcs;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.sql.*;
import javax.swing.*;

import com.pacytology.pcs.actions.PracticeAccountsFormActionMap;
import com.pacytology.pcs.ui.PcsFrame;
import com.pacytology.pcs.ui.Square;
import java.util.Vector;
import java.io.*;
import javax.swing.table.*;
	

public class PracticeAccountsForm extends PcsFrame
{
    public Login dbLogin;
    /*
    final int IDLE = 100;
    final int QUERY = 101;
    final int ADD = 102;
    final int UPDATE = 103;
    final int DELETE = 104;
    */
    public int currMode = Lab.IDLE;
    public PracticeRec practiceRec;
    public FunctionKeyControl fKeys = new FunctionKeyControl();
    public PracticeAccountDbOps dbOps;
    public PaymentTableData pData;
    public JTable PaymentTable; 
    public JTableHeader header;
    public JScrollPane ptblScrollPane;
    public boolean dFlag=false;
    public int numPayments=0;
    public Vector paymentTypeVect = new Vector();
    public Vector paymentCodeVect = new Vector();
    boolean practiceQueried = false;
    
	public PracticeAccountsForm()
	{

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Practice Accounts");
		setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(692,562);
		setVisible(false);
		pNameLbl.setText("Name");
		getContentPane().add(pNameLbl);
		pNameLbl.setBounds(38,112,48,12);
		pAcctNumLbl.setText("Account #");
		getContentPane().add(pAcctNumLbl);
		pAcctNumLbl.setBounds(38,86,60,12);
		pAddressLbl.setText("Address");
		getContentPane().add(pAddressLbl);
		pAddressLbl.setBounds(38,136,48,14);
		pCityLbl.setText("City");
		getContentPane().add(pCityLbl);
		pCityLbl.setBounds(38,184,48,12);
		pStateLbl.setText("State");
		getContentPane().add(pStateLbl);
		pStateLbl.setBounds(282,184,36,12);
		pZipLbl.setText("Zip");
		getContentPane().add(pZipLbl);
		pZipLbl.setBounds(358,184,24,12);
		pContactLbl.setText("Contact");
		getContentPane().add(pContactLbl);
		pContactLbl.setBounds(184,86,48,12);
		pPhoneLbl.setText("Phone");
		getContentPane().add(pPhoneLbl);
		pPhoneLbl.setBounds(500,112,42,12);
		pFaxLbl.setText("Fax");
		getContentPane().add(pFaxLbl);
		pFaxLbl.setBounds(500,136,24,12);
		pStopCodeLbl.setText("Stop");
		getContentPane().add(pStopCodeLbl);
		pStopCodeLbl.setBounds(500,160,40,12);
		pPriceCodeLbl.setText("Price");
		getContentPane().add(pPriceCodeLbl);
		pPriceCodeLbl.setBounds(592,160,30,12);
		pName.setEnabled(false);
		getContentPane().add(pName);
		pName.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pName.setBounds(108,110,354,20);
		pAcctNum.setEnabled(false);
		getContentPane().add(pAcctNum);
		pAcctNum.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pAcctNum.setBounds(108,84,36,20);
		pAddress1.setEnabled(false);
		getContentPane().add(pAddress1);
		pAddress1.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pAddress1.setBounds(108,134,354,20);
		pAddress2.setEnabled(false);
		getContentPane().add(pAddress2);
		pAddress2.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pAddress2.setBounds(108,158,354,20);
		pCity.setEnabled(false);
		getContentPane().add(pCity);
		pCity.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pCity.setBounds(108,182,165,20);
		pState.setEnabled(false);
		getContentPane().add(pState);
		pState.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pState.setBounds(318,182,24,20);
		pContactLast.setEnabled(false);
		getContentPane().add(pContactLast);
		pContactLast.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pContactLast.setBounds(240,84,220,20);
		getContentPane().add(msgLabel);
		msgLabel.setForeground(java.awt.Color.red);
		msgLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		msgLabel.setBounds(44,52,372,20);
		getContentPane().add(JLabel1);
		JLabel1.setForeground(java.awt.Color.red);
		JLabel1.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel1.setBounds(34,46,372,20);
		getContentPane().add(F1sq);
		F1sq.setBounds(25,4,20,20);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F1");
		getContentPane().add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(29,4,20,20);
		getContentPane().add(F2sq);
		F2sq.setBounds(87,4,20,20);
		F2lbl.setRequestFocusEnabled(false);
		F2lbl.setText("F2");
		getContentPane().add(F2lbl);
		F2lbl.setForeground(java.awt.Color.black);
		F2lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F2lbl.setBounds(91,4,20,20);
		getContentPane().add(F3sq);
		F3sq.setBounds(149,4,20,20);
		F3lbl.setRequestFocusEnabled(false);
		F3lbl.setText("F3");
		getContentPane().add(F3lbl);
		F3lbl.setForeground(java.awt.Color.black);
		F3lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F3lbl.setBounds(153,4,20,20);
		getContentPane().add(F4sq);
		F4sq.setBounds(211,4,20,20);
		F4lbl.setRequestFocusEnabled(false);
		F4lbl.setText("F4");
		getContentPane().add(F4lbl);
		F4lbl.setForeground(java.awt.Color.black);
		F4lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F4lbl.setBounds(215,4,20,20);
		getContentPane().add(F5sq);
		F5sq.setBounds(273,4,20,20);
		F5lbl.setRequestFocusEnabled(false);
		F5lbl.setText("F5");
		getContentPane().add(F5lbl);
		F5lbl.setForeground(java.awt.Color.black);
		F5lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F5lbl.setBounds(277,4,20,20);
		getContentPane().add(F9sq);
		F9sq.setBounds(335,4,20,20);
		F9lbl.setRequestFocusEnabled(false);
		F9lbl.setText("F9");
		getContentPane().add(F9lbl);
		F9lbl.setForeground(java.awt.Color.black);
		F9lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F9lbl.setBounds(339,4,20,20);
		getContentPane().add(F12sq);
		F12sq.setBounds(397,4,20,20);
		F12lbl.setRequestFocusEnabled(false);
		F12lbl.setText("F12");
		getContentPane().add(F12lbl);
		F12lbl.setForeground(java.awt.Color.black);
		F12lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F12lbl.setBounds(398,4,20,20);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("Query");
		getContentPane().add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(0,28,70,18);
		F2action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F2action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F2action.setText("Add");
		getContentPane().add(F2action);
		F2action.setForeground(java.awt.Color.black);
		F2action.setBounds(62,28,70,16);
		F3action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F3action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F3action.setText("Update");
		getContentPane().add(F3action);
		F3action.setForeground(java.awt.Color.black);
		F3action.setBounds(124,28,70,16);
		F4action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F4action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F4action.setText("Delete");
		getContentPane().add(F4action);
		F4action.setForeground(java.awt.Color.black);
		F4action.setBounds(186,28,70,16);
		F5action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F5action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F5action.setText("Statement");
		getContentPane().add(F5action);
		F5action.setForeground(java.awt.Color.black);
		F5action.setBounds(248,28,70,18);
		F9action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F9action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F9action.setText("Exit");
		getContentPane().add(F9action);
		F9action.setForeground(java.awt.Color.black);
		F9action.setBounds(310,28,70,16);
		F12action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F12action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F12action.setText("Submit");
		getContentPane().add(F12action);
		F12action.setForeground(java.awt.Color.black);
		F12action.setBounds(372,28,70,16);
		priceCode.setEnabled(false);
		getContentPane().add(priceCode);
		priceCode.setFont(new Font("DialogInput", Font.PLAIN, 12));
		priceCode.setBounds(630,158,24,20);
		stopCode.setEnabled(false);
		getContentPane().add(stopCode);
		stopCode.setFont(new Font("DialogInput", Font.PLAIN, 12));
		stopCode.setBounds(550,158,24,20);
		pZip.setEnabled(false);
		getContentPane().add(pZip);
		pZip.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pZip.setBounds(382,182,80,20);
		pPhone.setEnabled(false);
		getContentPane().add(pPhone);
		pPhone.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pPhone.setBounds(550,110,104,20);
		pFax.setEnabled(false);
		getContentPane().add(pFax);
		pFax.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pFax.setBounds(550,134,104,20);
		currBal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		currBal.setEnabled(false);
		getContentPane().add(currBal);
		currBal.setFont(new Font("DialogInput", Font.PLAIN, 12));
		currBal.setBounds(156,234,70,20);
		JLabel2.setText("Current Balance");
		getContentPane().add(JLabel2);
		JLabel2.setBounds(38,236,100,12);
		JLabel3.setText("30 Days Past Due");
		getContentPane().add(JLabel3);
		JLabel3.setBounds(38,258,100,12);
		JLabel4.setText("60 Days Past Due");
		getContentPane().add(JLabel4);
		JLabel4.setBounds(38,280,100,12);
		JLabel5.setText("90 Days Past Due");
		getContentPane().add(JLabel5);
		JLabel5.setBounds(38,302,100,12);
		JLabel6.setText("Statement Total");
		getContentPane().add(JLabel6);
		JLabel6.setBounds(38,376,100,12);
		past30Bal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		past30Bal.setEnabled(false);
		getContentPane().add(past30Bal);
		past30Bal.setFont(new Font("DialogInput", Font.PLAIN, 12));
		past30Bal.setBounds(156,256,70,20);
		past60Bal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		past60Bal.setEnabled(false);
		getContentPane().add(past60Bal);
		past60Bal.setFont(new Font("DialogInput", Font.PLAIN, 12));
		past60Bal.setBounds(156,278,70,20);
		past90Bal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		past90Bal.setEnabled(false);
		getContentPane().add(past90Bal);
		past90Bal.setFont(new Font("DialogInput", Font.PLAIN, 12));
		past90Bal.setBounds(156,300,70,20);
		totalBal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		totalBal.setEnabled(false);
		getContentPane().add(totalBal);
		totalBal.setFont(new Font("DialogInput", Font.PLAIN, 12));
		totalBal.setBounds(156,374,70,20);
		statementLbl.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
		statementLbl.setText("LAST STATEMENT");
		getContentPane().add(statementLbl);
		statementLbl.setForeground(java.awt.Color.black);
		statementLbl.setBounds(38,216,190,18);
		JLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		JLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		JLabel8.setText("--------------");
		getContentPane().add(JLabel8);
		JLabel8.setForeground(java.awt.Color.black);
		JLabel8.setFont(new Font("Dialog", Font.BOLD, 14));
		JLabel8.setBounds(156,362,70,12);
		JLabel10.setText("Lab Charges");
		getContentPane().add(JLabel10);
		JLabel10.setBounds(38,432,88,12);
		runningTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		runningTotal.setEnabled(false);
		getContentPane().add(runningTotal);
		runningTotal.setFont(new Font("DialogInput", Font.PLAIN, 12));
		runningTotal.setBounds(156,430,70,20);
		JLabel12.setText("Actual Total");
		getContentPane().add(JLabel12);
		JLabel12.setBounds(38,528,78,12);
		actualTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		actualTotal.setEnabled(false);
		getContentPane().add(actualTotal);
		actualTotal.setFont(new Font("DialogInput", Font.PLAIN, 12));
		actualTotal.setBounds(156,526,70,20);
		JLabel13.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		JLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		JLabel13.setText("--------------");
		getContentPane().add(JLabel13);
		JLabel13.setForeground(java.awt.Color.black);
		JLabel13.setFont(new Font("Dialog", Font.BOLD, 14));
		JLabel13.setBounds(156,514,70,12);
		paymentLbl.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
		paymentLbl.setText("PAYMENTS");
		getContentPane().add(paymentLbl);
		paymentLbl.setForeground(java.awt.Color.black);
		paymentLbl.setBounds(262,216,140,18);
		JLabel15.setText("Type");
		getContentPane().add(JLabel15);
		JLabel15.setBounds(400,236,38,12);
		JLabel16.setText("Amount");
		getContentPane().add(JLabel16);
		JLabel16.setBounds(262,236,46,12);
		paymentAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		paymentAmount.setEnabled(false);
		getContentPane().add(paymentAmount);
		paymentAmount.setFont(new Font("DialogInput", Font.PLAIN, 12));
		paymentAmount.setBounds(318,234,70,20);
		payCode.setText("C");
		payCode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		payCode.setEnabled(false);
		getContentPane().add(payCode);
		payCode.setFont(new Font("DialogInput", Font.PLAIN, 12));
		payCode.setBounds(432,234,20,20);
		checkNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		checkNumber.setEnabled(false);
		getContentPane().add(checkNumber);
		checkNumber.setFont(new Font("DialogInput", Font.PLAIN, 12));
		checkNumber.setBounds(318,256,70,20);
		dateReceived.setEnabled(false);
		getContentPane().add(dateReceived);
		dateReceived.setFont(new Font("DialogInput", Font.PLAIN, 12));
		dateReceived.setBounds(494,256,76,20);
		adjustReason.setEnabled(false);
		getContentPane().add(adjustReason);
		adjustReason.setFont(new Font("DialogInput", Font.PLAIN, 12));
		adjustReason.setBounds(384,284,186,20);
		adjustReason.setVisible(false);
		JLabel17.setText("Check #");
		getContentPane().add(JLabel17);
		JLabel17.setBounds(264,258,46,14);
		payHistLbl.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
		payHistLbl.setText("PAYMENT HISTORY");
		getContentPane().add(payHistLbl);
		payHistLbl.setForeground(java.awt.Color.black);
		payHistLbl.setBounds(262,320,140,18);
		JLabel9.setText("Payments");
		getContentPane().add(JLabel9);
		JLabel9.setBounds(38,454,104,12);
		currentPayments.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		currentPayments.setEnabled(false);
		getContentPane().add(currentPayments);
		currentPayments.setFont(new Font("DialogInput", Font.PLAIN, 12));
		currentPayments.setBounds(156,452,70,20);
		adjustLbl.setText("Adjustment Reason");
		getContentPane().add(adjustLbl);
		adjustLbl.setBounds(264,286,118,14);
		adjustLbl.setVisible(false);
		plusAdjusts.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		plusAdjusts.setEnabled(false);
		getContentPane().add(plusAdjusts);
		plusAdjusts.setFont(new Font("DialogInput", Font.PLAIN, 12));
		plusAdjusts.setBounds(156,496,70,20);
		minusAdjusts.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		minusAdjusts.setEnabled(false);
		getContentPane().add(minusAdjusts);
		minusAdjusts.setFont(new Font("DialogInput", Font.PLAIN, 12));
		minusAdjusts.setBounds(156,474,70,20);
		JLabel11.setText("Minus Adjusts");
		getContentPane().add(JLabel11);
		JLabel11.setBounds(38,476,104,12);
		JLabel18.setText("Plus Adjusts");
		getContentPane().add(JLabel18);
		JLabel18.setBounds(38,498,104,12);
		currentLbl.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
		currentLbl.setText("CURRENT");
		getContentPane().add(currentLbl);
		currentLbl.setForeground(java.awt.Color.black);
		currentLbl.setBounds(38,410,140,18);
		JLabel20.setText("Received");
		getContentPane().add(JLabel20);
		JLabel20.setBounds(400,258,56,12);
		payCodeLbl.setText("CHECK");
		getContentPane().add(payCodeLbl);
		payCodeLbl.setBounds(458,236,118,12);
		JLabel7.setText("Minus Adjusts");
		getContentPane().add(JLabel7);
		JLabel7.setBounds(38,324,104,12);
		lastMinus.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		lastMinus.setEnabled(false);
		getContentPane().add(lastMinus);
		lastMinus.setFont(new Font("DialogInput", Font.PLAIN, 12));
		lastMinus.setBounds(156,322,70,20);
		JLabel14.setText("Plus Adjusts");
		getContentPane().add(JLabel14);
		JLabel14.setBounds(38,346,104,12);
		lastPlus.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		lastPlus.setEnabled(false);
		getContentPane().add(lastPlus);
		lastPlus.setFont(new Font("DialogInput", Font.PLAIN, 12));
		lastPlus.setBounds(156,344,70,20);
		//}}

        practiceRec = new PracticeRec();

		pData = new PaymentTableData();
		PaymentTable = new JTable();
		PaymentTable.setAutoCreateColumnsFromModel(false);
		PaymentTable.setModel(pData);

		for (int k=0;k<PaymentTableData.columns.length;k++) {
		    DefaultTableCellRenderer renderer = new
		        DefaultTableCellRenderer();
            renderer.setHorizontalAlignment(
                PaymentTableData.columns[k].alignment);
            TableColumn column = new TableColumn(k,
                PaymentTableData.columns[k].width,renderer,null);
            PaymentTable.addColumn(column);
		}
		
		header = PaymentTable.getTableHeader();
		header.setFont(new Font("Dialog",Font.BOLD, 11));
	
		ptblScrollPane = new JScrollPane();
		ptblScrollPane.getViewport().add(PaymentTable);
		getContentPane().add(ptblScrollPane);
		ptblScrollPane.setBounds(250,340,420,200);
        ptblScrollPane.setAutoscrolls(true);
        ptblScrollPane.setEnabled(false);

		PaymentTable.setFont(new Font("SansSerif", Font.PLAIN, 11));
		PaymentTable.setBounds(0,0,297,97);
        PaymentTable.setRowHeight(12);
        PaymentTable.setCellSelectionEnabled(false);
        PaymentTable.setEnabled(false);
        
        //payHistLbl.setVisible(false);

		//{{INIT_MENUS
		//}}
	
		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		SymKey aSymKey = new SymKey();
		pName.addKeyListener(aSymKey);
		pAddress1.addKeyListener(aSymKey);
		pAddress2.addKeyListener(aSymKey);
		pCity.addKeyListener(aSymKey);
		pState.addKeyListener(aSymKey);
		pContactLast.addKeyListener(aSymKey);
		pAcctNum.addKeyListener(aSymKey);
		this.addKeyListener(aSymKey);
		pZip.addKeyListener(aSymKey);
		paymentAmount.addKeyListener(aSymKey);
		SymFocus aSymFocus = new SymFocus();
		paymentAmount.addFocusListener(aSymFocus);
		checkNumber.addKeyListener(aSymKey);
		adjustReason.addKeyListener(aSymKey);
		payCode.addKeyListener(aSymKey);
		dateReceived.addKeyListener(aSymKey);
		//}}
		
		actionMap = new PracticeAccountsFormActionMap(this);
		setupKeyPressMap();
	}

	protected JRootPane setupKeyPressMap() {
		JRootPane rp = super.setupKeyPressMap();

		rp.getActionMap().put("F8", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				if (payCode.hasFocus()) {
					String[] buf = new String[paymentTypeVect.size()];
					String[] buf2 = new String[paymentTypeVect.size()];
					for (int i = 0; i < paymentTypeVect.size(); i++) {
						buf[i] = (String) paymentCodeVect.elementAt(i);
						buf2[i] = (String) paymentCodeVect.elementAt(i) + "  "
								+ paymentTypeVect.elementAt(i);
					}
					(new PickList("Payment Types", 400, 180, 200, 160,
							paymentTypeVect.size(), buf2, buf, payCode))
							.setVisible(true);
				}
			}
		});
		rp.getActionMap().put("ESC", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				resetForm();
			}
		});
		rp.getActionMap().put("F12", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
                if (fKeys.isOn(fKeys.F12))
                    finalActions();
			}
		});
		
		
		return rp;
	}
	public PracticeAccountsForm(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

    public PracticeAccountsForm(Login dbLogin)
    {
        this();
        this.dbLogin=dbLogin;
        this.dbOps = new PracticeAccountDbOps(this);
        this.dbOps.getPaymentTypes();
        this.resetForm();
    }        

   
	public void setVisible(boolean b)
	{
		if (b) setLocation(0,0);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new PracticeAccountsForm()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		Insets insets = getInsets();
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JLabel pNameLbl = new javax.swing.JLabel();
	javax.swing.JLabel pAcctNumLbl = new javax.swing.JLabel();
	javax.swing.JLabel pAddressLbl = new javax.swing.JLabel();
	javax.swing.JLabel pCityLbl = new javax.swing.JLabel();
	javax.swing.JLabel pStateLbl = new javax.swing.JLabel();
	javax.swing.JLabel pZipLbl = new javax.swing.JLabel();
	javax.swing.JLabel pContactLbl = new javax.swing.JLabel();
	javax.swing.JLabel pPhoneLbl = new javax.swing.JLabel();
	javax.swing.JLabel pFaxLbl = new javax.swing.JLabel();
	javax.swing.JLabel pStopCodeLbl = new javax.swing.JLabel();
	javax.swing.JLabel pPriceCodeLbl = new javax.swing.JLabel();
	javax.swing.JTextField pName = new javax.swing.JTextField();
	javax.swing.JTextField pAcctNum = new javax.swing.JTextField();
	javax.swing.JTextField pAddress1 = new javax.swing.JTextField();
	javax.swing.JTextField pAddress2 = new javax.swing.JTextField();
	javax.swing.JTextField pCity = new javax.swing.JTextField();
	javax.swing.JTextField pState = new javax.swing.JTextField();
	javax.swing.JTextField pContactLast = new javax.swing.JTextField();
	javax.swing.JLabel msgLabel = new javax.swing.JLabel();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	Square F1sq = new Square();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	Square F2sq = new Square();
	javax.swing.JLabel F2lbl = new javax.swing.JLabel();
	Square F3sq = new Square();
	javax.swing.JLabel F3lbl = new javax.swing.JLabel();
	Square F4sq = new Square();
	javax.swing.JLabel F4lbl = new javax.swing.JLabel();
	Square F5sq = new Square();
	javax.swing.JLabel F5lbl = new javax.swing.JLabel();
	Square F9sq = new Square();
	javax.swing.JLabel F9lbl = new javax.swing.JLabel();
	Square F12sq = new Square();
	javax.swing.JLabel F12lbl = new javax.swing.JLabel();
	javax.swing.JLabel F1action = new javax.swing.JLabel();
	javax.swing.JLabel F2action = new javax.swing.JLabel();
	javax.swing.JLabel F3action = new javax.swing.JLabel();
	javax.swing.JLabel F4action = new javax.swing.JLabel();
	javax.swing.JLabel F5action = new javax.swing.JLabel();
	javax.swing.JLabel F9action = new javax.swing.JLabel();
	javax.swing.JLabel F12action = new javax.swing.JLabel();
	javax.swing.JTextField priceCode = new javax.swing.JTextField();
	javax.swing.JTextField stopCode = new javax.swing.JTextField();
	javax.swing.JTextField pZip = new javax.swing.JTextField();
	javax.swing.JTextField pPhone = new javax.swing.JTextField();
	javax.swing.JTextField pFax = new javax.swing.JTextField();
	javax.swing.JTextField currBal = new javax.swing.JTextField();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel5 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel6 = new javax.swing.JLabel();
	javax.swing.JTextField past30Bal = new javax.swing.JTextField();
	javax.swing.JTextField past60Bal = new javax.swing.JTextField();
	javax.swing.JTextField past90Bal = new javax.swing.JTextField();
	javax.swing.JTextField totalBal = new javax.swing.JTextField();
	javax.swing.JLabel statementLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel8 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel10 = new javax.swing.JLabel();
	javax.swing.JTextField runningTotal = new javax.swing.JTextField();
	javax.swing.JLabel JLabel12 = new javax.swing.JLabel();
	javax.swing.JTextField actualTotal = new javax.swing.JTextField();
	javax.swing.JLabel JLabel13 = new javax.swing.JLabel();
	javax.swing.JLabel paymentLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel15 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel16 = new javax.swing.JLabel();
	javax.swing.JTextField paymentAmount = new javax.swing.JTextField();
	javax.swing.JTextField payCode = new javax.swing.JTextField();
	javax.swing.JTextField checkNumber = new javax.swing.JTextField();
	javax.swing.JTextField dateReceived = new javax.swing.JTextField();
	javax.swing.JTextField adjustReason = new javax.swing.JTextField();
	javax.swing.JLabel JLabel17 = new javax.swing.JLabel();
	javax.swing.JLabel payHistLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel9 = new javax.swing.JLabel();
	javax.swing.JTextField currentPayments = new javax.swing.JTextField();
	javax.swing.JLabel adjustLbl = new javax.swing.JLabel();
	javax.swing.JTextField plusAdjusts = new javax.swing.JTextField();
	javax.swing.JTextField minusAdjusts = new javax.swing.JTextField();
	javax.swing.JLabel JLabel11 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel18 = new javax.swing.JLabel();
	javax.swing.JLabel currentLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel20 = new javax.swing.JLabel();
	javax.swing.JLabel payCodeLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel7 = new javax.swing.JLabel();
	javax.swing.JTextField lastMinus = new javax.swing.JTextField();
	javax.swing.JLabel JLabel14 = new javax.swing.JLabel();
	javax.swing.JTextField lastPlus = new javax.swing.JTextField();
	//}}
	

	//{{DECLARE_MENUS
	//}}


	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			
		}
	}

	public void addActions() {
	    if (practiceQueried) {
	        currMode=Lab.ADD;
	        fKeys.keyOn(fKeys.F12);
	        paymentAmount.setEnabled(true);
	        dateReceived.setEnabled(true);
	        payCode.setEnabled(true);
	        checkNumber.setEnabled(true);
	        paymentAmount.requestFocus();
	        PaymentTable.clearSelection();
	        PaymentTable.setEnabled(false);
		    msgLabel.setText(null);
		}
		else {
	        resetForm();
            currMode=Lab.ADD;
            msgLabel.setText(null);
            pAcctNum.setEnabled(true);
            fKeys.keyOff(fKeys.F2);
            fKeys.keyOff(fKeys.F3);
            fKeys.keyOff(fKeys.F4);
            fKeys.keyOff(fKeys.F5);
            fKeys.keyOn(fKeys.F12);
            pAcctNum.setBackground(java.awt.Color.red);
            pAcctNum.setForeground(java.awt.Color.white);
		    pAcctNum.requestFocus();
		}
	}
	
	public void setEnableAllFields(boolean eVal) {
	    pName.setEnabled(eVal);
	    pAddress1.setEnabled(eVal);
	    pAddress2.setEnabled(eVal);
	    pCity.setEnabled(eVal);
	    pState.setEnabled(eVal);
	    pZip.setEnabled(eVal);
	    pAcctNum.setEnabled(eVal);
	    pContactLast.setEnabled(eVal);
	    pPhone.setEnabled(eVal);
	    pFax.setEnabled(eVal);
    }	    
    

	public void forceUpper(java.awt.event.KeyEvent event) {
        try {
	        char key=event.getKeyChar();
	        if ( (key>='a')&&(key<='z') ) 
	            event.setKeyChar((char)(key-32));
        }
        catch (Exception e)  {
            System.out.println(e);                
        }            
    }	    

	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == PracticeAccountsForm.this)
				PracticeAccountsForm_keyPressed(event);
			else if (object == paymentAmount)
				paymentAmount_keyPressed(event);
			else if (object == payCode)
				payCode_keyPressed(event);
			else if (object == checkNumber)
				checkNumber_keyPressed(event);
			else if (object == dateReceived)
				dateReceived_keyPressed(event);
			else if (object == adjustReason)
				adjustReason_keyPressed(event);
			else if (object == pAcctNum)
				pAcctNum_keyPressed(event);
		}

		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == pName)
				pName_keyTyped(event);
			else if (object == pAddress1)
				pAddress1_keyTyped(event);
			else if (object == pCity)
				pCity_keyTyped(event);
			else if (object == pAddress2)
				pAddress2_keyTyped(event);
			else if (object == pState)
				pState_keyTyped(event);
			else if (object == pContactLast)
				pContactLast_keyTyped(event);
			if (object == pAcctNum)
				pAcctNum_keyTyped(event);
			else if (object == pZip)
				pZip_keyTyped(event);
			else if (object == paymentAmount)
				paymentAmount_keyTyped(event);
			else if (object == checkNumber)
				checkNumber_keyTyped(event);
			else if (object == adjustReason)
				adjustReason_keyTyped(event);
			else if (object == payCode)
				payCode_keyTyped(event);
			else if (object == dateReceived)
				dateReceived_keyTyped(event);
			
		}
	}

	void pName_keyTyped(java.awt.event.KeyEvent event)
	{
        forceUpper(event);	            
	}

	void pAddress1_keyTyped(java.awt.event.KeyEvent event)
	{
		forceUpper(event);
	}

	void pAddress2_keyTyped(java.awt.event.KeyEvent event)
	{
		forceUpper(event);
	}

	void pCity_keyTyped(java.awt.event.KeyEvent event)
	{
		forceUpper(event);
	}

	void pState_keyTyped(java.awt.event.KeyEvent event)
	{
		forceUpper(event);
	}

	void pContactLast_keyTyped(java.awt.event.KeyEvent event)
	{
		forceUpper(event);
	}

	void pAcctNum_keyTyped(java.awt.event.KeyEvent event)
	{
	    Utils.forceDigits(event,3);
	    /*
        try {
	        char key=event.getKeyChar();
	        if ( (key<'0')||(key>'9') ) 
	            event.setKeyChar('\b');
        }
        catch (Exception e)  {
            System.out.println(e);                
        } 
        */
	}

    public void queryActions() {
	    resetForm();
        currMode=Lab.QUERY;
        msgLabel.setText(null);
        pAcctNum.setEnabled(true);
        fKeys.keyOff(fKeys.F2);
        fKeys.keyOff(fKeys.F3);
        fKeys.keyOff(fKeys.F4);
        fKeys.keyOff(fKeys.F5);
        fKeys.keyOn(fKeys.F12);
        pAcctNum.setBackground(Color.white);
        pAcctNum.setForeground(Color.black);
        pAcctNum.setCaretColor(Color.black);
		pAcctNum.requestFocus();
    }

	public void finalActions() {
	    boolean rv=false;
	    practiceQueried=false;
        int practice=(int)Integer.parseInt(pAcctNum.getText());
	    if (currMode==Lab.QUERY) {
	        rv=dbOps.query(practice);
	        if (rv) {
	            practiceQueried=true;
	            resetColors();
	            pAcctNum.setEnabled(false);
	            displayResults(practiceRec);
	            if (numPayments>0) { displayPaymentTable(); }
	            setEnableAllFields(false);
	            msgLabel.requestFocus();
	        }
	        currMode=Lab.IDLE;
	    }
	    else if (currMode==Lab.ADD) {
	        boolean validNum = false;
	        try {
	            Double d = Double.valueOf(paymentAmount.getText());
	            if (d.doubleValue()>0) validNum=true;
	        }
	        catch (Exception e) { validNum=false; }
	        if (!validNum) createErrMsg("Payment amount must be greater than 0");
	        else { 
	            String payDate=dateReceived.getText();
	            boolean result = dbOps.add(practice); 
	            if (result) {
	                /*
	                if (practiceQueried) {
	                    String payType=payCode.getText();
	                    if (payType.equals("C"))
	                    payType=payType+"["+checkNumber.getText()+"]";
	                    String payAmount=paymentAmount.getText();
	                    String payAdjReason=null;
	                    if ((payType.equals("+"))||(payType.equals("-"))) {
	                        payAdjReason=adjustReason.getText();
                        }   else payAdjReason="NONE";
	                    pData.addFirstRow(payDate,payType,payAmount,payAdjReason);
	                    paymentAmount.setText(null);
	                    paymentAmount.setEnabled(false);
	                    checkNumber.setText(null);
	                    checkNumber.setEnabled(false);
	                    adjustLbl.setVisible(false);
	                    adjustReason.setText(null);
	                    adjustReason.setEnabled(false);
	                    adjustReason.setVisible(false);
	                    payCode.setText("C");
	                    payCodeLbl.setText("CHECK");
	                    payCode.setEnabled(false);
	                    dateReceived.setText(null);
	                    dateReceived.setEnabled(false);
	                    msgLabel.requestFocus();
	                    double rTtl=Double.valueOf(runningTotal.getText()).doubleValue();
	                    dbOps.queryPaymentTotal(practice,rTtl);
	                    numPayments++;
	                    PaymentTable.repaint();
	                    PaymentTable.revalidate();
	                }
	                else addActions();
	                */
	                currMode=Lab.IDLE;
	                addActions();
	            }
	            else {
	                currMode=Lab.IDLE;
	                resetForm();
	            }
            }
	    }
	}
	
	void clearForm() {
	    pName.setText(null);
	    pAddress1.setText(null);
	    pAddress2.setText(null);
	    pCity.setText(null);
	    pState.setText(null);
	    pZip.setText(null);
	    pAcctNum.setText(null);
	    pContactLast.setText(null);
	    pPhone.setText(null);
	    pFax.setText(null);
	    stopCode.setText(null);
	    priceCode.setText(null);
	    currBal.setText(null);
	    past30Bal.setText(null);
	    past60Bal.setText(null);
	    past90Bal.setText(null);
	    totalBal.setText(null);
	    lastMinus.setText(null);
	    lastPlus.setText(null);
	    runningTotal.setText(null);
	    currentPayments.setText(null);
	    plusAdjusts.setText(null);
	    minusAdjusts.setText(null);
	    actualTotal.setText(null);
	    //payHistLbl.setVisible(false);
	    msgLabel.setText(null);
	    paymentAmount.setText(null);
	    payCode.setText("C");
	    payCodeLbl.setText("CHECK");
	    dateReceived.setText(null);
	    checkNumber.setText(null);
        adjustLbl.setVisible(false);
	    adjustReason.setText(null);
	    adjustReason.setEnabled(false);
	    adjustReason.setVisible(false);
	    statementLbl.setText("LAST STATEMENT");
	    msgLabel.requestFocus();
    }

    public void resetForm() {
        resetColors();
	    dFlag=false;
	    paymentAmount.setEnabled(false);
	    dateReceived.setEnabled(false);
	    checkNumber.setEnabled(false);
	    payCode.setEnabled(false);
	    pAcctNum.setEnabled(false);
	    adjustReason.setEnabled(false);
        if (currMode==Lab.ADD) {
            paymentAmount.setText(null);
            dateReceived.setText(null);
            checkNumber.setText(null);
            adjustReason.setText(null);
            adjustReason.setVisible(false);
            payCode.setText("C");
            payCodeLbl.setText("CHECK");
            msgLabel.setText(null);
            msgLabel.requestFocus();
        }
        else {
            pData.reset();
            //ptblScrollPane.setVisible(false);
            numPayments=0;
	        practiceRec.reset();
            clearForm();
        }
	    currMode=Lab.IDLE;
    }
    
	void PracticeAccountsForm_keyPressed(java.awt.event.KeyEvent event)
	{
        try {
            msgLabel.setText(null);
            int ndx=0;
	        int key=event.getKeyCode();
            switch (key) {
                case java.awt.event.KeyEvent.VK_ESCAPE:
                    resetForm();
                    break;
                
                case java.awt.event.KeyEvent.VK_F12:

                    break;


                case java.awt.event.KeyEvent.VK_CONTROL:
                    ((JTextField)getFocusOwner()).setText(null);
                    dFlag=false;
                    break;
            }
        }
        catch (Exception e)  { System.out.println(e); }            
	}
	
    void resetColors()
    {
        Utils.setColors(this.getContentPane());
        payHistLbl.setForeground(Color.white);
        currentLbl.setForeground(Color.white);
        statementLbl.setForeground(Color.white);
        paymentLbl.setForeground(Color.white);
    }
    
    public void displayStatement()
    {
        if (Utils.isNull(pAcctNum.getText())) return;
        int MM = (int)Integer.parseInt(dbLogin.dateToday.substring(0,2));
        int YY = (int)Integer.parseInt(dbLogin.dateToday.substring(6,8));
        String month = null;
        String year = null;
        if (MM==1) { MM=12; YY=YY-1; }
        else MM=MM-1;
        if (MM<10) month="0"+Integer.toString(MM);
        else month=Integer.toString(MM);
        if (YY<10) year="0"+Integer.toString(YY);
        else year=Integer.toString(YY);
        String fileName = 
            pAcctNum.getText() + month + dbLogin.dateToday.substring(4,5) + year;
        (new ReportViewer(fileName,"Most Recent Statement for: "+pName.getText())).setVisible(true);
    }

    public void displayResults(PracticeRec p) {
        resetColors();
        pName.setText(p.name);
        String buf=Integer.toString(p.practice);
        if (p.practice<10) buf="00"+buf;
        else if (p.practice<100) buf="0"+buf;
        pAcctNum.setText(buf);
        pAddress1.setText(p.address1);
        pAddress2.setText(p.address2);
        pCity.setText(p.city);
        pState.setText(p.state);
        pZip.setText(Utils.addZipMask(p.zip));
        pContactLast.setText(p.contact);
        pPhone.setText(Utils.addPhoneMask(p.phone));
        pFax.setText(Utils.addPhoneMask(p.fax));
        stopCode.setText(p.stop_code);
        priceCode.setText(p.price_code);
        if (!Utils.isNull(p.last_statement))
            statementLbl.setText("LAST STATEMENT:      "+p.last_statement);
    }

    public void updateActions() {
        currMode=Lab.UPDATE;
        fKeys.keyOn(fKeys.F12);
	    this.setEnableAllFields(true);
	    pAcctNum.setEnabled(false);
	    pName.requestFocus();
        msgLabel.setText(null);
    }

	public void forceDigits(java.awt.event.KeyEvent event)  {
	    msgLabel.setText(null);
	    try {
	        char key=event.getKeyChar();
	        if ( ((key<'0')||(key>'9')) & key!='\b' ) 
	            event.consume();
        }
        catch (Exception e)  {
            System.out.println(e);                
        }            
    }        

	public void forceDigits(java.awt.event.KeyEvent event, boolean b)  {
	    msgLabel.setText(null);
	    try {
	        char key=event.getKeyChar();
	        if (key=='.') {
	            if (dFlag==false) dFlag=true;
	            else event.consume();
	        }
	        else if ( (key<'0')||(key>'9') ) 
	            event.consume();
        }
        catch (Exception e)  {
            System.out.println(e);                
        }            
    }        

	void pZip_keyTyped(java.awt.event.KeyEvent event)
	{
	}
	
	void displayPaymentTable() {
        dbOps.getPaymentData(practiceRec.practice);
        PaymentTable.revalidate();
        PaymentTable.repaint();
	}

	void paymentAmount_keyTyped(java.awt.event.KeyEvent event)
	{
		forceDigits(event,true);
	}

	class SymFocus extends java.awt.event.FocusAdapter
	{
		public void focusLost(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			if (object == paymentAmount)
				paymentAmount_focusLost(event);
		}

		public void focusGained(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			Utils.deselect(event);
			if (object == paymentAmount)
				paymentAmount_focusGained(event);
		}
	}

	void paymentAmount_focusGained(java.awt.event.FocusEvent event)
	{
		try { 
		    int x = ((String)paymentAmount.getText()).length(); 
		    if (((String)paymentAmount.getText()).compareTo("0.00")==0)
		        paymentAmount.setText(null);
        }
		catch (Exception e) { dFlag=false; }
	}
	

	void paymentAmount_keyPressed(java.awt.event.KeyEvent event)
	{
		char key=event.getKeyChar();
		if (key=='\b') {
		    try {
		        int x = ((String)paymentAmount.getText()).length();
		        if (((String)paymentAmount.getText()).charAt(x-1)=='.')
		            dFlag=false;
		    }
		    catch (Exception e) { dFlag=false; }
		}
		else if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.requiredField(paymentAmount,"Payment Amount")) {
		        try {
		            String buf = (String)paymentAmount.getText();
		            int x = buf.length();
		            int decimalPos=x;
		            for (int i=0;i<x;i++) {
		                if (buf.charAt(i)=='.') {
		                    decimalPos=i;
		                    break;
		                }
		            }
		            if (x>0) {
		                if (x-decimalPos==0) buf=buf+".00";
		                else if (x-decimalPos==1) buf=buf+"00";
		                else if (x-decimalPos==2) buf=buf+"0";
		            }   else buf="0.00";
		            paymentAmount.setText(buf);
		            paymentAmount.transferFocus();
		        }
		        catch (Exception e) {  }
		    }
		}
	}

	void paymentAmount_focusLost(java.awt.event.FocusEvent event)
	{
	}

	void checkNumber_keyTyped(java.awt.event.KeyEvent event)
	{
		forceDigits(event);
	}
	
	public void createErrMsg(String msg)  {
        (new ErrorDialog(msg)).setVisible(true);
    }	    

	void adjustReason_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event);
	}

	void payCode_keyTyped(java.awt.event.KeyEvent event)
	{
	    /*
		Utils.forceUpper(event);
            char c = event.getKeyChar();
            event.consume();
            payCode.setText((new StringBuffer(c)).toString());
            if (Utils.isNull(payCode.getText())) {
                payCode.setText("C");
                payCodeLbl.setText("CHECK");
            }
            */
        event.consume();            
	}

	void payCode_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
            String buf = payCode.getText();
            if (!paymentCodeVect.contains(buf)) {
                Utils.createErrMsg("Invalid Payment Type ["+buf+"]");
                payCode.setText(null);
                payCodeLbl.setText(null);
            }
		    else if (Utils.requiredField(payCode,"Payment Type")) {
		        if (buf.equals("C")) checkNumber.setEnabled(true);
		        else if ((buf.equals("+"))||(buf.equals("-"))) {
		            adjustLbl.setVisible(true);
		            adjustReason.setVisible(true);
		            adjustReason.setEnabled(true);
		            checkNumber.setEnabled(false);
		            checkNumber.setText(null);
                }		        
		        else {
		            checkNumber.setEnabled(false);
		            checkNumber.setText(null);
		            adjustLbl.setVisible(false);
		            adjustReason.setVisible(false);
		            adjustReason.setEnabled(false);
		        }
		        payCodeLbl.setText((String)paymentTypeVect.elementAt(
		            paymentCodeVect.indexOf(buf)));
		        payCode.transferFocus();
		    }
		}
		else {
			char c = event.getKeyChar();
		    StringBuffer s = new StringBuffer();
		    s.append(c);
            payCode.setText(s.toString().toUpperCase());
        }
	}

	void checkNumber_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (payCode.getText().equals("C")) {
		        if (!Utils.requiredField(checkNumber,"Check Number"))
		            return;
		    }
		    checkNumber.transferFocus();
	    }
	}

	void dateReceived_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.buildDateMask(event);
	}

	void dateReceived_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(dateReceived,"Date Received")) {
		        if (Utils.dateVerify(dateReceived)) {
		            String s = payCode.getText();
		            if (s.equals("+") || s.equals("-")) dateReceived.transferFocus();
                    else if (currMode==Lab.ADD) finalActions();
                    else dateReceived.transferFocus();
                }
            }
        }
	}

	void adjustReason_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (currMode==Lab.ADD) finalActions();
		    else adjustReason.transferFocus();
		}
	}
	

	void pAcctNum_keyPressed(java.awt.event.KeyEvent event)
	{
	    int practice = 0;
	    if (event.getKeyCode()==event.VK_ENTER) {
	        if (Utils.requiredField(pAcctNum,"Practice")) 
                practice=(int)Integer.parseInt(pAcctNum.getText());
            else return;
            practiceQueried=false;
	        boolean rv=dbOps.query(practice);
	        if (rv) {
	            resetColors();
	            pAcctNum.setEnabled(false);
	            displayResults(practiceRec);
	            if (numPayments>0) { displayPaymentTable(); }
	            msgLabel.requestFocus();
	            fKeys.keyOn(fKeys.F12);
	            practiceQueried=true;
	            if (currMode==Lab.ADD) {
	                paymentAmount.setEnabled(true);
	                dateReceived.setEnabled(true);
	                payCode.setEnabled(true);
	                checkNumber.setEnabled(true);
	                paymentAmount.requestFocus();
	                PaymentTable.clearSelection();
	                PaymentTable.setEnabled(false);
		            msgLabel.setText(null);
		        }
	        }
	    }
	}

	@Override
	public void resetActions() {
		// TODO Auto-generated method stub
		
	}
}

class PaymentData 
{
    public String payDate;
    public String payType;
    public String payAmount;
    public String payComment;

    public PaymentData(
        String payDate, String payType, String payAmount, String payComment) 
    {
        this.payDate=payDate;
        this.payType=payType;
        this.payAmount=payAmount;
        this.payComment=payComment;
    }
}    

class PaymentTableData extends AbstractTableModel
{
    static final public ColumnData columns[] = {
        new ColumnData("DATE",100,JLabel.CENTER),
        new ColumnData("TYPE",104,JLabel.LEFT),
        new ColumnData("AMOUNT",66,JLabel.RIGHT),
        new ColumnData("COMMENTS",200,JLabel.LEFT)
    };

    public Vector pVect;
    public Vector payAdjustReasons;
    public int size;

    public PaymentTableData(int size) { 
        this.size=size;
        pVect = new Vector();
        payAdjustReasons = new Vector();
        initData();
    }
    
    public PaymentTableData() { 
        pVect = new Vector(); 
        payAdjustReasons = new Vector();
        size=0;
    }
    
    public void initData() {
        pVect.removeAllElements();
        for (int i=0;i<size;i++) 
            pVect.addElement(new PaymentData(" ", " ", " ", " "));
    }
    
    public void addRow(
        String payDate, String payType, String payAmount, String payComment) 
    {
        pVect.addElement(new PaymentData(payDate,payType,payAmount,payComment));
        size=pVect.size();
    }
    
    public void addFirstRow(
        String payDate, String payType, String payAmount, String payComment) 
    {
        Vector tmpVect = new Vector();
        Vector tmpAdjVect = new Vector();
        tmpVect.addElement(new PaymentData(payDate,payType,payAmount,payComment));
        tmpAdjVect.addElement(payComment);
        for (int i=0;i<size;i++) {
            tmpVect.addElement(new PaymentData(
                (String)getValueAt(i,0),(String)getValueAt(i,1),
                (String)getValueAt(i,2),(String)getValueAt(i,3)));
            tmpAdjVect.addElement(payAdjustReasons.elementAt(i));
        }
        size=tmpVect.size();
        pVect.removeAllElements();
        payAdjustReasons.removeAllElements();
        for (int i=0;i<size;i++) {
            pVect.addElement(tmpVect.elementAt(i));
            payAdjustReasons.addElement(tmpAdjVect.elementAt(i));
        }
    }
    
    public void reset() { 
        pVect.removeAllElements(); 
        payAdjustReasons.removeAllElements();
        size=0;
    }
    
    public void setValueAt(Object value, int row, int column) {
        PaymentData pRow = (PaymentData)pVect.elementAt(row);
        switch (column) {
            case 0: pRow.payDate=(String)value;break;
            case 1: pRow.payType=(String)value;break;
            case 2: pRow.payAmount=(String)value;break;
            case 3: pRow.payComment=(String)value;break;
        }
        pVect.setElementAt(pRow,row);
    }

    public Object getValueAt(int row, int column) { 
        if (row<0 || row>=getRowCount()) return "";
        PaymentData pRow = (PaymentData)pVect.elementAt(row);
        switch (column) {
            case 0: return pRow.payDate;
            case 1: return pRow.payType;
            case 2: return pRow.payAmount;
            case 3: return pRow.payComment;
        }
        return "";
    }
    
    public int getRowCount() { return size; }
    public int getColumnCount() { return columns.length; }
    public boolean isCellEditable(int row, int column) { return (true); }
    public String getColumnName(int column) { return columns[column].title; }
}
