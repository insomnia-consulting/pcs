package com.pacytology.pcs;
/*
    PENNSYLVANIA CYTOLOGY SERVICES
    LABORATORY INFORMATION SYSTEM V1.0
    Copyright (C) 2001 by John Cardella
    All Rights Reserved
    
    File:       InvoiceImportDialog.java
    Created By: John Cardella, Software Engineer
    
    Function:   Form to set up and create file that is
                used to import into QuickBooks.
    
    MODIFICATIONS ----------------------------------
    Date/Staff      Description:
 */

import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Insets;
import java.awt.event.KeyEvent;
import java.sql.CallableStatement;
import java.sql.SQLException;

import javax.swing.WindowConstants;

public class InvoiceImportDialog extends javax.swing.JDialog {
	public LogFile log;
	int cycle = 0;

	public InvoiceImportDialog() {

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		// {{INIT_CONTROLS
		setTitle("Generate QuickBooks File");
		setResizable(false);
		setModal(true);
		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(178, 118);
		setVisible(false);
		billingCycle.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
		billingCycle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		billingCycle.setText("Mid Month");
		billingCycle.setActionCommand(" Rush");
		billingCycle.setOpaque(true);
		getContentPane().add(billingCycle);
		billingCycle.setForeground(java.awt.Color.black);
		billingCycle.setBounds(16, 10, 80, 18);
		getContentPane().add(stmtMonth);
		stmtMonth.setFont(new Font("SansSerif", Font.BOLD, 12));
		stmtMonth.setBounds(130, 34, 40, 20);
		getContentPane().add(stmtYear);
		stmtYear.setFont(new Font("SansSerif", Font.BOLD, 12));
		stmtYear.setBounds(130, 56, 40, 20);
		fileName.setEnabled(false);
		getContentPane().add(fileName);
		fileName.setFont(new Font("SansSerif", Font.BOLD, 12));
		fileName.setBounds(20, 89, 150, 20);
		JLabel1.setText("Month (MM)");
		getContentPane().add(JLabel1);
		JLabel1.setForeground(java.awt.Color.black);
		JLabel1.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel1.setBounds(20, 36, 68, 14);
		JLabel2.setText("Year (YYYY)");
		getContentPane().add(JLabel2);
		JLabel2.setForeground(java.awt.Color.black);
		JLabel2.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel2.setBounds(20, 58, 78, 14);
		JLabel3.setText("File Name:");
		getContentPane().add(JLabel3);
		JLabel3.setForeground(java.awt.Color.black);
		JLabel3.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel3.setBounds(20, 76, 78, 14);
		// }}

		this.log = new LogFile(DbConnection.getLogPath(),
				"InvoiceImportDialog", DbConnection.getDate(),
				DbConnection.getUser());

		// {{REGISTER_LISTENERS
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		stmtMonth.addKeyListener(aSymKey);
		stmtYear.addKeyListener(aSymKey);
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		billingCycle.addActionListener(lSymAction);
		fileName.addKeyListener(aSymKey);
		// }}
	}

	@Override
	public void setVisible(boolean b) {
		if (b)
			setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[]) {
		(new InvoiceImportDialog()).setVisible(true);
	}

	@Override
	public void addNotify() {
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top
				+ insets.bottom + size.height);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	// {{DECLARE_CONTROLS
	javax.swing.JCheckBox billingCycle = new javax.swing.JCheckBox();
	javax.swing.JTextField stmtMonth = new javax.swing.JTextField();
	javax.swing.JTextField stmtYear = new javax.swing.JTextField();
	javax.swing.JTextField fileName = new javax.swing.JTextField();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();

	// }}

	class SymKey extends java.awt.event.KeyAdapter {
		@Override
		public void keyTyped(java.awt.event.KeyEvent event) {
			Object object = event.getSource();
			if (object == stmtMonth)
				stmtMonth_keyTyped(event);
			else if (object == stmtYear)
				stmtYear_keyTyped(event);
			else if (object == fileName)
				fileName_keyTyped(event);

		}

		@Override
		public void keyPressed(java.awt.event.KeyEvent event) {
			Object object = event.getSource();
			if (object == InvoiceImportDialog.this)
				InvoiceImportDialog_keyPressed(event);
			else if (object == stmtMonth)
				stmtMonth_keyPressed(event);
			else if (object == stmtYear)
				stmtYear_keyPressed(event);
			else if (object == fileName)
				fileName_keyPressed(event);

		}
	}

	void InvoiceImportDialog_keyPressed(java.awt.event.KeyEvent event) {
		if (event.getKeyCode() == KeyEvent.VK_F9)
			closingActions();
		else if (event.getKeyCode() == KeyEvent.VK_ESCAPE) {
			stmtMonth.setText(null);
			stmtYear.setText(null);
			stmtMonth.requestFocus();
		}
	}

	void stmtMonth_keyPressed(java.awt.event.KeyEvent event) {
		if (event.getKeyCode() == KeyEvent.VK_ENTER) {
			if (Utils.required(stmtMonth, "Month"))
				stmtMonth.transferFocus();

		}
	}

	void stmtMonth_keyTyped(java.awt.event.KeyEvent event) {
		Utils.forceDigits(event, 2);
	}

	void stmtYear_keyPressed(java.awt.event.KeyEvent event) {
		if (event.getKeyCode() == KeyEvent.VK_ENTER) {
			if (Utils.required(stmtYear, "Year"))
				fileName.setEnabled(true);
				stmtYear.transferFocus();
		}
	}

	void stmtYear_keyTyped(java.awt.event.KeyEvent event) {
		Utils.forceDigits(event, 4);
	}

	class SymWindow extends java.awt.event.WindowAdapter {
		@Override
		public void windowClosed(java.awt.event.WindowEvent event) {
			Object object = event.getSource();
			if (object == InvoiceImportDialog.this)
				InvoiceImportDialog_windowClosed(event);
		}

		@Override
		public void windowOpened(java.awt.event.WindowEvent event) {
			Object object = event.getSource();
			if (object == InvoiceImportDialog.this)
				InvoiceImportDialog_windowOpened(event);
		}
	}

	void InvoiceImportDialog_windowOpened(java.awt.event.WindowEvent event) {
		stmtMonth.requestFocus();
	}

	private void generateFile() {
		CallableStatement cstmt = null;
		int statement = Integer.parseInt(stmtYear.getText()
				+ stmtMonth.getText());
		String filename = fileName.getText();
		if (billingCycle.isSelected()) {
			cycle = 1;
		} else
			cycle = 2;
		this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
		try {
			log.write("CALL pcs.build_qb_import_file(");
			log.write("   " + statement + "," + filename + "," + cycle + ")");
			cstmt = DbConnection.process().prepareCall(
					"{call pcs.build_qb_import_file(?,?,?)}");
			cstmt.setInt(1, statement);
			cstmt.setString(2, filename);
			cstmt.setInt(3, cycle);
			cstmt.execute();
			try {
				cstmt.close();
			} catch (SQLException e) {
				System.out.println(e);
			} catch (Exception e) {
				System.out.println(e);
			}
		} catch (SQLException e) {
			log.write(e);
			Utils.createErrMsg(e.toString());
		} catch (Exception e) {
			log.write(e);
			Utils.createErrMsg(e.toString());
		}
		this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
	}

	class SymAction implements java.awt.event.ActionListener {
		@Override
		public void actionPerformed(java.awt.event.ActionEvent event) {
			Object object = event.getSource();
			if (object == billingCycle)
				billingCycle_actionPerformed(event);
		}
	}

	void billingCycle_actionPerformed(java.awt.event.ActionEvent event) {
		if (billingCycle.isSelected()) {
			cycle = 1;
		} else
			cycle = 2;
	}

	void fileName_keyPressed(java.awt.event.KeyEvent event) {
		if (event.getKeyCode() == KeyEvent.VK_ENTER) {
			if (Utils.required(fileName, "File Name")) {
				generateFile();
				this.dispose();
			}
		}
	}

	void fileName_keyTyped(java.awt.event.KeyEvent event) {
		// to do: code goes here.
	}

	void InvoiceImportDialog_windowClosed(java.awt.event.WindowEvent event) {
		closingActions();
	}

	void closingActions() {
		log.stop();
		this.dispose();
	}

}
