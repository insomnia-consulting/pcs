package com.pacytology.pcs;/*    PENNSYLVANIA CYTOLOGY SERVICES    LABORATORY INFORMATION SYSTEM V1.0    Copyright (C) 2001 by John Cardella    All Rights Reserved        File:       BillingRec.java    Created By: John Cardella, Software Engineer        Function:   Class used to hold data from Oracle tables.    Primary use with BillingForm, but other forms should     eventually be modified to use this class as well.        Note that in order to make screen formatting easier in the    forms, and because most calculations are done in Oracle    stored procedures and not on Java data forms, numerical    values are formatted as text. Hence, in order to return    numerical equivalent a method is provided.        MODIFICATIONS ----------------------------------    Date/Staff      Description:*/import java.lang.*;import java.util.Vector;public class BillingRec{    public Vector details;    Vector charges;    Vector payments;    boolean chargesComputed;    String amount_due;        /*        Oracle Table:  pcs.lab_billings    */    int billing_choice;    int lab_number;    int rebilling;    String bill_amount;    String date_posted;    String date_paid;    String balance;    String allowance;    /*        Oracle Table: pcs.billing_queue        Has a value if in billing queue    */    String BQ_datestamp;    String billing_route;    /*        Oracle Table pcs.fax_letters        Has a value if there is a fax letter pending    */    public String letter_type;    public int in_queue;    String date_sent;    public int origin;    /*        Oracle Table: pcs.payments; the sum of all        payments applied to this lab; this is not         a field in the payments table; it is the sum    */    String total_payments;    String total_adjustments;        public BillingRec() { this.reset(); }        public void reset()    {        details = new Vector();        charges = new Vector();        payments = new Vector();        bill_amount = "0.00";        balance = "0.00";        allowance = "0.00";        total_payments = "0.00";        chargesComputed = false;        in_queue = -1;        origin = 0;    }        public double dBillAmount()    {        Double d = Double.valueOf(bill_amount);	    return (d.doubleValue());    }        public double dBalance()    {        Double d = Double.valueOf(balance);	    return (d.doubleValue());    }        public double dAllowance()    {        Double d = Double.valueOf(allowance);	    return (d.doubleValue());    }        public double dTotalPayments()    {        Double d = Double.valueOf(total_payments);	    return (d.doubleValue());    }        public double dAmountDue()    {        Double d = Double.valueOf(amount_due);        return (d.doubleValue());    }   }
