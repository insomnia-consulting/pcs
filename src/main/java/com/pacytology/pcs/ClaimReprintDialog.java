package com.pacytology.pcs;

/*
    PENNSYLVANIA CYTOLOGY SERVICES
    LABORATORY INFORMATION SYSTEM V1.0
    Copyright (C) 2001 by John Cardella
    All Rights Reserved
    
    File:       ClaimReprintDialog.java
    Created By: John Cardella, Software Engineer
    
    Function:   Used to reprint a paper claim.
    
    MODIFICATIONS ----------------------------------
    Date/Staff      Description:
*/

import java.awt.*;
import javax.swing.*;

import com.pacytology.pcs.io.FileTransfer;

import java.sql.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;

public class ClaimReprintDialog extends javax.swing.JDialog
{

    Login dbLogin;
    int labNum=0;
    LogFile log;
    
	public ClaimReprintDialog(Frame parent)
	{
		super(parent);
		
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Reprint Paper Claim");
		setModal(true);
		setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(230,124);
		setVisible(false);
		getContentPane().add(labNumber);
		labNumber.setFont(new Font("SansSerif", Font.BOLD, 12));
		labNumber.setBounds(130,14,80,20);
		JLabel11.setText("Enter Lab Number:");
		getContentPane().add(JLabel11);
		JLabel11.setForeground(java.awt.Color.black);
		JLabel11.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel11.setBounds(20,16,110,14);
		printButton.setText("Retrieve");
		printButton.setActionCommand("Print");
		getContentPane().add(printButton);
		printButton.setFont(new Font("Dialog", Font.BOLD, 12));
		printButton.setBounds(20,72,84,20);
		cancelButton.setText("Exit");
		cancelButton.setActionCommand("Cancel");
		getContentPane().add(cancelButton);
		cancelButton.setFont(new Font("Dialog", Font.BOLD, 12));
		cancelButton.setBounds(124,72,84,20);
		getContentPane().add(msgLabel);
		msgLabel.setForeground(java.awt.Color.red);
		msgLabel.setBounds(24,100,180,14);
		pprClaimOption.setMessageType(javax.swing.JOptionPane.QUESTION_MESSAGE);
		//$$ pprClaimOption.move(0,156);
		isReprint.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
		isReprint.setText("Reprint Batch");
		getContentPane().add(isReprint);
		isReprint.setBackground(new java.awt.Color(204,204,204));
		isReprint.setForeground(java.awt.Color.black);
		isReprint.setFont(new Font("Dialog", Font.BOLD, 12));
		isReprint.setBounds(20,42,100,20);
		batchNumber.setEnabled(false);
		getContentPane().add(batchNumber);
		batchNumber.setBackground(java.awt.Color.white);
		batchNumber.setForeground(java.awt.Color.black);
		batchNumber.setFont(new Font("SansSerif", Font.BOLD, 12));
		batchNumber.setBounds(130,42,80,20);
		//}}
		
		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		printButton.addActionListener(lSymAction);
		cancelButton.addActionListener(lSymAction);
		SymKey aSymKey = new SymKey();
		labNumber.addKeyListener(aSymKey);
		this.addKeyListener(aSymKey);
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		isReprint.addActionListener(lSymAction);
		batchNumber.addKeyListener(aSymKey);
		//}}
	}

	public ClaimReprintDialog()
	{
		this((Frame)null);
	}

	public ClaimReprintDialog(String sTitle)
	{
		this();
		setTitle(sTitle);
	}
	
	public ClaimReprintDialog(Frame parent,Login dbLogin, LogFile log) {
	    this();
	    this.log=log;
	    log.write("\nENTER CLAIM REPRINT DIALOG");
	    this.dbLogin=dbLogin;
	    this.setVisible(true);
	}

	public void setVisible(boolean b)
	{
		if (b) setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new ClaimReprintDialog()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JTextField labNumber = new javax.swing.JTextField();
	javax.swing.JLabel JLabel11 = new javax.swing.JLabel();
	javax.swing.JButton printButton = new javax.swing.JButton();
	javax.swing.JButton cancelButton = new javax.swing.JButton();
	javax.swing.JLabel msgLabel = new javax.swing.JLabel();
	javax.swing.JOptionPane pprClaimOption = new javax.swing.JOptionPane();
	javax.swing.JCheckBox isReprint = new javax.swing.JCheckBox();
	javax.swing.JTextField batchNumber = new javax.swing.JTextField();
	//}}


	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == printButton)
				printButton_actionPerformed(event);
			else if (object == cancelButton)
				cancelButton_actionPerformed(event);
			else if (object == isReprint)
				isReprint_actionPerformed(event);
			
		}
	}

	void printButton_actionPerformed(java.awt.event.ActionEvent event)
	{
	    finalActions();
	}
	
	void finalActions()
	{
	    if (isReprint.isSelected()) {
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
	        printBatch(batchNumber.getText());
	        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
	        closingActions();
	    }
	    else {
	        try {
	            labNum=(int)Integer.parseInt(labNumber.getText());
	            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
	            printClaim(labNum);
	            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
	        }
	        catch (Exception e) { msgLabel.setText("Lab number not entered!"); }
	        closingActions();
	    }
	}

	void cancelButton_actionPerformed(java.awt.event.ActionEvent event)
	{
	    closingActions();
	}
	
    void printBatch(String batchType) {
        String SQL = null;
        String fileName = null;
        if (batchType.equals("OI")) {
            SQL =
                "SELECT TO_CHAR(MAX(batch_number)) \n"+
                "FROM pcs.claim_batches WHERE tpp='PPR' \n";
        }
        else if (batchType.equals("DPA")) {
            SQL =
                "SELECT TO_CHAR(MAX(batch_number)) \n"+
                "FROM pcs.claim_batches WHERE tpp='PDW' \n";
        }
        else {
            SQL =
                "SELECT tpp FROM pcs.claim_batches \n"+
                "WHERE batch_number = "+batchType+" \n";
        }
        try  {
            Statement stmt = DbConnection.process().createStatement();
            ResultSet rs = stmt.executeQuery(SQL);
            String batchNumber = "NULL";
            while (rs.next()) { 
                batchNumber = rs.getString(1); 
                if (rs.wasNull()) batchNumber="NULL";
            }
            if (!batchNumber.equals("NULL")) {
                if (batchType.equals("OI")||batchType.equals("DPA")) {
                    fileName="ppr_clm"+batchNumber.trim();
                    log.write("Reprint batch #"+batchNumber.trim());
                }
                else {
                    fileName="ppr_clm"+batchType.trim();
                    log.write("Reprint batch #"+batchType.trim());
                }
                File f = FileTransfer.getFile(Utils.TMP_DIR, Utils.SERVER_DIR, fileName);
                long fLen = f.length();
                if (fLen>0) {
                    int rv = pprClaimOption.showConfirmDialog(this,"Make sure printer is ready. \nReprint batch now?",
		                "Paper Claim",pprClaimOption.YES_NO_OPTION,pprClaimOption.QUESTION_MESSAGE);
                    if (rv==pprClaimOption.YES_OPTION) {
                        Utils.genericPrint(Utils.SERVER_DIR,fileName,false);
                    }
                }
                else {
                    Utils.createErrMsg("Batch claim file not located");
                    log.write("Batch claim file not located");
                }
            }
            else {
                Utils.createErrMsg("Batch not located");
                log.write("Batch not located");
            }
        }
        catch (Exception e) { log.write(e.toString()); }
    }

    void printClaim(int lab) {
        try  {
            String query=
                "SELECT MAX(bd.rebilling) \n"+
                "FROM pcs.billing_details bd, pcs.lab_claims lc \n"+
                "WHERE bd.lab_number=lc.lab_number \n"+
                "AND lc.lab_number="+lab+" \n";

            Statement stmt = DbConnection.process().createStatement();
            ResultSet rs = stmt.executeQuery(query);
            int numLabs=(-1);
            String choiceCode = null;
            String routeCode = null;
            while (rs.next()) { numLabs=rs.getInt(1); }
            if (numLabs>=0) {
                query=
                    "SELECT bc.choice_code,cb.tpp \n"+
                    "FROM pcs.billing_details bd, pcs.lab_claims lc, \n"+
                    "   pcs.billing_choices bc, pcs.claim_batches cb \n"+
                    "WHERE bd.billing_choice=bc.billing_choice and \n"+
                    "   bd.lab_number=lc.lab_number and \n"+
                    "   lc.lab_number="+lab+" and \n"+
                    "   lc.batch_number=cb.batch_number and \n"+
                    "   bd.rebilling="+numLabs+" and \n"+
                    "   cb.batch_number IN ( \n"+
                    "       SELECT MAX(batch_number) from pcs.lab_claims \n"+
                    "       WHERE lab_number="+lab+") \n";
                rs=stmt.executeQuery(query);
                int rCnt = 0;
                while (rs.next()) {
                    choiceCode=rs.getString(1);
                    routeCode=rs.getString(2);
                    rCnt++;
                }
                if (rCnt>0) {
                    query=
                        "INSERT INTO pcs.billing_queue \n"+
                        "(lab_number,billing_route,datestamp,rebilling) \n"+
                        "VALUES ("+lab+",'DUP',SysDate,"+numLabs+") \n";
                    stmt=DbConnection.process().createStatement();
                    int rv = stmt.executeUpdate(query);
                    CallableStatement cstmt = null;
                    String fName = null;
                    if (routeCode.equals("PDW")) {
                        fName="pdw_clm";
	                    cstmt=DbConnection.process().prepareCall(
	                        "{call pcs.build_ma319c_file(?,?,?)}");
                    }
                    else {
                        fName="ppr_clm";
	                    cstmt=DbConnection.process().prepareCall(
	                        "{call pcs.build_1500_claim_forms(?,?,?)}");
                    }
                    cstmt.setString(1,Utils.UTL_FILE_DIR);
                    cstmt.setString(2,fName);
                    cstmt.setString(3,"DUP");
                    try { cstmt.executeUpdate(); }
                    catch (SQLException e) { log.write(e); }
                    File f = FileTransfer.getFile(Utils.TMP_DIR, Utils.SERVER_DIR, fName);
                    long fLen = f.length();
                    if (fLen>0) {
                        rv = pprClaimOption.showConfirmDialog(this,"Make sure printer is ready. \nPrint claim copy now?",
		                    "Paper Claim",pprClaimOption.YES_NO_OPTION,pprClaimOption.QUESTION_MESSAGE);
		                if (rv==pprClaimOption.YES_OPTION) {
                            Utils.genericPrint(Utils.SERVER_DIR,fName,false);
                        }
                        try { f.delete(); }
                        catch (SecurityException e) { log.write(e.toString()); }
                    }
                    log.write("Reprint "+routeCode+" Claim for Lab #"+lab);
                }
                else {
                    Utils.createErrMsg("No data located for Lab #"+lab);
                    log.write("No data located for Lab #"+lab);
                }
            }
        }
        catch (Exception e) { log.write(e.toString()); }
    }
    
	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == labNumber)
				labNumber_keyPressed(event);
			else if (object == ClaimReprintDialog.this)
				ClaimReprintDialog_keyPressed(event);
			else if (object == batchNumber)
				batchNumber_keyPressed(event);
		}

		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == labNumber)
				labNumber_keyTyped(event);
			else if (object == batchNumber)
				batchNumber_keyTyped(event);
		}
	}

	void labNumber_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event,10);
	}

	void labNumber_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    finalActions();
		}
	}

	void ClaimReprintDialog_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_RIGHT) {
		    if (printButton.hasFocus()) cancelButton.requestFocus();
		}
		else if (event.getKeyCode()==event.VK_LEFT) {
		    if (cancelButton.hasFocus()) printButton.requestFocus();
		}
	}
	
	void closingActions()
	{
	    log.write("EXITING CLAIM REPRINT DIALOG");
	    this.dispose();
	}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowOpened(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == ClaimReprintDialog.this)
				ClaimReprintDialog_windowOpened(event);
		}

		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == ClaimReprintDialog.this)
				ClaimReprintDialog_windowClosing(event);
		}
	}

	void ClaimReprintDialog_windowClosing(java.awt.event.WindowEvent event)
	{
		closingActions();
	}

	void ClaimReprintDialog_windowOpened(java.awt.event.WindowEvent event)
	{
		labNumber.requestFocus();
	}

	void isReprint_actionPerformed(java.awt.event.ActionEvent event)
	{
		if (isReprint.isSelected()) {
		    labNumber.setText(null);
		    labNumber.setEnabled(false);
		    batchNumber.setEnabled(true);
		    batchNumber.requestFocus();
		}
		else {
		    batchNumber.setEnabled(false);
		    batchNumber.setText(null);
		    labNumber.setEnabled(true);
		    labNumber.requestFocus();
		}
	}

	void batchNumber_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event);
	}

	void batchNumber_keyPressed(java.awt.event.KeyEvent event)
	{
	    if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(batchNumber,"Batch Number or Billing Type")) {
		        finalActions();
		    }
		}
	}
	
}
