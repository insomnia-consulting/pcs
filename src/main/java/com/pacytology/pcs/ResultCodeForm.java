package com.pacytology.pcs;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.PrintJob;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;
import java.util.Vector;

import javax.swing.AbstractAction;
import javax.swing.JLabel;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;

import com.pacytology.pcs.actions.PcsActionMap;
import com.pacytology.pcs.ui.PcsFrame;
import com.pacytology.pcs.ui.Square;

public class ResultCodeForm extends PcsFrame
{
    public Login dbLogin;
    Vector resultCodeVect;
    /*
    final int IDLE=100;
    final int QUERY=101;
    final int ADD=102;
    final int UPDATE=103;
    final int DELETE=104;
    */
    public int currMode=Lab.IDLE;    
    final int CODES_PER_SCREEN=15;
    public int rowID=1;
    
    public ResultCodeTableData dData;
    public JTable resultCodeTable;
    public JTableHeader header;
    public JScrollPane rCodeScrollPane;
    private String oldDescription;
    private boolean descriptionChanged = false;
    private int x,y;
    private int lineCount, pageNumber;
    
	public ResultCodeForm()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Result Code Maintenance");
		setResizable(false);
		setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(769,372);
		setVisible(false);
		getContentPane().add(F1sq);
		F1sq.setBounds(35,6,20,20);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F1");
		getContentPane().add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(39,6,20,20);
		getContentPane().add(F2sq);
		F2sq.setBounds(97,6,20,20);
		F2lbl.setRequestFocusEnabled(false);
		F2lbl.setText("F2");
		getContentPane().add(F2lbl);
		F2lbl.setForeground(java.awt.Color.black);
		F2lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F2lbl.setBounds(101,6,20,20);
		getContentPane().add(F3sq);
		F3sq.setBounds(159,6,20,20);
		F3lbl.setRequestFocusEnabled(false);
		F3lbl.setText("F3");
		getContentPane().add(F3lbl);
		F3lbl.setForeground(java.awt.Color.black);
		F3lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F3lbl.setBounds(163,6,20,20);
		getContentPane().add(F4sq);
		F4sq.setBounds(221,6,20,20);
		F4lbl.setRequestFocusEnabled(false);
		F4lbl.setText("F4");
		getContentPane().add(F4lbl);
		F4lbl.setForeground(java.awt.Color.black);
		F4lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F4lbl.setBounds(225,6,20,20);
		getContentPane().add(F9sq);
		F9sq.setBounds(283,6,20,20);
		F9lbl.setRequestFocusEnabled(false);
		F9lbl.setText("F9");
		getContentPane().add(F9lbl);
		F9lbl.setForeground(java.awt.Color.black);
		F9lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F9lbl.setBounds(287,6,20,20);
		getContentPane().add(F12sq);
		F12sq.setBounds(345,6,20,20);
		F12lbl.setRequestFocusEnabled(false);
		F12lbl.setText("F12");
		getContentPane().add(F12lbl);
		F12lbl.setForeground(java.awt.Color.black);
		F12lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F12lbl.setBounds(346,6,20,20);
		F2action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F2action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F2action.setText("Add");
		getContentPane().add(F2action);
		F2action.setForeground(java.awt.Color.black);
		F2action.setBounds(72,30,70,16);
		F3action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F3action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F3action.setText("Update");
		getContentPane().add(F3action);
		F3action.setForeground(java.awt.Color.black);
		F3action.setBounds(134,30,70,16);
		F4action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F4action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F4action.setText("Print");
		getContentPane().add(F4action);
		F4action.setForeground(java.awt.Color.black);
		F4action.setBounds(196,30,70,16);
		F9action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F9action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F9action.setText("Exit");
		getContentPane().add(F9action);
		F9action.setForeground(java.awt.Color.black);
		F9action.setBounds(258,30,70,16);
		F12action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F12action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F12action.setText("Submit");
		getContentPane().add(F12action);
		F12action.setForeground(java.awt.Color.black);
		F12action.setBounds(320,30,70,16);
		getContentPane().add(msgLabel);
		msgLabel.setForeground(java.awt.Color.red);
		msgLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		msgLabel.setBounds(32,52,352,14);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("Query");
		getContentPane().add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(10,30,70,16);
		resultCode.setEnabled(false);
		getContentPane().add(resultCode);
		resultCode.setFont(new Font("DialogInput", Font.PLAIN, 12));
		resultCode.setBounds(14,76,45,20);
		resultCodeDesc.setEnabled(false);
		getContentPane().add(resultCodeDesc);
		resultCodeDesc.setFont(new Font("DialogInput", Font.PLAIN, 11));
		resultCodeDesc.setBounds(59,76,460,20);
		getContentPane().add(resultCodeLbl);
		resultCodeLbl.setBounds(0,0,0,0);
		getContentPane().add(resultCodeDescLbl);
		resultCodeDescLbl.setBounds(0,0,0,0);
		rowNumber.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
		getContentPane().add(rowNumber);
		rowNumber.setForeground(java.awt.Color.black);
		rowNumber.setFont(new Font("SansSerif", Font.BOLD, 10));
		rowNumber.setBounds(14,354,100,12);
		resultCode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		getContentPane().add(resultCode);
		getContentPane().add(resultCodeDesc);
		pathNeeded.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		pathNeeded.setEnabled(false);
		getContentPane().add(pathNeeded);
		pathNeeded.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pathNeeded.setBounds(520,76,44,20);
		category.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		category.setEnabled(false);
		getContentPane().add(category);
		category.setFont(new Font("DialogInput", Font.PLAIN, 12));
		category.setBounds(565,76,44,20);
		papClass.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		papClass.setEnabled(false);
		getContentPane().add(papClass);
		papClass.setFont(new Font("DialogInput", Font.PLAIN, 12));
		papClass.setBounds(610,76,44,20);
		biopsy.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		biopsy.setEnabled(false);
		getContentPane().add(biopsy);
		biopsy.setFont(new Font("DialogInput", Font.PLAIN, 12));
		biopsy.setBounds(655,76,44,20);
		codeStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		codeStatus.setEnabled(false);
		getContentPane().add(codeStatus);
		codeStatus.setFont(new Font("DialogInput", Font.PLAIN, 12));
		codeStatus.setBounds(700,76,44,20);
		getContentPane().add(descrLbl);
		descrLbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		descrLbl.setBounds(400,8,350,40);
		termDate.setEnabled(false);
		getContentPane().add(termDate);
		termDate.setFont(new Font("DialogInput", Font.PLAIN, 12));
		termDate.setBounds(668,52,76,20);
		JLabel1.setText("Effective Date");
		getContentPane().add(JLabel1);
		JLabel1.setBounds(586,54,80,12);
		//}}

		dData = new ResultCodeTableData();
		resultCodeTable = new JTable();
		resultCodeTable.setEnabled(false);
		resultCodeTable.setAutoCreateColumnsFromModel(false);
		resultCodeTable.setModel(dData);

		for (int k=0;k<dData.columns.length;k++) {
		    DefaultTableCellRenderer renderer = new
		        DefaultTableCellRenderer();
            renderer.setHorizontalAlignment(
                dData.columns[k].alignment);
            renderer.setFont(
                dData.columns[k].font);
            TableColumn column = new TableColumn(k,
                dData.columns[k].width,renderer,null);
            resultCodeTable.addColumn(column);
		}
		
		header = resultCodeTable.getTableHeader();
		header.setFont(new Font("Dialog",Font.BOLD, 11));
	
		rCodeScrollPane = new JScrollPane();
		rCodeScrollPane.getViewport().add(resultCodeTable);
		getContentPane().add(rCodeScrollPane);
		rCodeScrollPane.setBounds(10,100,750,250);
        rCodeScrollPane.setAutoscrolls(true);
        rCodeScrollPane.setEnabled(false);
		
		resultCodeTable.setFont(new Font("SansSerif", Font.PLAIN, 10));
		resultCodeTable.setBounds(0,0,747,247);
        resultCodeTable.setRowHeight(12);
        resultCodeTable.setCellSelectionEnabled(false);
        resultCodeTable.setEnabled(false);    

		//{{INIT_MENUS
		//}}
	
		//{{REGISTER_LISTENERS
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		resultCode.addKeyListener(aSymKey);
		resultCodeDesc.addKeyListener(aSymKey);
		pathNeeded.addKeyListener(aSymKey);
		category.addKeyListener(aSymKey);
		papClass.addKeyListener(aSymKey);
		codeStatus.addKeyListener(aSymKey);
		biopsy.addKeyListener(aSymKey);
		SymFocus aSymFocus = new SymFocus();
		resultCode.addFocusListener(aSymFocus);
		resultCodeDesc.addFocusListener(aSymFocus);
		pathNeeded.addFocusListener(aSymFocus);
		category.addFocusListener(aSymFocus);
		papClass.addFocusListener(aSymFocus);
		biopsy.addFocusListener(aSymFocus);
		codeStatus.addFocusListener(aSymFocus);
		termDate.addKeyListener(aSymKey);
		//}}
		actionMap = new PcsActionMap(this);
		this.setupKeyPressMap();
		
	}
	protected JRootPane setupKeyPressMap() {
		JRootPane rp = super.setupKeyPressMap();
		rp.getActionMap().put("F4", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				printResultCodes();
			}
		});
		rp.getActionMap().put("VK_DOWN", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				if (currMode==Lab.IDLE) {
					int ndx;
		            increment();
                    msgLabel.setText(null);
                    if (resultCodeTable.getSelectedRow()==(-1)) ndx=0;
		            else ndx=resultCodeTable.getSelectedRow()+1;
                    if (ndx==resultCodeVect.size()) ndx--;
		            setEntryFields();
		        }
			}
		});
		rp.getActionMap().put("VK_UP", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				int ndx ; 
				if (currMode==Lab.IDLE) {
                    decrement();
                    msgLabel.setText(null);
                    if (resultCodeTable.getSelectedRow()==(-1)) ndx=0;
		            else ndx=resultCodeTable.getSelectedRow()-1;
                    if (ndx==(-1)) ndx=0;
		            setEntryFields();
		        }
			}
		});
		rp.getActionMap().put("F12", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				msgLabel.setText(null);
                if (fKeys.isOn(fKeys.F12)==true) finalActions();
                else msgLabel.setText("Finalize option not available");

			}
		});
		rp.getActionMap().put("VK_HOME", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				if (currMode==Lab.IDLE) {
                    displayRow(0);
                    msgLabel.setText(null);
		            setEntryFields();
                }
			}
		});
		rp.getActionMap().put("VK_END", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				if (currMode==Lab.IDLE) {
                    displayRow(resultCodeVect.size()-1);
                    msgLabel.setText(null);
		            setEntryFields();
                }
			}
		});

		
		return rp;
	}
	public ResultCodeForm(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

    public ResultCodeForm(Login dbLogin) {
        this();
        this.dbLogin=dbLogin;
        boolean rc = this.getResultCodes();
        this.displayList(0);
        this.resetForm();
    }

	public void setVisible(boolean b)
	{
		if (b) setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new ResultCodeForm()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		Insets insets = getInsets();
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	Square F1sq = new Square();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	Square F2sq = new Square();
	javax.swing.JLabel F2lbl = new javax.swing.JLabel();
	Square F3sq = new Square();
	javax.swing.JLabel F3lbl = new javax.swing.JLabel();
	Square F4sq = new Square();
	javax.swing.JLabel F4lbl = new javax.swing.JLabel();
	Square F9sq = new Square();
	javax.swing.JLabel F9lbl = new javax.swing.JLabel();
	Square F12sq = new Square();
	javax.swing.JLabel F12lbl = new javax.swing.JLabel();
	javax.swing.JLabel F2action = new javax.swing.JLabel();
	javax.swing.JLabel F3action = new javax.swing.JLabel();
	javax.swing.JLabel F4action = new javax.swing.JLabel();
	javax.swing.JLabel F9action = new javax.swing.JLabel();
	javax.swing.JLabel F12action = new javax.swing.JLabel();

	javax.swing.JLabel F1action = new javax.swing.JLabel();
	javax.swing.JLabel resultCodeLbl = new javax.swing.JLabel();
	javax.swing.JLabel resultCodeDescLbl = new javax.swing.JLabel();
	javax.swing.JLabel rowNumber = new javax.swing.JLabel();
	javax.swing.JTextField resultCode = new javax.swing.JTextField();
	javax.swing.JTextField resultCodeDesc = new javax.swing.JTextField();
	javax.swing.JTextField pathNeeded = new javax.swing.JTextField();
	javax.swing.JTextField category = new javax.swing.JTextField();
	javax.swing.JTextField papClass = new javax.swing.JTextField();
	javax.swing.JTextField biopsy = new javax.swing.JTextField();
	javax.swing.JTextField codeStatus = new javax.swing.JTextField();
	JLabel descrLbl = new JLabel();
	javax.swing.JTextField termDate = new javax.swing.JTextField();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	//}}

	//{{DECLARE_MENUS
	//}}

    public boolean getResultCodes()  {
        boolean exitStatus=true;
        try  {
            String query = 
                "SELECT bethesda_code,description,path_needed, \n"+
                "   category,active_status,papclass,biopsy_request \n"+
                "FROM pcs.bethesda_codes \n"+
                "ORDER BY bethesda_code \n";
                
            resultCodeVect = new Vector();                
            System.out.println(query);                
            Statement stmt = dbConnection.process().createStatement();
            ResultSet rs = stmt.executeQuery(query);
            int rowsReturned=0;
            while (rs.next()) {
                ResultCodeRec r = new ResultCodeRec();
                r.bethesda_code=rs.getString(1).trim();
                r.description=rs.getString(2);
                r.path_needed=rs.getString(3);
                r.category=rs.getString(4);
                r.active_status=rs.getString(5);
                r.pap_class=rs.getInt(6);
                r.biopsy_request=rs.getString(7);
                String SQL =
                    "SELECT TO_CHAR(term_date,'MM/DD/YYYY'),description \n"+
                    "FROM pcs.bethesda_prior_descr \n"+
                    "WHERE bethesda_code='"+r.bethesda_code+"' \n";
                Statement stmt2 = dbConnection.process().createStatement();
                ResultSet rs2 = stmt2.executeQuery(SQL);
                while (rs2.next()) {
                    BethPriorDescr p = new BethPriorDescr();
                    p.term_date=rs2.getString(1);
                    p.description=rs2.getString(2);
                    r.beth_prior_descr.addElement(p);
                }
                try { rs2.close(); stmt2.close(); }
                catch (Exception e) { }
                resultCodeVect.addElement(r);
            }
        }
        catch( Exception e ) {
            System.out.println(e+" getResultCodes");
            exitStatus=false;
            msgLabel.setText("Operation Failed");
        }
        return(exitStatus);            
    }
    
	public void displayResultCodeTable()
	{
        if (dData.getRowCount()==0) {
            for (int i=0; i<resultCodeVect.size(); i++) {
                ResultCodeRec r = (ResultCodeRec)resultCodeVect.elementAt(i);
                dData.addRow(r.bethesda_code,r.description,
                    r.path_needed,r.category,Integer.toString(r.pap_class),
                    r.biopsy_request,r.active_status);
            }
        }
	}

    void clearResultCodeTable()  {
        dData.removeAllRows();
        resultCodeTable.removeAll();
        /*
        for (int row=0;row<dData.getRowCount();row++) {
            for (int column=0;column<dData.getColumnCount();column++) {
                dData.setValueAt(null,row,column);
            }                
        }            
        resultCodeTable.selectAll();
        resultCodeTable.clearSelection();
        */
        resultCodeTable.revalidate();
        resultCodeTable.repaint();
    }            
    
    void displayRow(int ndx)
    {
        try { descrLbl.setText("  "); }
        catch (Exception e) { }
        resultCodeTable.clearSelection();
        resultCodeTable.addRowSelectionInterval(ndx,ndx);
        resultCodeTable.scrollRectToVisible(resultCodeTable.getCellRect(ndx,0,true));
        setEntryFields();
        ndx++;
        rowNumber.setVisible(true);
        rowNumber.setText(" "+ndx+" of "+resultCodeVect.size());
    }

	public void increment()
	{
        int ndx=resultCodeTable.getSelectedRow();
        if (ndx<0) ndx=0;
        else if (ndx<resultCodeVect.size()-2) ndx++;
        else ndx=resultCodeVect.size()-1;
        displayRow(ndx);
	}
	
	public void decrement()
	{
        int ndx=resultCodeTable.getSelectedRow();
        if (ndx>resultCodeVect.size()) ndx=resultCodeVect.size()-1;
        else if (ndx>1) ndx--;
        else ndx=0;
        displayRow(ndx);
	}

    public void displayList(int ndx) {
        displayResultCodeTable();
        displayRow(ndx);
    }

	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == resultCode)
				resultCode_keyTyped(event);
			else if (object == resultCodeDesc)
				resultCodeDesc_keyTyped(event);
			else if (object == pathNeeded)
				pathNeeded_keyTyped(event);
			else if (object == category)
				category_keyTyped(event);
			else if (object == papClass)
				papClass_keyTyped(event);
			else if (object == codeStatus)
				codeStatus_keyTyped(event);
			else if (object == biopsy)
				biopsy_keyTyped(event);
			else if (object == termDate)
				termDate_keyTyped(event);
		}

		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == codeStatus)
				codeStatus_keyPressed(event);
			else if (object == resultCode)
				resultCode_keyPressed(event);
			else if (object == resultCodeDesc)
				resultCodeDesc_keyPressed(event);
			else if (object == pathNeeded)
				pathNeeded_keyPressed(event);
			else if (object == category)
				category_keyPressed(event);
			else if (object == papClass)
				papClass_keyPressed(event);
			else if (object == biopsy)
				biopsy_keyPressed(event);
			else if (object == termDate)
				termDate_keyPressed(event);
		}
	}

	public void queryActions() {
	    currMode=Lab.QUERY;
	    fKeys.off();
	    fKeys.keyOn(fKeys.F12);
	    fKeys.keyOn(fKeys.F9);
	    resultCode.setEnabled(true);
	    resultCode.setText(null);
	    resultCodeDesc.setText(null);
	    pathNeeded.setText(null);
	    biopsy.setText(null);
	    category.setText(null);
	    codeStatus.setText(null);
	    papClass.setText(null);
	    resultCode.requestFocus();
	}
	
	public void finalActions() {
	    if (currMode==Lab.QUERY) {
	        boolean codeFound=false;
	        for (int i=0;i<resultCodeVect.size();i++) {
	            String buf=(String)dData.getValueAt(i,0);
	            if (buf.equals(resultCode.getText())) {
	                displayRow(i);
	                setEntryFields();
	                codeFound=true;
	                break;
	            }
	        }
	        currMode=Lab.IDLE;
	        resultCode.setEnabled(false);
	        msgLabel.requestFocus();
	        if (codeFound==false) {
	            resetForm();
	            msgLabel.setText("Code Not Found");
	        }
            fKeys.off();
	        fKeys.keyOn(fKeys.F1);
	        fKeys.keyOn(fKeys.F2);
	        fKeys.keyOn(fKeys.F3);
	        fKeys.keyOn(fKeys.F4);
	        fKeys.keyOn(fKeys.F9);
	    }
	    else if (currMode==Lab.ADD) {
	        boolean codeExists=false;
	        for (int i=0;i<resultCodeVect.size();i++) {
	            String buf=(String)dData.getValueAt(i,0);
	            if (buf.equals(resultCode.getText())) {
	                displayRow(i);
	                setEntryFields();
	                resultCode.setEnabled(false);
	                resultCodeDesc.setEnabled(false);
	                pathNeeded.setEnabled(false);
	                biopsy.setEnabled(false);
	                category.setEnabled(false);
	                papClass.setEnabled(false);
	                msgLabel.requestFocus();
	                msgLabel.setText("Result Code already exists");
	                codeExists=true;
	                currMode=Lab.IDLE;
	                break;
	            }
	        }
	        if (codeExists==false)  {
	            boolean rv=addResultCode();
	            if (rv) {
	                msgLabel.setText("Operation Succeeded");
	                clearResultCodeTable();
	                getResultCodes();
	                displayResultCodeTable();
	            }
	        }
	        resultCode.setEnabled(false);
	        resultCodeDesc.setEnabled(false);
	        pathNeeded.setEnabled(false);
	        biopsy.setEnabled(false);
	        category.setEnabled(false);
	        papClass.setEnabled(false);
	        msgLabel.requestFocus();
	        currMode=Lab.IDLE;
            fKeys.off();
	        fKeys.keyOn(fKeys.F1);
	        fKeys.keyOn(fKeys.F2);
	        fKeys.keyOn(fKeys.F3);
	        fKeys.keyOn(fKeys.F4);
	        fKeys.keyOn(fKeys.F9);
	    }
	    else if (currMode==Lab.UPDATE) {
	        String code=resultCode.getText();
	        String desc=resultCodeDesc.getText();
	        String path=pathNeeded.getText();
	        String cat=category.getText();
	        String status=codeStatus.getText();
	        int pClass=0;
	        try { pClass=Integer.parseInt(papClass.getText()); }
	        catch (Exception e) { }
	        boolean rv=updateResultCode(code,desc,path,cat,pClass,status);
	        if (rv==true) { 
	            msgLabel.setText("Operation Succeeded");
                clearResultCodeTable();
	            getResultCodes();
	            //displayResultCodeTable();
	            displayList(rowID-1);
	        }
	        currMode=Lab.IDLE;
	        msgLabel.requestFocus();
	        resultCode.setEnabled(false);
	        resultCodeDesc.setEnabled(false);
	        pathNeeded.setEnabled(false);
	        biopsy.setEnabled(false);
	        category.setEnabled(false);
	        papClass.setEnabled(false);
	        codeStatus.setEnabled(false);
	        termDate.setText(null);
	        termDate.setEnabled(false);
	        descriptionChanged=false;
	        oldDescription=null;
            fKeys.off();
            fKeys.keyOn(fKeys.F1);
	        fKeys.keyOn(fKeys.F2);
	        fKeys.keyOn(fKeys.F3);
	        fKeys.keyOn(fKeys.F4);
	        fKeys.keyOn(fKeys.F9);
	    }
	}

	public void setEntryFields() {
	    int ndx=resultCodeTable.getSelectedRow();
	    ResultCodeRec r = (ResultCodeRec)resultCodeVect.elementAt(ndx);
	    resultCode.setText(r.bethesda_code);
	    resultCodeDesc.setText(r.description);
	    pathNeeded.setText(r.path_needed);
	    biopsy.setText(r.biopsy_request);
	    category.setText(r.category);
	    codeStatus.setText(r.active_status);
	    papClass.setText(Integer.toString(r.pap_class));
        try { descrLbl.setText((String)dData.getValueAt(ndx,1)); }
        catch (Exception e) { }
	}
	
	public void addActions() {
	    currMode=Lab.ADD;
	    fKeys.off();
	    fKeys.keyOn(fKeys.F12);
	    fKeys.keyOn(fKeys.F9);
	    resultCode.setText(null);
	    resultCodeDesc.setText(null);
	    pathNeeded.setText(null);
	    biopsy.setText(null);
	    category.setText(null);
	    papClass.setText(null);
	    codeStatus.setText("A");
        resultCode.setEnabled(true);
        resultCodeDesc.setEnabled(true);
        pathNeeded.setEnabled(true);
        biopsy.setEnabled(true);
        category.setEnabled(true);
        papClass.setEnabled(true);
	    resultCode.requestFocus();
	}
	
	public boolean addResultCode() {
        boolean exitStatus=true;
        try  {
            String query = 
                "INSERT INTO pcs.bethesda_codes \n"+
                "(bethesda_code,description,path_needed, \n"+
                " category,papclass,biopsy_request,active_status) \n"+
                "VALUES (?,?,?,?,?,?,'A') \n";
                
            System.out.println(query);                
            PreparedStatement pstmt = dbConnection.process().prepareStatement(query);
            pstmt.setString(1,resultCode.getText());
            pstmt.setString(2,resultCodeDesc.getText());
            pstmt.setString(3,pathNeeded.getText());
            pstmt.setString(4,category.getText());
            pstmt.setString(6,biopsy.getText());
            int pClass = 0;
            try { 
                pClass=Integer.parseInt(papClass.getText()); 
                pstmt.setInt(5,pClass);
            }
            catch (Exception e) { pstmt.setNull(5,java.sql.Types.INTEGER); }
            int rs = pstmt.executeUpdate();
        }
        catch( Exception e ) {
            System.out.println(e+" addResultCode");
            exitStatus=false;
            msgLabel.setText("Operation Failed");
        }
        
        return(exitStatus);            
    }
    
	void resultCode_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,4);
	}

	void resultCodeDesc_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event);
	}
	
	public void deleteActions() {
	    currMode=Lab.DELETE;
	    fKeys.off();
	    fKeys.keyOn(fKeys.F12);
	    fKeys.keyOn(fKeys.F9);
	    if (codeStatus.getText().compareTo("A")==0) {
	        codeStatus.setText("I");
	        msgLabel.setText("Code Inactivated - Press F12 to Finalize");
	    }
	    else {
	        codeStatus.setText("A");
	        msgLabel.setText("Code Reactivated - Press F12 to Finalize");
	    }
	}
	
	public void resetForm() {
	    resetColors();
	    try { descrLbl.setText("  "); }
	    catch (Exception e) { }
	    rowNumber.setText(null);
	    rowNumber.setVisible(false);
	    msgLabel.setText(null);
	    msgLabel.requestFocus();
	    resultCode.setEnabled(false);
	    resultCodeDesc.setEnabled(false);
	    pathNeeded.setEnabled(false);
	    category.setEnabled(false);
	    papClass.setEnabled(false);
	    biopsy.setEnabled(false);
	    codeStatus.setEnabled(false);
	    termDate.setText(null);
	    termDate.setEnabled(false);
	    oldDescription=null;
	    descriptionChanged=false;
	    fKeys.off();
	    fKeys.keyOn(fKeys.F1);
	    fKeys.keyOn(fKeys.F2);
	    fKeys.keyOn(fKeys.F3);
	    fKeys.keyOn(fKeys.F4);
	    fKeys.keyOn(fKeys.F9);
	}
	
	public void updateActions() {
	    currMode=Lab.UPDATE;
	    fKeys.off();
	    fKeys.keyOn(fKeys.F12);
	    fKeys.keyOn(fKeys.F9);
	    oldDescription=resultCodeDesc.getText();
        resultCodeDesc.setEnabled(true);
        pathNeeded.setEnabled(true);
        biopsy.setEnabled(true);
        codeStatus.setEnabled(true);
        category.setEnabled(true);
        papClass.setEnabled(true);
        resultCodeDesc.requestFocus();
	}
	
	public boolean updateResultCode(String code, 
	    String desc, String path, String cat, int pClass, String status) {
        boolean exitStatus=true;
        try  {
            String SQL = 
                "UPDATE pcs.bethesda_codes \n"+
                "SET \n"+
                "   description = ?, \n"+
                "   path_needed = ?, \n"+
                "   category = ?, \n"+
                "   papclass = ?, \n"+
                "   active_status = ? \n"+
                "WHERE bethesda_code = ? \n";
                
            PreparedStatement pstmt = dbConnection.process().prepareStatement(SQL);
            pstmt.setString(1,desc);
            pstmt.setString(2,path);
            pstmt.setString(3,cat);
            if (pClass>0) pstmt.setInt(4,pClass);
            else pstmt.setNull(4,java.sql.Types.INTEGER);
            pstmt.setString(5,status);
            pstmt.setString(6,code);
            int rs = pstmt.executeUpdate();
            boolean b = Utils.isNull(termDate.getText());          
            if (!b && descriptionChanged) {
                SQL =
                "INSERT INTO pcs.bethesda_prior_descr \n"+
                "(bethesda_code,term_date,description) VALUES \n"+
                "(?,TO_DATE(?,'MMDDYYYY'),?) \n";
                String d = Utils.stripDateMask(termDate.getText());
                pstmt=dbConnection.process().prepareStatement(SQL);
                pstmt.setString(1,code);
                pstmt.setString(2,d);
                pstmt.setString(3,oldDescription);
                pstmt.executeUpdate();
            }
        }
        catch( Exception e ) {
            System.out.println(e+" updateResultCode");
            exitStatus=false;
            msgLabel.setText("Operation Failed");
        }
        return(exitStatus);            
	}

	void pathNeeded_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,1);
	}

	void category_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,1);
		int key=event.getKeyCode();
		if (category.getText().length()>0) {
		    category.setText(null);
            msgLabel.setText("Valid Categories are D, G, R, and S");		    
        }
		else if ((key!=java.awt.event.KeyEvent.VK_D)&&
		         (key!=java.awt.event.KeyEvent.VK_G)&&
		         (key!=java.awt.event.KeyEvent.VK_R)&&
		         (key!=java.awt.event.KeyEvent.VK_S))
            msgLabel.setText("Valid Categories are D, G, R, and S");		    
        else msgLabel.setText(null);
	}

	void papClass_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event,2);
	}

	void codeStatus_keyPressed(java.awt.event.KeyEvent event)
	{
        if (event.getKeyCode()==event.VK_ENTER) {
            if (descriptionChanged) {
                termDate.setEnabled(true);
                //termDate.requestFocus();
            }
		    codeStatus.transferFocus();
		}
	}

	void codeStatus_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,1);
	}

	void resultCode_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.requiredField(resultCode,"Result Code"))
		        if (currMode==Lab.QUERY) finalActions();
		        else resultCode.transferFocus();
		}
		    
	}

	void resultCodeDesc_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.requiredField(resultCodeDesc,"Description")) {
		        String s = resultCodeDesc.getText();
		        if (currMode==Lab.UPDATE && !s.equals(oldDescription)) descriptionChanged=true;
		        resultCodeDesc.transferFocus();
		    }
		}
	}

	void pathNeeded_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.requiredField(pathNeeded,"Pathologist Needed"));
		        pathNeeded.transferFocus();
		}
	}

	void category_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.requiredField(category,"Category")) {
	            try { descrLbl.setText("  "); }
	            catch (Exception e) { }
		        category.transferFocus();
		    }
		}
	}

	void papClass_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) 
		    papClass.transferFocus();
	}

	void biopsy_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event);
	}

	void biopsy_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER)
		    biopsy.transferFocus();
	}
	
	void resetColors()
	{
	    Utils.setColors(this.getContentPane());
	    descrLbl.setForeground(Color.green);
	    rowNumber.setForeground(Color.white);
	    msgLabel.setForeground(Color.green);
		descrLbl.setFont(new Font("SansSerif", Font.BOLD, 10));
		rowNumber.setFont(new Font("SansSerif", Font.BOLD, 10));
	}

	class SymFocus extends java.awt.event.FocusAdapter
	{
		public void focusGained(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			if (object == resultCode)
				resultCode_focusGained(event);
			else if (object == resultCodeDesc)
				resultCodeDesc_focusGained(event);
			else if (object == pathNeeded)
				pathNeeded_focusGained(event);
			else if (object == category)
				category_focusGained(event);
			else if (object == papClass)
				papClass_focusGained(event);
			else if (object == biopsy)
				biopsy_focusGained(event);
			else if (object == codeStatus)
				codeStatus_focusGained(event);
		}
	}

	void resultCode_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
		msgLabel.setText("Enter Bethesda Code");
	}

	void resultCodeDesc_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
		msgLabel.setText("Enter Description");
	}

	void pathNeeded_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
		msgLabel.setText("Pathologist needed for this code (Y/N) ?");
	}

	void category_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
		try {
		descrLbl.setText(
		    "S = Specimen Adequacy;  G = General Categorization;  D = Description;  R = Remarks");
		}
		catch (Exception e) { }
	}

	void papClass_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
		msgLabel.setText("Enter PAP Class");
	}

	void biopsy_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
		msgLabel.setText("Does this code require a biospy letter (Y/N) ?");
	}

	void codeStatus_focusGained(java.awt.event.FocusEvent event)
	{
		Utils.deselect(event);
		msgLabel.setText("Enter Status, A = Active; I = Inactive");
	}

	void termDate_keyPressed(java.awt.event.KeyEvent event)
	{
        if (event.getKeyCode()==event.VK_ENTER) {
            if (Utils.dateVerify(termDate)) {
	            termDate.transferFocus();
	            termDate.setEnabled(false);
            }
	    }
	}

	void termDate_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.buildDateMask(event);
	}
	
    public void printResultCodes() {
        PrintJob pjob;
        Properties p = new java.util.Properties();
        Graphics pgraphics;
        String name = new String("Bethesda Codes");
        pjob=getToolkit().getPrintJob(this,name,p);
        lineCount=1; pageNumber=0;
        String buf=new String(), buf2=new String();
        if (pjob!=null) {
            x=20; y=20;
            pgraphics=pjob.getGraphics();
            for (int ndx=0; ndx<resultCodeVect.size(); ndx++) {
                ResultCodeRec r = (ResultCodeRec)resultCodeVect.elementAt(ndx);
                if (ndx==0) {
                    if (pgraphics!=null) printHeader(pgraphics);
                }
                if (pgraphics!=null) {
                    pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,10));
                    y+=12;
                    lineCount++;
                    if (lineCount>60) {
                        pgraphics.dispose();
                        pgraphics=pjob.getGraphics();
                        if (pgraphics!=null) printHeader(pgraphics);
                    }
                    pgraphics.drawString("CODE:  "+r.bethesda_code,x,y);
                    x=350;
                    pgraphics.drawString("STATUS:  "+r.active_status,x,y);
                    x=20; y+=12; lineCount++;
                    if (lineCount>60) {
                        pgraphics.dispose();
                        pgraphics=pjob.getGraphics();
                        if (pgraphics!=null) printHeader(pgraphics);
                    }
                    pgraphics.drawString("CATEGORY:  "+r.category,x,y);
                    x=350;
                    pgraphics.drawString("CLASS:  "+Integer.toString(r.pap_class),x,y);
                    x=20; y+=12; lineCount++;
                    if (lineCount>60) {
                        pgraphics.dispose();
                        pgraphics=pjob.getGraphics();
                        if (pgraphics!=null) printHeader(pgraphics);
                    }
                    pgraphics.drawString("PATHOLOGIST:  "+r.path_needed,x,y);
                    x=350;
                    pgraphics.drawString("BX:  "+r.biopsy_request,x,y);
                    x=20; y+=12; lineCount++;
                    if (lineCount>60) {
                        pgraphics.dispose();
                        pgraphics=pjob.getGraphics();
                        if (pgraphics!=null) printHeader(pgraphics);
                    }
                    x=20; y+=12; lineCount+=1;
                    buf = new String(r.description);
                    if (Utils.length(buf)>90) {
                        buf2 = new String(buf);
                        int endNdx=0;
                        while (Utils.length(buf2)>90) {
                            for (int k=0;k<90;k++) {
                                if (buf2.charAt(k)==' ')
                                endNdx=k;
                            }
                            buf = new String(buf2.substring(0,endNdx));
                            buf2 = new String(buf2.substring(endNdx).trim());
                            pgraphics.drawString(buf,x,y);
                            y+=12; lineCount++;
                            if (lineCount>60) {
                                pgraphics.dispose();
                                pgraphics=pjob.getGraphics();
                                if (pgraphics!=null) printHeader(pgraphics);
                            }
                        }
                        if (!Utils.isNull(buf2)) {
                            pgraphics.drawString(buf2,x,y);
                            y+=12; lineCount++;
                            if (lineCount>60) {
                                pgraphics.dispose();
                                pgraphics=pjob.getGraphics();
                                if (pgraphics!=null) printHeader(pgraphics);
                            }
                        }
                    }
                    else {
                        pgraphics.drawString(buf,x,y);
                        y+=12; lineCount++;
                        if (lineCount>60) {
                            pgraphics.dispose();
                            pgraphics=pjob.getGraphics();
                            if (pgraphics!=null) printHeader(pgraphics);
                        }
                    }
                    for (int j=0; j<r.beth_prior_descr.size(); j++) {
                        BethPriorDescr t =
                            (BethPriorDescr)r.beth_prior_descr.elementAt(j);
                        x=20; y+=12;
                        pgraphics.drawString("TERMINATED: "+t.term_date,x,y);
                        y+=12; lineCount++;
                        if (lineCount>60) {
                            pgraphics.dispose();
                            pgraphics=pjob.getGraphics();
                            if (pgraphics!=null) printHeader(pgraphics);
                        }
                        buf = new String(t.description);
                        if (Utils.length(buf)>90) {
                            buf2 = new String(buf);
                            int endNdx=0;
                            while (Utils.length(buf2)>90) {
                                for (int k=0;k<90;k++) {
                                    if (buf2.charAt(k)==' ')
                                    endNdx=k;
                                }
                                buf = new String(buf2.substring(0,endNdx));
                                buf2 = new String(buf2.substring(endNdx).trim());
                                pgraphics.drawString(buf,x,y);
                                y+=12; lineCount++;
                                if (lineCount>60) {
                                    pgraphics.dispose();
                                    pgraphics=pjob.getGraphics();
                                    if (pgraphics!=null) printHeader(pgraphics);
                                }
                            }
                            if (!Utils.isNull(buf2)) {
                                pgraphics.drawString(buf2,x,y);
                                y+=12; lineCount++;
                                if (lineCount>60) {
                                    pgraphics.dispose();
                                    pgraphics=pjob.getGraphics();
                                    if (pgraphics!=null) printHeader(pgraphics);
                                }
                            }
                        }
                        else {
                            pgraphics.drawString(buf,x,y);
                            y+=12; lineCount++;
                            if (lineCount>60) {
                                pgraphics.dispose();
                                pgraphics=pjob.getGraphics();
                                if (pgraphics!=null) printHeader(pgraphics);
                            }
                        }
                    }
                    pgraphics.drawString(
                        "-----------------------------"+
                        "-----------------------------"+
                        "-----------------------------",x,y);
                    x=20; y+=12; lineCount++;
                    if (lineCount>60) {
                        pgraphics.dispose();
                        pgraphics=pjob.getGraphics();
                        if (pgraphics!=null) printHeader(pgraphics);
                    }
                }
            }
        }       
        pjob.end();
    }
    
    private void printHeader(Graphics pgraphics)
    {
        y=20; lineCount=1; pageNumber++;
        pgraphics.setFont(new Font("MonoSpaced",Font.BOLD,10));
        y+=12; lineCount+=1;
        pgraphics.drawString("PENNSYLVANIA CYTOLOGY SERVICES",x,y);
        y+=12; lineCount+=1;
        pgraphics.drawString("BETHESDA CODES REPORT",x,y);
        y+=12; lineCount+=1;
        pgraphics.drawString("Page "+Integer.toString(pageNumber),x,y);
        pgraphics.drawString("    ",x,y);
        y+=24; lineCount+=2;
        pgraphics.setFont(new Font("MonoSpaced",Font.PLAIN,10));
    }
	
}
