package com.pacytology.pcs;

import java.awt.*;
import javax.swing.*;

import com.pacytology.pcs.utils.StringUtils;

import java.io.File;

public class LabGapDialog extends javax.swing.JDialog
{

    PCSLabEntry parent;
    StringUtils format = new StringUtils();
    
	public LabGapDialog(PCSLabEntry parent)
	{
		this.parent=parent;
		
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Lab Number Gaps");
		setResizable(false);
		setModal(true);
		setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(223,71);
		setVisible(false);
		getContentPane().add(startingLab);
		startingLab.setFont(new Font("SansSerif", Font.PLAIN, 12));
		startingLab.setBounds(130,14,80,20);
		getContentPane().add(endingLab);
		endingLab.setFont(new Font("SansSerif", Font.PLAIN, 12));
		endingLab.setBounds(130,36,80,20);
		JLabel1.setText("Starting Lab");
		getContentPane().add(JLabel1);
		JLabel1.setForeground(java.awt.Color.black);
		JLabel1.setBounds(20,16,80,12);
		JLabel3.setText("Ending Lab");
		getContentPane().add(JLabel3);
		JLabel3.setForeground(java.awt.Color.black);
		JLabel3.setBounds(20,38,68,12);
		//}}
		
		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		startingLab.addKeyListener(aSymKey);
		endingLab.addKeyListener(aSymKey);
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		//}}
	}

	public LabGapDialog()	{	}

	public LabGapDialog(String sTitle)
	{
		this();
		setTitle(sTitle);
	}
	
	public void setVisible(boolean b)
	{
		if (b)setLocation(50,50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new LabGapDialog()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted) return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JTextField startingLab = new javax.swing.JTextField();
	javax.swing.JTextField endingLab = new javax.swing.JTextField();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	//}}


	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			
		}
	}
	
	void retrieveActions()
	{
	    if (format.isNull(startingLab.getText()) ||
	        format.isNull(endingLab.getText())) {
	        format.createErrMsg("Insufficient Data");
        }
        else {
            int minLab = Integer.parseInt(startingLab.getText());
            int maxLab = Integer.parseInt(endingLab.getText());
            if (minLab>=maxLab) {
                format.createErrMsg("Insufficient Data");
                return;
            }
		    parent.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            this.setVisible(false);
            parent.displayLabGaps(minLab,maxLab);
		    parent.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            this.dispose();
        }
	}
	

	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == startingLab)
				startingLab_keyTyped(event);
			if (object == endingLab)
				endingLab_keyTyped(event);
			
		}

		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == LabGapDialog.this)
				LabGapDialog_keyPressed(event);
			else if (object == startingLab)
				startingLab_keyPressed(event);
			if (object == endingLab)
				endingLab_keyPressed(event);
			
		}
	}

	void LabGapDialog_keyPressed(java.awt.event.KeyEvent event)
	{
	}

	void startingLab_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (format.required(startingLab,"Starting Lab"))
		        startingLab.transferFocus();
		}
	}

	void startingLab_keyTyped(java.awt.event.KeyEvent event)
	{
		format.forceDigits(event,11);
	}
	

	void endingLab_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (format.required(endingLab,"Ending Lab"))
		        retrieveActions();
		}
	}

	void endingLab_keyTyped(java.awt.event.KeyEvent event)
	{
		format.forceDigits(event,11);
	}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowOpened(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == LabGapDialog.this)
				LabGapDialog_windowOpened(event);
		}
	}

	void LabGapDialog_windowOpened(java.awt.event.WindowEvent event)
	{
		startingLab.requestFocus();
	}
	
}
