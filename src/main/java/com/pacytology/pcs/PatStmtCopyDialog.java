package com.pacytology.pcs;
/*
    
PENNSYLVANIA CYTOLOGY SERVICES
    LABORATORY INFORMATION SYSTEM V1.0
    Copyright (C) 2001 by John Cardella
    All Rights Reserved
    
    File:       PatStmtCopyDialog.java
    Created By: John Cardella, Software Engineer
    
    Function:   This class is used to print a copy
    of a patient statement.
    
    MODIFICATIONS ----------------------------------
    Date/Staff      Description:
*/

import java.awt.*;

import java.sql.*;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.Graphics;
import java.util.Properties;
import java.awt.PrintJob;

import javax.swing.*;

public class PatStmtCopyDialog extends JDialog
{

    Login dbLogin;
    public LogFile log;
    int labNum=0;
    public PatientStatement pStmt;
    Frame parent;
    
	public PatStmtCopyDialog(Frame parent)
	{
		this.parent=parent;
		
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Patient Statement Copy");
		setModal(true);
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(230,104);
		setVisible(false);
		JLabel11.setText("Enter Lab Number:");
		getContentPane().add(JLabel11);
		JLabel11.setForeground(java.awt.Color.black);
		JLabel11.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel11.setBounds(20,16,110,14);
		printButton.setText("Retrieve");
		printButton.setActionCommand("Retrieve");
		getContentPane().add(printButton);
		printButton.setFont(new Font("Dialog", Font.BOLD, 12));
		printButton.setBounds(20,50,84,20);
		cancelButton.setText("Cancel");
		cancelButton.setActionCommand("Cancel");
		getContentPane().add(cancelButton);
		cancelButton.setFont(new Font("Dialog", Font.BOLD, 12));
		cancelButton.setBounds(124,50,84,20);
		getContentPane().add(msgLabel);
		msgLabel.setForeground(java.awt.Color.red);
		msgLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		msgLabel.setBounds(24,78,180,14);
		getContentPane().add(labNumber);
		labNumber.setFont(new Font("SansSerif", Font.BOLD, 12));
		labNumber.setBounds(130,14,80,20);
		//}}
		
		setBounds(100,100,230,104);
		labNumber.setDisabledTextColor(Color.black);
		
		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		printButton.addActionListener(lSymAction);
		cancelButton.addActionListener(lSymAction);
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		labNumber.addKeyListener(aSymKey);
		//}}
	}

	public PatStmtCopyDialog()
	{
		this((Frame)null);
	}

	public PatStmtCopyDialog(String sTitle)
	{
		this();
		setTitle(sTitle);
	}
	
	public PatStmtCopyDialog(Frame parent,Login dbLogin) {
	    this();
	    this.dbLogin=dbLogin;
		this.log = new LogFile(
		    dbLogin.logPath,"PatStmtCopyDialog",dbLogin.dateToday,dbLogin.userName);
	}

	public PatStmtCopyDialog(Frame parent,Login dbLogin,String labNum) {
	    this();
	    this.dbLogin=dbLogin;
	    this.labNumber.setText(labNum);
	    try { this.labNum=(int)Integer.parseInt(labNumber.getText()); }
	    catch (Exception e) { (new ErrorDialog("Invalid Lab Number")).setVisible(true); }
		this.log = new LogFile(
		    dbLogin.logPath,"PatStmtCopyDialog",dbLogin.dateToday,dbLogin.userName);
	}

	public void setVisible(boolean b)
	{
		if (b) setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new PatStmtCopyDialog()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	JLabel JLabel11 = new JLabel();
	JButton printButton = new JButton();
	JButton cancelButton = new JButton();
	JLabel msgLabel = new JLabel();
	JTextField labNumber = new JTextField();
	//}}


	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == printButton)
				printButton_actionPerformed(event);
			else if (object == cancelButton)
				cancelButton_actionPerformed(event);
			
		}
	}

	void printButton_actionPerformed(java.awt.event.ActionEvent event)
	{
	    try { labNum=(int)Integer.parseInt(labNumber.getText()); }
	    catch (Exception e) { Utils.createErrMsg("Invalid Lab Number"); }
	    int rv=getCount(labNum);
        if (rv>0) {
	        PrintJob pjob;
	        Properties p = new java.util.Properties();
	        String name = "Patient Statement";
	        pjob=getToolkit().getPrintJob(parent,name,p);
		    pStmt = new PatientStatement(dbLogin,pjob,labNum);
		    pStmt.printStatements();
		    try { this.dispose(); } 
		    catch (Exception e) { log.write(e+": closing pstmtCopyDialog"); }
		}
		else if (rv==0){
		    setQueue("PAT","TMP");
		    insertStatement(labNum);
	        PrintJob pjob;
	        Properties p = new java.util.Properties();
	        String name = "Itemized Statement";
	        pjob=getToolkit().getPrintJob(parent,name,p);
		    pStmt = new PatientStatement(dbLogin,pjob);
		    pStmt.printStatements();
		    try { this.dispose(); } 
		    catch (Exception e) { log.write(e+": closing pstmtCopyDialog"); }
		    setQueue("TMP","PAT");
		    deleteQueue(labNum);
		}
		else {
		    Utils.createErrMsg("Statement to print in billing queue - cannot print copy");
		    closingActions();
		}
	}

	void cancelButton_actionPerformed(java.awt.event.ActionEvent event)
	{
	    closingActions();
	}
	
	void closingActions()
	{
	    log.stop();
	    this.dispose();
	}
	
    private int getCount(int labNum)  
    {
        int rv=0;
        try  {
            String query = 
                "SELECT count(*) \n"+
                "FROM \n"+
                "   pcs.lab_requisitions l, pcs.patients p, \n"+
                "   pcs.practices d, pcs.lab_billings lb, \n"+
                "   pcs.patient_statements ps, pcs.rebill_codes rc \n"+
                "WHERE \n"+
                "   l.lab_number=lb.lab_number and \n"+
                "   l.practice=d.practice and \n"+
                "   ps.rebill_code=rc.rebill_code(+) and \n"+
                "   l.patient=p.patient and \n"+
                "   lb.lab_number=ps.lab_number and \n"+
                "   l.lab_number="+labNum+" and \n"+labNum+" \n"+
                "NOT IN (SELECT lab_number from pcs.billing_queue) \n";
                
            log.write(query);
            Statement stmt = DbConnection.process().createStatement();
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) { rv=rs.getInt(1); }
            if (rv==0) {
                query =
                    "SELECT count(*) FROM pcs.billing_queue \n"+
                    "WHERE lab_number="+labNum+" \n";
                rs=stmt.executeQuery(query);
                while (rs.next()) { rv=rs.getInt(1); }
                if (rv==1) rv=(-1);
            }
        }
        catch( Exception e ) { log.write(e+": getCount"); }
        return (rv);
    }


	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowOpened(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == PatStmtCopyDialog.this)
				PatStmtCopyDialog_windowOpened(event);
		}
	}

	void PatStmtCopyDialog_windowOpened(java.awt.event.WindowEvent event)
	{
	    if (labNum>0) {
	        labNumber.setEnabled(false);
	        printButton.requestFocus();
	    }
	    else
		    labNumber.requestFocus();
	}

	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == labNumber)
				labNumber_keyTyped(event);
		}

		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == PatStmtCopyDialog.this)
				PatStmtCopyDialog_keyPressed(event);
			else if (object == labNumber)
				labNumber_keyPressed(event);
		}
	}

	void PatStmtCopyDialog_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_F9) closingActions();
	}

	void labNumber_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event);
	}

	void labNumber_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(labNumber,"Lab Number"))
		        labNumber.transferFocus();
		}
	}
	
    public void setQueue(String oldVal, String newVal) {
        String SQL = null;
        PreparedStatement pstmt = null;
        try {
            SQL=
                "UPDATE pcs.billing_queue \n"+
                "SET billing_route = ? \n"+
                "WHERE billing_route = ? \n"; 
            pstmt=DbConnection.process().prepareStatement(SQL);
            pstmt.setString(1,newVal);
            pstmt.setString(2,oldVal);
            pstmt.executeUpdate();
            try { pstmt.close(); }
            catch (SQLException e) { log.write(e.toString()); }
            catch (Exception e) {  log.write(e.toString()); }
        }
        catch (SQLException e) { log.write(e.toString()); }
        catch (Exception e) { log.write(e.toString()); }
    }

    public void deleteQueue(int labNum) {
        String SQL = null;
        PreparedStatement pstmt = null;
        try {
            SQL=
                "DELETE FROM pcs.billing_queue \n"+
                "WHERE lab_number = ? \n"; 
            pstmt=DbConnection.process().prepareStatement(SQL);
            pstmt.setInt(1,labNum);
            pstmt.executeUpdate();
            try { pstmt.close(); }
            catch (SQLException e) { log.write(e.toString()); }
            catch (Exception e) {  log.write(e.toString()); }
        }
        catch (SQLException e) { log.write(e.toString()); }
        catch (Exception e) { log.write(e.toString()); }
    }

    public void insertStatement(int labNum) {
        String SQL = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        int rebilling = 0;
        try {
            SQL=
                "SELECT rebilling \n"+
                "FROM pcs.lab_billings \n"+
                "WHERE lab_number = ? \n"; 
            pstmt=DbConnection.process().prepareStatement(SQL);
            pstmt.setInt(1,labNum);
            rs=pstmt.executeQuery(SQL);
            while (rs.next()) { rebilling=rs.getInt(1); }
            try { pstmt.close(); rs.close(); }
            catch (SQLException e) { log.write("(1) "+e.toString()); }
            catch (Exception e) {  log.write("(2) "+e.toString()); }
            SQL = 
                "INSERT INTO pcs.billing_queue \n"+
                "(lab_number,billing_route,datestamp,rebill_code,billing_type,rebilling)"+
                "VALUES (?,'PAT',SysDate,'ITM','IS00',?) \n";
            pstmt=DbConnection.process().prepareStatement(SQL);
            pstmt.setInt(1,labNum);
            pstmt.setInt(2,rebilling);
            pstmt.executeUpdate();
            try { pstmt.close(); }
            catch (SQLException e) { log.write("(3) "+e.toString()); }
            catch (Exception e) {  log.write("(4) "+e.toString()); }
        }
        catch (SQLException e) { log.write("(5) "+e.toString()); }
        catch (Exception e) { log.write("(6) "+e.toString()); }
    }
	
	
}
