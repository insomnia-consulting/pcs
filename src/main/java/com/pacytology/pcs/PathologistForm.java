package com.pacytology.pcs;


/*
    PathologistForm.java
    Software Engineer: Jon Cardella
*/

import java.awt.*;
import javax.swing.*;

import com.pacytology.pcs.ui.Square;

public class PathologistForm extends javax.swing.JFrame
{
    
    public Login dbLogin;
    public int MAX_PATHS=0;
    public PathRec[] paths;
    public PathDbOps pathOps = new PathDbOps(this);
    public int currNdx=0;
    /*
    final int IDLE=100;
    final int QUERY=101;
    final int ADD=102;
    final int UPDATE=103;
    final int DELETE=104;
    */
    public int currMode=Lab.IDLE;
    StringUtils format = new StringUtils();

	public PathologistForm()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Pathologists");
		setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(467,180);
		setVisible(false);
		ctCodeLbl.setText("Code");
		getContentPane().add(ctCodeLbl);
		ctCodeLbl.setBounds(30,96,60,16);
		pathCode.setEnabled(false);
		getContentPane().add(pathCode);
		pathCode.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pathCode.setBounds(90,94,60,20);
		ctLNameLbl.setText("Last");
		getContentPane().add(ctLNameLbl);
		ctLNameLbl.setBounds(30,124,48,12);
		pathLName.setEnabled(false);
		getContentPane().add(pathLName);
		pathLName.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pathLName.setBounds(90,122,150,20);
		ctFNameLbl.setText("First");
		getContentPane().add(ctFNameLbl);
		ctFNameLbl.setBounds(250,124,28,12);
		pathFName.setEnabled(false);
		getContentPane().add(pathFName);
		pathFName.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pathFName.setBounds(284,122,120,20);
		getContentPane().add(msgLabel);
		msgLabel.setForeground(java.awt.Color.red);
		msgLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		msgLabel.setBounds(44,52,372,20);
		getContentPane().add(F1sq);
		F1sq.setBounds(35,6,20,20);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F1");
		getContentPane().add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(39,6,20,20);
		getContentPane().add(F2sq);
		F2sq.setBounds(97,6,20,20);
		F2lbl.setRequestFocusEnabled(false);
		F2lbl.setText("F2");
		getContentPane().add(F2lbl);
		F2lbl.setForeground(java.awt.Color.black);
		F2lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F2lbl.setBounds(101,6,20,20);
		getContentPane().add(F3sq);
		F3sq.setBounds(159,6,20,20);
		F3lbl.setRequestFocusEnabled(false);
		F3lbl.setText("F3");
		getContentPane().add(F3lbl);
		F3lbl.setForeground(java.awt.Color.black);
		F3lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F3lbl.setBounds(163,6,20,20);
		getContentPane().add(F4sq);
		F4sq.setBounds(221,6,20,20);
		F4lbl.setRequestFocusEnabled(false);
		F4lbl.setText("F4");
		getContentPane().add(F4lbl);
		F4lbl.setForeground(java.awt.Color.black);
		F4lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F4lbl.setBounds(225,6,20,20);
		getContentPane().add(F5sq);
		F5sq.setBounds(283,6,20,20);
		F9lbl.setRequestFocusEnabled(false);
		F9lbl.setText("F9");
		getContentPane().add(F9lbl);
		F9lbl.setForeground(java.awt.Color.black);
		F9lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F9lbl.setBounds(287,6,20,20);
		getContentPane().add(F12sq);
		F12sq.setBounds(345,6,20,20);
		F12lbl.setRequestFocusEnabled(false);
		F12lbl.setText("F12");
		getContentPane().add(F12lbl);
		F12lbl.setForeground(java.awt.Color.black);
		F12lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F12lbl.setBounds(346,6,20,20);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("Query");
		getContentPane().add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(10,30,70,18);
		F2action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F2action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F2action.setText("Add");
		getContentPane().add(F2action);
		F2action.setForeground(java.awt.Color.black);
		F2action.setBounds(72,30,70,16);
		F3action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F3action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F3action.setText("Update");
		getContentPane().add(F3action);
		F3action.setForeground(java.awt.Color.black);
		F3action.setBounds(134,30,70,16);
		F4action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F4action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F4action.setText("Delete");
		getContentPane().add(F4action);
		F4action.setForeground(java.awt.Color.black);
		F4action.setBounds(196,30,70,16);
		F9action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F9action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F9action.setText("Exit");
		getContentPane().add(F9action);
		F9action.setForeground(java.awt.Color.black);
		F9action.setBounds(258,30,70,16);
		F11action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F11action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F11action.setText("Submit");
		getContentPane().add(F11action);
		F11action.setForeground(java.awt.Color.black);
		F11action.setBounds(320,30,70,16);
		pathTitle.setEnabled(false);
		getContentPane().add(pathTitle);
		pathTitle.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pathTitle.setBounds(198,94,156,20);
		JLabel1.setText("Title");
		getContentPane().add(JLabel1);
		JLabel1.setBounds(164,96,40,16);
		pathMI.setEnabled(false);
		getContentPane().add(pathMI);
		pathMI.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pathMI.setBounds(432,122,24,20);
		JLabel2.setText("MI");
		getContentPane().add(JLabel2);
		JLabel2.setBounds(412,126,28,12);
		pathDegree.setEnabled(false);
		getContentPane().add(pathDegree);
		pathDegree.setFont(new Font("DialogInput", Font.PLAIN, 12));
		pathDegree.setBounds(420,94,36,20);
		JLabel3.setText("Degree");
		getContentPane().add(JLabel3);
		JLabel3.setBounds(370,96,44,16);
		recNum.setText("0");
		getContentPane().add(recNum);
		recNum.setForeground(java.awt.Color.black);
		recNum.setFont(new Font("MonoSpaced", Font.PLAIN, 12));
		recNum.setBounds(390,150,70,16);
		//}}

        for (int i=0;i<MAX_PATHS;i++) paths[i] = new PathRec();
            
		//{{INIT_MENUS
		//}}
	
		//{{REGISTER_LISTENERS
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		pathCode.addKeyListener(aSymKey);
		pathLName.addKeyListener(aSymKey);
		pathFName.addKeyListener(aSymKey);
		pathMI.addKeyListener(aSymKey);
		pathTitle.addKeyListener(aSymKey);
		pathDegree.addKeyListener(aSymKey);
		//}}
	}

	public PathologistForm(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

    public PathologistForm(Login dbLogin)
    {
        this();
        this.dbLogin=dbLogin;
        this.pathOps.queryAllPaths();
        fillForm(currNdx);
    }        


	public void setVisible(boolean b)
	{
		if (b)
			setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new PathologistForm()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		Insets insets = getInsets();
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JLabel ctCodeLbl = new javax.swing.JLabel();
	javax.swing.JTextField pathCode = new javax.swing.JTextField();
	javax.swing.JLabel ctLNameLbl = new javax.swing.JLabel();
	javax.swing.JTextField pathLName = new javax.swing.JTextField();
	javax.swing.JLabel ctFNameLbl = new javax.swing.JLabel();
	javax.swing.JTextField pathFName = new javax.swing.JTextField();
	javax.swing.JLabel msgLabel = new javax.swing.JLabel();
	Square F1sq = new Square();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	Square F2sq = new Square();
	javax.swing.JLabel F2lbl = new javax.swing.JLabel();
	Square F3sq = new Square();
	javax.swing.JLabel F3lbl = new javax.swing.JLabel();
	Square F4sq = new Square();
	javax.swing.JLabel F4lbl = new javax.swing.JLabel();
	Square F5sq = new Square();
	javax.swing.JLabel F9lbl = new javax.swing.JLabel();
	Square F12sq = new Square();
	javax.swing.JLabel F12lbl = new javax.swing.JLabel();
	javax.swing.JLabel F1action = new javax.swing.JLabel();
	javax.swing.JLabel F2action = new javax.swing.JLabel();
	javax.swing.JLabel F3action = new javax.swing.JLabel();
	javax.swing.JLabel F4action = new javax.swing.JLabel();
	javax.swing.JLabel F9action = new javax.swing.JLabel();
	javax.swing.JLabel F11action = new javax.swing.JLabel();
	javax.swing.JTextField pathTitle = new javax.swing.JTextField();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JTextField pathMI = new javax.swing.JTextField();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JTextField pathDegree = new javax.swing.JTextField();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	javax.swing.JLabel recNum = new javax.swing.JLabel();
	//}}

	//{{DECLARE_MENUS
	//}}

    public void fillForm(int ndx) {
        pathCode.setText(paths[ndx].pathologist_code);
        pathLName.setText(paths[ndx].lname);
        pathFName.setText(paths[ndx].fname);
        pathMI.setText(paths[ndx].mi);
        pathDegree.setText(paths[ndx].degree);
        pathTitle.setText(paths[ndx].title);
        String msg = " "+(ndx+1)+" of "+MAX_PATHS;
        recNum.setText(msg);
    }

    public void clearForm() {
        pathCode.setText(null);
        pathLName.setText(null);
        pathFName.setText(null);
        pathMI.setText(null);
        pathDegree.setText(null);
        pathTitle.setText(null);
        recNum.setText(null);
    }



	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == pathCode)
				pathCode_keyTyped(event);
			else if (object == pathLName)
				pathLName_keyTyped(event);
			else if (object == pathFName)
				pathFName_keyTyped(event);
			
			if (object == pathMI)
				pathMI_keyTyped(event);
			else if (object == pathTitle)
				pathTitle_keyTyped(event);
			else if (object == pathDegree)
				pathDegree_keyTyped(event);
		}

		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == PathologistForm.this)
				PathologistForm_keyPressed(event);
		}
	}

	void PathologistForm_keyPressed(java.awt.event.KeyEvent event)
	{
		int key=event.getKeyCode();
		msgLabel.setText(null);
		switch(key) {
		    case java.awt.event.KeyEvent.VK_DOWN:
		        currNdx++;
		        if (currNdx==MAX_PATHS) {
		            msgLabel.setText("Bottom of List");
		            currNdx--;
		        }
                else fillForm(currNdx);
		        break;
            case java.awt.event.KeyEvent.VK_UP:
                currNdx--;
                if (currNdx==(-1)) {
                    msgLabel.setText("Top of List");
                    currNdx++;
                }
                else fillForm(currNdx);
                break;
            case java.awt.event.KeyEvent.VK_F2:
                addActions();
                break;
            case java.awt.event.KeyEvent.VK_F12:
                finalActions();
                break;
            case java.awt.event.KeyEvent.VK_ESCAPE:
                currNdx=0;
                pathOps.queryAllPaths();
                fillForm(currNdx);
                setEnableAllFields(false);
                msgLabel.requestFocus();
                break;
            case java.awt.event.KeyEvent.VK_F1:
                //queryActions();
                break;
            case java.awt.event.KeyEvent.VK_F9:
                this.dispose();
                break;
            case java.awt.event.KeyEvent.VK_CONTROL:
                ((JTextField)getFocusOwner()).setText(null);
                break;
		}
	}
	
	public void resetPathForm() {
	    recNum.setText(null);
	    currNdx=0;
	    clearForm();
	    setEnableAllFields(false);
	    msgLabel.requestFocus();
	    currMode=Lab.IDLE;
	}
	
	public void addActions() {
	    resetPathForm();
	    currMode=Lab.ADD;
	    setEnableAllFields(true);
	    pathCode.requestFocus();
	}
	
	public void setEnableAllFields(boolean eVal) {
	    pathCode.setEnabled(eVal);
	    pathLName.setEnabled(eVal);
	    pathFName.setEnabled(eVal);
	    pathMI.setEnabled(eVal);
	    pathDegree.setEnabled(eVal);
	    pathTitle.setEnabled(eVal);
	}
	
	public void forceUpper(java.awt.event.KeyEvent event) {
	    msgLabel.setText(null);
        try {
	        char key=event.getKeyChar();
	        if ( (key>='a')&&(key<='z') ) 
	            event.setKeyChar((char)(key-32));
        }
        catch (Exception e)  {
            System.out.println(e);                
        }            
    }	    
	

	void pathCode_keyTyped(java.awt.event.KeyEvent event)
	{
		forceUpper(event);
	}

	void pathLName_keyTyped(java.awt.event.KeyEvent event)
	{
		forceUpper(event);
	}

	void pathFName_keyTyped(java.awt.event.KeyEvent event)
	{
		forceUpper(event);
	}
	
	public void finalActions() {
	    boolean rv=false;
	    if (currMode==Lab.ADD) {
	        rv=pathOps.add();
	        if (rv==true) {
	            setEnableAllFields(false);
	            fillForm(currNdx);
	            msgLabel.requestFocus();
	            currMode=Lab.IDLE;
	        }
	    }
	}
	
	public void queryActions() {
	    boolean rv=true;
	    resetPathForm();
	    currMode=Lab.QUERY;
	    setEnableAllFields(false);
	    rv=pathOps.queryAllPaths();
	    if (rv==true) {
	        currNdx=0;
	        fillForm(currNdx);
	    }
	    else resetPathForm();
	}

	void pathMI_keyTyped(java.awt.event.KeyEvent event)
	{
		forceUpper(event);
	}
	

	void pathTitle_keyTyped(java.awt.event.KeyEvent event)
	{
		forceUpper(event);
	}

	void pathDegree_keyTyped(java.awt.event.KeyEvent event)
	{
		forceUpper(event);
	}
	
	void resetColors()
	{
	    format.setColors(this.getContentPane());
	}
	
}
