package com.pacytology.pcs;/*    PENNSYLVANIA CYTOLOGY SERVICES    LABORATORY INFORMATION SYSTEM V1.0    Copyright (C) 2001 by John Cardella    All Rights Reserved        File:       BillingDbOps.java    Created By: John Cardella, Software Engineer        Function:   Database operations for biling/claim form. Implemented    as a runnable interface. Add and update operations into Oracle    are handled as threads. Only one add/update thread may be     running while user is entering next set of data.    MODIFICATIONS ----------------------------------    Date/Staff      Description:    09/17           Changed db access in all methods                    to use dbConnection class                    connection rather than having                    separate one within this method*/import java.lang.*;import java.sql.*;import java.util.Vector;public class BillingDbOps implements Runnable{    Thread dbThread;    int tLab;    int tMode;    BillingForm parent;    final int INIT=(-1);    final int PATIENT=95;    final int ZIP=96;    final int CARRIERS=97;    final int DOCTORS=98;    final int PRACTICES=99;    final int IDLE=100;    final int ADD=102;    final int UPDATE=103;    public BillingDbOps(BillingForm p) {         parent = p;     }        public synchronized void run() {        if (tMode==ZIP) {            String zip5 = parent.labZip.getText().substring(0,5);            queryZip(zip5);        }        else if (tMode==INIT) {            parent.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));            getBillingCodes();            getDiagnosisCodes();            getClaimStatusCodes();            getReworkQueue();            parent.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));        }        else if (tMode==PRACTICES) {             boolean rv = queryPracticeInfo(parent.labRec.prac.practice);            if (rv) {                queryDoctorInfo(parent.labRec.prac.practice);             }            else  {                parent.labPractice.setText(null);                parent.labParent.setText(null);                parent.labPracticeName.setText(null);                parent.practicePhone.setText(null);                parent.labPractice.requestFocus();            }                        }        else if (tMode==DOCTORS) {            queryDoctorInfo(parent.labRec.practice);         }        else if (tMode==CARRIERS) {            boolean rv = queryCarrier();            if (!rv) {                 parent.createErrMsg("Payer information not found.");                parent.labOtherInsurance.requestFocus();                parent.labOtherInsurance.setText(null);                parent.labPayerID.setText(null);                parent.labPCSID.setText(null);            }            else if (parent.carrierVect.size()==1) {                parent.labOtherInsurance.setText(parent.billingAdd.payer.name);                parent.labPayerID.setText(parent.billingAdd.payer.payer_id);                parent.labPCSID.setText(                    Integer.toString(parent.billingAdd.payer.id_number));                parent.checkCarrier=false;            }        }        parent.msgLabel.setText(null);        parent.dbThreadRunning=false;    }    public void labFormInit() {        parent.msgLabel.setText("INITIALIZING ...");        tMode=INIT;        parent.dbThreadRunning=true;        dbThread = new Thread(this);        dbThread.setPriority(Thread.MAX_PRIORITY);        dbThread.start();    }        public void getZipInfo() {        tMode=ZIP;        dbThread = new Thread(this);        dbThread.setPriority(Thread.MIN_PRIORITY);        dbThread.start();    }        public void getPracticeInfo() {        tMode=PRACTICES;        parent.dbThreadRunning=true;        dbThread = new Thread(this);        dbThread.setPriority(Thread.MAX_PRIORITY);        dbThread.start();    }    public void getDoctorInfo() {        tMode=DOCTORS;        parent.dbThreadRunning=true;        dbThread = new Thread(this);        dbThread.setPriority(Thread.MAX_PRIORITY);        dbThread.start();    }        public void getCarrierInfo() {        tMode=CARRIERS;        parent.dbThreadRunning=true;        dbThread = new Thread(this);        dbThread.setPriority(Thread.MAX_PRIORITY);        dbThread.start();    }    public void getClaimStatusCodes()      {        try  {            int rowsReturned=0;                    String SQL =                 "SELECT  claim_status,description \n"+                "FROM pcs.claim_statuses \n"+                "ORDER BY claim_status";            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(SQL);            while (rs.next())  {                ClaimStatusRec statusRec = new ClaimStatusRec();                statusRec.claim_status=rs.getString(1);                statusRec.description=rs.getString(2);                parent.claimStatusVect.addElement(statusRec);            }                            try { rs.close(); stmt.close(); }            catch (SQLException e) { parent.log.write(e); }                            catch (Exception e) { parent.log.write(e.toString()); }        }        catch (SQLException e) { parent.log.write(e); }        catch (Exception e) { parent.log.write(e.toString()); }    }    public void getBillingCodes()      {        try  {            int rowsReturned=0;                    String SQL =                 "SELECT  billing_choice,rtrim(choice_code),description \n"+                "FROM pcs.billing_choices \n"+                "WHERE active_status='A' \n"+                "ORDER BY description";            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(SQL);            while (rs.next()) rowsReturned++;            rs.close(); stmt.close();            parent.MAX_BILLING_CODES=rowsReturned;            parent.labBillingCodes=new BillingCodeRec[parent.MAX_BILLING_CODES];            int ndx=0;            stmt=DbConnection.process().createStatement();            rs=stmt.executeQuery(SQL);            while (rs.next())  {                parent.labBillingCodes[ndx] = new BillingCodeRec();                parent.labBillingCodes[ndx].billing_choice=rs.getInt(1);                parent.labBillingCodes[ndx].choice_code=rs.getString(2);                parent.labBillingCodes[ndx].description=rs.getString(3);                String buf = "["+parent.labBillingCodes[ndx].choice_code;                if (Utils.length(buf)>3) buf=buf+"]  ";                else buf=buf+"]   ";                buf=buf+parent.labBillingCodes[ndx].description;                parent.labBillingCodes[ndx].formattedString=buf;                ndx++;            }                            rs.close(); stmt.close();            if (parent.MAX_BILLING_CODES>0)  {                parent.billingCodeList = new String[parent.MAX_BILLING_CODES];                for (int i=0;i<parent.MAX_BILLING_CODES;i++) {                    SQL = "SELECT count(*) from pcs.carriers \n"+                        "WHERE billing_choice="+parent.labBillingCodes[i].billing_choice+" \n";                    parent.billingCodeList[i]=parent.labBillingCodes[i].choice_code;                    stmt=DbConnection.process().createStatement();                    rs=stmt.executeQuery(SQL);                    while (rs.next()) { parent.labBillingCodes[i].carrier_count=rs.getInt(1); }                    rs.close(); stmt.close();                }            }                        }        catch (SQLException e) { parent.log.write(e); }        catch (Exception e) { parent.log.write(e.toString()); }    }    public void getDiagnosisCodes()  {        try  {            String SQL =                "SELECT count(*) \n"+                "FROM pcs.diagnosis_codes \n"+                "WHERE active_status='A' \n";            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(SQL);            while (rs.next()) parent.MAX_DIAG_CODES=rs.getInt(1);            rs.close(); stmt.close();            SQL =                 "SELECT diagnosis_code,description \n"+                "FROM pcs.diagnosis_codes \n"+                "WHERE active_status='A' \n"+                "ORDER BY diagnosis_code";            parent.labDiagnosisCodes=new DiagnosisCodeRec[parent.MAX_DIAG_CODES];            int ndx=0;            stmt=DbConnection.process().createStatement();            rs=stmt.executeQuery(SQL);            while (rs.next()) {                parent.labDiagnosisCodes[ndx] = new DiagnosisCodeRec();                parent.labDiagnosisCodes[ndx].diagnosis_code=rs.getString(1);                parent.labDiagnosisCodes[ndx].description=rs.getString(2);                parent.labDiagnosisCodes[ndx].formattedString=parent.labDiagnosisCodes[ndx].diagnosis_code;                for (int i=parent.labDiagnosisCodes[ndx].formattedString.length();i<6;i++)                     parent.labDiagnosisCodes[ndx].formattedString=parent.labDiagnosisCodes[ndx].formattedString+" ";                parent.labDiagnosisCodes[ndx].formattedString=parent.labDiagnosisCodes[ndx].formattedString+"  "+parent.labDiagnosisCodes[ndx].description;                ndx++;            }                 rs.close(); stmt.close();            if (parent.MAX_DIAG_CODES>0)  {                parent.diagnosisCodeList=new String[parent.MAX_DIAG_CODES];                for (int i=0;i<parent.MAX_DIAG_CODES;i++)                    parent.diagnosisCodeList[i]=parent.labDiagnosisCodes[i].diagnosis_code;            }                        }        catch (SQLException e) { parent.log.write(e); }        catch (Exception e) { parent.log.write(e.toString()); }    }    private String getClaimPayment(int claim_id)    {        String s = null;        try  {            String query =                 "SELECT  TO_CHAR(NVL(SUM(p.payment_amount),0),'990.99') \n"+                "FROM pcs.lab_claims C, pcs.payments P \n"+                "WHERE P.check_number=C.claim_id and C.claim_id="+claim_id+" \n";            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(query);            rs=stmt.executeQuery(query);            while (rs.next())  { s=rs.getString(1); }            try { rs.close(); stmt.close(); }            catch (SQLException e) { parent.log.write(e); }            catch (Exception e) { parent.log.write(e.toString()); }        }        catch (SQLException e) { parent.log.write(e); }        catch (Exception e) { parent.log.write(e.toString()); }        return (s);    }    public boolean add()  {        boolean exitStatus=true;        try  {            CallableStatement cstmt;	        cstmt=DbConnection.process().prepareCall(	            "{call pcs.rebill_add(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");            cstmt.setInt(1,parent.labRec.lab_number);            cstmt.setInt(2,parent.labRec.patient);            cstmt.setInt(3,parent.labRec.practice);            cstmt.setInt(4,parent.labRec.rebilling);            cstmt.setString(5,parent.billingAdd.choice_code);            cstmt.setInt(6,parent.billingAdd.carrier_id);            cstmt.setString(7,parent.billingAdd.id_number);            cstmt.setString(8,parent.billingAdd.group_number);            cstmt.setString(9,parent.billingAdd.subscriber);            cstmt.setString(10,parent.billingAdd.sub_lname);            cstmt.setString(11,parent.billingAdd.sub_fname);            cstmt.setString(12,parent.billingAdd.sign_date);            cstmt.setString(13,parent.billingAdd.medicare_code);            if (parent.hasSecondary)                cstmt.setString(14,"SEC");            else                cstmt.setString(14,parent.billingAdd.rebill_code);            cstmt.setString(15,parent.billingAdd.diagnosis_code);            cstmt.setString(16,parent.billingAdd.diagnosis_code2);            cstmt.setString(17,parent.billingAdd.diagnosis_code3);            cstmt.setString(18,parent.billingAdd.diagnosis_code4);            cstmt.setString(19,parent.billingAdd.billing_level);            cstmt.setString(20,parent.billingAdd.claim_status);            cstmt.executeUpdate();            if (parent.currMode==Lab.REWORK_ADD) {                parent.reworkQueue = new Vector();                getReworkQueue();            }            /*            if (!Utils.isNull(parent.labRec.lab_comments))                updateComments(parent.hasComments);            */            try { cstmt.close(); }            catch (SQLException e) {                 parent.log.write(e);                parent.log.write("exec pcs.rebill_add");                exitStatus=false;            }            catch (Exception e) {                 parent.log.write(e.toString());                 parent.log.write("exec pcs.rebill_add");                exitStatus=false;            }        }        catch (SQLException e) {             parent.log.write(e);            parent.log.write("exec pcs.rebill_add");            exitStatus=false;        }        catch (Exception e) {             parent.log.write(e.toString());            parent.log.write("exec pcs.rebill_add");            exitStatus=false;        }        return(exitStatus);                }                public boolean queryPracticeInfo(int pr)  {        boolean exitStatus=true;        try  {            String query =                 "SELECT P.name,P.stop_code,P.client_notes, \n"+                "   P.active_status,P.state,C.comment_text, \n"+                "   P.phone,P.block_patient,P.parent_account, \n"+                "   P.practice_type,P.program \n"+                "FROM pcs.practices P, pcs.practice_comments C \n"+                "WHERE P.practice=C.practice(+) and P.practice="+pr+" \n";                            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(query);            int rowsReturned=0;            PracticeRec prac = new PracticeRec();            prac.practice=pr;            while (rs.next()) {                prac.name=rs.getString(1);                prac.stop_code=rs.getString(2);                prac.client_notes=rs.getString(3);                prac.active_status=rs.getString(4);                prac.state=rs.getString(5);                prac.comment_text=rs.getString(6);                prac.phone=rs.getString(7);                prac.block_patient=rs.getString(8);                prac.parent_account=rs.getInt(9);                prac.practice_type=rs.getString(10);                prac.program=rs.getString(11);                rowsReturned++;            }                   rs.close(); stmt.close();            if (rowsReturned>0) {                if (prac.active_status.equals("I")) {                    Utils.createErrMsg("Cannot use an account that is inactive.");                    parent.labRec.prac.practice=parent.labRec.practice;                    parent.labPractice.requestFocus();                    exitStatus=false;                }                else if (prac.stop_code.equals("Y")                && parent.labBillingChoice.getText().equals("DOC")) {                   Utils.createErrMsg("Cannot do DOC billing with this account.");                   parent.labRec.prac.practice=parent.labRec.practice;                   parent.labPractice.requestFocus();                   exitStatus=false;                }                else {                    parent.labRec.prac=prac;                    parent.labRec.practice=pr;                    parent.labRec.parent_account=prac.parent_account;                    parent.labPracticeName.setText(parent.labRec.prac.name);                    parent.practicePhone.setText(Utils.addPhoneMask(                        parent.labRec.prac.phone));                    parent.pracType.setText(parent.labRec.prac.practice_type);                    if (!parent.labRec.prac.program.equals("NONE"))                        parent.pgmLabel.setText(parent.labRec.prac.program);                    else                        parent.pgmLabel.setText(null);                }            }            else { parent.msgLabel.setText("No data returned"); exitStatus=false; }        }        catch (SQLException e) {            Utils.createErrMsg(e.toString());            exitStatus=false;        }        return(exitStatus);                }           public boolean queryDoctorInfo(int pr)  {        boolean exitStatus=true;        try  {            String query =                 "SELECT doctor,lname,fname,title,mi,upin,license,bs_provider,alt_license,alt_state \n"+                "FROM pcs.doctors \n"+                "WHERE practice="+pr+" and active_status='A' \n"+                "ORDER BY primary DESC,lname \n";                            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(query);            parent.doctorVect = new Vector();            int rowsReturned=0;            while (rs.next()) {                DoctorRec dRec = new DoctorRec();                dRec.practice=pr;                dRec.doctor=rs.getInt(1);                dRec.lname=rs.getString(2);                dRec.fname=rs.getString(3);                dRec.title=rs.getString(4);                dRec.mi=rs.getString(5);                dRec.upin=rs.getString(6);                dRec.license=rs.getString(7);                dRec.bs_provider=rs.getString(8);                dRec.alt_license=rs.getString(9);                dRec.alt_state=rs.getString(10);                parent.doctorVect.addElement(dRec);                rowsReturned++;                                }               try { rs.close(); stmt.close(); }            catch (SQLException e) { parent.log.write(e); exitStatus=false; }            catch (Exception e) { parent.log.write(e.toString()); exitStatus=false; }        }        catch (SQLException e) { parent.log.write(e); exitStatus=false; }        catch (Exception e) { parent.log.write(e.toString()); exitStatus=false; }        return(exitStatus);                }               public boolean queryCarrier() {        Statement stmt = null;        ResultSet rs = null;        boolean exitStatus=true;        String choiceCode=(String)parent.labBillingChoice.getText().trim();        if (choiceCode.equals("DB") || choiceCode.equals("DOC") ||            choiceCode.equals("PRC") || choiceCode.equals("PPN") ||            choiceCode.equals("PPD"))        {            parent.checkCarrier=false;            parent.billingAdd.payer.carrier_id=(-1);            parent.billingAdd.payer.name=null;            parent.billingAdd.payer.payer_id=null;            parent.billingAdd.payer.id_number=0;            return (exitStatus);        }        try  {            String query=null;            String pcsID=parent.labPCSID.getText();            String payerID=parent.labPayerID.getText();            String othName=parent.labOtherInsurance.getText();                query=                    "SELECT c.carrier_id,c.name,c.payer_id,c.id_number, \n"+                    "   b.billing_choice,cc.comment_text, \n"+                    "   SUBSTR(c.address1,1,16)||', '||SUBSTR(c.city,1,16)||', '||c.state, \n"+                    "   c.address1 \n"+                    "FROM pcs.carriers c, pcs.billing_choices b, pcs.carrier_comments cc \n"+                    "WHERE c.billing_choice=b.billing_choice and \n"+                    "   c.carrier_id=cc.carrier_id(+) and \n"+                    "   c.active_status='A' and \n"+                    "   b.choice_code='"+choiceCode+"'";                if (!Utils.isNull(pcsID)) query=query+"\n   and c.id_number="+pcsID;                if (!Utils.isNull(payerID)) query=query+"\n   and c.payer_id='"+payerID+"'";                if (!Utils.isNull(othName)) query=query+"\n   and c.name LIKE '"+othName+"%'";                query=query+" ORDER BY c.name \n";                                    System.out.println(query);                stmt = DbConnection.process().createStatement();                rs = stmt.executeQuery(query);                parent.carrierVect = new Vector();                String buf1[] = null;                String buf2[] = null;                String caddr = null;                while (rs.next()) {                    CarrierRec cRec = new CarrierRec();                    parent.billingAdd.payer.carrier_id=                        cRec.carrier_id=rs.getInt(1);                    parent.billingAdd.payer.name=                        cRec.name=rs.getString(2);                    parent.billingAdd.payer.payer_id=                        cRec.payer_id=rs.getString(3);                    parent.billingAdd.payer.id_number=                        cRec.id_number=rs.getInt(4);                    cRec.billing_choice=rs.getInt(5);                    parent.billingAdd.payer.comment_text=                        cRec.comment_text=rs.getString(6);                    caddr=rs.getString(8);                    if (!Utils.isNull(caddr))                        parent.billingAdd.payer.caddr=                            cRec.caddr=rs.getString(7);                    parent.carrierVect.addElement(cRec);                }                 if (parent.carrierVect.size()>0) {                     parent.checkCarrier=false;                    if (parent.carrierVect.size()>1                     && parent.labBillingChoice.getText().equals("OI")) {                        buf1 = new String[parent.carrierVect.size()];                        buf2 = new String[parent.carrierVect.size()];                        for (int i=0; i<parent.carrierVect.size(); i++) {                            CarrierRec cRec = new CarrierRec();                            cRec = (CarrierRec)parent.carrierVect.elementAt(i);                            if (!Utils.isNull(cRec.payer_id)) {                                buf1[i]=cRec.name;                                if (!Utils.isNull(cRec.caddr)) buf1[i]+=", "+cRec.caddr;                                buf1[i]+=" [Payer #"+cRec.payer_id+"]";                            }                            else {                                buf1[i]=cRec.name;                                if (!Utils.isNull(cRec.caddr)) buf1[i]+=", "+cRec.caddr;                                buf1[i]+=" [ID #"+cRec.id_number+"]";                            }                            buf2[i]=Integer.toString(cRec.id_number);                        }                        parent.labOtherInsurance.setText(null);                        parent.labPayerID.setText(null);                        parent.labPCSID.setText(null);                        parent.labPCSID.requestFocus();                        parent.checkCarrier=true;                        (new PickList("Select ONE payer from list",                            100,100,540,290,parent.carrierVect.size(),                            buf1,buf2,parent.labPCSID)).setVisible(true);                    }                }                else { exitStatus=false; }        }        catch (SQLException e) { parent.log.write(e); exitStatus=false; }        catch (Exception e) { parent.log.write(e.toString()); exitStatus=false; }        try { rs.close(); stmt.close(); }        catch (SQLException e) { parent.log.write(e); exitStatus=false; }        catch (Exception e) { parent.log.write(e.toString()); exitStatus=false; }        return(exitStatus);                }    public boolean getCarriersForBillingCode(Vector cData, String bChoice) {        boolean exitStatus=true;        try  {            cData.removeAllElements();            String query =                "SELECT c.carrier_id,c.name,c.state,c.id_number,c.payer_id,cc.comment_text \n"+                "FROM pcs.carriers c, pcs.billing_choices bc, pcs.carrier_comments cc \n"+                "WHERE c.billing_choice=bc.billing_choice \n"+                "AND c.carrier_id=cc.carrier_id(+) \n"+                "AND bc.choice_code='"+bChoice+"' \n"+                "ORDER BY c.name \n";            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(query);            while (rs.next()) {                CarrierRec cRec = new CarrierRec();                cRec.carrier_id=rs.getInt(1);                cRec.name=rs.getString(2);                cRec.state=rs.getString(3);                cRec.id_number=rs.getInt(4);                cRec.payer_id=rs.getString(5);                cRec.comment_text=rs.getString(6);                cData.addElement(cRec);            }               if (cData.size()>0) { }            else { exitStatus=false; }            try { rs.close(); stmt.close(); }            catch (SQLException e) { parent.log.write(e); exitStatus=false; }            catch (Exception e) { parent.log.write(e.toString()); exitStatus=false; }        }        catch (SQLException e) { parent.log.write(e); exitStatus=false; }        catch (Exception e) { parent.log.write(e.toString()); exitStatus=false; }        return(exitStatus);                }        public boolean queryZip(String zip5) {        boolean exitStatus=true;        try  {            String query =                 "SELECT city,state \n"+                "FROM pcs.zipcodes \n"+                "WHERE zip='"+zip5+"' \n";            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(query);            int rcnt=0;            while (rs.next()) {                parent.labCity.setText(rs.getString(1));                parent.labState.setText(rs.getString(2));                rcnt++;            }                   if (rcnt==0) {                 Utils.createErrMsg("City/State not found for "+zip5);                exitStatus=false;             }            try { rs.close(); stmt.close(); }            catch (SQLException e) { parent.log.write(e); exitStatus=false; }            catch (Exception e) { parent.log.write(e.toString()); exitStatus=false; }        }        catch (SQLException e) { parent.log.write(e); exitStatus=false; }        catch (Exception e) { parent.log.write(e.toString()); exitStatus=false; }        return(exitStatus);                }        public boolean updatePatient() {        boolean exitStatus=true;                    try  {            String query =                 "UPDATE pcs.patients SET \n"+                "   address1 = ?, \n"+                "   city = ?, \n"+                "   state = ?, \n"+                "   zip = ?, \n"+                "   phone = ?, \n"+                "   ssn = ?, \n"+                "   dob = TO_DATE(?,'MMDDYYYY'), \n"+                "   lname = ?, \n"+                "   fname = ?, \n"+                "   mi = ? \n"+                "WHERE patient = ? \n";            PreparedStatement pstmt = DbConnection.process().prepareStatement(query);            pstmt.setString(1,parent.labRec.pat.address1);            pstmt.setString(2,parent.labRec.pat.city);            pstmt.setString(3,parent.labRec.pat.state);            pstmt.setString(4,parent.labRec.pat.zip);            pstmt.setString(5,parent.labRec.pat.phone);            pstmt.setString(6,parent.labRec.pat.ssn);            pstmt.setString(7,parent.labRec.pat.dob);            pstmt.setString(8,parent.labRec.pat.lname);            pstmt.setString(9,parent.labRec.pat.fname);            pstmt.setString(10,parent.labRec.pat.mi);            pstmt.setInt(11,parent.labRec.patient);            pstmt.executeUpdate();            pstmt.close();            try { pstmt.close(); }            catch (SQLException e) { parent.log.write(e); exitStatus=false; }            catch (Exception e) { parent.log.write(e.toString()); exitStatus=false; }            /* THIS TAKEN OUT BECAUSE IT MADE PL/SQL REBILL_ADD NOT WORK RIGHT            query =                "UPDATE pcs.lab_requisitions SET \n"+                "   practice = ?, \n"+                "   doctor = ?, \n"+                "   doctor_text = ?, \n"+                "   date_collected = TO_DATE(?,'MMDDYYYY') \n"+                "WHERE lab_number = ? \n";            pstmt = dbConnection.process().prepareStatement(query);            pstmt.setInt(1,parent.labRec.prac.practice);            pstmt.setInt(2,parent.labRec.doctor);            pstmt.setString(3,parent.labRec.doctor_text);            pstmt.setString(4,parent.labRec.date_collected);            pstmt.setInt(5,parent.labRec.lab_number);            pstmt.executeUpdate();            try { pstmt.close(); }            catch (SQLException e) { parent.log.write(e); exitStatus=false; }            catch (Exception e) { parent.log.write(e.toString()); exitStatus=false; }            if (parent.labRec.billing.billing_choice==parent.DOC) {                query =                    "UPDATE billing_details SET \n"+                    "   carrier_id = -1, \n"+                    "   id_number = ?, \n"+                    "   change_date = SysDate, \n"+                    "   change_user = UID \n"+                    "WHERE lab_number = ? AND rebilling = ? \n";                pstmt = dbConnection.process().prepareStatement(query);                pstmt.setInt(1,parent.labRec.prac.practice);                pstmt.setInt(2,parent.labRec.lab_number);                pstmt.setInt(3,parent.labRec.billing.rebilling);                pstmt.executeUpdate();            }            */            if (!Utils.isNull(parent.dbComments.getText()))                addDBComments();            try { pstmt.close(); }            catch (SQLException e) { parent.log.write(e); exitStatus=false; }            catch (Exception e) { parent.log.write(e.toString()); exitStatus=false; }        }        catch (SQLException e) { parent.log.write(e); exitStatus=false; }        catch (Exception e) { parent.log.write(e.toString()); exitStatus=false; }        return(exitStatus);                }        public boolean claimPaymentAdd()  {        boolean exitStatus = true;        try  {            CallableStatement cstmt;	        cstmt=DbConnection.process().prepareCall(	            "{call pcs.claim_payment_add(?,?,?,?,?,?,?,?,?,?,?,?)}");            cstmt.setInt(1,parent.labRec.lab_number);            cstmt.setInt(2,parent.billingAdd.claim_id);            cstmt.setString(3,parent.billingAdd.alt_id);            cstmt.setString(4,parent.billingAdd.claim_status);            cstmt.setString(5,parent.billingAdd.claim_comment);            cstmt.setDouble(6,parent.billingAdd.dAmountPaid());            cstmt.setInt(7,parent.billingAdd.carrier_id);            cstmt.setString(8,parent.billingAdd.LC_datestamp);            cstmt.setInt(9,parent.billingAdd.billing_choice);            cstmt.setDouble(10,parent.billingAdd.dAllowance()-parent.billingAdd.dAmountPaid());            cstmt.setDouble(11,parent.billingAdd.dAllowance());            cstmt.setDouble(12,parent.labRec.billing.dBillAmount());            cstmt.executeUpdate();            /*            if (!Utils.isNull(parent.labRec.lab_comments))                updateComments(parent.hasComments);            */            try { cstmt.close(); }            catch (SQLException e) {                 parent.log.write(e);                exitStatus=false;             }            catch (Exception e) {                parent.log.write(e.toString());                exitStatus=false;            }        }        catch (SQLException e) {             parent.log.write(e);            exitStatus=false;         }        catch (Exception e) {            parent.log.write(e.toString());            exitStatus=false;        }        if (!exitStatus) {            String msg="Claim Payment Add Operation failed on Lab #"+                parent.labRec.lab_number;            parent.createErrMsg(msg);        }        return(exitStatus);                }            public boolean resubmitClaim()  {        boolean exitStatus=true;        try  {            CallableStatement cstmt;	        cstmt=DbConnection.process().prepareCall(	            "{call pcs.resubmit_claim(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");            cstmt.setInt(1,parent.labRec.lab_number);            cstmt.setInt(2,parent.billingAdd.claim_id);            cstmt.setInt(3,parent.labRec.doctor);            cstmt.setString(4,parent.billingAdd.diagnosis_code);            cstmt.setString(5,parent.billingAdd.diagnosis_code2);            cstmt.setString(6,parent.billingAdd.diagnosis_code3);            cstmt.setString(7,parent.billingAdd.diagnosis_code4);            cstmt.setInt(8,parent.billingAdd.carrier_id);            cstmt.setString(9,parent.billingAdd.id_number);            cstmt.setString(10,parent.billingAdd.group_number);            cstmt.setString(11,parent.billingAdd.subscriber);            cstmt.setString(12,parent.billingAdd.sub_lname);            cstmt.setString(13,parent.billingAdd.sub_fname);            cstmt.setString(14,parent.billingAdd.sign_date);            cstmt.setString(15,parent.billingAdd.medicare_code);            cstmt.setString(16,parent.billingAdd.claim_status);            cstmt.executeUpdate();            try { cstmt.close(); }            catch (SQLException e) { parent.log.write(e); exitStatus=false; }            catch (Exception e) { parent.log.write(e.toString()); exitStatus=false; }        }        catch (SQLException e) { parent.log.write(e); exitStatus=false; }        catch (Exception e) { parent.log.write(e.toString()); exitStatus=false; }        return(exitStatus);                }            public void getReworkQueue()      {        try  {            parent.reworkQueue = new Vector();            int rowsReturned=0;                    String query =                 "SELECT  C.claim_id,C.lab_number,C.claim_status, \n"+                "   S.description,C.alt_id,C.claim_comment "+                "FROM pcs.lab_claims C, pcs.claim_statuses S \n"+                "WHERE C.rework_queue=1 and C.claim_status=S.claim_status \n"+                "ORDER BY C.claim_id";            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(query);            rs=stmt.executeQuery(query);            while (rs.next())  {                ClaimRec claimQ = new ClaimRec();                claimQ.claim_id=rs.getInt(1);                claimQ.lab_number=rs.getInt(2);                claimQ.claim_status=rs.getString(3);                claimQ.description=rs.getString(4);                claimQ.alt_id=rs.getString(5);                claimQ.claim_comment=rs.getString(6);                parent.reworkQueue.addElement(claimQ);            }                            try { rs.close(); stmt.close(); }            catch (SQLException e) { parent.log.write(e); }            catch (Exception e) { parent.log.write(e.toString()); }        }        catch (SQLException e) { parent.log.write(e); }        catch (Exception e) { parent.log.write(e.toString()); }    }        public boolean createMedicareLetter()  {        boolean exitStatus=true;        try  {            CallableStatement cstmt;	        cstmt=DbConnection.process().prepareCall(	            "{call pcs.build_medicare_letter(?,?,?,?)}");            cstmt.setInt(1,parent.labRec.lab_number);            cstmt.setInt(2,-1);            cstmt.setString(3,"N");            cstmt.setInt(4,2);            cstmt.executeUpdate();            try { cstmt.close(); }            catch (SQLException e) { parent.log.write(e); exitStatus=false; }            catch (Exception e) { parent.log.write(e.toString()); exitStatus=false; }        }        catch (SQLException e) { parent.log.write(e); exitStatus=false; }        catch (Exception e) { parent.log.write(e.toString()); exitStatus=false; }        return(exitStatus);                }                public boolean query(String labNumber)    {        boolean exitStatus = true;        try { parent.labRec.lab_number=Integer.parseInt(labNumber); }        catch (Exception e) { parent.labRec.lab_number=0; exitStatus=false; }        if (exitStatus) exitStatus=queryPatient();        if (exitStatus) exitStatus=queryBilling();        if (exitStatus) exitStatus=queryChargesAndPayments();        return (exitStatus);    }        public boolean queryPatient()    {        boolean exitStatus = true;        String SQL = null;        PreparedStatement pstmt = null;        ResultSet rs = null;                try {                        SQL =                "SELECT \n"+                "   LR.req_number, \n"+                             // 01                "   LR.patient, \n"+                                // 02                "   LR.practice, \n"+                               // 03                "   LR.doctor, \n"+                                 // 04                "   LR.patient_id, \n"+                             // 05                "   LR.slide_qty, \n"+                              // 06                "   LR.preparation, \n"+                            // 07                "   TO_CHAR(LR.date_collected,'MMDDYYYY'), \n"+     // 08                "   LR.lmp, \n"+                                    // 09                "   LR.age, \n"+                                    // 10                "   LR.rush, \n"+                                   // 11                "   LR.billing_choice, \n"+                         // 12                "   LR.finished, \n"+                               // 13                "   TO_CHAR(LR.datestamp,'MM/DD/YYYY HH24:Mi'),\n"+ // 14                "   LR.sys_user, \n"+                               // 15                "   LR.previous_lab, \n"+                           // 16                "   TO_CHAR(LR.receive_date,'MMDDYYYY'), \n"+       // 17                "   LR.doctor_text, \n"+                            // 18                "   PAT.lname, \n"+                                 // 19                "   PAT.fname, \n"+                                 // 20                "   PAT.mi, \n"+                                    // 21                "   PAT.ssn, \n"+                                   // 22                "   TO_CHAR(PAT.dob,'MMDDYYYY'), \n"+               // 23                "   PAT.address1, \n"+                              // 24                "   PAT.city, \n"+                                  // 25                "   PAT.state, \n"+                                 // 26                "   PAT.zip, \n"+                                   // 27                "   PAT.phone, \n"+                                 // 28                "   PAT.last_lab, \n"+                              // 29                "   NULL, \n"+                                      // 30                "   LRCN.client_notes, \n"+                         // 31                "   PRAC.name, \n"+                                 // 32                "   PRAC.stop_code, \n"+                            // 33                "   PRAC.client_notes, \n"+                         // 34                "   PRAC.active_status, \n"+                        // 35                "   DOC.lname, \n"+                                 // 36                "   DOC.fname, \n"+                                 // 37                "   DOC.mi, \n"+                                    // 38                "   DOC.upin, \n"+                                  // 39                "   DOC.license, \n"+                               // 40                "   DOC.title, \n"+                                 // 41                "   DOC.alt_license, \n"+                           // 42                "   DOC.alt_state, \n"+                             // 43                "   DOC.bs_provider, \n"+                           // 44                "   LR.sys_user, \n"+                               // 45                "   PRAC.state, \n"+                                // 46                "   PRC.comment_text, \n"+                          // 47                "   PRAC.phone, \n"+                "   RES.pap_class, \n"+                "   PRAC.block_patient, \n"+                "   PRAC.parent_account, \n"+                "   PRAC.practice_type, \n"+                "   PRAC.program \n"+                "FROM \n"+                "   pcs.lab_requisitions LR, \n"+                "   pcs.lab_results RES, \n"+                "   pcs.patients PAT, \n"+                "   pcs.practices PRAC, \n"+                "   pcs.practice_comments PRC, \n"+                "   pcs.doctors DOC, \n"+                "   pcs.lab_req_client_notes LRCN \n"+                "WHERE \n"+                "   LR.lab_number = RES.lab_number and \n"+                "   LR.practice = PRAC.practice and \n"+                "   LR.doctor = DOC.doctor and \n"+                "   LR.patient = PAT.patient and \n"+                "   PRAC.practice = prc.practice(+) and \n"+                "   LR.lab_number = LRCN.lab_number(+) and \n"+                "   LR.lab_number = ? \n";            pstmt=DbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,parent.labRec.lab_number);            rs=pstmt.executeQuery();            while (rs.next()) {                parent.labRec.req_number = rs.getInt(1);                parent.labRec.pat.patient =                parent.labRec.patient = rs.getInt(2);                parent.labRec.prac.practice =                parent.labRec.practice = rs.getInt(3);                parent.labRec.doc.doctor =                parent.labRec.doctor = rs.getInt(4);                parent.labRec.patient_id = rs.getString(5);                parent.labRec.slide_qty = rs.getInt(6);                parent.labRec.preparation = rs.getInt(7);                parent.labRec.date_collected = rs.getString(8);                parent.labRec.lmp = rs.getString(9);                parent.labRec.age = rs.getInt(10);                parent.labRec.rush = rs.getString(11);                parent.labRec.billing_choice = rs.getInt(12);                parent.globalFinished =                parent.labRec.finished = rs.getInt(13);                parent.labRec.LR_datestamp = rs.getString(14);                parent.labRec.LR_sys_user = rs.getInt(15);                parent.labRec.previous_lab = rs.getInt(16);                parent.labRec.receive_date = rs.getString(17);                parent.labRec.doctor_text = rs.getString(18);                parent.labRec.pat.lname = rs.getString(19);                parent.labRec.pat.fname = rs.getString(20);                parent.labRec.pat.mi = rs.getString(21);                parent.labRec.pat.ssn = rs.getString(22);                parent.labRec.pat.dob = rs.getString(23);                parent.labRec.pat.address1 = rs.getString(24);                parent.labRec.pat.city = rs.getString(25);                parent.labRec.pat.state = rs.getString(26);                parent.labRec.pat.zip = rs.getString(27);                parent.labRec.pat.phone = rs.getString(28);                parent.labRec.pat.last_lab = rs.getInt(29);                parent.labRec.lab_comments = rs.getString(30);                //if (!rs.wasNull()) parent.hasComments=true;                parent.labRec.client_note_text = rs.getString(31);                parent.labRec.prac.name = rs.getString(32);                parent.labRec.prac.stop_code = rs.getString(33);                parent.labRec.prac.client_notes = rs.getString(34);                parent.labRec.prac.active_status = rs.getString(35);                parent.labRec.doc.lname = rs.getString(36);                parent.labRec.doc.fname = rs.getString(37);                parent.labRec.doc.mi = rs.getString(38);                parent.labRec.doc.upin = rs.getString(39);                parent.labRec.doc.license = rs.getString(40);                parent.labRec.doc.title = rs.getString(41);                parent.labRec.doc.alt_license = rs.getString(42);                parent.labRec.doc.alt_state = rs.getString(43);                parent.labRec.doc.bs_provider = rs.getString(44);                parent.labRec.create_user = parent.dbLogin.getUserName(rs.getInt(45));                parent.labRec.doc.state = rs.getString(46);                parent.labRec.prac.comment_text = rs.getString(47);                parent.labRec.prac.phone = rs.getString(48);                parent.labRec.pap_class = rs.getInt(49);                parent.labRec.prac.block_patient = rs.getString(50);                parent.labRec.parent_account=                parent.labRec.prac.parent_account=rs.getInt(51);                parent.labRec.prac.practice_type=rs.getString(52);                parent.labRec.prac.program=rs.getString(53);            }            if (parent.labRec.prac.client_notes.equals("Y"))                parent.labRec.fillClientNotes=true;            try { rs.close(); pstmt.close(); }            catch (SQLException e) {                 parent.log.write(e);                parent.log.write(SQL);                exitStatus=false;            }            catch (Exception e) {                 parent.log.write(e.toString());                 parent.log.write(SQL);                exitStatus=false;            }        }        catch (SQLException e) {             parent.log.write(e);            parent.log.write(SQL);            exitStatus=false;        }        catch (Exception e) {             parent.log.write(e.toString());            parent.log.write(SQL);            exitStatus=false;        }                if (parent.labRec.finished==(-1))            Utils.createErrMsg("EXPIRED SPECIMEN");        else if (parent.labRec.finished==(-2))            Utils.createErrMsg("INCOMPLETE DATA - LAB NUMBER MAY HAVE BEEN DROPPED");                if (exitStatus) queryDoctorInfo(parent.labRec.practice);        return (exitStatus);    }        private boolean queryBilling()    {        boolean exitStatus = true;        String SQL = null;        String SQL2 = null;        PreparedStatement pstmt = null;        ResultSet rs = null;        int lab_number = parent.labRec.lab_number;        try {                        SQL =                "SELECT \n"+                "   LB.billing_choice, \n"+                "   LB.rebilling, \n"+                "   TO_CHAR(NVL(LB.bill_amount,0),'990.99'), \n"+                "   TO_CHAR(LB.date_posted,'MMDDYYYY'), \n"+                "   TO_CHAR(LB.date_paid,'MMDDYYYY'), \n"+                "   TO_CHAR(NVL(LB.balance,0),'990.99'), \n"+                "   TO_CHAR(NVL(LB.allowance,0),'990.99'), \n"+                "   TO_CHAR(NVL(LB.allowance,0)-( \n"+                "       LB.bill_amount-LB.balance),'990.99') \n"+                "FROM \n"+                "   pcs.lab_billings LB \n"+                "WHERE \n"+                "   LB.lab_number = ? \n";            pstmt=DbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,lab_number);            rs=pstmt.executeQuery();            parent.labRec.billing.chargesComputed = false;            while (rs.next()) {                parent.labRec.billing.chargesComputed = true;                parent.labRec.billing.lab_number = lab_number;                parent.labRec.billing.billing_choice = rs.getInt(1);                parent.labRec.billing.rebilling = rs.getInt(2);                parent.labRec.billing.bill_amount = rs.getString(3);                parent.labRec.billing.date_posted = rs.getString(4);                parent.labRec.billing.date_paid = rs.getString(5);                parent.labRec.billing.balance = rs.getString(6);                parent.labRec.billing.allowance = rs.getString(7);                parent.labRec.billing.amount_due = rs.getString(8);            }            rs.close(); pstmt.close();            SQL =                "SELECT \n"+                "   RPAD(SUBSTR(C.name,1,24),26), \n"+                "   RPAD(CH.claim_status,4), \n"+                "   TO_CHAR(CH.receive_date,'MM/DD/YYYY'), \n"+                "   TO_CHAR(CH.datestamp,'MM/DD/YYYY HH24:Mi'), \n"+                "   CH.sys_user,BD.carrier_id \n"+                "FROM \n"+                "   pcs.billing_details BD, \n"+                "   pcs.lab_claims_history CH, \n"+                "   pcs.carriers C \n"+                "WHERE \n"+                "   BD.claim_id = CH.claim_id and \n"+                "   BD.carrier_id = C.carrier_id and \n"+                "   BD.lab_number = ? \n"+                "ORDER BY CH.datestamp \n";            pstmt=DbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,lab_number);            rs=pstmt.executeQuery();            parent.labRec.claimHistoryVect = new Vector();            int last_carrier_id = 0;            String blank = "                          ";            while (rs.next()) {                int carrier_id = rs.getInt(6);                String n = rs.getString(1);                if (carrier_id==last_carrier_id) n=blank;                String s = n + rs.getString(2) +                    rs.getString(3) + "  " + rs.getString(4) + "  "+                    parent.dbLogin.getUserName(rs.getInt(5));                parent.labRec.claimHistoryVect.addElement(s);                                    last_carrier_id=carrier_id;            }            rs.close(); pstmt.close();            SQL =                "SELECT TO_CHAR(datestamp,'MMDDYYYY'),billing_route \n"+               "FROM pcs.billing_queue \n"+               "WHERE lab_number = ? \n";            pstmt = DbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,lab_number);            rs = pstmt.executeQuery();            while (rs.next()) {                 parent.labRec.billing.BQ_datestamp = rs.getString(1);                 parent.labRec.billing.billing_route = rs.getString(2);                parent.inBillingQueue=true;            }            rs.close(); pstmt.close();            SQL =                "SELECT statement_id||practice||'-'||billing_cycle \n"+                "FROM pcs.practice_statement_labs A, pcs.billing_queue B \n"+                "WHERE A.lab_number=B.lab_number \n"+                "AND B.lab_number = ? \n"+                "AND A.practice = ? \n";            pstmt = DbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,lab_number);            pstmt.setInt(2,parent.labRec.practice);            rs = pstmt.executeQuery();            while (rs.next()) { parent.labRec.invoice=rs.getString(1); }            rs.close(); pstmt.close();            SQL =                "SELECT letter_type, in_queue, \n"+               "    TO_CHAR(date_sent,'MMDDYYYY'),origin \n"+               "FROM pcs.fax_letters \n"+               "WHERE lab_number = ? \n";            pstmt = DbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,lab_number);            rs = pstmt.executeQuery();            parent.labRec.billing.in_queue=(-1);            while (rs.next()) {                 parent.labRec.billing.letter_type = rs.getString(1);                 parent.labRec.billing.in_queue = rs.getInt(2);                parent.labRec.billing.date_sent = rs.getString(3);                parent.labRec.billing.origin = rs.getInt(4);                parent.hasLetter=true;            }            rs.close(); pstmt.close();            SQL =                 "SELECT \n"+                "   BD.carrier_id, \n"+                         // 01                "   BD.id_number, \n"+                          // 02                "   BD.group_number, \n"+                       // 03                "   BD.subscriber, \n"+                         // 04                "   BD.sub_lname, \n"+                          // 05                "   BD.sub_fname, \n"+                          // 06                "   TO_CHAR(BD.sign_date,'MMDDYYYY'), \n"+      // 07                "   BD.medicare_code, \n"+                      // 08                "   BD.rebilling, \n"+                          // 09                "   BD.billing_choice, \n"+                     // 10                "   BD.rebill_code, \n"+                        // 11                "   TO_CHAR(BD.datestamp,'MMDDYYYY'), \n"+      // 12                "   BD.sys_user, \n"+                           // 13                "   BD.billing_level, \n"+                      // 14                "   LC.claim_id, \n"+                           // 15                "   TO_CHAR(BD.date_sent,'MMDDYYYY'), \n"+      // 16                "   BD.change_user, \n"+                        // 17                "   TO_CHAR( \n"+                "       BD.change_date, \n"+                "       'MM/DD/YYYY HH24:Mi'),\n"+              // 18                "   C.name, \n"+                                // 19                "   C.e_billing, \n"+                           // 20                "   C.id_number, \n"+                           // 21                "   C.tpp, \n"+                                 // 22                "   C.payer_id, \n"+                            // 23                "   LC.batch_number, \n"+                       // 24                "   LC.claim_status, \n"+                       // 25                "   LC.alt_id, \n"+                             // 26                "   NVL(LC.rework_queue,-1), \n"+               // 27                "   LC.claim_comment, \n"+                      // 28                "   TO_CHAR(NVL( \n"+                "       LC.amount_paid,0),'990.99'), \n"+       // 29                "   TO_CHAR(NVL( \n"+                "       LC.allowance,0),'990.99'), \n"+         // 30                "   TO_CHAR(LC.letter_date,'MMDDYYYY'), \n"+    // 31                "   TO_CHAR(LC.datestamp,'MMDDYYYY'), \n"+      // 32                "   RPAD(BC.choice_code,3), \n"+                // 33                "   C.state, \n"+                               // 34                "   TO_CHAR(LC.change_date,'MMDDYYYY') \n"+     // 35                "FROM \n"+                "   pcs.billing_details BD, \n"+                "   pcs.carriers C, \n"+                "   pcs.lab_claims LC, \n"+                "   pcs.billing_choices BC \n"+                "WHERE \n"+                "   BD.billing_choice = BC.billing_choice and \n"+                "   BD.carrier_id = C.carrier_id(+) and \n"+                "   BD.claim_id = LC.claim_id(+) and \n"+                "   BD.lab_number = ? \n"+                "ORDER BY BD.rebilling \n";            pstmt=DbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,lab_number);            rs=pstmt.executeQuery();            while (rs.next()) {                BillingDetails bd = new BillingDetails();                bd.lab_number = lab_number;                bd.payer.carrier_id =                bd.carrier_id = rs.getInt(1);                bd.id_number = rs.getString(2);                bd.group_number = rs.getString(3);                bd.subscriber = rs.getString(4);                bd.sub_lname = rs.getString(5);                bd.sub_fname = rs.getString(6);                bd.sign_date = rs.getString(7);                bd.medicare_code = rs.getString(8);                bd.rebilling = rs.getInt(9);                bd.billing_choice = rs.getInt(10);                bd.rebill_code = rs.getString(11);                bd.BD_datestamp = rs.getString(12);                bd.BD_sys_user = parent.dbLogin.getUserName(rs.getInt(13));                bd.billing_level = rs.getString(14);                bd.claim_id = rs.getInt(15);                bd.date_sent = rs.getString(16);                bd.change_user = parent.dbLogin.getUserName(rs.getInt(17));                bd.change_date = rs.getString(18);                bd.payer.name = rs.getString(19);                bd.payer.e_billing = rs.getString(20);                bd.payer.id_number = rs.getInt(21);                bd.payer.tpp = rs.getString(22);                bd.payer.payer_id = rs.getString(23);                bd.batch_number = rs.getInt(24);                bd.claim_status = rs.getString(25);                bd.alt_id = rs.getString(26);                bd.rework_queue = rs.getInt(27);                bd.claim_comment = rs.getString(28);                bd.amount_paid = rs.getString(29);                bd.allowance = rs.getString(30);                bd.letter_date = rs.getString(31);                bd.LC_datestamp = rs.getString(32);                bd.choice_code = rs.getString(33);                bd.payer.state = rs.getString(34);                bd.LC_change_date = rs.getString(35);                if (bd.rework_queue==1) parent.inRework=true;                SQL2 =                    "SELECT d_seq,diagnosis_code \n"+                    "FROM pcs.lab_req_diagnosis \n"+                    "WHERE lab_number = ? and rebilling = ? \n"+                    "ORDER BY d_seq \n";                PreparedStatement pstmt2 = DbConnection.process().prepareStatement(SQL2);                pstmt2.setInt(1,bd.lab_number);                pstmt2.setInt(2,bd.rebilling);                ResultSet rs2 = pstmt2.executeQuery();                while (rs2.next()) {                    switch (rs2.getInt(1)) {                        case 1:                            bd.diagnosis_code=rs2.getString(2);                            break;                        case 2:                            bd.diagnosis_code2=rs2.getString(2);                            break;                        case 3:                            bd.diagnosis_code3=rs2.getString(2);                            break;                        case 4:                            bd.diagnosis_code4=rs2.getString(2);                            break;                    }                }                rs2.close(); pstmt2.close();                if (bd.choice_code.trim().equals("DB")) {                    SQL2 =                         "SELECT \n"+                        "   TO_CHAR(PA.create_date,'MMDDYYYY'), \n"+                            "   TO_CHAR(PA.total_balance,'990.99'), \n"+                            "   NVL(PA.past_due,-3), \n"+                                            "   TO_CHAR(PA.total_charges,'990.99'), \n"+                        "   TO_CHAR(PA.due_date_start,'MMDDYYYY'), \n"+                        "   PS.billing_type, \n"+                        "   TO_CHAR(PS.datestamp,'MMDDYYYY'), \n"+                        "   PS.printed, \n"+                        "   PS.rebilling, \n"+                        "   PS.rebill_code, \n"+                        "   NVL(BQ.rebilling,-4), \n"+                        "   PS.comment_text \n"+                        "FROM \n"+                        "   pcs.patient_accounts PA, \n"+                        "   pcs.patient_statements PS, \n"+                        "   pcs.billing_queue BQ \n"+                        "WHERE \n"+                        "   PS.lab_number=PA.lab_number(+) and \n"+                        "   PS.lab_number=BQ.lab_number(+) and \n"+                        "   PS.lab_number = ? and PS.rebilling = ? \n";                    pstmt2 = DbConnection.process().prepareStatement(SQL2);                    pstmt2.setInt(1,bd.lab_number);                    pstmt2.setInt(2,bd.rebilling);                    rs2 = pstmt2.executeQuery();                    bd.patAcct.past_due=bd.patAcct.ACCOUNT_NOT_ACTIVATED;                    while (rs2.next()) {                        bd.patAcct.PA_create_date = rs2.getString(1);                        bd.patAcct.total_balance = rs2.getString(2);                        bd.patAcct.past_due = rs2.getInt(3);                        bd.patAcct.total_charges = rs2.getString(4);                        bd.patAcct.due_date_start = rs2.getString(5);                        bd.patAcct.billing_type = rs2.getString(6);                        bd.patAcct.datestamp = rs2.getString(7);                        bd.patAcct.printed = rs2.getInt(8);                        bd.patAcct.rebill_code = rs2.getString(10);                        bd.patAcct.rebilling = rs2.getInt(11);                        bd.patAcct.comment_text = rs2.getString(12);                    }                    rs2.close(); pstmt2.close();                    if (parent.labRec.finished>=4)                        bd.patAcct.past_due=bd.patAcct.PAID_IN_FULL;                    else if (Utils.isNull(bd.patAcct.PA_create_date)) {                        if (bd.patAcct.past_due!=bd.patAcct.ACCOUNT_NOT_ACTIVATED)                            bd.patAcct.past_due=bd.patAcct.PAID_IN_FULL;                        }                    else if (parent.labRec.billing.in_queue>=0 || parent.inBillingQueue)                        bd.patAcct.past_due=bd.patAcct.CURRENT;                                            if (Utils.isNull(bd.patAcct.comment_text)) {                        SQL2 =                             "SELECT comment_text FROM pcs.db_comments \n"+                            "WHERE lab_number = ? \n";                        pstmt2 = DbConnection.process().prepareStatement(SQL2);                        pstmt2.setInt(1,bd.lab_number);                        rs2 = pstmt2.executeQuery();                        while (rs2.next()) {                            bd.patAcct.comment_text = rs2.getString(1);                        }                        rs2.close(); pstmt2.close();                    }                    rs2.close(); pstmt2.close();                                            SQL2 =                         "SELECT \n"+                        "   TO_CHAR(MIN(PH.datestamp),'MMDDYYYY') \n"+                        "FROM \n"+                        "   pcs.patient_statement_history PH, \n"+                        "   pcs.patient_statements PS \n"+                        "WHERE \n"+                        "   PH.statement_id=PS.statement_id and \n"+                        "   SUBSTR(PH.billing_type,3)='30' and \n"+                        "   PS.lab_number = ? \n";                    pstmt2 = DbConnection.process().prepareStatement(SQL2);                    pstmt2.setInt(1,bd.lab_number);                    rs2 = pstmt2.executeQuery();                    while (rs2.next()) {                         bd.patAcct.past_30_datestamp = rs2.getString(1);                    }                    rs2.close(); pstmt2.close();                    SQL2 =                         "SELECT \n"+                        "   TO_CHAR(MIN(PH.datestamp),'MMDDYYYY') \n"+                        "FROM \n"+                        "   pcs.patient_statement_history PH, \n"+                        "   pcs.patient_statements PS \n"+                        "WHERE \n"+                        "   PH.statement_id=PS.statement_id and \n"+                        "   SUBSTR(PH.billing_type,3)='99' and \n"+                        "   PS.lab_number = ? \n";                    pstmt2 = DbConnection.process().prepareStatement(SQL2);                    pstmt2.setInt(1,bd.lab_number);                    rs2 = pstmt2.executeQuery();                    while (rs2.next()) {                         bd.patAcct.fnotice_datestamp = rs2.getString(1);                    }                    rs2.close(); pstmt2.close();                        SQL2 =                         "SELECT \n"+                        "   TO_CHAR(create_date,'MMDDYYYY'), \n"+                        "   sent, \n"+                        "   TO_CHAR(change_date,'MMDDYYYY') \n"+                        "FROM \n"+                        "   pcs.patient_accounts_in_collection \n"+                        "WHERE \n"+                        "   lab_number = ? \n"+                        "ORDER BY \n"+                        "   create_date \n";                    pstmt2 = DbConnection.process().prepareStatement(SQL2);                    pstmt2.setInt(1,bd.lab_number);                    rs2 = pstmt2.executeQuery();                    parent.inCollection=false;                    while (rs2.next()) {                        String created = rs2.getString(1);                        int sent = rs2.getInt(2);                        String changed = rs2.getString(3);                        String s = "    "+Utils.addDateMask(created)+                            " WENT TO COLLECTION";                        bd.patAcct.collectionInfo.addElement(s);                        if (sent>1) {                            s = "    "+Utils.addDateMask(changed)+                                " TAKEN OUT OF COLLECTION";                            bd.patAcct.collectionInfo.addElement(s);                        }                        else parent.inCollection=true;                    }                    rs2.close(); pstmt2.close();                }                try { rs2.close(); pstmt2.close(); }                catch (SQLException e) {                     parent.log.write(e);                    parent.log.write(SQL2);                    exitStatus=false;                }                catch (Exception e) {                     parent.log.write(e.toString());                     parent.log.write(SQL2);                    exitStatus=false;                }                parent.labRec.billing.details.addElement(bd);            }                        try { rs.close(); pstmt.close(); }            catch (SQLException e) {                 parent.log.write(e);                parent.log.write(SQL);                exitStatus=false;            }            catch (Exception e) {                 parent.log.write(e.toString());                 parent.log.write(SQL);                exitStatus=false;            }        }        catch (SQLException e) {             parent.log.write(e);            parent.log.write(SQL);            exitStatus=false;        }        catch (Exception e) {             parent.log.write(e.toString());            parent.log.write(SQL);            exitStatus=false;        }        return (exitStatus);    }        private boolean queryChargesAndPayments()    {        boolean exitStatus = true;        String SQL = null;        PreparedStatement pstmt = null;        ResultSet rs = null;        int lab_number = parent.labRec.lab_number;        double n_amount = -1;        int billing_choice = 0;        try {            SQL =                 "SELECT \n"+                "   a.procedure_code,RPAD(SUBSTR(b.description,1,22),23), \n"+                "   TO_CHAR(a.item_amount,990.99),a.item_amount, \n"+                "   lb.billing_choice \n"+                "FROM \n"+                "   pcs.lab_billing_items a, \n"+                "   pcs.procedure_codes b, \n"+                "   pcs.lab_billings lb \n"+                "WHERE \n"+                "   a.lab_number=lb.lab_number and \n"+                "   a.procedure_code=b.procedure_code and \n"+                "   a.lab_number = ? and \n"+                "   a.rebilling = ? \n"+                "ORDER BY b.p_seq \n";            pstmt = DbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,lab_number);            pstmt.setInt(2,parent.labRec.billing.details.size()-1);            rs = pstmt.executeQuery();            while (rs.next()) {                ChargeDetails c = new ChargeDetails();                c.procedure_code = rs.getString(1);                c.description = rs.getString(2);                c.item_amount = rs.getString(3);                n_amount = rs.getDouble(4);                billing_choice = rs.getInt(5);                if (n_amount==0) {                    if (billing_choice==127) c.item_amount="    PRC";                    else c.item_amount="     LC";                }                parent.labRec.billing.charges.addElement(c);            }            rs.close(); pstmt.close();            double ttlPaid=0;            double ttlAdjust=0;            SQL =                "SELECT \n"+                "   P.billing_choice, \n"+                "   RPAD(P.payment_type,12), \n"+                "   TO_CHAR(P.payment_amount*(-1),'990.99'), \n"+                "   TO_CHAR(P.receive_date,'MMDDYYYY'), \n"+                "   RPAD(B.choice_code,5), \n"+                "   P.payment_id \n"+                "FROM \n"+                "   pcs.payments P, \n"+                "   pcs.billing_choices B \n"+                "WHERE \n"+                "   P.billing_choice=B.billing_choice and \n"+                "   P.lab_number = ? \n"+                "ORDER BY \n"+                "   P.payment_id \n";            pstmt = DbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,lab_number);            rs=pstmt.executeQuery();            while (rs.next()) {                PaymentDetails p = new PaymentDetails();                p.billing_choice = rs.getInt(1);                p.payment_type = rs.getString(2);                p.payment_amount = rs.getString(3);                p.receive_date = rs.getString(4);                p.choice_code = rs.getString(5);                p.payment_id=rs.getInt(6);                parent.labRec.billing.payments.addElement(p);                if (p.payment_type.trim().equals("PLUS ADJUST")) {                    ttlAdjust+=(                        (Double.valueOf(p.payment_amount)).doubleValue())*(-1);                }                else if (p.payment_type.trim().equals("MINUS ADJUST")) {                    ttlAdjust+=(                        (Double.valueOf(p.payment_amount)).doubleValue());                }                else {                    ttlPaid+=(                        Double.valueOf(p.payment_amount)).doubleValue();                }            }            rs.close(); pstmt.close();            SQL = "SELECT TO_CHAR(?,'990.99'),TO_CHAR(?,'990.99') from dual \n";            pstmt = DbConnection.process().prepareStatement(SQL);            pstmt.setDouble(1,ttlPaid);            pstmt.setDouble(2,ttlAdjust);            rs=pstmt.executeQuery();            while (rs.next()) {                 parent.labRec.billing.total_payments=rs.getString(1);                parent.labRec.billing.total_adjustments=rs.getString(2);            }            rs.close(); pstmt.close();        }        catch (SQLException e) {             parent.log.write(e);            parent.log.write(SQL);            exitStatus=false;        }        catch (Exception e) {             parent.log.write(e.toString());            parent.log.write(SQL);            exitStatus=false;        }        return (exitStatus);    }        public String getPracticeName(int practice)    {        String SQL = null;        PreparedStatement pstmt = null;        ResultSet rs = null;        String pName = null;        try {            SQL =                 "SELECT name FROM pcs.practices WHERE practice = ? \n";            pstmt = DbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,practice);            rs = pstmt.executeQuery();            while (rs.next()) { pName=rs.getString(1); }            try { rs.close(); pstmt.close(); }            catch (SQLException e) {                 parent.log.write(e);                parent.log.write(SQL);            }            catch (Exception e) {                 parent.log.write(e.toString());                 parent.log.write(SQL);            }        }        catch (SQLException e) {             parent.log.write(e);            parent.log.write(SQL);        }        catch (Exception e) {             parent.log.write(e.toString());            parent.log.write(SQL);        }        return (pName);    }        void updateComments(boolean isUpdate)    {        try {            String SQL = null;            if (isUpdate)                 SQL =                    "UPDATE pcs.lab_req_comments \n"+                    "SET comment_text = ? \n"+                    "WHERE lab_number = ? \n";            else                SQL =                    "INSERT INTO pcs.lab_req_comments (comment_text,lab_number) \n"+                    "VALUES (?,?) \n";            PreparedStatement pstmt = DbConnection.process().prepareStatement(SQL);            pstmt.setString(1,parent.labRec.lab_comments);            pstmt.setInt(2,parent.labRec.lab_number);            pstmt.executeUpdate();            try { pstmt.close(); }            catch (SQLException e) {                 parent.log.write(e);                parent.log.write("update lab comments");            }            catch (Exception e) {                 parent.log.write(e.toString());                 parent.log.write("update lab comments");            }        }        catch (SQLException e) {             parent.log.write(e);            parent.log.write("update lab comments");        }        catch (Exception e) {             parent.log.write(e.toString());            parent.log.write("update lab comments");        }    }        void addDBComments()    {        try {            String SQL = null;            SQL =                "UPDATE pcs.db_comments \n"+                "SET comment_text = ? \n"+                "WHERE lab_number = ? \n";            PreparedStatement pstmt = DbConnection.process().prepareStatement(SQL);            pstmt.setString(1,parent.dbComments.getText());            pstmt.setInt(2,parent.labRec.lab_number);            int rowsUpdated = pstmt.executeUpdate();            if (rowsUpdated<=1) {                SQL =                    "INSERT INTO pcs.db_comments (comment_text,lab_number) \n"+                    "VALUES (?,?) \n";                pstmt = DbConnection.process().prepareStatement(SQL);                pstmt.setString(1,parent.dbComments.getText());                pstmt.setInt(2,parent.labRec.lab_number);                pstmt.executeUpdate();            }            try { pstmt.close(); }            catch (SQLException e) {                 parent.log.write(e);                parent.log.write("add db comments");            }            catch (Exception e) {                 parent.log.write(e.toString());                 parent.log.write("add db comments");            }        }        catch (SQLException e) {             parent.log.write(e);            parent.log.write("add db comments");        }        catch (Exception e) {             parent.log.write(e.toString());            parent.log.write("add db comments");        }    }        public boolean rebillUpdate()  {        boolean exitStatus=true;        try  {            CallableStatement cstmt;	        cstmt=DbConnection.process().prepareCall(	            "{call pcs.rebill_update(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");            cstmt.setInt(1,parent.labRec.lab_number);            cstmt.setInt(2,parent.labRec.patient);            cstmt.setInt(3,parent.labRec.practice);            cstmt.setInt(4,parent.labRec.doctor);            cstmt.setInt(5,parent.billingAdd.carrier_id);            cstmt.setInt(6,parent.labRec.rebilling);            cstmt.setString(7,parent.billingAdd.choice_code);            cstmt.setString(8,parent.billingAdd.id_number);            cstmt.setString(9,parent.billingAdd.group_number);            cstmt.setString(10,parent.billingAdd.subscriber);            cstmt.setString(11,parent.billingAdd.sub_lname);            cstmt.setString(12,parent.billingAdd.sub_fname);            cstmt.setString(13,parent.billingAdd.sign_date);            cstmt.setString(14,parent.billingAdd.medicare_code);            cstmt.setString(15,parent.billingAdd.rebill_code);            cstmt.setString(16,parent.billingAdd.diagnosis_code);            cstmt.setString(17,parent.billingAdd.diagnosis_code2);            cstmt.setString(18,parent.billingAdd.diagnosis_code3);            cstmt.setString(19,parent.billingAdd.diagnosis_code4);            cstmt.setString(20,parent.billingAdd.billing_level);            cstmt.setString(21,parent.billingAdd.claim_status);            cstmt.executeUpdate();            try { cstmt.close(); }            catch (SQLException e) {                 parent.log.write(e);                parent.log.write("exec pcs.rebill_update");                exitStatus=false;            }            catch (Exception e) {                 parent.log.write(e.toString());                 parent.log.write("exec pcs.rebill_update");                exitStatus=false;            }        }        catch (SQLException e) {             parent.log.write(e);            parent.log.write("exec pcs.rebill_update");            exitStatus=false;        }        catch (Exception e) {             parent.log.write(e.toString());            parent.log.write("exec pcs.rebill_add");            exitStatus=false;        }        return(exitStatus);                }                public boolean buildBlankLetter()      {        CallableStatement cstmt = null;        boolean exitStatus=true;        try  {	        cstmt=DbConnection.process().prepareCall(	            "{call pcs.build_blank_letter(?,?)}");            cstmt.setInt(1,parent.labRec.lab_number);            cstmt.setInt(2,2);            cstmt.executeUpdate();        }        catch( Exception e ) {            parent.log.write("ERROR buildBlankLetter\n"+e);            exitStatus=false;        }        try { cstmt.close(); }        catch (SQLException e) {             parent.log.write("SQL ERROR buildBlankLetter\n"+e);            exitStatus=false;         }                        return(exitStatus);                }                public boolean buildDiagnosisLetter()      {        CallableStatement cstmt = null;        boolean exitStatus=true;        try {            cstmt=DbConnection.process().prepareCall(	            "{call pcs.build_diagnosis_letter(?,?,?)}");            cstmt.setInt(1,parent.labRec.lab_number);            cstmt.setInt(2,-1);            cstmt.setInt(3,2);            cstmt.executeUpdate();        }        catch( Exception e ) {            parent.log.write("ERROR buildDiagLetter\n"+e);            exitStatus=false;        }        try { cstmt.close(); }        catch (SQLException e) {             parent.log.write("SQL ERROR buildDiagLetter\n"+e);            exitStatus=false;         }                        return(exitStatus);                }                public boolean reverseDB(int labNumber)  {        boolean exitStatus=true;        try  {            CallableStatement cstmt;	        cstmt=DbConnection.process().prepareCall("{call pcs.reverse_db(?)}");            cstmt.setInt(1,labNumber);            cstmt.executeUpdate();            try { cstmt.close(); }            catch (SQLException e) {                 parent.log.write(e);                parent.log.write("exec pcs.rebill_add");                exitStatus=false;            }            catch (Exception e) {                 parent.log.write(e.toString());                 parent.log.write("exec pcs.rebill_add");                exitStatus=false;            }        }        catch (SQLException e) {             parent.log.write(e);            parent.log.write("exec pcs.rebill_add");            exitStatus=false;        }        catch (Exception e) {             parent.log.write(e.toString());            parent.log.write("exec pcs.rebill_add");            exitStatus=false;        }        return(exitStatus);                }                public boolean hasLabComments(int labNum)     {        boolean hasComments = false;        try  {            String query =                 "SELECT comment_text \n"+                "FROM pcs.lab_req_comments "+                "WHERE lab_number="+labNum+" \n";            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(query);            while (rs.next()) { hasComments=true; }            try { rs.close(); stmt.close(); }            catch (SQLException e) { parent.log.write(e); }                        }        catch( Exception e ) { parent.log.write(e); }        return(hasComments);                }        public boolean reversePayment(int pmtID)  {        boolean exitStatus=true;        try  {            CallableStatement cstmt;	        cstmt=DbConnection.process().prepareCall(	            "{call pcs.reverse_claim_payment(?)}");            cstmt.setInt(1,pmtID);            cstmt.executeUpdate();            try { cstmt.close(); }            catch (SQLException e) {                 parent.log.write(e);                parent.log.write("exec pcs.reverse_claim_payment");                exitStatus=false;            }            catch (Exception e) {                 parent.log.write(e.toString());                 parent.log.write("exec pcs.reverse_claim_payment");                exitStatus=false;            }        }        catch (SQLException e) {             parent.log.write(e);            parent.log.write("exec pcs.reverse_claim_payment");            exitStatus=false;        }        catch (Exception e) {             parent.log.write(e.toString());            parent.log.write("exec pcs.reverse_claim_payment");            exitStatus=false;        }        return(exitStatus);                }                public boolean resetClaimStatus()  {        boolean exitStatus = true;        try  {            CallableStatement cstmt;	        cstmt=DbConnection.process().prepareCall(	            "{call pcs.reset_claim_status(?)}");            cstmt.setInt(1,parent.labRec.lab_number);            cstmt.executeUpdate();            try { cstmt.close(); }            catch (SQLException e) {                 Utils.createErrMsg(e.toString());                parent.log.write(e);                exitStatus=false;             }            catch (Exception e) {                Utils.createErrMsg(e.toString());                parent.log.write(e.toString());                exitStatus=false;            }        }        catch (SQLException e) {             Utils.createErrMsg(e.toString());            parent.log.write(e);            exitStatus=false;         }        catch (Exception e) {            Utils.createErrMsg(e.toString());            parent.log.write(e.toString());            exitStatus=false;        }        return(exitStatus);                }                }   
