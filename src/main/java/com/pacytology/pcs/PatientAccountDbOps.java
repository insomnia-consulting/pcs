/*    PENNSYLVANIA CYTOLOGY SERVICES    LABORATORY INFORMATION SYSTEM V1.0    Copyright (C) 2001 by John Cardella    All Rights Reserved        File:       PatientAccountDbOps.java    Created By: John Cardella, Software Engineer        Function:   Database operations for patient accounts.        MODIFICATIONS ----------------------------------    Date/Staff      Description:*/import java.lang.*;import java.sql.*;import java.util.Vector;public class PatientAccountDbOps{    public PatientAccountsForm parent;        public PatientAccountDbOps(PatientAccountsForm p)     {         parent=p;     }            public void getPaymentTypes()     {        String SQL = null;        try  {                        SQL =                 "SELECT payment_code,payment_type \n"+                "FROM pcs.payment_types ORDER BY payment_type \n";                            Statement stmt = dbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(SQL);            while (rs.next()) {                parent.payCodeVect.addElement(rs.getString(1));                parent.payTypeVect.addElement(rs.getString(2));            }                               try { rs.close(); stmt.close(); }            catch (SQLException e) { parent.log.write(e+"\n"+SQL); }            catch (Exception e) { parent.log.write(e+"\n"+SQL); }        }        catch (SQLException e) { parent.log.write(e+"\n"+SQL); }        catch (Exception e) { parent.log.write(e+"\n"+SQL); }    }        public boolean query(int patID, int labNum)      {        boolean exitStatus = true;        String SQL = null;        try  {                        SQL =                "SELECT patient FROM pcs.lab_requisitions \n"+                "WHERE lab_number = "+labNum+" \n";            Statement stmt = dbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(SQL);            while (rs.next()) { patID=rs.getInt(1); }            try { stmt.close(); rs.close(); }            catch (Exception e) { }                            SQL =                 "SELECT \n"+                "   p.patient, \n"+                "   p.lname, \n"+                           "   p.fname, \n"+                "   p.address1, \n"+                        "   p.city, \n"+                "   p.state, \n"+                          "   p.zip, \n"+                       "   p.ssn, \n"+                             "   p.phone, \n"+                             "   TO_CHAR(p.dob,'MMDDYYYY'), \n"+                "   p.last_lab \n"+                "FROM pcs.patients p \n"+                "WHERE ";                            if (patID>0) SQL=SQL+"p.patient="+patID+" \n";            else SQL=SQL+" p.last_lab="+labNum+" \n";                            stmt = dbConnection.process().createStatement();            rs = stmt.executeQuery(SQL);            int rowsReturned = 0;            while (rs.next()) {                rowsReturned++;                parent.patientID.setText(rs.getString(1));                parent.paLName.setText(rs.getString(2));                parent.paFName.setText(rs.getString(3));                parent.paAddress1.setText(rs.getString(4));                parent.paCity.setText(rs.getString(5));                parent.paState.setText(rs.getString(6));                parent.paZip.setText(Utils.addZipMask(rs.getString(7)));                parent.paSSN.setText(Utils.addSSNMask(rs.getString(8)));                parent.paPhone.setText(Utils.addPhoneMask(rs.getString(9)));                parent.paDOB.setText(Utils.addDateMask(rs.getString(10)));                //parent.paLab.setText(rs.getString(11));                parent.currPID=rs.getInt(1);                //parent.currLAB=rs.getInt(11);                                parent.currLAB=labNum;            }                           if (rowsReturned>0) {                                 SQL =   "SELECT billing_route FROM pcs.billing_queue \n"+                        "WHERE lab_number="+parent.currLAB+" \n";                rs=stmt.executeQuery(SQL);                parent.inBillingQueue=false;                String billingRoute = "NULL";                while (rs.next()) {                     billingRoute=rs.getString(1);                    parent.inBillingQueue=true;                 }                                SQL =   "SELECT \n"+                        "   TO_CHAR(total_balance,'9990.99'), \n"+                        "   TO_CHAR(create_date,'MM/DD/YYYY'),past_due, \n"+                        "   total_balance,TO_CHAR(total_charges,'9990.99'), \n"+                        "   TO_CHAR(due_date_start,'MM/DD/YYYY'), \n"+                        "   TO_CHAR(due_date_start+31,'MM/DD/YYYY'), \n"+                        "   TO_CHAR(bill_amount,'9990.99') \n"+                        "FROM \n"+                        "   pcs.patient_accounts a, \n"+                        "   pcs.lab_billings b \n"+                        "WHERE \n"+                        "   a.lab_number=b.lab_number and \n"+                        "   a.patient="+parent.currPID+" and \n"+                        "   a.lab_number="+parent.currLAB+" \n";                rs=stmt.executeQuery(SQL);                rowsReturned=0;                while (rs.next()) {                    rowsReturned++;                    parent.currBal.setText(rs.getString(1));                    parent.pastDue=rs.getInt(3);                    parent.currBAL=rs.getDouble(4);                    parent.billTotal.setText(rs.getString(5));                    parent.lateDate=rs.getString(7);                    parent.releaseDate.setText(rs.getString(6));                    parent.labCharges.setText(rs.getString(8));                }                                if (rowsReturned==0) {                    Utils.createErrMsg(                        "No active account for patient #"+parent.currPID);                    if (parent.inBillingQueue) {                        if (billingRoute.equals("PAT"))                            parent.pastDue=parent.ACCOUNT_NOT_ACTIVATED;                        else {                            parent.inBillingQueue=false;                            parent.pastDue=parent.REBILL;                        }                    }                    else                        parent.pastDue=parent.PAID_IN_FULL;                }                else {                    if (parent.pastDue>=parent.CURRENT)                        parent.releaseDate.setText(null);                }            }            else {                exitStatus=false;                Utils.createErrMsg("No Data Returned");            }            try { stmt.close(); rs.close(); }            catch (SQLException e) {                 Utils.createErrMsg(e.getMessage());                parent.log.write(e+"\n"+SQL);                exitStatus=false;             }            catch (Exception e) {                 Utils.createErrMsg(e.getMessage());                parent.log.write(e+"\n"+SQL);                exitStatus=false;             }        }        catch (SQLException e) {            Utils.createErrMsg(e.getMessage());            parent.log.write(e+"\n"+SQL);            exitStatus=false;         }        catch (Exception e) {            Utils.createErrMsg(e.getMessage());            parent.log.write(e+"\n"+SQL);            exitStatus=false;         }                return (exitStatus);                }    public boolean getSummary(int patID, int labNum, Vector sVect)      {        boolean exitStatus = true;        Statement stmt = null;        ResultSet rs = null;        String SQL = null;        try  {                        SQL =   "SELECT billing_route FROM pcs.billing_queue \n"+                    "WHERE lab_number="+parent.currLAB+" \n";            stmt = dbConnection.process().createStatement();            rs=stmt.executeQuery(SQL);            parent.inBillingQueue=false;            while (rs.next()) { parent.inBillingQueue=true; }                        SQL =                 "SELECT \n"+                "   ps.statement_id, \n"+                "   TO_CHAR(ph.datestamp,'MM/DD/YYYY HH24:Mi'), \n"+                "   NVL(rc.description,'NONE'), \n"+                "   TO_CHAR(ps.datestamp,'MM/DD/YYYY'), \n"+                "   ps.rebilling, \n"+                "   TO_CHAR(lb.bill_amount,'990.99'), \n"+                "   ps.comment_text \n"+                "FROM \n"+                "   pcs.patient_statement_history ph, \n"+                "   pcs.patient_statements ps, \n"+                "   pcs.lab_billings lb, \n"+                "   pcs.rebill_codes rc \n"+                "WHERE \n"+                "   ph.statement_id=ps.statement_id and \n"+                "   ps.lab_number=lb.lab_number and \n"+                "   ps.lab_number="+labNum+" and \n"+                "   ph.rebill_code=rc.rebill_code(+) \n"+                "ORDER BY ph.datestamp \n";                            String stmtDatestamp = null;            String stmtComments = null;            int rebilling = 0;            rs = stmt.executeQuery(SQL);            int rowsReturned=0;            sVect.addElement(" ***** ACCOUNT ACTIVITY *****");            sVect.addElement(" STATEMENTS");            sVect.addElement(" SENT ON:            REBILL CODE:");            sVect.addElement(" --------------------------------------------------------");            while (rs.next()) {                rowsReturned++;                String statementDate=rs.getString(2);                String statementComment=rs.getString(3);                stmtDatestamp=rs.getString(4);                rebilling=rs.getInt(5);                String currLine=" "+statementDate+"    "+statementComment;                sVect.addElement(currLine);                if (rowsReturned==1 && parent.pastDue==parent.PAID_IN_FULL) {                    parent.currBal.setText("0.00");                    parent.labCharges.setText(rs.getString(6));                }                stmtComments=rs.getString(7);            }                   sVect.addElement(" --------------------------------------------------------");            if (rowsReturned==0) {                 sVect.removeAllElements();                sVect.addElement(" ***** ACCOUNT ACTIVITY *****");            }                        if (!Utils.isNull(stmtComments)) {                sVect.addElement("  ");                sVect.addElement(" STATEMENT COMMENTS: "+stmtComments);                parent.dbComments.setText(stmtComments);            }                        if (rebilling>0) {                                SQL =                    "SELECT \n"+                    "   TO_CHAR(bd.date_sent,'MM/DD/YYYY'), \n"+                    "   RPAD(SUBSTR(c.name,1,36),38), \n"+                    "   SUBSTR(cs.description,1,48), \n"+                    "   lc.claim_status, \n"+                    "   lc.alt_id, \n"+                    "   SUBSTR(lc.claim_comment,1,64), \n"+                    "   TO_CHAR(NVL(lc.amount_paid,0),'990.99'), \n"+                    "   TO_CHAR(NVL(lc.allowance,0),'990.99'), \n"+                    "   TO_CHAR(lc.datestamp,'MM/DD/YYYY'), \n"+                    "   bc.choice_code, \n"+                    "   lc.allowance, \n"+                    "   lb.bill_amount \n"+                    "FROM \n"+                    "   pcs.billing_details bd, \n"+                    "   pcs.carriers c, \n"+                    "   pcs.claim_statuses cs, \n"+                    "   pcs.lab_claims lc, \n"+                    "   pcs.billing_choices bc, \n"+                    "   pcs.lab_billings lb \n"+                    "WHERE \n"+                    "   bd.carrier_id=c.carrier_id and \n"+                    "   bd.claim_id=lc.claim_id and \n"+                    "   bd.lab_number=lb.lab_number and \n"+                    "   bd.billing_choice=bc.billing_choice and \n"+                    "   lc.claim_status=cs.claim_status and \n"+                    "   bd.lab_number="+labNum+" \n";                                    boolean printHeader = true;                rs=stmt.executeQuery(SQL);                while (rs.next()) {                    if (printHeader) {                        sVect.addElement("  ");                        sVect.addElement(" PRIOR BILLING(S):");                        sVect.addElement(                            " PAYER:                                 "+                            "SENT:      RECV'D:       PAID:  ALLOW:");                        sVect.addElement(                            " ------------------------------------------"+                            "------------------------------------");                        printHeader=false;                    }                    String dateSent = rs.getString(1);                    String payerName = rs.getString(2);                    String statusDescr = rs.getString(3);                    String statusCode = rs.getString(4);                    String rejectCode = rs.getString(5);                    String claimComment = rs.getString(6);                    String amtPaid = rs.getString(7);                    String allowance = rs.getString(8);                    String dateRecvd = rs.getString(9);                    String choiceCode = rs.getString(10);                    double dAllow = rs.getDouble(11);                    double dTotal = rs.getDouble(12);                    if (dAllow==dTotal)                        allowance="  ";                    String currLine = " "+payerName+" "+dateSent+" "+                        dateRecvd+" "+amtPaid+" "+allowance;                    sVect.addElement(currLine);                    sVect.addElement(" "+statusDescr);                    if (!Utils.isNull(rejectCode)                     && !Utils.isNull(claimComment)) {                        currLine=" "+rejectCode+" "+claimComment;                        sVect.addElement(currLine);                    }                    sVect.addElement(                        " ------------------------------------------"+                        "------------------------------------");                }            }                        if (!Utils.isNull(parent.lateDate)) {                sVect.addElement("  ");                sVect.addElement(" ACCOUNT BECOMES PAST DUE ON: "+parent.lateDate);            }                        if (parent.pastDue==parent.HOLD_TO_DATE) {                sVect.addElement("  ");                sVect.addElement(" BILLING HOLD SET ON:  "+stmtDatestamp);                sVect.addElement(" RELEASE DATE SET FOR: "+                    parent.releaseDate.getText());            }            else if (parent.pastDue==parent.INDEFINITE_HOLD) {                sVect.addElement("  ");                sVect.addElement(" BILLING HOLD UNTIL FURTHER NOTICE SET ON:  "+                    stmtDatestamp);            }                        SQL =                 "SELECT \n"+                "   TO_CHAR(create_date,'MM/DD/YYYY'), \n"+                "   TO_CHAR(change_date,'MM/DD/YYYY'), sent, \n"+                "   RTRIM(LTRIM(TO_CHAR(batch_number,'000009'))) \n"+                "FROM \n"+                "   pcs.patient_accounts_in_collection \n"+                "WHERE \n"+                "   lab_number="+labNum+" and patient="+patID+" \n";            rs=stmt.executeQuery(SQL);            while (rs.next()) {                String created = rs.getString(1);                String changed = rs.getString(2);                int status = rs.getInt(3);                String batch = rs.getString(4);                switch (status) {                    case -1:                        sVect.addElement("  ");                        sVect.addElement(" ACCOUNT WENT INTO COLLECTION ON: "+created);                        sVect.addElement(" DEQUEUED FROM CURRENT BATCH ON:  "+changed);                        break;                    case 0:                        sVect.addElement("  ");                        sVect.addElement(" ACCOUNT WENT INTO COLLECTION ON: "+created);                        sVect.addElement(" NOT REPORTED TO CREDIT BUREAU");                        break;                    case 1:                        sVect.addElement("  ");                        sVect.addElement(" ACCOUNT WENT INTO COLLECTION ON: "+created);                        sVect.addElement(" BATCH REPORT ["+batch+"]:           "+changed);                        break;                    case 2:                        sVect.addElement("  ");                        sVect.addElement(" ACCOUNT WENT INTO COLLECTION ON: "+created);                        sVect.addElement(" TAKEN OUT OF COLLECTION ON:      "+changed);                        sVect.addElement(" CREDIT BUREAU HAS NOT BEEN NOTIFIED");                              break;                    case 3:                        sVect.addElement("  ");                        sVect.addElement(" ACCOUNT WENT INTO COLLECTION ON: "+created);                        sVect.addElement(" TAKEN OUT OF COLLECTION ON:      "+changed);                        sVect.addElement(" CREDIT BUREAU HAS BEEN NOTIFIED");                              break;                }            }                        Vector tVect = new Vector();            tVect.addElement("  ");            tVect.addElement(" PAYMENT HISTORY");            tVect.addElement(" PAY TYPE:         AMOUNT: RECV'D:   ENTER DATE:    USER:");            tVect.addElement(" -------------------------------------------------------------------");            SQL =                 "SELECT \n"+                "   RPAD(a.payment_type,16), \n"+                "   RPAD(TO_CHAR(a.payment_amount,'9990.99'),8), \n"+                "   TO_CHAR(a.payment_date,'MM/DD/YY HH24:Mi'), \n"+                "   RPAD(NVL(TO_CHAR(a.check_number),' '),9), \n"+                "   TO_CHAR(a.receive_date,'MM/DD/YY'), \n"+                "   b.adjust_reason, \n"+                "   a.sys_user, \n"+                "   a.payment_amount \n"+                "FROM pcs.payments a, pcs.payment_adjust_reasons b \n"+                "WHERE a.payment_id=b.payment_id(+) and lab_number="+labNum+" \n";            rs=stmt.executeQuery(SQL);            rowsReturned=0;            double payTotal = 0;            while (rs.next()) {                rowsReturned++;                String pType=rs.getString(1);                String pAmt=rs.getString(2);                String pEntered=rs.getString(3);                String pRecvd=rs.getString(5);                String pUser=parent.dbLogin.getUserName(rs.getInt(7));                if (pType.trim().equals("PLUS ADJUST")) payTotal-=rs.getDouble(8);                else payTotal+=rs.getDouble(8);                // Next two lines must be in order                String pChk=rs.getString(4);                if (pType.trim().equals("CHECK") && !rs.wasNull()) {                    pType=pType.trim()+" #"+pChk;                }                String currLine =                     " "+pType+pAmt+"  "+pRecvd+"  "+pEntered+"  "+pUser;                tVect.addElement(currLine);                String pReason=rs.getString(6);                if (!rs.wasNull()) {                    currLine = " *** REASON: "+pReason;                    tVect.addElement(currLine);                                    }            }            tVect.addElement(" -------------------------------------------------------------------");            if (rowsReturned>0) {                for (int i=0;i<tVect.size();i++)                    sVect.addElement(tVect.elementAt(i));            }            SQL = "SELECT TO_CHAR("+payTotal+",'990.99') FROM dual \n";            rs=stmt.executeQuery(SQL);            while (rs.next()) {                 parent.totalPayments.setText(rs.getString(1));                if (parent.pastDue==parent.PAID_IN_FULL)                    parent.billTotal.setText(rs.getString(1));             }            try { stmt.close(); rs.close(); }            catch (SQLException e) {                 Utils.createErrMsg(e.getMessage());                parent.log.write(e+"\n"+SQL);                exitStatus=false;             }            catch (Exception e) {                 Utils.createErrMsg(e.getMessage());                parent.log.write(e+"\n"+SQL);                exitStatus=false;             }        }        catch (SQLException e) {             Utils.createErrMsg(e.getMessage());            parent.log.write(e+"\n"+SQL);            exitStatus=false;         }        catch (Exception e) {             Utils.createErrMsg(e.getMessage());            parent.log.write(e+"\n"+SQL);            exitStatus=false;         }                return (exitStatus);                }     public boolean add(int lab)     {        boolean exitStatus = true;        String SQL = null;        int paymentID = 0;        CallableStatement cstmt = null;        PreparedStatement pstmt = null;        ResultSet rs = null;        try  {            String payment_type=parent.payCodeLbl.getText();            String payment_amount=parent.paymentAmount.getText();            String check_number=parent.checkNumber.getText();            SQL =                 "INSERT INTO pcs.payments \n"+                "   (payment_id,billing_choice,account_id,payment_type, \n"+                "    payment_amount,payment_date,check_number,sys_user,receive_date,lab_number) \n"+                "SELECT \n"+                "   pcs.payments_seq.nextval,billing_choice,?, \n"+                "   ?,TO_NUMBER(?),SysDate,TO_NUMBER(?),UID,TO_DATE(?,'MMDDYYYY'),? \n"+                "FROM pcs.billing_choices \n"+                "WHERE choice_code='DB' \n";                            pstmt = dbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,parent.currPID);            pstmt.setString(2,parent.payCodeLbl.getText());            pstmt.setString(3,parent.paymentAmount.getText());            pstmt.setString(4,parent.checkNumber.getText());            pstmt.setString(5,Utils.stripDateMask(                parent.dateReceived.getText()));            pstmt.setInt(6,parent.currLAB);            pstmt.executeUpdate();            if (!Utils.isNull(parent.dbComments.getText())) {                SQL =                    "INSERT INTO pcs.db_comments (lab_number,comment_text) \n"+                    "VALUES (?,?) \n";                pstmt = dbConnection.process().prepareStatement(SQL);                pstmt.setInt(1,parent.currLAB);                pstmt.setString(2,parent.dbComments.getText());                pstmt.executeUpdate();                parent.dbComments.setText(null);            }                        SQL =                 "SELECT MAX(payment_id) FROM pcs.payments WHERE lab_number = ? \n";            pstmt = dbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,lab);            rs=pstmt.executeQuery();            while (rs.next()) { paymentID=rs.getInt(1); }            if ((payment_type.equals("PLUS ADJUST"))||                (payment_type.equals("MINUS ADJUST"))) {                if (paymentID>0) {                    SQL =                         "INSERT INTO pcs.payment_adjust_reasons VALUES (?,?) \n";                    pstmt=dbConnection.process().prepareStatement(SQL);                    pstmt.setInt(1,paymentID);                    pstmt.setString(2,parent.adjustReason.getText());                    pstmt.executeUpdate();                                         }            }            if (!payment_type.equals("PLUS ADJUST")) {                parent.currBAL=parent.currBAL-(Double.valueOf(                    parent.paymentAmount.getText())).doubleValue();            }            else {                parent.currBAL=parent.currBAL+(Double.valueOf(                    parent.paymentAmount.getText())).doubleValue();            }            SQL =   "UPDATE pcs.patient_accounts \n"+                    "SET total_balance = ? \n"+                    "WHERE lab_number = ? \n";            pstmt=dbConnection.process().prepareStatement(SQL);            pstmt.setDouble(1,parent.currBAL);            pstmt.setInt(2,parent.currLAB);            pstmt.executeUpdate();                                SQL = "SELECT TO_CHAR(?,'9990.99') from dual \n";            pstmt=dbConnection.process().prepareStatement(SQL);            pstmt.setDouble(1,parent.currBAL);            rs=pstmt.executeQuery();            while (rs.next()) { parent.currBal.setText(rs.getString(1)); }                            try { pstmt.close(); rs.close(); }            catch (SQLException e) {                 Utils.createErrMsg(e.getMessage());                parent.log.write(e+"\n"+SQL);                exitStatus=false;             }            catch (Exception e) {                 Utils.createErrMsg(e.getMessage());                parent.log.write(e+"\n"+SQL);                exitStatus=false;             }        }        catch (SQLException e) {             Utils.createErrMsg(e.getMessage());            parent.log.write(e+"\n"+SQL);            exitStatus=false;         }        catch (Exception e) {             Utils.createErrMsg(e.getMessage());            parent.log.write(e+"\n"+SQL);            exitStatus=false;         }        if (exitStatus && paymentID>0) {            try {	            cstmt=dbConnection.process().prepareCall("{call pcs.post_one_payment(?)}");	            cstmt.setInt(1,paymentID);	            cstmt.execute();                try { cstmt.close(); }                catch (SQLException e) {                     Utils.createErrMsg(e.getMessage());                    parent.log.write(e+"\n"+SQL);                    exitStatus=false;                 }                catch (Exception e) {                     Utils.createErrMsg(e.getMessage());                    parent.log.write(e+"\n"+SQL);                    exitStatus=false;                 }            }            catch (SQLException e) {                 Utils.createErrMsg(e.getMessage());                parent.log.write(e+"\n"+SQL);                exitStatus=false;             }            catch (Exception e) {                 Utils.createErrMsg(e.getMessage());                parent.log.write(e+"\n"+SQL);                exitStatus=false;             }        }                return (exitStatus);    }        public boolean update(int patient, int labNum)     {        boolean exitStatus = true;        String SQL = null;        PreparedStatement pstmt = null;        try  {                        SQL =                 "UPDATE pcs.patients SET \n"+                "   lname = ?, fname = ?, mi = ?, ssn = ?, \n"+                "   dob = TO_DATE(?,'MMDDYYYY'), \n"+                "   address1 = ?, city = ?, state = ?, zip = ?, phone = ? \n"+                "WHERE patient = ? \n";            pstmt = dbConnection.process().prepareStatement(SQL);            pstmt.setString(1,parent.paLName.getText());            pstmt.setString(2,parent.paFName.getText());            pstmt.setString(3,parent.paMI.getText());            pstmt.setString(4,Utils.stripSSNMask(parent.paSSN.getText()));            pstmt.setString(5,Utils.stripDateMask(parent.paDOB.getText()));            pstmt.setString(6,parent.paAddress1.getText());            pstmt.setString(7,parent.paCity.getText());            pstmt.setString(8,parent.paState.getText());            pstmt.setString(9,Utils.stripZipMask(parent.paZip.getText()));            pstmt.setString(10,Utils.stripPhoneMask(parent.paPhone.getText()));            pstmt.setInt(11,patient);            pstmt.executeUpdate();            if (!Utils.isNull(parent.dbComments.getText())) {                SQL =                    "INSERT INTO pcs.db_comments (lab_number,comment_text) \n"+                    "VALUES (?,?) \n";                pstmt = dbConnection.process().prepareStatement(SQL);                pstmt.setInt(1,parent.currLAB);                pstmt.setString(2,parent.dbComments.getText());                pstmt.executeUpdate();                parent.dbComments.setText(null);            }                        SQL =   "UPDATE pcs.patient_accounts SET \n"+                    "   past_due = 0, due_date_start = SysDate \n"+                    "WHERE patient = ? and lab_number = ? \n";            pstmt=dbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,patient);            pstmt.setInt(2,labNum);            pstmt.executeUpdate();                                            SQL =   "UPDATE pcs.patient_statements SET \n"+                    "   billing_type = SUBSTR(billing_type,1,2)||'00' \n"+                    "WHERE patient = ? and lab_number = ? \n";            pstmt=dbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,patient);            pstmt.setInt(2,labNum);            pstmt.executeUpdate();                                            SQL =   "UPDATE pcs.patient_accounts_in_collection SET \n"+                    "   sent=2, change_date=SysDate \n"+                    "WHERE patient = ? and lab_number = ? \n";            pstmt=dbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,patient);            pstmt.setInt(2,labNum);            pstmt.executeUpdate();                                            SQL =   "INSERT INTO pcs.billing_queue \n"+                    "   (lab_number,billing_route,datestamp, \n"+                    "    billing_type,rebilling,rebill_code) \n"+                    "SELECT \n"+                    "   lab_number,'PAT',SysDate,billing_type, \n"+                    "   rebilling,rebill_code \n"+                    "FROM pcs.patient_statements \n"+                    "WHERE patient = ? and lab_number = ? \n";            pstmt=dbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,patient);            pstmt.setInt(2,labNum);            pstmt.executeUpdate();                                            try { pstmt.close(); }            catch (SQLException e) {                 Utils.createErrMsg(e.getMessage());                parent.log.write(e+"\n"+SQL);                exitStatus=false;             }            catch (Exception e) {                 Utils.createErrMsg(e.getMessage());                parent.log.write(e+"\n"+SQL);                exitStatus=false;             }        }        catch (SQLException e) {             Utils.createErrMsg(e.getMessage());            parent.log.write(e+"\n"+SQL);            exitStatus=false;         }        catch (Exception e) {             Utils.createErrMsg(e.getMessage());            parent.log.write(e+"\n"+SQL);            exitStatus=false;         }                return (exitStatus);    }        public boolean addReleaseDate(int patient, int labNum)     {        boolean exitStatus = true;        String SQL = null;        PreparedStatement pstmt = null;        try  {                        SQL =                 "UPDATE pcs.patients SET \n"+                "   lname = ?, fname = ?, mi = ?, ssn = ?, \n"+                "   dob = TO_DATE(?,'MMDDYYYY'), \n"+                "   address1 = ?, city = ?, state = ?, zip = ?, phone = ? \n"+                "WHERE patient = ? \n";            pstmt = dbConnection.process().prepareStatement(SQL);            pstmt.setString(1,parent.paLName.getText());            pstmt.setString(2,parent.paFName.getText());            pstmt.setString(3,parent.paMI.getText());            pstmt.setString(4,Utils.stripSSNMask(parent.paSSN.getText()));            pstmt.setString(5,Utils.stripDateMask(parent.paDOB.getText()));            pstmt.setString(6,parent.paAddress1.getText());            pstmt.setString(7,parent.paCity.getText());            pstmt.setString(8,parent.paState.getText());            pstmt.setString(9,Utils.stripZipMask(parent.paZip.getText()));            pstmt.setString(10,Utils.stripPhoneMask(parent.paPhone.getText()));            pstmt.setInt(11,patient);            pstmt.executeUpdate();            SQL =   "UPDATE pcs.patient_accounts SET \n"+                    "   past_due = ?, due_date_start = TO_DATE(?,'MMDDYYYY') \n"+                    "WHERE patient = ? and lab_number = ? \n";            pstmt=dbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,parent.pastDue);            pstmt.setString(2,Utils.stripDateMask(                parent.releaseDate.getText()));            pstmt.setInt(3,patient);            pstmt.setInt(4,labNum);            pstmt.executeUpdate();                                            SQL =   "UPDATE pcs.patient_statements SET \n"+                    "   billing_type = SUBSTR(billing_type,1,2)||'00', \n"+                    "   datestamp = SysDate \n"+                    "WHERE patient = ? and lab_number = ? \n";            pstmt=dbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,patient);            pstmt.setInt(2,labNum);            pstmt.executeUpdate();                                            SQL =   "UPDATE pcs.patient_accounts_in_collection SET \n"+                    "   sent=2, change_date=SysDate \n"+                    "WHERE patient = ? and lab_number = ? \n";            pstmt=dbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,patient);            pstmt.setInt(2,labNum);            pstmt.executeUpdate();                                            SQL =   "DELETE FROM pcs.billing_queue \n"+                    "WHERE lab_number = ? \n";            pstmt=dbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,labNum);            pstmt.executeUpdate();                                            try { pstmt.close(); }            catch (SQLException e) {                 Utils.createErrMsg(e.getMessage());                parent.log.write(e+"\n"+SQL);                exitStatus=false;             }            catch (Exception e) {                 Utils.createErrMsg(e.getMessage());                parent.log.write(e+"\n"+SQL);                exitStatus=false;             }        }        catch (SQLException e) {             Utils.createErrMsg(e.getMessage());            parent.log.write(e+"\n"+SQL);            exitStatus=false;         }        catch (Exception e) {             Utils.createErrMsg(e.getMessage());            parent.log.write(e+"\n"+SQL);            exitStatus=false;         }         return (exitStatus);    }        public Vector getAccountHolds()    {        Vector holdData = new Vector();        String SQL = null;        PreparedStatement pstmt = null;        ResultSet rs = null;        boolean dataFlag = false;        try  {            SQL =                 "SELECT a.lab_number, \n"+                "   RPAD(SUBSTR(b.lname||', '||b.fname,1,20),20), \n"+                "   TO_CHAR(c.datestamp,'MM/DD/YYYY'), \n"+                "   TO_CHAR(a.due_date_start,'MM/DD/YYYY') \n"+                "   FROM pcs.patient_accounts a, pcs.patients b, \n"+                "       pcs.patient_statements c, pcs.lab_requisitions d \n"+                "WHERE a.lab_number=c.lab_number and a.lab_number=d.lab_number \n"+                "   and d.patient=b.patient and a.past_due = ? \n"+                "ORDER by a.lab_number \n";            pstmt = dbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,parent.HOLD_TO_DATE);            rs=pstmt.executeQuery();            while (rs.next()) {                String s = null;                if (!dataFlag) {                    s="LAB#:       PATIENT:              SET ON:     HOLD UNTIL:";                    holdData.addElement(s);                    s="---------------------------------------------------------";                    holdData.addElement(s);                    dataFlag=true;                }                s=rs.getInt(1)+"  "+rs.getString(2)+"  "+                    rs.getString(3)+"  "+rs.getString(4);                holdData.addElement(s);            }            try { pstmt.close(); rs.close(); }            catch (SQLException e) {                 Utils.createErrMsg(e.getMessage());                parent.log.write(e+"\n"+SQL);            }            catch (Exception e) {                 Utils.createErrMsg(e.getMessage());                parent.log.write(e+"\n"+SQL);            }            dataFlag=false;            pstmt = dbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,parent.INDEFINITE_HOLD);            rs=pstmt.executeQuery();            while (rs.next()) {                String s = null;                if (!dataFlag) {                    s="  ";                    holdData.addElement(s);                    s="DIRECT BILLS ON INDEFINITE HOLD";                    holdData.addElement(s);                    s="LAB#:       PATIENT:              SET ON:";                    holdData.addElement(s);                    s="---------------------------------------------------------";                    holdData.addElement(s);                    dataFlag=true;                }                s=rs.getInt(1)+"  "+rs.getString(2)+"  "+rs.getString(3);                holdData.addElement(s);            }            try { pstmt.close(); rs.close(); }            catch (SQLException e) {                 Utils.createErrMsg(e.getMessage());                parent.log.write(e+"\n"+SQL);            }            catch (Exception e) {                 Utils.createErrMsg(e.getMessage());                parent.log.write(e+"\n"+SQL);            }        }        catch (SQLException e) {             Utils.createErrMsg(e.getMessage());            parent.log.write(e+"\n"+SQL);        }        catch (Exception e) {             Utils.createErrMsg(e.getMessage());            parent.log.write(e+"\n"+SQL);        }        return (holdData);    }        public boolean hasLabComments(int labNum)     {        boolean hasComments = false;        try  {            String query =                 "SELECT comment_text \n"+                "FROM pcs.lab_req_comments "+                "WHERE lab_number="+labNum+" \n";            Statement stmt = dbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(query);            while (rs.next()) { hasComments=true; }            try { rs.close(); stmt.close(); }            catch (SQLException e) { parent.log.write(e); }                        }        catch( Exception e ) { parent.log.write(e); }        return(hasComments);                }         public void close() { }        public boolean addComment(String commentText)     {        boolean exitStatus = true;        String SQL = null;        PreparedStatement pstmt = null;        try  {            SQL =                 "INSERT INTO pcs.db_comments (lab_number,comment_text) VALUES (?,?) \n";            pstmt = dbConnection.process().prepareStatement(SQL);            pstmt.setInt(1,parent.currLAB);            pstmt.setString(2,commentText);            pstmt.executeUpdate();            try { pstmt.close(); }            catch (SQLException e) {                 Utils.createErrMsg(e.getMessage());                parent.log.write(e+"\n"+SQL);                exitStatus=false;             }            catch (Exception e) {                 Utils.createErrMsg(e.getMessage());                parent.log.write(e+"\n"+SQL);                exitStatus=false;             }        }        catch (SQLException e) {             Utils.createErrMsg(e.getMessage());            parent.log.write(e+"\n"+SQL);            exitStatus=false;         }        catch (Exception e) {             Utils.createErrMsg(e.getMessage());            parent.log.write(e+"\n"+SQL);            exitStatus=false;         }        return (exitStatus);    }    }
