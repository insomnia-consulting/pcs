package com.pacytology.pcs;

/*
    PENNSYLVANIA CYTOLOGY SERVICES
    LABORATORY INFORMATION SYSTEM V1.0
    Copyright (C) 2001 by John Cardella
    All Rights Reserved
    
    File:       CarrierForm.java
    Created By: John Cardella, Software Engineer
    
    Function:   Data entry form for insurance payers.
    
    MODIFICATIONS ----------------------------------
    Date/Staff      Description:
*/

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;

import javax.swing.AbstractAction;
import javax.swing.JRootPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import com.pacytology.pcs.ui.PcsFrame;
import com.pacytology.pcs.ui.Square;

public class CarrierForm extends PcsFrame
{
    
    public Login dbLogin;
    public LabForm parent;
    public BillingForm bParent;
    public boolean hasParent=false;
    public boolean autoQuery=false;
    public FunctionKeyControl fKeys = new FunctionKeyControl();
    /*
    final int IDLE=100;
    final int QUERY=101;
    final int ADD=102;
    final int UPDATE=103;
    final int MERGE=104;
    */
    public int currMode=Lab.IDLE;
    public CarrierRec cRec = new CarrierRec();
    public Vector cRecVect = new Vector();
    public CarrierDbOps cDbOps;
    public boolean dbThreadRunning=false;
    public int cVectNdx=0;
    public int cVectSize=0;
    final int LAB = 201;
    final int BILL = 202;
    public int formMode = 0;
    int retain = 0;
    int remove = 0;
	public JTextArea carrierComments = new javax.swing.JTextArea();
	boolean updateBilling = false;
	LogFile log;
	
	public CarrierForm()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Payers");
		setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(455,356);
		setVisible(false);
		payerPanel.setBorder(titledBorder1);
		payerPanel.setLayout(null);
		getContentPane().add(payerPanel);
		payerPanel.setBounds(16,72,424,160);
		cIDNum.setEnabled(false);
		payerPanel.add(cIDNum);
		cIDNum.setFont(new Font("DialogInput", Font.PLAIN, 12));
		cIDNum.setBounds(368,10,40,20);
		cName.setEnabled(false);
		payerPanel.add(cName);
		cName.setFont(new Font("DialogInput", Font.PLAIN, 12));
		cName.setBounds(16,34,392,20);
		cAddress1.setEnabled(false);
		payerPanel.add(cAddress1);
		cAddress1.setFont(new Font("DialogInput", Font.PLAIN, 12));
		cAddress1.setBounds(86,60,322,20);
		cAddress2.setEnabled(false);
		payerPanel.add(cAddress2);
		cAddress2.setFont(new Font("DialogInput", Font.PLAIN, 12));
		cAddress2.setBounds(86,82,322,20);
		cZip.setEnabled(false);
		payerPanel.add(cZip);
		cZip.setFont(new Font("DialogInput", Font.PLAIN, 12));
		cZip.setBounds(86,104,80,20);
		cCity.setEnabled(false);
		payerPanel.add(cCity);
		cCity.setFont(new Font("DialogInput", Font.PLAIN, 12));
		cCity.setBounds(202,104,140,20);
		cState.setEnabled(false);
		payerPanel.add(cState);
		cState.setFont(new Font("DialogInput", Font.PLAIN, 12));
		cState.setBounds(384,104,24,20);
		cPhone.setEnabled(false);
		payerPanel.add(cPhone);
		cPhone.setFont(new Font("DialogInput", Font.PLAIN, 12));
		cPhone.setBounds(56,126,108,20);
		cFax.setEnabled(false);
		payerPanel.add(cFax);
		cFax.setFont(new Font("DialogInput", Font.PLAIN, 12));
		cFax.setBounds(224,126,108,20);
		cStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		cStatus.setEnabled(false);
		payerPanel.add(cStatus);
		cStatus.setFont(new Font("DialogInput", Font.PLAIN, 12));
		cStatus.setBounds(384,126,24,20);
		cZipLbl.setText("Zip");
		payerPanel.add(cZipLbl);
		cZipLbl.setBounds(16,106,24,12);
		cStateLbl.setText("State");
		payerPanel.add(cStateLbl);
		cStateLbl.setBounds(350,106,30,14);
		cCityLbl.setText("City");
		payerPanel.add(cCityLbl);
		cCityLbl.setBounds(172,106,30,12);
		cNameLbl.setText("Payer Name");
		payerPanel.add(cNameLbl);
		cNameLbl.setBounds(16,20,88,12);
		idNuLbl.setText("ID Number");
		payerPanel.add(idNuLbl);
		idNuLbl.setBounds(304,12,64,12);
		cAddressLbl.setText("Address");
		payerPanel.add(cAddressLbl);
		cAddressLbl.setBounds(16,62,48,12);
		phoneLbl.setText("Phone");
		payerPanel.add(phoneLbl);
		phoneLbl.setBounds(16,128,48,12);
		faxLbl.setText("Fax");
		payerPanel.add(faxLbl);
		faxLbl.setBounds(190,128,30,12);
		JLabel1.setText("Status");
		payerPanel.add(JLabel1);
		JLabel1.setBounds(344,128,38,12);
		eBillPanel.setBorder(titledBorder2);
		eBillPanel.setLayout(null);
		getContentPane().add(eBillPanel);
		eBillPanel.setBounds(16,238,272,94);
		cBillingChoice.setText("OI");
		cBillingChoice.setEnabled(false);
		eBillPanel.add(cBillingChoice);
		cBillingChoice.setFont(new Font("DialogInput", Font.PLAIN, 12));
		cBillingChoice.setBounds(50,24,28,20);
		eBilling.setText("N");
		eBilling.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		eBilling.setEnabled(false);
		eBillPanel.add(eBilling);
		eBilling.setFont(new Font("DialogInput", Font.PLAIN, 12));
		eBilling.setBounds(170,24,24,20);
		cPayerID.setEnabled(false);
		eBillPanel.add(cPayerID);
		cPayerID.setFont(new Font("DialogInput", Font.PLAIN, 12));
		cPayerID.setBounds(160,64,100,20);
		cTPP.setEnabled(false);
		eBillPanel.add(cTPP);
		cTPP.setFont(new Font("DialogInput", Font.PLAIN, 12));
		cTPP.setBounds(232,24,28,20);
		JLabel6.setText("TPP");
		eBillPanel.add(JLabel6);
		JLabel6.setBounds(204,26,30,12);
		JLabel7.setText("Payer ID");
		eBillPanel.add(JLabel7);
		JLabel7.setBounds(160,50,48,12);
		eBillLbl.setText("E-Billing");
		eBillPanel.add(eBillLbl);
		eBillLbl.setBounds(118,26,48,12);
		billCodeLbl.setText("Code");
		eBillPanel.add(billCodeLbl);
		billCodeLbl.setBounds(16,26,70,12);
		JLabel2.setText("Provider ID");
		eBillPanel.add(JLabel2);
		JLabel2.setBounds(16,50,78,12);
		cProviderID.setEnabled(false);
		eBillPanel.add(cProviderID);
		cProviderID.setFont(new Font("DialogInput", Font.PLAIN, 12));
		cProviderID.setBounds(16,64,100,20);
		getContentPane().add(F1sq);
		F1sq.setBounds(35,6,20,20);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F1");
		getContentPane().add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(39,6,20,20);
		getContentPane().add(F2sq);
		F2sq.setBounds(97,6,20,20);
		F2lbl.setRequestFocusEnabled(false);
		F2lbl.setText("F2");
		getContentPane().add(F2lbl);
		F2lbl.setForeground(java.awt.Color.black);
		F2lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F2lbl.setBounds(101,6,20,20);
		getContentPane().add(F3sq);
		F3sq.setBounds(159,6,20,20);
		F3lbl.setRequestFocusEnabled(false);
		F3lbl.setText("F3");
		getContentPane().add(F3lbl);
		F3lbl.setForeground(java.awt.Color.black);
		F3lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F3lbl.setBounds(163,6,20,20);
		getContentPane().add(F4sq);
		F4sq.setBounds(221,6,20,20);
		F4lbl.setRequestFocusEnabled(false);
		F4lbl.setText("F4");
		getContentPane().add(F4lbl);
		F4lbl.setForeground(java.awt.Color.black);
		F4lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F4lbl.setBounds(225,6,20,20);
		getContentPane().add(F9sq);
		F9sq.setBounds(283,6,20,20);
		F9lbl.setRequestFocusEnabled(false);
		F9lbl.setText("F9");
		getContentPane().add(F9lbl);
		F9lbl.setForeground(java.awt.Color.black);
		F9lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F9lbl.setBounds(287,6,20,20);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("Query");
		getContentPane().add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(10,30,70,18);
		F2action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F2action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F2action.setText("Add");
		getContentPane().add(F2action);
		F2action.setForeground(java.awt.Color.black);
		F2action.setBounds(72,30,70,16);
		F3action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F3action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F3action.setText("Update");
		getContentPane().add(F3action);
		F3action.setForeground(java.awt.Color.black);
		F3action.setBounds(134,30,70,16);
		F4action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F4action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F4action.setText("Merge");
		getContentPane().add(F4action);
		F4action.setForeground(java.awt.Color.black);
		F4action.setBounds(196,30,70,16);
		F9action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F9action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F9action.setText("Exit");
		getContentPane().add(F9action);
		F9action.setForeground(java.awt.Color.black);
		F9action.setBounds(258,30,70,16);
		getContentPane().add(msgLabel);
		msgLabel.setForeground(java.awt.Color.red);
		msgLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		msgLabel.setBounds(34,52,372,14);
		getContentPane().add(F11sq);
		F11sq.setBounds(345,6,20,20);
		F11lbl.setRequestFocusEnabled(false);
		F11lbl.setText("F11");
		getContentPane().add(F11lbl);
		F11lbl.setForeground(java.awt.Color.black);
		F11lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F11lbl.setBounds(346,6,20,20);
		getContentPane().add(F12sq);
		F12sq.setBounds(407,6,20,20);
		F12lbl.setRequestFocusEnabled(false);
		F12lbl.setText("F12");
		getContentPane().add(F12lbl);
		F12lbl.setForeground(java.awt.Color.black);
		F12lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F12lbl.setBounds(408,6,20,20);
		F11action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F11action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F11action.setText("Select");
		getContentPane().add(F11action);
		F11action.setForeground(java.awt.Color.black);
		F11action.setBounds(320,30,70,16);
		F12action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F12action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F12action.setText("Submit");
		getContentPane().add(F12action);
		F12action.setForeground(java.awt.Color.black);
		F12action.setBounds(382,30,70,16);
		recCountLbl.setText("0 of 0");
		getContentPane().add(recCountLbl);
		recCountLbl.setForeground(java.awt.Color.black);
		recCountLbl.setBounds(20,336,48,14);
		recCountLbl.setVisible(false);
		//$$ titledBorder1.move(8,464);
		titledBorder2.setTitle("Billing Information");
		//$$ titledBorder2.move(32,464);
		JLabel9.setText("Retain #");
		getContentPane().add(JLabel9);
		JLabel9.setBounds(312,264,58,12);
		mergeRetain.setEnabled(false);
		getContentPane().add(mergeRetain);
		mergeRetain.setFont(new Font("DialogInput", Font.PLAIN, 12));
		mergeRetain.setBounds(372,264,54,20);
		JLabel10.setText("Remove #");
		getContentPane().add(JLabel10);
		JLabel10.setBounds(312,288,58,12);
		mergeRemove.setEnabled(false);
		getContentPane().add(mergeRemove);
		mergeRemove.setFont(new Font("DialogInput", Font.PLAIN, 12));
		mergeRemove.setBounds(372,288,54,20);
		payerMergeLbl.setText("PAYER MERGE");
		getContentPane().add(payerMergeLbl);
		payerMergeLbl.setForeground(java.awt.Color.black);
		payerMergeLbl.setBounds(312,246,100,12);
		mergeConfirm.setMessageType(javax.swing.JOptionPane.QUESTION_MESSAGE);
		mergeConfirm.setOptionType(javax.swing.JOptionPane.YES_NO_OPTION);
		//$$ mergeConfirm.move(56,464);
		//}}

        titledBorder2.setTitleColor(Color.white);
        
		//{{INIT_MENUS
		//}}
	
		//{{REGISTER_LISTENERS
		SymKey aSymKey = new SymKey();
		cIDNum.addKeyListener(aSymKey);
		cName.addKeyListener(aSymKey);
		cAddress1.addKeyListener(aSymKey);
		cAddress2.addKeyListener(aSymKey);
		cCity.addKeyListener(aSymKey);
		cState.addKeyListener(aSymKey);
		SymFocus aSymFocus = new SymFocus();
		this.addKeyListener(aSymKey);
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		cZip.addKeyListener(aSymKey);
		cPhone.addKeyListener(aSymKey);
		cFax.addKeyListener(aSymKey);
		cBillingChoice.addKeyListener(aSymKey);
		eBilling.addKeyListener(aSymKey);
		cTPP.addKeyListener(aSymKey);
		cPayerID.addKeyListener(aSymKey);
		mergeRetain.addKeyListener(aSymKey);
		mergeRemove.addKeyListener(aSymKey);
		cStatus.addKeyListener(aSymKey);
		cProviderID.addKeyListener(aSymKey);
		//}}
		
        // Add focus listener to all text fields
		for (int i=0; i<this.getContentPane().getComponentCount(); i++) {
		    Component c = this.getContentPane().getComponent(i);
		    String s = c.getClass().getName();
		    if (s.equals("javax.swing.JTextField")
		    || s.equals("javax.swing.JTextArea")) {
		        c.addFocusListener(aSymFocus);
		    }
		    else if (s.equals("javax.swing.JPanel")) {
		        for (int j=0; j<((Container)c).getComponentCount(); j++) {
		            Component d = ((Container)c).getComponent(j);
		            String t = d.getClass().getName();
		            if (t.equals("javax.swing.JTextField")
		            || t.equals("javax.swing.JTextArea")) {
		                d.addFocusListener(aSymFocus);
		            }
		        }
		    }
		}
		setupKeyPressMap();
	}
	protected JRootPane setupKeyPressMap() {
		JRootPane rp = super.setupKeyPressMap();
		rp.getActionMap().put("F1", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				 if (fKeys.isOn(fKeys.F1)) {
	                    currMode=Lab.QUERY;
	                    queryActions();
	                }
	                else Utils.createErrMsg("F1 Key not available");
			}
		});
		rp.getActionMap().put("F2", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				if (fKeys.isOn(fKeys.F2)) {
					if ((e.getModifiers() & ActionEvent.CTRL_MASK) != 0){
						updateBilling=true;
					}

                    currMode=Lab.ADD;
                    addActions();
                }
                else Utils.createErrMsg("F2 Key not available");
			}
		});
		rp.getActionMap().put("F3", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				if (fKeys.isOn(fKeys.F3)) {
					if ((e.getModifiers() & ActionEvent.CTRL_MASK) != 0){
						updateBilling=true;
					}
                    currMode=Lab.UPDATE;
                    updateActions();
                }
                else Utils.createErrMsg("F3 Key not available");
			}
		});
		rp.getActionMap().put("F4", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				 if (currMode==Lab.IDLE && formMode!=LAB && formMode!=BILL) {
	                    mergeActions();
	                }
	                else Utils.createErrMsg("F4 Key not available");
			}
		});
		rp.getActionMap().put("F9", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				if (fKeys.isOn(fKeys.F9)) {
                    closingActions();
                }
                else Utils.createErrMsg("F9 Key not available");
			}
		});
		rp.getActionMap().put("F8", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				if (cBillingChoice.hasFocus()) {
                    int numItems = dbLogin.billingCodeVect.size();
                    String[] codeDesc = new String[numItems];
                    String[] codeList = new String[numItems];
                    for (int i=0; i<dbLogin.billingCodeVect.size(); i++) {
                        BillingCodeRec bCode = 
                            (BillingCodeRec)dbLogin.billingCodeVect.elementAt(i);
                        if (bCode.choice_code.equals("OI") ||
                            bCode.choice_code.equals("DPA") ||
                            bCode.choice_code.equals("MED") ||
                            bCode.choice_code.equals("BS")) 
                        {
                            codeDesc[i]=bCode.formattedString;
                            codeList[i]=bCode.choice_code;
                        }
                    }
                    (new PickList("Billing Codes",200,200,240,190,
                        numItems,codeDesc,codeList,cBillingChoice)).setVisible(true);
                }
                else if (cTPP.hasFocus()) {
                    int numItems = dbLogin.tppVect.size();
                    String[] tppDesc = new String[numItems];
                    String[] tppList = new String[numItems];
                    for (int i=0; i<dbLogin.tppVect.size(); i++) {
                        TppRec tppRec = (TppRec)dbLogin.tppVect.elementAt(i);
                        tppDesc[i] = "["+tppRec.tpp+"] "+tppRec.tpp_name;
                        tppList[i] = tppRec.tpp;
                    }
                    (new PickList("TPPs",200,200,240,190,
                        numItems,tppDesc,tppList,cTPP)).setVisible(true);
                }
			}
		});
		rp.getActionMap().put("F11", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				 if (fKeys.isOn(fKeys.F11))
	                    selectActions();
			}
		});
		rp.getActionMap().put("F12", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				 if (fKeys.isOn(fKeys.F12)) finalActions();
	                else Utils.createErrMsg("F12 Key not available");
			}
		});
		rp.getActionMap().put("ESC", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				CarrierForm.this.resetCarrierForm();
			}
		});
		AbstractAction showRemarks = new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				
				if (  ((currMode==Lab.IDLE)&&(cRec.carrier_id>0))
	                    ||((currMode==Lab.UPDATE)&&(cRec.carrier_id>0))
	                    || (currMode==Lab.ADD) ) {
	                    boolean isUpdatable = false;
	                    if (currMode==Lab.ADD || currMode==Lab.UPDATE) isUpdatable=true;
	                    (new CommentForm(
	                        "Payer Comments",carrierComments,isUpdatable)).setVisible(true);
	                    }
			}
		};
		rp.getActionMap().put("INSERT", showRemarks);
		//Let's add 'I' as a way of calling VK_INSERT ON Mac
		String osName = System.getProperty("os.name").toLowerCase();
		boolean isMacOs = osName.startsWith("mac os x");
		if (isMacOs) rp.getActionMap().put("VK_I", showRemarks);
		return rp;
	}
	public CarrierForm(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

    public CarrierForm(LabForm p)  
    {
        this();
        this.parent=p;
        this.hasParent=true;
        this.log=parent.log;
        log.write("ENTERED CarrierForm through LabForm");
        this.dbLogin=p.dbLogin;
        this.formMode=LAB;
        this.cDbOps = new CarrierDbOps(this);
        resetCarrierForm();
        if (this.parent.labRec.carrier_id>0)  {
            this.autoQuery=true;
            this.cRec.carrier_id=this.parent.labRec.carrier_id;
            boolean rv = cDbOps.query();
            if (rv) fillForm();
        }            
    }        

    public CarrierForm(BillingForm p)  
    {
        this();
        this.bParent=p;
        this.hasParent=true;
        this.log=bParent.log;
        log.write("ENTERED CarrierForm through BillingForm");
        this.dbLogin=p.dbLogin;
        this.formMode=BILL;
        this.cDbOps = new CarrierDbOps(this);
        resetCarrierForm();
    }        

    public CarrierForm(Login dbLogin)  
    {
        this();
        this.dbLogin=dbLogin;
        this.log = new LogFile(
            dbLogin.logPath,"CarrierForm",dbLogin.dateToday,dbLogin.userName);
        this.hasParent=false;
        this.cDbOps = new CarrierDbOps(this);
        this.resetCarrierForm();
    }        

	public void setVisible(boolean b)
	{
		if (b) setLocation(0,0);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new CarrierForm()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		Insets insets = getInsets();
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JPanel payerPanel = new javax.swing.JPanel();
	javax.swing.JTextField cIDNum = new javax.swing.JTextField();
	javax.swing.JTextField cName = new javax.swing.JTextField();
	javax.swing.JTextField cAddress1 = new javax.swing.JTextField();
	javax.swing.JTextField cAddress2 = new javax.swing.JTextField();
	javax.swing.JTextField cZip = new javax.swing.JTextField();
	javax.swing.JTextField cCity = new javax.swing.JTextField();
	javax.swing.JTextField cState = new javax.swing.JTextField();
	javax.swing.JTextField cPhone = new javax.swing.JTextField();
	javax.swing.JTextField cFax = new javax.swing.JTextField();
	javax.swing.JTextField cStatus = new javax.swing.JTextField();
	javax.swing.JLabel cZipLbl = new javax.swing.JLabel();
	javax.swing.JLabel cStateLbl = new javax.swing.JLabel();
	javax.swing.JLabel cCityLbl = new javax.swing.JLabel();
	javax.swing.JLabel cNameLbl = new javax.swing.JLabel();
	javax.swing.JLabel idNuLbl = new javax.swing.JLabel();
	javax.swing.JLabel cAddressLbl = new javax.swing.JLabel();
	javax.swing.JLabel phoneLbl = new javax.swing.JLabel();
	javax.swing.JLabel faxLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JPanel eBillPanel = new javax.swing.JPanel();
	javax.swing.JTextField cBillingChoice = new javax.swing.JTextField();
	javax.swing.JTextField eBilling = new javax.swing.JTextField();
	javax.swing.JTextField cPayerID = new javax.swing.JTextField();
	javax.swing.JTextField cTPP = new javax.swing.JTextField();
	javax.swing.JLabel JLabel6 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel7 = new javax.swing.JLabel();
	javax.swing.JLabel eBillLbl = new javax.swing.JLabel();
	javax.swing.JLabel billCodeLbl = new javax.swing.JLabel();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JTextField cProviderID = new javax.swing.JTextField();
	Square F1sq = new Square();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	Square F2sq = new Square();
	javax.swing.JLabel F2lbl = new javax.swing.JLabel();
	Square F3sq = new Square();
	javax.swing.JLabel F3lbl = new javax.swing.JLabel();
	Square F4sq = new Square();
	javax.swing.JLabel F4lbl = new javax.swing.JLabel();
	Square F9sq = new Square();
	javax.swing.JLabel F9lbl = new javax.swing.JLabel();
	javax.swing.JLabel F1action = new javax.swing.JLabel();
	javax.swing.JLabel F2action = new javax.swing.JLabel();
	javax.swing.JLabel F3action = new javax.swing.JLabel();
	javax.swing.JLabel F4action = new javax.swing.JLabel();
	javax.swing.JLabel F9action = new javax.swing.JLabel();
	javax.swing.JLabel msgLabel = new javax.swing.JLabel();
	Square F11sq = new Square();
	javax.swing.JLabel F11lbl = new javax.swing.JLabel();
	Square F12sq = new Square();
	javax.swing.JLabel F12lbl = new javax.swing.JLabel();
	javax.swing.JLabel F11action = new javax.swing.JLabel();
	javax.swing.JLabel F12action = new javax.swing.JLabel();
	javax.swing.JLabel recCountLbl = new javax.swing.JLabel();
	javax.swing.border.TitledBorder titledBorder1 = new javax.swing.border.TitledBorder("");
	javax.swing.border.TitledBorder titledBorder2 = new javax.swing.border.TitledBorder("");
	javax.swing.JLabel JLabel9 = new javax.swing.JLabel();
	javax.swing.JTextField mergeRetain = new javax.swing.JTextField();
	javax.swing.JLabel JLabel10 = new javax.swing.JLabel();
	javax.swing.JTextField mergeRemove = new javax.swing.JTextField();
	javax.swing.JLabel payerMergeLbl = new javax.swing.JLabel();
	javax.swing.JOptionPane mergeConfirm = new javax.swing.JOptionPane();
	//}}

	//{{DECLARE_MENUS
	//}}

	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == CarrierForm.this)
				CarrierForm_keyPressed(event);
			else if (object == cName)
				cName_keyPressed(event);
			else if (object == cAddress1)
				cAddress1_keyPressed(event);
			else if (object == cAddress2)
				cAddress2_keyPressed(event);
			else if (object == cCity)
				cCity_keyPressed(event);
			else if (object == cState)
				cState_keyPressed(event);
			else if (object == cZip)
				cZip_keyPressed(event);
			else if (object == cPhone)
				cPhone_keyPressed(event);
			else if (object == cFax)
				cFax_keyPressed(event);
			else if (object == cBillingChoice)
				cBillingChoice_keyPressed(event);
			else if (object == eBilling)
				eBilling_keyPressed(event);
			else if (object == cIDNum)
				cIDNum_keyPressed(event);
			else if (object == cTPP)
				cTPP_keyPressed(event);
			else if (object == cPayerID)
				cPayerID_keyPressed(event);
			else if (object == mergeRetain)
				mergeRetain_keyPressed(event);
			else if (object == mergeRemove)
				mergeRemove_keyPressed(event);
			else if (object == cStatus)
				cStatus_keyPressed(event);
			else if (object == cProviderID)
				cProviderID_keyPressed(event);
			
			
		}

		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == cIDNum)
				cIDNum_keyTyped(event);
			else if (object == cName)
				cName_keyTyped(event);
			else if (object == cAddress1)
				cAddress1_keyTyped(event);
			else if (object == cAddress2)
				cAddress2_keyTyped(event);
			else if (object == cCity)
				cCity_keyTyped(event);
			else if (object == cState)
				cState_keyTyped(event);
			else if (object == cZip)
				cZip_keyTyped(event);
			else if (object == cPhone)
				cPhone_keyTyped(event);
			else if (object == cFax)
				cFax_keyTyped(event);
			else if (object == cBillingChoice)
				cBillingChoice_keyTyped(event);
			else if (object == eBilling)
				eBilling_keyTyped(event);
			else if (object == cTPP)
				cTPP_keyTyped(event);
			else if (object == cPayerID)
				cPayerID_keyTyped(event);
			else if (object == mergeRetain)
				mergeRetain_keyTyped(event);
			else if (object == mergeRemove)
				mergeRemove_keyTyped(event);
			else if (object == cStatus)
				cStatus_keyTyped(event);
			else if (object == cProviderID)
				cProviderID_keyTyped(event);
			
			
		}
	}

	void cIDNum_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event,5);
	}

	void cName_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,128);
	}

	void cAddress1_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,64);
	}

	void cAddress2_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,64);
	}

	void cCity_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,32);
	}

	void cState_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,2);
	}
	
	public boolean requiredField(JTextArea field, String fn)  {
	    boolean rv=true;
	    String msg;
	    if (field.getText().length()==0)  {
	        msg="Required Field: ["+fn+"]";
	        Utils.createErrMsg(msg);
	        field.requestFocus();
	        rv=false;
        }	        
        return (rv);
    }        	    

	class SymFocus extends java.awt.event.FocusAdapter
	{
		public void focusGained(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			Utils.deselect(event);
			if (object == cTPP)
				cTPP_focusGained(event);
			if (object == cBillingChoice)
				cBillingChoice_focusGained(event);
		}
	}

	public void setEnableAllFields(boolean eVal) {
	    
	    // commented out to disable bottom half for now
	    /*
	    if (!hasParent) cBillingChoice.setEnabled(eVal);
	    else cBillingChoice.setEnabled(false);
	    cTPP.setEnabled(eVal);
	    */
	    cBillingChoice.setEnabled(false);
	    cTPP.setEnabled(false);
	    // END DISABLE BOTTOM HALF
	    
	    cIDNum.setEnabled(eVal);
	    cName.setEnabled(eVal);
	    cAddress1.setEnabled(eVal);
	    cAddress2.setEnabled(eVal);
	    cCity.setEnabled(eVal);
	    cState.setEnabled(eVal);
	    cZip.setEnabled(eVal);
	    cPhone.setEnabled(eVal);
	    cFax.setEnabled(eVal);
	    cStatus.setEnabled(eVal);
	    //DISABLE BOTTOM HALF
	    /*
	    eBilling.setEnabled(eVal);
	    cPayerID.setEnabled(eVal);
	    */
	    eBilling.setEnabled(false);
	    cPayerID.setEnabled(false);
	    // END DISABLE BOTTOM HALF
	    setEnableEBillFields(eVal);
	    mergeRetain.setEnabled(false);
	    mergeRemove.setEnabled(false);
    }	    
 
    public void clearForm() {
	    cIDNum.setText(null);
	    cName.setText(null);
	    cAddress1.setText(null);
	    cAddress2.setText(null);
	    cCity.setText(null);
	    cState.setText(null);
	    cZip.setText(null);
	    cPhone.setText(null);
	    cFax.setText(null);
	    cStatus.setText("A");
	    cPayerID.setText(null);
	    cProviderID.setText(null);
	    //eBilling.setText(null);
	    eBilling.setText("N");
	    cBillingChoice.setText(null);
	    cTPP.setText(null);
	    recCountLbl.setText(null);
	    recCountLbl.setVisible(false);
	    //DISABLE BOTTOM HALF - FORCE BC="OI"
	    //if (hasParent) cBillingChoice.setText("OI");
	    cBillingChoice.setText("OI");
	    mergeRetain.setText(null);
	    mergeRemove.setText(null);
    }        
    
    public void resetCarrierForm() {
        msgLabel.setText(null);
        carrierComments.setText(null);
        setEnableAllFields(false);
        clearForm();
        resetColors();
        msgLabel.requestFocus();
        fKeys.off();
        fKeys.keyOn(fKeys.F1);
        fKeys.keyOn(fKeys.F2);
        fKeys.keyOn(fKeys.F9);
        currMode=Lab.IDLE;
        cRec.reset();
	    cRecVect = new Vector();
	    cVectNdx=0;
	    cVectSize=0;
	    retain=0;
	    remove=0;
	    updateBilling=false;
    }

	void CarrierForm_keyPressed(java.awt.event.KeyEvent event)
	{
		int key = event.getKeyCode();
        msgLabel.setText(null);
		switch (key)  {
            case KeyEvent.VK_CONTROL:
                ((JTextField)getFocusOwner()).setText(null);
                break;
            case KeyEvent.VK_DOWN:                
                cVectNdx++;
                if (cVectNdx==cVectSize) {
                    msgLabel.setText("Bottom of List");
                    cVectNdx--;
                }
                else fillForm();
                break;
            case KeyEvent.VK_UP:
                cVectNdx--;
                if (cVectNdx<0) {
                    msgLabel.setText("Top of List");
                    cVectNdx++;
                }
                else fillForm();
                break;
            case KeyEvent.VK_HOME:
                cVectNdx=0;
                fillForm();
                break;
            case KeyEvent.VK_END:
                cVectNdx=cVectSize-1;
                fillForm();
                break;
		}
	}
	
	public void mergeActions()
	{
	    resetCarrierForm();
	    setEnableAllFields(false);
	    currMode=Lab.MERGE;
	    mergeRetain.setEnabled(true);
	    mergeRemove.setEnabled(true);
	    mergeRetain.requestFocus();
	}
	
	public void selectActions() {
        if (hasParent) {
            if (formMode==LAB) {
                parent.labRec.carrier_id=cRec.carrier_id;
                parent.labOtherInsurance.setText(cRec.name);
                parent.labPayerID.setText(cRec.payer_id);
                parent.labPCSID.setText(Integer.toString(cRec.id_number));
                parent.labBillingID.requestFocus();
                parent.checkCarrier=false;
                parent.labRec.payer_id=cRec.payer_id;
                parent.labRec.pcs_payer_id=cRec.id_number;
            }
            else if (formMode==BILL) {
                bParent.labRec.carrier_id=cRec.carrier_id;
                bParent.labOtherInsurance.setText(cRec.name);
                bParent.labPayerID.setText(cRec.payer_id);
                bParent.labPCSID.setText(Integer.toString(cRec.id_number));
                bParent.labBillingID.requestFocus();
                bParent.checkCarrier=false;
            }
            closingActions();
        }
        else Utils.createErrMsg("F11 Key not available");
    }
	
	public void queryActions() {
	    resetCarrierForm();
	    currMode=Lab.QUERY;
	    setEnableAllFields(false);
	    fKeys.off();
	    fKeys.keyOn(fKeys.F9);
	    fKeys.keyOn(fKeys.F12);
	    autoQuery=false;
	    cIDNum.setEnabled(true);
	    cName.setEnabled(true);
	    cPayerID.setEnabled(true);
	    cIDNum.setBackground(Color.white);
	    cIDNum.setForeground(Color.black);
	    cName.setBackground(Color.white);
	    cName.setForeground(Color.black);
	    cPayerID.setBackground(Color.white);
	    cPayerID.setForeground(Color.black);
	    cName.requestFocus();
	}
	
	public void addActions() {
	    clearForm();
	    setEnableAllFields(true);
	    cIDNum.setEnabled(false);
	    if (!updateBilling) setEnableEBillFields(false);
	    cDbOps.getNextID();
	    fKeys.off();
	    fKeys.keyOn(fKeys.F9);
	    fKeys.keyOn(fKeys.F12);
	    fKeys.keyOn(fKeys.F8);
	    cName.requestFocus();
	}

	public void fillRecord() {
	    cRec.name=cName.getText();
	    cRec.address1=cAddress1.getText();
	    cRec.address2=cAddress2.getText();
	    cRec.city=cCity.getText();
	    cRec.state=cState.getText();
	    cRec.zip=Utils.stripZipMask(cZip.getText());
	    cRec.phone=Utils.stripPhoneMask(cPhone.getText());
	    cRec.fax=Utils.stripPhoneMask(cFax.getText());
	    cRec.active_status=cStatus.getText();
	    cRec.id_number=Integer.parseInt(cIDNum.getText());
	    cRec.tpp=cTPP.getText();
	    cRec.e_billing=eBilling.getText();
	    cRec.comment_text=carrierComments.getText();
	    for (int i=0; i<dbLogin.billingCodeVect.size(); i++) {
	        BillingCodeRec bCode = 
	            (BillingCodeRec)dbLogin.billingCodeVect.elementAt(i);
	        if (bCode.choice_code.equals(cBillingChoice.getText())) {
	            cRec.billing_choice=bCode.billing_choice;
	            break;
	        }
	    }
	    cRec.payer_id=cPayerID.getText();
	    cRec.provider_id=cProviderID.getText();
    }	    
    
    public void finalActions() {
        boolean success;
        if (currMode==Lab.ADD) {
            fillRecord();
            success=cDbOps.add();
            if (!success) {
                Utils.createErrMsg("Add Operation Failed");
                fKeys.off();
            }
            else {
                msgLabel.setText("Operation Succeeded");  
                cRecVect = new Vector();
                cRecVect.addElement(cRec);
                cVectNdx=0;
                cVectSize=1;
                if (hasParent) { 
                    selectActions();
                    return;
                }
            }
            setEnableAllFields(false);
            msgLabel.requestFocus();
            fKeys.keyOff(fKeys.F12);
            currMode=Lab.IDLE;
        }
        else if (currMode==Lab.MERGE) {
            int rv = mergeConfirm.showConfirmDialog(this,"Merge payers "+retain+" and "+remove+"?",
                "Payer Merge",mergeConfirm.YES_NO_OPTION,mergeConfirm.QUESTION_MESSAGE);
            if (rv!=mergeConfirm.YES_OPTION) { 
		        resetCarrierForm();
		        return;
            }
            success=cDbOps.merge();
            if (success) {
                int id_save = retain;
                resetCarrierForm();
                cIDNum.setText(Integer.toString(id_save));
                success=cDbOps.query();
                if (success) {
                    fillForm();
                    msgLabel.setText("Merge Operation Succeeded");
                    resetColors();
                    fKeys.keyOn(fKeys.F3);
                    if (hasParent) fKeys.keyOn(fKeys.F11);
                    cVectNdx=0;
                }
            }
            if (!success) msgLabel.setText("Merge Operation Failed");
        }
        else if (currMode==Lab.QUERY) {
            success=cDbOps.query();
            if (!success) msgLabel.setText("Query Operation Failed");
            else {
                fillForm();
                msgLabel.setText("Operation Succeeded");
                resetColors();
                fKeys.keyOn(fKeys.F3);
                if (hasParent) fKeys.keyOn(fKeys.F11);
                //cRecVect = new Vector();
                //cRecVect.addElement(cRec);
                cVectNdx=0;
                //cVectSize=1;
            }
            setEnableAllFields(false);
            msgLabel.requestFocus();
            currMode=Lab.IDLE;
        }
        else if (currMode==Lab.UPDATE) {
            fillRecord();
            success=cDbOps.update();
            if (success==false)
                msgLabel.setText("Update Operation Failed");
            else {
                msgLabel.setText("Operation Succeeded");  
                resetColors();
                if (hasParent) {
                    fKeys.keyOn(fKeys.F11);
                    selectActions();
                    return;
                }
            }
            setEnableAllFields(false);
            msgLabel.requestFocus();
            fKeys.keyOff(fKeys.F12);
            currMode=Lab.IDLE;
        }
        
    }
    
    public void fillForm() {
        clearForm();
        cRec = (CarrierRec)cRecVect.elementAt(cVectNdx);
        for (int i=0; i<dbLogin.billingCodeVect.size(); i++) {
            BillingCodeRec bCode = 
                (BillingCodeRec)dbLogin.billingCodeVect.elementAt(i);
            if (bCode.billing_choice==cRec.billing_choice) {
                cBillingChoice.setText(bCode.choice_code);
                break;
            }
        }
        cName.setText(cRec.name);
        if (!Utils.isNull(cRec.address1))
            cAddress1.setText(cRec.address1);
        else cAddress1.setText(null);
        if (!Utils.isNull(cRec.address2))
            cAddress2.setText(cRec.address2);
        else cAddress2.setText(null);
        if (!Utils.isNull(cRec.city))
            cCity.setText(cRec.city);
        else cCity.setText(null);
        if (!Utils.isNull(cRec.state))
            cState.setText(cRec.state);
        else cState.setText(null);
        if (!Utils.isNull(cRec.zip))
            cZip.setText(Utils.addZipMask(cRec.zip));
        else cZip.setText(null);
        if (!Utils.isNull(cRec.phone))
            cPhone.setText(Utils.addPhoneMask(cRec.phone));
        else cPhone.setText(null);
        if (!Utils.isNull(cRec.fax))
            cFax.setText(Utils.addPhoneMask(cRec.fax));
        else cFax.setText(null);
        cStatus.setText(cRec.active_status);
        carrierComments.setText(cRec.comment_text);
        eBilling.setText(cRec.e_billing);
        cIDNum.setText(Integer.toString(cRec.id_number));
        cTPP.setText(cRec.tpp);
        cPayerID.setText(cRec.payer_id);
        cProviderID.setText(cRec.provider_id);
        recCountLbl.setText(" "+(cVectNdx+1)+" of "+cVectSize);
        recCountLbl.setVisible(true);
        this.repaint();
        if (currMode==Lab.MERGE) {
            mergeRetain.setText(Integer.toString(retain));
            mergeRemove.setText(Integer.toString(remove));
        }
    }

	class SymWindow extends java.awt.event.WindowAdapter
	{   public void windowClosing(java.awt.event.WindowEvent event)
		{   Object object = event.getSource();
			if (object == CarrierForm.this)
				CarrierForm_windowClosing(event);
		}
	}

	void CarrierForm_windowClosing(java.awt.event.WindowEvent event)
	{
		closingActions();
	}
	
	public void resetColors() {
	    Utils.setColors(this.getContentPane());
	    msgLabel.setForeground((Color.green).brighter());
	    recCountLbl.setForeground(Color.white);
	    payerMergeLbl.setForeground(Color.white);
	}
	
	public void updateActions() {
	    setEnableAllFields(true);
System.out.println("updateBilling: "+updateBilling);	    
	    if (!updateBilling) setEnableEBillFields(false);
	    fKeys.off();
	    fKeys.keyOn(fKeys.F9);
	    fKeys.keyOn(fKeys.F12);
	    cIDNum.setEnabled(false);
	    cName.requestFocus();
	}
	
	void cName_keyPressed(java.awt.event.KeyEvent event)
	{
	    msgLabel.setText(null);
		if (event.getKeyChar()=='\r' || event.getKeyCode()==event.VK_ENTER) {
		    if (currMode==Lab.ADD || currMode==Lab.UPDATE) {
		        if (Utils.requiredField(cName,"Payer Name")) 
		            cName.transferFocus();
		    }
		    else cName.transferFocus();
		}
	}

	void cZip_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.buildZipMask(event);
	}

	void cPhone_keyTyped(java.awt.event.KeyEvent event)
	{
	    Utils.buildPhoneMask(event);
	}

	void cFax_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.buildPhoneMask(event);
	}
	
	void setEnableEBillFields(boolean eVal) 
	{
	    cBillingChoice.setEnabled(eVal);
	    eBilling.setEnabled(eVal);
	    cTPP.setEnabled(eVal);
	    cProviderID.setEnabled(eVal);
	    cPayerID.setEnabled(eVal);
	}

	void cTPP_focusGained(java.awt.event.FocusEvent event)
	{
		msgLabel.setText("F8 = Claims Processors (TPPs)");
	}

	void cBillingChoice_focusGained(java.awt.event.FocusEvent event)
	{
		msgLabel.setText("F8 = Billing Codes");
	}

	void cAddress1_keyPressed(java.awt.event.KeyEvent event)
	{
	    msgLabel.setText(null);
		if (event.getKeyCode()==event.VK_ENTER)
		    cAddress1.transferFocus();
	}

	void cAddress2_keyPressed(java.awt.event.KeyEvent event)
	{
	    msgLabel.setText(null);
		if (event.getKeyCode()==event.VK_ENTER)
		    cAddress2.transferFocus();
	}

	void cCity_keyPressed(java.awt.event.KeyEvent event)
	{
	    msgLabel.setText(null);
		if (event.getKeyCode()==event.VK_ENTER)
		    cCity.transferFocus();
	}

	void cState_keyPressed(java.awt.event.KeyEvent event)
	{
	    msgLabel.setText(null);
		if (event.getKeyCode()==event.VK_ENTER)
		    cState.transferFocus();
	}

	void cZip_keyPressed(java.awt.event.KeyEvent event)
	{
	    msgLabel.setText(null);
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (!Utils.isNull(cZip.getText())) 
		        cDbOps.getZipInfo(cZip.getText().substring(0,5));
		    cPhone.requestFocus();
		}
	}

	void cPhone_keyPressed(java.awt.event.KeyEvent event)
	{
	    msgLabel.setText(null);
		if (event.getKeyCode()==event.VK_ENTER)
		    cPhone.transferFocus();
	}

	void cFax_keyPressed(java.awt.event.KeyEvent event)
	{
	    msgLabel.setText(null);
		if (event.getKeyCode()==event.VK_ENTER)
		    cFax.transferFocus();
	}

	void cBillingChoice_keyPressed(java.awt.event.KeyEvent event)
	{
	    msgLabel.setText(null);
		if (event.getKeyCode()==event.VK_ENTER) {
		    boolean isCode = false;
		    for (int i=0; i<dbLogin.billingCodeVect.size(); i++) {   
		        BillingCodeRec bCode =
		            (BillingCodeRec)dbLogin.billingCodeVect.elementAt(i);
                if (bCode.choice_code.equals(cBillingChoice.getText())) {
                    isCode=true;
                    break;
                }
		    }
		    if (!isCode) 
		        Utils.createErrMsg(
		            "Billing Code "+cBillingChoice.getText()+" not valid");
		    else cBillingChoice.transferFocus();
		}
	}

	void cBillingChoice_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event);
	}

	void eBilling_keyPressed(java.awt.event.KeyEvent event)
	{
	    msgLabel.setText(null);
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.requiredField(eBilling,"E-Billing")) {
                //if (eBilling.getText().equals("Y"))
                    setEnableEBillFields(true);
                eBilling.transferFocus();
            }
		}
	}

	void eBilling_keyTyped(java.awt.event.KeyEvent event)
	{
		char c = event.getKeyChar();
		if (c!='Y' && c!='y' && c!='N' && c!='n' && c!='\r') {
		    event.consume();
		    return;
		}
		Utils.forceUpper(event,1);
	}

	void cIDNum_keyPressed(java.awt.event.KeyEvent event)
	{
	    msgLabel.setText(null);
		if (event.getKeyCode()==event.VK_ENTER)
		    cIDNum.transferFocus();
	}

	void cTPP_keyPressed(java.awt.event.KeyEvent event)
	{
	    msgLabel.setText(null);
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (eBilling.equals("Y") && Utils.requiredField(cTPP,"TPP")
		        ||eBilling.equals("N")) {
	            boolean isTPP = false;
		        for (int i=0; i<dbLogin.tppVect.size(); i++) {
		            TppRec tppRec = (TppRec)dbLogin.tppVect.elementAt(i);
		            if (tppRec.tpp.equals(cTPP.getText())) {
		                //tppName.setText(tppRec.tpp_name);
		                isTPP=true;
		                break;
		            }
		        }
		        if (!isTPP) Utils.createErrMsg("TPP "+cTPP.getText()+" does not exist");
		        else cTPP.transferFocus();
		    }
		}
	}

	void cTPP_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,3);
	}

	void cPayerID_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,32);
	}

	void cPayerID_keyPressed(java.awt.event.KeyEvent event)
	{
	    msgLabel.setText(null);
	    if (event.getKeyCode()==event.VK_ENTER)
	        if (currMode==Lab.ADD || currMode==Lab.UPDATE) {
                cPayerID.transferFocus();
	        }
		    else cPayerID.transferFocus();
	}
	

	void mergeRetain_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(mergeRetain,"Payer to retain"))
		        mergeRetain.transferFocus();
		}
	}

	void mergeRetain_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event);
	}

	void mergeRemove_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(mergeRemove,"Payer to remove")) {
		        retain=(int)Integer.parseInt(mergeRetain.getText());
		        remove=(int)Integer.parseInt(mergeRemove.getText());
		        getMergePair();
		    }
		}
	}

	void mergeRemove_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event);
	}
	
	void getMergePair()
	{
        boolean success=cDbOps.query();
        if (!success) msgLabel.setText("Query Operation Failed");
        else {
            fillForm();
            msgLabel.setText("Operation Succeeded");
            resetColors();
            fKeys.keyOn(fKeys.F12);
            cVectNdx=0;
        }
        setEnableAllFields(false);
        msgLabel.requestFocus();
	}
	
	void closingActions()
	{
	    cDbOps.close();
	    if (hasParent) log.write("EXITING CarriersForm");
	    else log.stop();
	    this.dispose();
	}

	void cStatus_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,1);
	}

	void cStatus_keyPressed(java.awt.event.KeyEvent event)
	{
	    msgLabel.setText(null);
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(cStatus,"Active/Inactive Status (A/I)")) {
		        String s = cStatus.getText();
		        if (s.equals("A") || s.equals("I")) cStatus.transferFocus();
		        else Utils.createErrMsg("Status must be A or I");
		    }
		}
	}

	void cProviderID_keyPressed(java.awt.event.KeyEvent event)
	{
	    msgLabel.setText(null);
	    if (event.getKeyCode()==event.VK_ENTER)
	        if (currMode==Lab.ADD || currMode==Lab.UPDATE) {
                cProviderID.transferFocus();
	        }
		    else cProviderID.transferFocus();
	}

	void cProviderID_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,32);
	}
	
}
