/*
		A basic implementation of the JFrame class.
*/

import java.awt.*;
import javax.swing.*;
import java.util.Vector;
import java.sql.*;
import Square;
import javax.swing.border.TitledBorder;

public class SecurityForm extends javax.swing.JFrame
{
    Login dbLogin;
    /*
    final int IDLE=100;
    final int QUERY=101;
    final int ADD=102;
    final int UPDATE=103;
    final int DELETE=104;
    */
    private int currMode = Lab.IDLE;
    //StringUtils format = new StringUtils();
    
	public SecurityForm()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("User Restrictions");
		getContentPane().setLayout(null);
		setSize(300,399);
		setVisible(false);
		getContentPane().add(F1sq);
		F1sq.setBounds(25,6,20,20);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F3");
		getContentPane().add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(29,6,20,20);
		getContentPane().add(F2sq);
		F2sq.setBounds(77,6,20,20);
		F2lbl.setRequestFocusEnabled(false);
		F2lbl.setText("F4");
		getContentPane().add(F2lbl);
		F2lbl.setForeground(java.awt.Color.black);
		F2lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F2lbl.setBounds(81,6,20,20);
		getContentPane().add(F3sq);
		F3sq.setBounds(129,6,20,20);
		F3lbl.setRequestFocusEnabled(false);
		F3lbl.setText("F9");
		getContentPane().add(F3lbl);
		F3lbl.setForeground(java.awt.Color.black);
		F3lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F3lbl.setBounds(133,6,20,20);
		getContentPane().add(F4sq);
		F4sq.setBounds(181,6,20,20);
		F4lbl.setRequestFocusEnabled(false);
		F4lbl.setText("F12");
		getContentPane().add(F4lbl);
		F4lbl.setForeground(java.awt.Color.black);
		F4lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F4lbl.setBounds(182,6,25,18);
		F2action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F2action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F2action.setText("Display");
		getContentPane().add(F2action);
		F2action.setForeground(java.awt.Color.black);
		F2action.setBounds(62,30,50,16);
		F3action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F3action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F3action.setText("Exit");
		getContentPane().add(F3action);
		F3action.setForeground(java.awt.Color.black);
		F3action.setBounds(114,30,50,16);
		F4action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F4action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F4action.setText("Submit");
		getContentPane().add(F4action);
		F4action.setForeground(java.awt.Color.black);
		F4action.setBounds(166,30,50,16);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("Update");
		getContentPane().add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(10,30,50,16);
		JLabel6.setRequestFocusEnabled(false);
		JLabel6.setText("Option Name");
		getContentPane().add(JLabel6);
		JLabel6.setBounds(20,88,100,14);
		objCode.setEnabled(false);
		getContentPane().add(objCode);
		objCode.setFont(new Font("DialogInput", Font.PLAIN, 12));
		objCode.setBounds(120,86,160,20);
		JLabel1.setRequestFocusEnabled(false);
		JLabel1.setText("Option Title");
		getContentPane().add(JLabel1);
		JLabel1.setBounds(20,112,100,14);
		objTitle.setEnabled(false);
		getContentPane().add(objTitle);
		objTitle.setFont(new Font("DialogInput", Font.PLAIN, 12));
		objTitle.setBounds(120,110,160,20);
		restrictUserPanel.setBorder(titledBorder1);
		restrictUserPanel.setLayout(null);
		getContentPane().add(restrictUserPanel);
		restrictUserPanel.setBounds(10,140,276,244);
		JScrollPane1.setOpaque(true);
		restrictUserPanel.add(JScrollPane1);
		JScrollPane1.setBounds(14,28,252,204);
		JScrollPane1.getViewport().add(userList);
		userList.setFont(new Font("DialogInput", Font.PLAIN, 10));
		userList.setBounds(0,0,249,201);
		titledBorder1.setTitleFont(new java.awt.Font("Dialog", java.awt.Font.PLAIN, 11));
		titledBorder1.setTitle("System Users");
		//$$ titledBorder1.move(0,404);
		getContentPane().add(msgLabel);
		msgLabel.setForeground(java.awt.Color.red);
		msgLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		msgLabel.setBounds(24,52,266,14);
		//}}
		
		titledBorder1.setTitleColor(Color.black);
		titledBorder1.setTitleFont(new java.awt.Font("Dialog",java.awt.Font.BOLD,12));

		//{{INIT_MENUS
		//}}
	
		//{{REGISTER_LISTENERS
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		//}}
	}

	public SecurityForm(String sTitle)
	{
		this();
		setTitle(sTitle);
	}
	
	public SecurityForm(Login dbLogin)
	{
	    this();
	    this.dbLogin=dbLogin;
        addUsers();
	}

	public SecurityForm(Login dbLogin, String oName, String oTitle)
	{
	    this();
	    this.dbLogin=dbLogin;
	    objCode.setText(oName);
	    objTitle.setText(oTitle);
        addUsers();
	}

	public void setVisible(boolean b)
	{
		if (b) setLocation(50,50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new SecurityForm()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		Insets insets = getInsets();
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	Square F1sq = new Square();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	Square F2sq = new Square();
	javax.swing.JLabel F2lbl = new javax.swing.JLabel();
	Square F3sq = new Square();
	javax.swing.JLabel F3lbl = new javax.swing.JLabel();
	Square F4sq = new Square();
	javax.swing.JLabel F4lbl = new javax.swing.JLabel();
	javax.swing.JLabel F2action = new javax.swing.JLabel();
	javax.swing.JLabel F3action = new javax.swing.JLabel();
	javax.swing.JLabel F4action = new javax.swing.JLabel();
	javax.swing.JLabel F1action = new javax.swing.JLabel();
	javax.swing.JLabel JLabel6 = new javax.swing.JLabel();
	javax.swing.JTextField objCode = new javax.swing.JTextField();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JTextField objTitle = new javax.swing.JTextField();
	javax.swing.JPanel restrictUserPanel = new javax.swing.JPanel();
	javax.swing.JScrollPane JScrollPane1 = new javax.swing.JScrollPane();
	javax.swing.JList userList = new javax.swing.JList();
	javax.swing.border.TitledBorder titledBorder1 = new javax.swing.border.TitledBorder();
	javax.swing.JLabel msgLabel = new javax.swing.JLabel();
	//}}

	//{{DECLARE_MENUS
	//}}


	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == SecurityForm.this)
				SecurityForm_keyPressed(event);
		}
	}

	void SecurityForm_keyPressed(java.awt.event.KeyEvent event)
	{
		int key = event.getKeyCode();
		msgLabel.setText(null);
		switch (key) {
		    case event.VK_F3:
		        changeStatus();
		        break;
		    case event.VK_F4:
		        displayRestrictions();
		        break;
		    case event.VK_F9:
		        closingActions();
		        break;
		    case event.VK_F12:
		        setRestrictions();
		        break;
            case event.VK_DOWN:
                increment();
                break;
            case event.VK_UP:
                decrement();
                break;
		}
	}
	
	void displayRestrictions()
	{
	    UserRec uRec = (UserRec)dbLogin.userVect.elementAt(
	        userList.getSelectedIndex());
	    Vector v = getRestrictions(uRec.user_id);
	    if (v.size()==0) Utils.createErrMsg("No restrictions for user "+uRec.username);
	    else {
	        String s[] = new String[v.size()];
	        for (int i=0; i<v.size(); i++) 
	            s[i]=(String)v.elementAt(i);
            (new PickList("Restrictions for "+uRec.username,270,80,264,130,
                v.size(),s)).setVisible(true);
	        
	    }
	}
	
	void increment()
	{
	    int sNdx = userList.getSelectedIndex();
	    if (++sNdx>=dbLogin.userVect.size()) sNdx--;
	    userList.setSelectedIndex(sNdx);
	}
	
	void decrement()
	{
	    int sNdx = userList.getSelectedIndex();
	    if (--sNdx<0) sNdx++;
	    userList.setSelectedIndex(sNdx);
	}
	
	void addUsers()
	{
	    Vector users = new Vector();
	    for (int i=0; i<dbLogin.userVect.size(); i++) {
	        UserRec u = (UserRec)dbLogin.userVect.elementAt(i);
	        if (hasRestriction(u.user_id,objCode.getText()))
	            users.addElement("R     "+u.username);
	        else
	            users.addElement("      "+u.username);
	    }
	    userList.setListData(users);
	    userList.setSelectedIndex(0);
	}
	
	void changeStatus()
	{
	    Vector uVect = new Vector();
	    int sNdx = userList.getSelectedIndex();
	    StringBuffer sVal = new StringBuffer((String)userList.getSelectedValue());
        char c = sVal.charAt(0);
		if (c=='R') c=' ';
		else c='R';
		sVal.setCharAt(0,c);
	    for (int i=0; i<dbLogin.userVect.size(); i++) {
	        userList.setSelectedIndex(i);
	        if (i==sNdx) 
		        uVect.addElement(sVal.toString());
		    else 
		        uVect.addElement((String)userList.getSelectedValue());
		}
        userList.removeAll();
        userList.setListData(uVect);
        userList.setSelectedIndex(sNdx);
	}
	
	boolean hasRestriction(int uid, String objectName)
	{
	    boolean restricted = false;
	    try {
	        String SQL =
	            "SELECT count(*) FROM pcs.user_restrictions \n"+
	            "WHERE user_id = ? AND object_name = ? \n";
            PreparedStatement pstmt = dbConnection.process().prepareStatement(SQL);
            pstmt.setInt(1,uid);
            pstmt.setString(2,objectName);
            ResultSet rs = pstmt.executeQuery();
            int count = 0;
            while (rs.next()) { count = rs.getInt(1); }
            try { rs.close(); pstmt.close(); }
            catch (Exception e) { }
            if (count>0) restricted=true;
	    }
	    catch (Exception e) { }
	    return (restricted);
	}
	
	Vector getRestrictions(int uid)
	{
	    Vector v = new Vector();
	    try {
	        String SQL =
	            "SELECT object_name FROM pcs.user_restrictions \n"+
	            "WHERE user_id = ? ORDER BY object_name \n";
            PreparedStatement pstmt = dbConnection.process().prepareStatement(SQL);
            pstmt.setInt(1,uid);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) { v.addElement(rs.getString(1)); }
            try { rs.close(); pstmt.close(); }
            catch (Exception e) { }
	    }
	    catch (Exception e) { }
	    return (v);
	}
	
	void setRestrictions()
	{
	    String SQL = null;
	    try {
	        for (int i=0; i<dbLogin.userVect.size(); i++) {
	            UserRec uRec = (UserRec)dbLogin.userVect.elementAt(i);
	            boolean restricted = hasRestriction(uRec.user_id,objCode.getText());
	            userList.setSelectedIndex(i);
		        StringBuffer sVal = new StringBuffer((String)userList.getSelectedValue());
                char c = sVal.charAt(0);
		        if (c=='R' && !restricted) {
		            SQL = 
		                "INSERT INTO pcs.user_restrictions VALUES (?,?)";
                    PreparedStatement pstmt = dbConnection.process().prepareStatement(SQL);
                    pstmt.setInt(1,uRec.user_id);
                    pstmt.setString(2,objCode.getText());
                    pstmt.execute();
                    try { pstmt.close(); }
                    catch (Exception e) { }
		        }
		        else if (c!='R' && restricted) {
		            SQL = 
		                "DELETE FROM pcs.user_restrictions \n"+
		                "WHERE user_id = ? and object_name = ? \n";
                    PreparedStatement pstmt = dbConnection.process().prepareStatement(SQL);
                    pstmt.setInt(1,uRec.user_id);
                    pstmt.setString(2,objCode.getText());
                    pstmt.execute();
                    try { pstmt.close(); }
                    catch (Exception e) { }
		        }
		    }
        }
	    catch (Exception e) { }
	    msgLabel.setText("Restrictions Updated");
	}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == SecurityForm.this)
				SecurityForm_windowClosing(event);
		}
	}

	void SecurityForm_windowClosing(java.awt.event.WindowEvent event)
	{
		closingActions();
	}
	
	void closingActions()
	{
	    this.dispose();
	}
	
}
