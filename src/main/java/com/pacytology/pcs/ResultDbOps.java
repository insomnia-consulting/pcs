package com.pacytology.pcs;/*    PENNSYLVANIA CYTOLOGY SERVICES    LABORATORY INFORMATION SYSTEM V1.0    Copyright (C) 2001 by John Cardella    All Rights Reserved        File:       ResultDbOps.java    Created By: John Cardella, Software Engineer        Function:   Database operations for result form. Implemented    as a runnable interface.  Add and update operations are    executed as threads.  Only one add/update thread will be    running, while user enters next set of data.        MODIFICATIONS ----------------------------------    Date/Staff      Description:    09/17           Changed db access in all methods                    to use dbConnection class                    connection rather than having                    separate one within this method*/import java.lang.*;import java.sql.*;import java.util.Vector;public class ResultDbOps implements Runnable{    Thread dbThread;    int tMode;    ResultForm parent;    Vector tLabResults = new Vector();    Vector tQCResults = new Vector();    Vector tPathResults = new Vector();    ResultRec tResultRec;    final int INIT=(-1);    final int IDLE=100;    final int ADD=102;    final int UPDATE=103;        // Detail code for hormonal evaluation requested     final int MAT_INDEX_DETAIL_CODE=12;        public ResultDbOps(ResultForm p) {         parent = p;         tResultRec = new ResultRec();    }    public synchronized void run() {        if (tMode==ADD) add();        else if (tMode==UPDATE) update();        else if (tMode==INIT) {            parent.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));            queryAllTechs();            queryAllPaths();            queryResultCodes();            parent.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));        }        parent.dbThreadRunning=false;    }        public void resultFormInit() {        parent.setMsgLabel("INITIALIZING ...");        tMode=INIT;        parent.dbThreadRunning=true;        dbThread = new Thread(this);        dbThread.setPriority(Thread.MAX_PRIORITY);        dbThread.start();    }        synchronized void DB_action() {        parent.dbThreadRunning=true;        dbThread = new Thread(this);        dbThread.setPriority(Thread.MAX_PRIORITY);        dbThread.start();    }    public void DB_prep() {        tMode=parent.currMode;        copyResultData();    }        public boolean query(int lnum) {        boolean exitStatus=true;        try  {            String SQL = new String(                 "SELECT \n"+                "   TO_CHAR(lab.date_collected,'MMDDYYYY'), \n"+                "   lab.patient, \n"+                "   lab.practice, \n"+                "   lab.doctor, \n"+                "   lab.billing_choice, \n"+                "   pat.last_lab, \n"+                "   pat.lname, \n"+                "   pat.fname, \n"+                "   pat.address1, \n"+                "   pat.city, \n"+                "   pat.state, \n"+                "   pat.zip, \n"+                "   pat.ssn, \n"+                "   TO_CHAR(pat.dob,'MMDDYYYY'), \n"+                "   pat.phone, \n"+                "   bc.choice_code, \n"+                "   dr.lname, \n"+                "   dr.fname, \n"+                "   NULL, \n"+                 "   lab.finished, \n"+                "   pr.name, \n"+                "   lab.preparation, \n"+                "   lab.previous_lab, \n"+                "   lab.slide_qty, \n"+                "   NVL(f.in_queue,-1), \n"+                "   TO_CHAR(lab.receive_date,'MMDDYYYY'), \n"+                "   pr.phone, \n"+                "   TO_NUMBER(TO_CHAR(SysDate,'YYYYMMDD')), \n"+                "   lab.lmp, \n"+                "   pr.practice_type, \n"+                "   pat.mi \n"+                "FROM \n"+                "   pcs.lab_requisitions lab, \n"+                "   pcs.patients pat, \n"+                "   pcs.doctors dr, \n"+                "   pcs.billing_choices bc, \n"+                "   pcs.practices pr, \n"+                "   pcs.fax_letters f \n"+                "WHERE \n"+                "   lab.patient=pat.patient and \n"+                "   lab.doctor=dr.doctor and \n"+                "   lab.practice=pr.practice and \n"+                "   lab.billing_choice=bc.billing_choice and \n"+                "   lab.lab_number=f.lab_number(+) and \n"+                "   bc.active_status='A' and \n"+                "   lab.lab_number="+lnum+" \n");                        parent.log.write("Query("+lnum+") MODE: "+parent.currMode);            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(SQL);            int rowsReturned=0;            String LMP = null;            while (rs.next()) {                parent.resultRec.date_collected=rs.getString(1);                parent.resultRec.patient=rs.getInt(2);                parent.resultRec.practice=rs.getInt(3);                parent.resultRec.doctor=rs.getInt(4);                parent.resultRec.billing_choice=rs.getInt(5);                String f7=rs.getString(7);                if (rs.wasNull()) f7=" ";                String f8=rs.getString(8);                if (rs.wasNull()) f8=" ";                parent.resultRec.pat_lname=f7;                parent.resultRec.pat_fname=f8;                parent.resultRec.patient_name=f7.trim()+", "+f8.trim();                String f9=rs.getString(9);                if (rs.wasNull()) f9=" ";                String f10=rs.getString(10);                if (rs.wasNull()) f10=" ";                String f11=rs.getString(11);                if (rs.wasNull()) f11=" ";                String f12=rs.getString(12);                if (rs.wasNull()) f12=" ";                parent.resultRec.address=f9.trim()+", "+f10.trim()+", "+f11.trim()+" "+f12;                parent.resultRec.ssn=rs.getString(13);                parent.resultRec.dob=rs.getString(14);                parent.resultRec.phone=rs.getString(15);                parent.resultRec.choice_code=rs.getString(16);                String f17=rs.getString(17);                if (rs.wasNull()) f17=" ";                String f18=rs.getString(18);                if (rs.wasNull()) f18=" ";                parent.resultRec.dr_name=f17.trim()+", "+f18.trim();                parent.resultRec.lab_comments=rs.getString(19);                parent.resultRec.finished=rs.getInt(20);                parent.resultRec.practice_name=rs.getString(21);                parent.resultRec.preparation=rs.getInt(22);                parent.resultRec.prev_lab_number=rs.getInt(23);                parent.resultRec.slide_qty=rs.getInt(24);                parent.resultRec.fax_letter=rs.getInt(25);                parent.resultRec.receive_date=rs.getString(26);                parent.resultRec.practice_phone=rs.getString(27);                parent.resultRec.iDatestamp=rs.getInt(28);                LMP=rs.getString(29);                parent.resultRec.practice_type=rs.getString(30);                parent.resultRec.pat_mi=rs.getString(31);                rowsReturned++;            }                   rs.close(); stmt.close();            if (rowsReturned>0) {                if (!Utils.isNull(LMP)) {                    char[] c = LMP.toCharArray();                    for (int i=0; i<c.length; i++) {                        if ((c[i]>='a'&&c[i]<='z')||(c[i]>='A'&&c[i]<='Z')) {                            parent.resultRec.LMP=LMP;                            break;                        }                    }                }                SQL = new String(                    "SELECT TO_CHAR(datestamp,'MM/DD/YYYY'),test_sent, \n"+                    "   test_results,TO_CHAR(results_received,'MM/DD/YYYY'), \n"+                    "   hpv_lab \n"+                    "FROM pcs.hpv_requests WHERE lab_number="+lnum+" \n");                stmt=DbConnection.process().createStatement();                rs=stmt.executeQuery(SQL);                while (rs.next()) {                     String ds = rs.getString(1);                    String sent = rs.getString(2);                    String results = rs.getString(3);                    String received = rs.getString(4);                    String lab = rs.getString(5);                    parent.resultRec.HPV_info = "HPV Test Requested";                    if (!Utils.isNull(results))                        parent.resultRec.HPV_info +=                            ": Results ["+results+"] received "+received;                    else if (!Utils.isNull(sent)) {                        if (sent.equals("R"))                            parent.resultRec.HPV_info +=                                ": Requisition awaiting printing";                        else if (sent.equals("P"))                            parent.resultRec.HPV_info +=                                ": Results pending";                        else if (sent.equals("Y"))                            parent.resultRec.HPV_info +=                                ": Test sent "+ds;                        else if (sent.equals("Q"))                            parent.resultRec.HPV_info +=                                ": Quantity Not Sufficient";                        else                            parent.resultRec.HPV_info +=                                ": Test not sent";                    }                    if (!Utils.isNull(lab))                        parent.resultRec.HPV_info+=" from "+lab;                }                rs.close(); stmt.close();                SQL = new String(                    "SELECT count(*) \n"+                    "FROM pcs.lab_req_details \n"+                    "WHERE lab_number="+lnum+" \n"+                    "AND detail_code="+MAT_INDEX_DETAIL_CODE+" \n");                stmt=DbConnection.process().createStatement();                rs=stmt.executeQuery(SQL);                while (rs.next()) { parent.matIndexRequested=rs.getInt(1); }                rs.close(); stmt.close();                SQL = new String(                    "SELECT da.comment_text \n"+                    "FROM pcs.lab_req_details d, \n"+                    "   pcs.lab_req_details_additional da \n"+                    "WHERE d.lab_number="+lnum+" \n"+                    "AND d.detail_id=da.detail_id \n"+                    "AND d.detail_code=48 \n");                stmt=DbConnection.process().createStatement();                rs=stmt.executeQuery(SQL);                while (rs.next()) { parent.resultRec.Hx_comment=rs.getString(1); }                rs.close(); stmt.close();                if (parent.currMode!=Lab.ADD) {                       SQL = new String(                        "SELECT \n"+                        "   TO_CHAR(lr.date_completed,'MMDDYYYY'), \n"+                        "   c.cytotech_code, \n"+                        "   lr.pathologist, \n"+                        "   lrc.comment_text, \n"+                        "   lr.qc_status, \n"+                        "   TO_CHAR(lr.datestamp,'MMDDYYYY'), \n"+                        "   lr.first_print, \n"+                        "   NVL(lr.pap_class,0), \n"+                        "   lr.path_status, \n"+                        "   TO_CHAR(ph.submitted,'MM/DD/YYYY'), \n"+                        "   TO_CHAR(ph.released,'MM/DD/YYYY'), \n"+                        "   lr.biopsy_code, \n"+                        "   TO_CHAR(lr.datestamp,'MM/DD/YY HH:Mi'), lr.sys_user, \n"+                        "   TO_CHAR(lr.change_date,'MM/DD/YY HH:Mi'), lr.change_user \n,"+                        "   TO_NUMBER(TO_CHAR(lr.datestamp,'YYYYMMDD')), \n"+                        "   p.description, \n"+                        "   ph.verified_by, \n"+                        "   TO_CHAR(ph.verified_on,'MM/DD/YYYY') \n"+                        "FROM \n"+                        "   pcs.lab_results lr, \n"+                        "   pcs.pathologist_holds ph, \n"+                        "   pcs.lab_result_comments lrc, \n"+                        "   pcs.cytotechs c, \n"+                        "   pcs.pap_classes p \n"+                        "WHERE \n"+                        "   lr.lab_number=lrc.lab_number(+) and \n"+                        "   lr.lab_number=ph.lab_number(+) and \n"+                        "   c.cytotech=lr.cytotech(+) and \n"+                        "   lr.pap_class=p.pap_class and \n"+                        "   lr.lab_number="+lnum+" \n");                    stmt=DbConnection.process().createStatement();                    rs=stmt.executeQuery(SQL);                    rowsReturned=0;                    while (rs.next()) {                        rowsReturned++;                        parent.resultRec.date_completed=rs.getString(1);                        parent.resultRec.cytotech_code=rs.getString(2);                        parent.resultRec.pathologist=rs.getString(3);                        parent.resultRec.comment_text=rs.getString(4);                        parent.resultRec.qc_status=rs.getString(5);                        parent.resultRec.datestamp=rs.getString(6);                        parent.resultRec.first_print=rs.getInt(7);                        parent.resultRec.pap_class=rs.getInt(8);                        parent.resultRec.path_status=rs.getString(9);                        parent.resultRec.submitted=rs.getString(10);                        parent.resultRec.released=rs.getString(11);                        parent.resultRec.biopsy_code=rs.getString(12);                        parent.resultRec.create_date=rs.getString(13);                        int uid = rs.getInt(14);                        parent.resultRec.create_user=parent.dbLogin.getUserName(uid);                        parent.resultRec.change_date=rs.getString(15);                        uid=rs.getInt(16);                        parent.resultRec.change_user=parent.dbLogin.getUserName(uid);                        parent.resultRec.iDatestamp=rs.getInt(17);                        parent.resultRec.p_descr=rs.getString(18);                        parent.resultRec.verified_by=rs.getString(19);                        parent.resultRec.verified_on=rs.getString(20);                    }                    rs.close(); stmt.close();                    if (rowsReturned>0) {                        Vector scrResults = new Vector();                        Vector qcResults = new Vector();                        Vector pathResults = new Vector();                        SQL = new String(                            "SELECT bethesda_code FROM pcs.lab_result_codes \n"+                            "WHERE lab_number = "+lnum+" \n"+                            "ORDER BY rowid \n");                        parent.numSCR=0;                        parent.NUM_RESULTS=0;                        stmt=DbConnection.process().createStatement();                        rs=stmt.executeQuery(SQL);                        while (rs.next()) {                            scrResults.addElement(rs.getString(1));                            parent.numSCR++;                            parent.NUM_RESULTS++;                        }                        rs.close(); stmt.close();                        if (parent.resultRec.qc_status.equals("Y")) {                            parent.hasQC=true;                            SQL = new String(                                "SELECT \n"+                                "   qcc.bethesda_code, \n"+                                "   TO_CHAR(qc.qc_date,'MMDDYYYY'), \n"+                                "   qc.cytotech,c.cytotech_code \n"+                                "FROM \n"+                                "   pcs.quality_control_codes qcc, \n"+                                "   pcs.quality_control qc, \n"+                                "   pcs.cytotechs c \n"+                                "WHERE \n"+                                "   qcc.lab_number=qc.lab_number and \n"+                                "   qc.cytotech=c.cytotech and \n"+                                "   qc.lab_number="+lnum+" \n"+                                "   ORDER BY qcc.rowid");                             parent.numQC=0;                            stmt=DbConnection.process().createStatement();                            rs=stmt.executeQuery(SQL);                            while (rs.next()) {                                qcResults.addElement(rs.getString(1));                                parent.resultRec.qc_date=rs.getString(2);                                parent.resultRec.qc_cytotech_code=rs.getString(4);                                parent.numQC++;                            }                            rs.close(); stmt.close();                            if (parent.numQC>parent.numSCR) parent.NUM_RESULTS=parent.numQC;                        }                        if (parent.resultRec.path_status.equals("Y")) {                            parent.hasPC=true;                            SQL = new String(                                "SELECT \n"+                                "   pcc.bethesda_code, \n"+                                "   TO_CHAR(pc.path_date,'MMDDYYYY'),pc.pathologist_code \n"+                                "FROM \n"+                                "   pcs.pathologist_control_codes pcc, \n"+                                "   pcs.pathologist_control pc \n"+                                "WHERE \n"+                                "   pcc.lab_number=pc.lab_number and \n"+                                "   pc.lab_number="+lnum+" \n"+                                "   ORDER BY pcc.rowid");                                                parent.numPATH=0;                            stmt=DbConnection.process().createStatement();                            rs=stmt.executeQuery(SQL);                            while (rs.next()) {                                pathResults.addElement(rs.getString(1));                                parent.resultRec.path_date=rs.getString(2);                                parent.resultRec.pathologist=rs.getString(3);                                parent.numPATH++;                            }                            rs.close(); stmt.close();                            if (parent.numPATH>parent.numSCR && parent.numPATH>parent.numQC)                                 parent.NUM_RESULTS=parent.numPATH;                        }                        for (int i=0; i<parent.NUM_RESULTS; i++) {                            parent.rData.addRow(null,null,null,null);                            if (i<parent.numSCR)                                parent.rData.setValueAt(scrResults.elementAt(i),i,0);                            if (i<parent.numQC)                                parent.rData.setValueAt(qcResults.elementAt(i),i,1);                            if (i<parent.numPATH)                                parent.rData.setValueAt(pathResults.elementAt(i),i,2);                        }                    }                    else {                        exitStatus=false;                         if (parent.resultRec.finished==(-1))                            Utils.createErrMsg("EXPIRED SPECIMEN");                    }                    if (parent.matIndexRequested>0 && exitStatus) {                        SQL = new String(                            "SELECT superficial,intermediate,parabasal \n"+                            "FROM pcs.lab_mat_index WHERE lab_number="+lnum+" \n");                        stmt=DbConnection.process().createStatement();                        rs=stmt.executeQuery(SQL);                        while (rs.next()) {                            parent.resultRec.superficial=rs.getInt(1);                            parent.resultRec.intermediate=rs.getInt(2);                            parent.resultRec.parabasal=rs.getInt(3);                        }                        rs.close(); stmt.close();                    }                }                            }            else { exitStatus=false; }            try { rs.close(); stmt.close(); }            catch (SQLException e) {                 parent.log.write("ERROR: Closing statement \n"+e);                exitStatus=false;             }                        }        catch (Exception e) {            parent.log.write(e+" query");            exitStatus=false;            parent.setMsgLabel("Operation Failed");        }        return(exitStatus);                }        public boolean queryAllTechs()  {        boolean exitStatus=true;        try  {            String query =                 "SELECT cytotech,lname,fname,cytotech_code \n"+                "FROM pcs.cytotechs WHERE active_status='A' \n"+                "ORDER BY lname,fname \n";                            parent.log.write("queryAllTechs");            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(query);            int rowsReturned=0;            while (rs.next()) { rowsReturned++; }                   rs.close(); stmt.close();            if (rowsReturned>0) {                parent.MAX_TECHS=rowsReturned;                parent.techs = new TechRec[parent.MAX_TECHS];                int ndx=0;                stmt=DbConnection.process().createStatement();                rs=stmt.executeQuery(query);                while (rs.next()) {                        parent.techs[ndx] = new TechRec();                        parent.techs[ndx].cytotech=rs.getInt(1);                        parent.techs[ndx].lname=rs.getString(2);                        parent.techs[ndx].fname=rs.getString(3);                        parent.techs[ndx].cytotech_code=rs.getString(4).trim();                        ndx++;                }                rs.close(); stmt.close();            }            else { exitStatus=false; }        }        catch (SQLException e) {             parent.log.write("ERROR: Closing statement \n"+e);            exitStatus=false;         }                        catch( Exception e ) {            parent.log.write(e+" queryAllTechs");            exitStatus=false;            parent.setMsgLabel("Operation Failed");        }        return(exitStatus);                }    public boolean queryResultCodes()  {        boolean exitStatus=true;        try  {            String query =                 "SELECT \n"+                "   bethesda_code,description, \n"+                "   path_needed,category,NVL(papclass,0),biopsy_request \n"+                "FROM \n"+                "   pcs.bethesda_codes \n"+                "WHERE \n"+                "   active_status='A' \n"+                "ORDER BY \n"+                "   bethesda_code \n";            parent.log.write("queryResultCodes");            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(query);            int rowsReturned=0;            while (rs.next()) { rowsReturned++; }                   rs.close(); stmt.close();            if (rowsReturned>0) {                parent.MAX_RESULT_CODES=rowsReturned;                parent.resultCodes = new ResultCodeRec[parent.MAX_RESULT_CODES];                int ndx=0;                stmt=DbConnection.process().createStatement();                rs=stmt.executeQuery(query);                while (rs.next()) {                    parent.resultCodes[ndx] = new ResultCodeRec();                    parent.resultCodes[ndx].bethesda_code=rs.getString(1).trim();                    parent.resultCodes[ndx].description=rs.getString(2);                    parent.resultCodes[ndx].path_needed=rs.getString(3);                    parent.resultCodes[ndx].category=rs.getString(4);                    parent.resultCodes[ndx].pap_class=rs.getInt(5);                    parent.resultCodes[ndx].biopsy_request=rs.getString(6);                    ndx++;                }                rs.close(); stmt.close();            }            else { exitStatus=false; }        }        catch (SQLException e) {             parent.log.write("ERROR: Closing statement \n"+e);            exitStatus=false;         }                        catch( Exception e ) {            parent.log.write(e+" queryResultCodes");            exitStatus=false;            parent.setMsgLabel("Operation Failed");        }        return(exitStatus);                }    public boolean add()  {        boolean exitStatus=true;        try  {            CallableStatement cstmt;	        cstmt=DbConnection.process().prepareCall(	            "{call pcs.lab_results_add(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");            cstmt.setInt(1,tResultRec.lab_number);            cstmt.setString(2,tResultRec.date_completed);            cstmt.setInt(3,tResultRec.cytotech);            cstmt.setString(4,tResultRec.pathologist);            cstmt.setString(5,tResultRec.comment_text);            cstmt.setString(6,tResultRec.lab_comments);            cstmt.setString(7,tResultRec.qc_status);            cstmt.setString(8,tResultRec.qc_date);            cstmt.setInt(9,tResultRec.qc_cytotech);            cstmt.setInt(10,tResultRec.superficial);            cstmt.setInt(11,tResultRec.intermediate);            cstmt.setInt(12,tResultRec.parabasal);            cstmt.setInt(13,tResultRec.first_print);            cstmt.setString(14,tResultRec.path_status);            cstmt.setString(15,tResultRec.path_date);            cstmt.setString(16,tResultRec.pathologist);            cstmt.setInt(17,tResultRec.pap_class);            cstmt.setString(18,tResultRec.biopsy_code);            cstmt.setInt(19,tResultRec.limited);            cstmt.executeUpdate();            cstmt.close();            parent.log.write("add \n"+tResultRec.toString());            for (int i=0;i<tLabResults.size();i++)  {                cstmt=DbConnection.process().prepareCall(	                "{call pcs.lab_result_codes_add(?,?,?)}");                cstmt.setInt(1,tResultRec.lab_number);                cstmt.setString(2,(String)tLabResults.elementAt(i));                cstmt.setInt(3,1);                cstmt.executeUpdate();                cstmt.close();            }               if (tResultRec.qc_status.equals("Y")) {                for (int i=0;i<tQCResults.size();i++)  {                    String r_code=(String)tQCResults.elementAt(i);                    String q_code=(String)tQCResults.elementAt(i);                    cstmt=DbConnection.process().prepareCall(	                    "{call pcs.lab_result_codes_add(?,?,?)}");                    cstmt.setInt(1,tResultRec.lab_number);                    cstmt.setString(2,r_code);                    cstmt.setInt(3,2);                    cstmt.executeUpdate();                    cstmt.close();                }               }            if (tResultRec.path_status.equals("Y")) {                for (int i=0;i<tPathResults.size();i++)  {                    String r_code = (String)tPathResults.elementAt(i);                    String q_code = (String)tPathResults.elementAt(i);                    cstmt=DbConnection.process().prepareCall(	                    "{call pcs.lab_result_codes_add(?,?,?)}");                    cstmt.setInt(1,tResultRec.lab_number);                    cstmt.setString(2,r_code);                    cstmt.setInt(3,3);                    cstmt.executeUpdate();                    cstmt.close();                }               }	        cstmt=DbConnection.process().prepareCall(	            "{call pcs.lab_pap_class(?)}");            cstmt.setInt(1,tResultRec.lab_number);            cstmt.executeUpdate();            cstmt.close();	        cstmt=DbConnection.process().prepareCall(	            "{call pcs.set_hpv(?)}");            cstmt.setInt(1,tResultRec.lab_number);            cstmt.executeUpdate();            cstmt.close();        }        catch (SQLException e) {             parent.log.write("ERROR: Closing statement \n"+e);            exitStatus=false;         }                        catch( Exception e ) {            parent.log.write(e+" result add procedures");            exitStatus=false;            String msg = "Add Operation for Lab #"+                tResultRec.lab_number+" failed";            Utils.createErrMsg(msg);        }        if (exitStatus) add_cost();        return(exitStatus);                }            public boolean add_cost()  {        boolean exitStatus=true;        try  {            CallableStatement cstmt;	        cstmt=DbConnection.process().prepareCall(	            "{call pcs.calculate_cost(?)}");            cstmt.setInt(1,tResultRec.lab_number);            cstmt.executeUpdate();            try { cstmt.close(); }            catch (SQLException e) {                 parent.log.write("ERROR: Closing statement \n"+e);                exitStatus=false;             }                        }        catch( Exception e ) {            parent.log.write(e+" add cost procedure");            exitStatus=false;        }        return(exitStatus);                }                public void copyResultData() {        tResultRec = new ResultRec();        tResultRec.lab_number=parent.resultRec.lab_number;        tResultRec.prev_lab_number=parent.resultRec.prev_lab_number;        tResultRec.date_collected=parent.resultRec.date_collected;        tResultRec.patient=parent.resultRec.patient;        tResultRec.ssn=parent.resultRec.ssn;        tResultRec.dob=parent.resultRec.dob;        tResultRec.address=parent.resultRec.address;        tResultRec.phone=parent.resultRec.phone;        tResultRec.practice=parent.resultRec.practice;        tResultRec.practice_name=parent.resultRec.practice_name;        tResultRec.doctor=parent.resultRec.doctor;        tResultRec.dr_name=parent.resultRec.dr_name;        tResultRec.billing_choice=parent.resultRec.billing_choice;        tResultRec.choice_code=parent.resultRec.choice_code;        tResultRec.comment_text=parent.resultRec.comment_text;        tResultRec.lab_comments=parent.resultRec.lab_comments;        tResultRec.date_completed=parent.resultRec.date_completed;        tResultRec.cytotech_code=parent.resultRec.cytotech_code;        tResultRec.cytotech=parent.resultRec.cytotech;        tResultRec.pathologist=parent.resultRec.pathologist;        tResultRec.qc_status=parent.resultRec.qc_status;        tResultRec.qc_date=parent.resultRec.qc_date;        tResultRec.qc_cytotech_code=parent.resultRec.cytotech_code;        tResultRec.qc_cytotech=parent.resultRec.qc_cytotech;        tResultRec.finished=parent.resultRec.finished;        tResultRec.superficial=parent.resultRec.superficial;        tResultRec.intermediate=parent.resultRec.intermediate;        tResultRec.parabasal=parent.resultRec.parabasal;        tResultRec.first_print=parent.resultRec.first_print;        tResultRec.datestamp=parent.resultRec.datestamp;        tResultRec.path_date=parent.resultRec.path_date;        tResultRec.path_status=parent.resultRec.path_status;        tResultRec.pap_class=parent.resultRec.pap_class;        tResultRec.slide_qty=parent.resultRec.slide_qty;        tResultRec.preparation=parent.resultRec.preparation;        tResultRec.biopsy_code=parent.resultRec.biopsy_code;        tResultRec.limited=parent.resultRec.limited;        tResultRec.fax_letter=parent.resultRec.fax_letter;        tLabResults = new Vector();        tQCResults = new Vector();        tPathResults = new Vector();        for (int i=0; i<parent.rData.getRowCount(); i++) {            String rCode = (String)parent.rData.getValueAt(i,0);            if (!Utils.isNull(rCode))                 tLabResults.addElement(rCode);            String qCode = (String)parent.rData.getValueAt(i,1);            if (!Utils.isNull(qCode))                tQCResults.addElement(qCode);            String pCode = (String)parent.rData.getValueAt(i,2);            if (!Utils.isNull(pCode))                tPathResults.addElement(pCode);        }    }        public boolean queryAllPaths()  {        boolean exitStatus=true;        try  {            String query =                 "SELECT \n"+                "   pathologist,lname,fname,address1,city, \n"+                "   state,zip,phone,pathologist_code,mi, \n"+                "   degree,title \n"+                "FROM pcs.pathologists \n"+                "WHERE active_status='A' \n"+                "ORDER BY lname,fname \n";            parent.log.write("queryAllPaths");            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(query);            int rowsReturned=0;            while (rs.next()) { rowsReturned++; }            rs.close(); stmt.close();            if (rowsReturned>0) {                parent.MAX_PATHS=rowsReturned;                parent.paths=new PathRec[parent.MAX_PATHS];                String ctItem=" ";                int ndx=0;                stmt=DbConnection.process().createStatement();                rs=stmt.executeQuery(query);                while (rs.next()) {                    parent.paths[ndx]=new PathRec();                    parent.paths[ndx].pathologist=rs.getInt(1);                    parent.paths[ndx].lname=rs.getString(2);                    parent.paths[ndx].fname=rs.getString(3);                    parent.paths[ndx].address1=rs.getString(4);                    parent.paths[ndx].city=rs.getString(5);                    parent.paths[ndx].state=rs.getString(6);                    parent.paths[ndx].zip=rs.getString(7);                    parent.paths[ndx].phone=rs.getString(8);                    parent.paths[ndx].pathologist_code=rs.getString(9);                    parent.paths[ndx].mi=rs.getString(10);                    parent.paths[ndx].degree=rs.getString(11);                    parent.paths[ndx].title=rs.getString(12);                    ndx++;                                    }                  rs.close(); stmt.close();            }            else { exitStatus=false; }        }        catch (SQLException e) {             parent.log.write("ERROR: Closing statement \n"+e);            exitStatus=false;         }                        catch( Exception e ) {            parent.log.write(e+" queryAllPaths");            exitStatus=false;            parent.setMsgLabel("Operation Failed");        }        return(exitStatus);                }        public boolean update()  {        boolean exitStatus=true;        try  {            CallableStatement cstmt;	        cstmt=DbConnection.process().prepareCall(	            "{call pcs.lab_results_update(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");            cstmt.setInt(1,tResultRec.lab_number);            cstmt.setString(2,tResultRec.date_completed);            cstmt.setInt(3,tResultRec.cytotech);            cstmt.setString(4,tResultRec.pathologist);            cstmt.setString(5,tResultRec.comment_text);            cstmt.setString(6,tResultRec.lab_comments);            cstmt.setString(7,tResultRec.qc_status);            cstmt.setString(8,tResultRec.qc_date);            cstmt.setInt(9,tResultRec.qc_cytotech);            cstmt.setInt(10,tResultRec.superficial);            cstmt.setInt(11,tResultRec.intermediate);            cstmt.setInt(12,tResultRec.parabasal);            cstmt.setInt(13,tResultRec.first_print);            cstmt.setString(14,tResultRec.path_status);            cstmt.setString(15,tResultRec.path_date);            cstmt.setString(16,tResultRec.pathologist);            cstmt.setInt(17,tResultRec.pap_class);            cstmt.setString(18,tResultRec.biopsy_code);            cstmt.setInt(19,tResultRec.limited);            cstmt.executeUpdate();            cstmt.close();            parent.log.write("update \n"+tResultRec.toString());            for (int i=0;i<tLabResults.size();i++)  {                cstmt=DbConnection.process().prepareCall(	                "{call pcs.lab_result_codes_add(?,?,?)}");                cstmt.setInt(1,tResultRec.lab_number);                cstmt.setString(2,(String)tLabResults.elementAt(i));                cstmt.setInt(3,1);                cstmt.executeUpdate();                cstmt.close();            }               if (tResultRec.qc_status.equals("Y")) {                for (int i=0;i<tQCResults.size();i++)  {                    String r_code=(String)tQCResults.elementAt(i);                    String q_code=(String)tQCResults.elementAt(i);                    cstmt=DbConnection.process().prepareCall(	                    "{call pcs.lab_result_codes_add(?,?,?)}");                    cstmt.setInt(1,tResultRec.lab_number);                    cstmt.setString(2,r_code);                    cstmt.setInt(3,2);                    cstmt.executeUpdate();                    cstmt.close();                }               }            if (tResultRec.path_status.equals("Y")) {                for (int i=0;i<tPathResults.size();i++)  {                    String r_code=(String)tPathResults.elementAt(i);                    String q_code=(String)tPathResults.elementAt(i);                    cstmt=DbConnection.process().prepareCall(	                    "{call pcs.lab_result_codes_add(?,?,?)}");                    cstmt.setInt(1,tResultRec.lab_number);                    cstmt.setString(2,r_code);                    cstmt.setInt(3,3);                    cstmt.executeUpdate();                    cstmt.close();                }               }	        cstmt=DbConnection.process().prepareCall(	            "{call pcs.lab_pap_class(?)}");            cstmt.setInt(1,tResultRec.lab_number);            cstmt.executeUpdate();            cstmt.close();	        cstmt=DbConnection.process().prepareCall(	            "{call pcs.set_hpv(?)}");            cstmt.setInt(1,tResultRec.lab_number);            cstmt.executeUpdate();            cstmt.close();        }        catch (SQLException e) {             parent.log.write("ERROR: Closing statement \n"+e);            exitStatus=false;         }                        catch( Exception e ) {            parent.log.write(e+" result update procedures");            exitStatus=false;            String msg = "Update Operation for Lab #"+                parent.resultRec.lab_number+" failed";            Utils.createErrMsg(msg);        }        if (exitStatus && tResultRec.finished==1)             update_cost();        return(exitStatus);                }                public boolean update_cost()  {        boolean exitStatus=true;        try  {            CallableStatement cstmt;	        cstmt=DbConnection.process().prepareCall(	            "{call pcs.calculate_cost(?)}");            cstmt.setInt(1,tResultRec.lab_number);            cstmt.executeUpdate();            if (tResultRec.fax_letter>=0) {                String SQL =                    "DELETE from pcs.billing_queue \n"+                    "WHERE lab_number = ? \n";                PreparedStatement pstmt = DbConnection.process().prepareStatement(SQL);                pstmt.setInt(1,tResultRec.lab_number);                pstmt.executeUpdate();                try { pstmt.close(); }                catch (SQLException e) {                     parent.log.write("ERROR: Closing statement \n"+e);                    exitStatus=false;                 }                            }            try { cstmt.close(); }            catch (SQLException e) {                 parent.log.write("ERROR: Closing statement \n"+e);                exitStatus=false;             }                        }        catch( Exception e ) {            parent.log.write(e+" update cost procedure");            exitStatus=false;        }        return(exitStatus);                }                public boolean getPrintHistory(int labNum, Vector v)  {        boolean exitStatus=true;        try  {            String query = new String(                "SELECT lab_number,first_print,TO_CHAR(print_date,'MM/DD/YYYY') \n"+                "FROM pcs.cytopath_history WHERE lab_number="+labNum+" \n"+                "ORDER BY print_date \n");            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(query);            while (rs.next()) {                int lab = rs.getInt(1);                int pMode = rs.getInt(2);                String pDate = rs.getString(3);                String s = " "+lab+"  "+pDate+"  ";                switch (pMode) {                    case ResultForm.DRAFT: s+="DRAFT"; break;                    case ResultForm.FINAL: s+="FINAL"; break;                    case ResultForm.DRAFT_COPY: s+="DRAFT COPY"; break;                    case ResultForm.FINAL_COPY: s+="FINAL COPY"; break;                }                v.addElement(s);                                }            try { rs.close(); stmt.close(); }            catch (SQLException e) {                 parent.log.write("ERROR: Closing statement \n"+e);                exitStatus=false;             }                        }        catch( Exception e ) {            parent.log.write(e+" get print history");            exitStatus=false;        }        return(exitStatus);                }            public boolean getPending(Vector v)  {        boolean exitStatus=true;        try  {            String query = new String(                "SELECT lr.lab_number||-||TO_CHAR(LTRIM(RTRIM(lr.preparation))),p.lname,p.fname,pr.practice,pr.name \n"+                "FROM pcs.lab_requisitions lr, pcs.patients p, pcs.practices pr \n"+                "WHERE lr.patient=p.patient \n"+                "   AND lr.practice=pr.practice \n"+                /*"	AND lr.preparation<>Lab.SURGICAL \n"+*/                /*"   AND lr.preparation<>Lab.EXPIRED \n"+*/                /*"   AND lr.finished=0 \n"+*/                "ORDER BY lr.lab_number \n");            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(query);            boolean hasData = false;            while (rs.next()) {                if (!hasData) {                    String x = "LAB #      "+"PATIENT                         "+                        "PRACTICE";                    v.addElement(x);                    x = "----------------------------------"+                        "--------------------------------------------";                    v.addElement(x);                    hasData=true;                }                int lab = rs.getInt(1);                String lname = rs.getString(2);                String fname = rs.getString(3);                int pr = rs.getInt(4);                String prName = rs.getString(5);                String s = lab+" "+Utils.rpad(lname,15)+" "+                    Utils.rpad(fname,15)+" "+                    Utils.lpad(Integer.toString(pr),3,"0")+" - "+                    Utils.rpad(prName,25);                v.addElement(s);                                }            try { rs.close(); stmt.close(); }            catch (SQLException e) {                 parent.log.write("ERROR: Closing statement \n"+e);                exitStatus=false;             }                        }        catch( Exception e ) {            parent.log.write(e+" get pending");            exitStatus=false;        }        return(exitStatus);                }                public String getCodeDescription(String rCode, String rDescr)  {        String uDescr = null;        String SQL = null;        Statement stmt = null;        ResultSet rs = null;        try  {            SQL = new String(                "SELECT TO_NUMBER(TO_CHAR(term_date,'YYYYMMDD')), description \n"+                "FROM pcs.bethesda_prior_descr \n"+                "WHERE bethesda_code = '"+rCode+"' \n"+                "ORDER BY term_date \n");            stmt = DbConnection.process().createStatement();            rs = stmt.executeQuery(SQL);            while (rs.next()) {                int ds = rs.getInt(1);                String t = rs.getString(2);                if (ds>parent.resultRec.iDatestamp) {                    uDescr=t;                    break;                }            }            try { rs.close(); stmt.close(); }            catch (SQLException e) {                 parent.log.write("ERROR: Closing statement \n"+e);            }                        }        catch (Exception e) {parent.log.write(e+" getCodeDescription"); }        if (Utils.isNull(uDescr)) uDescr=rDescr;        if (Utils.isNull(uDescr)) {            try {                SQL = new String(                    "SELECT description \n"+                    "FROM pcs.bethesda_codes \n"+                    "WHERE bethesda_code = '"+rCode+"' \n");                stmt = DbConnection.process().createStatement();                rs = stmt.executeQuery(SQL);                while (rs.next()) {                    uDescr = rs.getString(1);                }                try { rs.close(); stmt.close(); }                catch (SQLException e) {                     parent.log.write("ERROR: Closing statement \n"+e);                }                            }            catch (Exception e) {parent.log.write(e+" getCodeDescription"); }        }        return (uDescr);    }                public boolean hasLabComments(int labNum)     {        boolean hasComments = false;        try  {            String query =                 "SELECT comment_text \n"+                "FROM pcs.lab_req_comments "+                "WHERE lab_number="+labNum+" \n";            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(query);            while (rs.next()) { hasComments=true; }            try { rs.close(); stmt.close(); }            catch (SQLException e) { parent.log.write(e); }                        }        catch( Exception e ) { parent.log.write(e); }        return(hasComments);                }    }
