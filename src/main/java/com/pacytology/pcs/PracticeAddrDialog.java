package com.pacytology.pcs;

/*
		A basic implementation of the JDialog class.
*/

import java.awt.*;
import javax.swing.*;
import com.pacytology.pcs.ui.Square;
import java.util.Vector;
import java.sql.*;

public class PracticeAddrDialog extends javax.swing.JDialog
{
    private Vector pList;
    private Vector nameList;
    public Login dbLogin;
    
	public PracticeAddrDialog(Frame parent)
	{
		super(parent);
		
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Practice Address Labels");
		setResizable(false);
		getContentPane().setLayout(null);
		setSize(418,305);
		setVisible(false);
		pNameLbl.setText("Practice");
		getContentPane().add(pNameLbl);
		pNameLbl.setBounds(24,54,58,12);
		practice.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		getContentPane().add(practice);
		practice.setFont(new Font("DialogInput", Font.PLAIN, 12));
		practice.setBounds(86,52,30,20);
		addrPane.setOpaque(true);
		getContentPane().add(addrPane);
		addrPane.setBounds(24,80,370,210);
		addrPane.getViewport().add(addrList);
		addrList.setFont(new Font("DialogInput", Font.PLAIN, 12));
		addrList.setBounds(0,0,367,207);
		getContentPane().add(F9sq);
		F9sq.setBounds(88,6,20,20);
		F9lbl.setRequestFocusEnabled(false);
		F9lbl.setText("F9");
		getContentPane().add(F9lbl);
		F9lbl.setForeground(java.awt.Color.black);
		F9lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F9lbl.setBounds(92,6,20,20);
		F9action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F9action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F9action.setText("Exit");
		getContentPane().add(F9action);
		F9action.setForeground(java.awt.Color.black);
		F9action.setBounds(64,25,70,16);
		getContentPane().add(F1sq);
		F1sq.setBounds(28,6,20,20);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F1");
		getContentPane().add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(32,6,20,20);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("Print");
		getContentPane().add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(4,25,70,16);
		printerConfirm.setMessageType(javax.swing.JOptionPane.QUESTION_MESSAGE);
		//$$ printerConfirm.move(0,306);
		//}}
	
		//{{REGISTER_LISTENERS
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		practice.addKeyListener(aSymKey);
		//}}
	}

	public PracticeAddrDialog()
	{
		this((Frame)null);
	}

    public PracticeAddrDialog(Login dbLogin)
    {
        this();
        this.dbLogin=dbLogin;
        pList = new Vector();
        nameList = new Vector();
        Utils.setColors(this.getContentPane());
    }

	public PracticeAddrDialog(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

	public void setVisible(boolean b)
	{
		if (b)
			setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new PracticeAddrDialog()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JLabel pNameLbl = new javax.swing.JLabel();
	javax.swing.JTextField practice = new javax.swing.JTextField();
	javax.swing.JScrollPane addrPane = new javax.swing.JScrollPane();
	javax.swing.JList addrList = new javax.swing.JList();
	Square F9sq = new Square();
	javax.swing.JLabel F9lbl = new javax.swing.JLabel();
	javax.swing.JLabel F9action = new javax.swing.JLabel();
	Square F1sq = new Square();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	javax.swing.JLabel F1action = new javax.swing.JLabel();
	javax.swing.JOptionPane printerConfirm = new javax.swing.JOptionPane();
	//}}


	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == practice)
				practice_keyTyped(event);
		}

		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == PracticeAddrDialog.this)
				PracticeAddrDialog_keyPressed(event);
			else if (object == practice)
				practice_keyPressed(event);
		}
	}

	void PracticeAddrDialog_keyPressed(java.awt.event.KeyEvent event)
	{
		int key = event.getKeyCode();
		if (key==event.VK_F1) { 
		    if (pList.size()>0) {
		        if (printLabels()) closingActions();
		    }
		    else Utils.createErrMsg(
		        "No practices have been selected");
		}
		else if (key==event.VK_F9) closingActions();
	}
	
	void closingActions()	{ this.dispose(); }

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == PracticeAddrDialog.this)
				PracticeAddrDialog_windowClosing(event);
		}

		public void windowActivated(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == PracticeAddrDialog.this)
				PracticeAddrDialog_windowActivated(event);
		}
	}

	void PracticeAddrDialog_windowActivated(java.awt.event.WindowEvent event)
	{
		practice.requestFocus();
	}

	void practice_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceDigits(event,3);
	}

	void practice_keyPressed(java.awt.event.KeyEvent event)
	{
		int key = event.getKeyCode();
		if (key==event.VK_ENTER) {
		    if (Utils.required(practice,"Practice"))
		        addPractice();
		    practice.setText(null);
		}
		else if (key==event.VK_DELETE) {
		    removePractice();
		    practice.setText(null);
		}
	}
	
	private void getPractice()
	{
	    Statement stmt = null;
	    ResultSet rs = null;
	    try {
	        String SQL = 
	            "SELECT name FROM pcs.practices WHERE practice = "+practice.getText()+" \n";
	        stmt = dbConnection.process().createStatement();
	        rs = stmt.executeQuery(SQL);
	        String pName = null;
	        while (rs.next()) { pName=rs.getString(1); }
	        if (!Utils.isNull(pName)) {
	            pList.addElement(practice.getText());
	            String s = practice.getText()+" "+pName;
	            nameList.addElement(s);
	        }
	        else Utils.createErrMsg(
	            "Practice "+practice.getText()+"does not exist");
	        try { rs.close(); stmt.close(); }
	        catch (Exception e) { }
	    }
	    catch (Exception e) { }
	}
	
	private void refreshList()
	{
	    addrList.removeAll();
	    addrList.setListData(nameList);
	    addrList.revalidate();
	    addrList.repaint();
	}
	
	private void addPractice()
	{
	    getPractice();
	    refreshList();
	}
	
	private void removePractice()
	{
	    int ndx = pList.indexOf(practice.getText());
	    if (ndx==(-1)) {
	        Utils.createErrMsg(
	            "Practice "+practice.getText()+" not in list");
	    }
	    else {
	        pList.removeElementAt(ndx);
	        nameList.removeElementAt(ndx);
	        refreshList();
	    }
	}
	
	private boolean printLabels()
	{
	    Statement stmt = null;
	    CallableStatement cstmt = null;
	    ResultSet rs = null;
	    boolean labelsPrinted = false;
	    try {
	        String SQL = 
	            "DELETE from pcs.temp_table \n";
	        stmt = dbConnection.process().createStatement();
	        stmt.executeUpdate(SQL);
	        String s = "INSERT INTO pcs.temp_table (row_id) VALUES (";
	        for (int i=0; i<pList.size(); i++) {
	            String p = (String)pList.elementAt(i);
	            SQL = s+p+") \n";
	            stmt.executeUpdate(SQL);
	        }
	        cstmt=dbConnection.process().prepareCall(
	            "{call pcs.build_practice_label_file()}");
	        cstmt.executeUpdate();
	        if (verifyPrinter()) { 
	            Utils.genericPrint("g:\\","practice.lbl",false);
	            labelsPrinted=true;
	        }
	        try { rs.close(); stmt.close(); cstmt.close(); }
	        catch (Exception e) { }
	    }
	    catch (Exception e) { }
	    return labelsPrinted;
	}
	
	boolean verifyPrinter()
	{
	    boolean status = false;
		int rv = printerConfirm.showConfirmDialog(this,"Make sure printer is ready. \nPrint labels now?",
		    this.getTitle(),printerConfirm.YES_NO_OPTION,printerConfirm.QUESTION_MESSAGE);
		if (rv==printerConfirm.YES_OPTION) {
		    status=true;
		}
		return (status);
	}

	void PracticeAddrDialog_windowClosing(java.awt.event.WindowEvent event)
	{
		closingActions();
	}
	
}
