package com.pacytology.pcs;

/*
    PENNSYLVANIA CYTOLOGY SERVICES
    LABORATORY INFORMATION SYSTEM V1.0
    Copyright (C) 2001 by John Cardella
    All Rights Reserved
    
    File:       PracticesAddedDialog.java
    Created By: John Cardella, Software Engineer
    
    Function:   Form to create file of practices added to system from
    a specified date.
    
    MODIFICATIONS ----------------------------------------------------------------
    Date/Staff:   Description:
*/

import java.awt.*;
import javax.swing.*;
import java.io.*;
import java.sql.*;
import java.util.Vector;
import com.pacytology.pcs.ui.Square;

public class PracticesAddedDialog extends javax.swing.JDialog
{

    String reptName;
    Vector printerCodes;
    Vector data;
    
	public PracticesAddedDialog()
	{
		
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setTitle("Added On List");
		setResizable(false);
		setModal(true);
		setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
		getContentPane().setLayout(null);
		setSize(235,118);
		setVisible(false);
		getContentPane().add(beginMM);
		beginMM.setFont(new Font("SansSerif", Font.BOLD, 12));
		beginMM.setBounds(130,64,60,20);
		getContentPane().add(endMM);
		endMM.setFont(new Font("SansSerif", Font.BOLD, 12));
		endMM.setBounds(130,86,60,20);
		JLabel1.setText("Begin");
		getContentPane().add(JLabel1);
		JLabel1.setForeground(java.awt.Color.black);
		JLabel1.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel1.setBounds(20,66,68,14);
		JLabel2.setText("End");
		getContentPane().add(JLabel2);
		JLabel2.setForeground(java.awt.Color.black);
		JLabel2.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel2.setBounds(20,88,78,14);
		JLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		JLabel3.setText("MM/YYYY");
		getContentPane().add(JLabel3);
		JLabel3.setForeground(java.awt.Color.black);
		JLabel3.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel3.setBounds(56,66,68,14);
		JLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
		JLabel4.setText("MM/YYYY");
		getContentPane().add(JLabel4);
		JLabel4.setForeground(java.awt.Color.black);
		JLabel4.setFont(new Font("Dialog", Font.BOLD, 12));
		JLabel4.setBounds(56,88,68,14);
		getContentPane().add(F1sq);
		F1sq.setBounds(25,6,20,20);
		F1lbl.setRequestFocusEnabled(false);
		F1lbl.setText("F4");
		getContentPane().add(F1lbl);
		F1lbl.setForeground(java.awt.Color.black);
		F1lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F1lbl.setBounds(29,6,20,20);
		getContentPane().add(F2sq);
		F2sq.setBounds(77,6,20,20);
		F2lbl.setRequestFocusEnabled(false);
		F2lbl.setText("F9");
		getContentPane().add(F2lbl);
		F2lbl.setForeground(java.awt.Color.black);
		F2lbl.setFont(new Font("SansSerif", Font.PLAIN, 10));
		F2lbl.setBounds(81,6,20,20);
		F2action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F2action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F2action.setText("Exit");
		getContentPane().add(F2action);
		F2action.setForeground(java.awt.Color.black);
		F2action.setBounds(62,30,50,16);
		F1action.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		F1action.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		F1action.setText("File");
		getContentPane().add(F1action);
		F1action.setForeground(java.awt.Color.black);
		F1action.setBounds(10,30,50,16);
		fMsg1.setText("File Saved!");
		getContentPane().add(fMsg1);
		fMsg1.setForeground(java.awt.Color.black);
		fMsg1.setFont(new Font("Dialog", Font.BOLD, 12));
		fMsg1.setBounds(116,0,88,14);
		fMsg1.setVisible(false);
		fMsg2.setText("G:\\LabInfoSystem\\");
		getContentPane().add(fMsg2);
		fMsg2.setForeground(java.awt.Color.black);
		fMsg2.setFont(new Font("Dialog", Font.BOLD, 12));
		fMsg2.setBounds(116,12,104,18);
		fMsg2.setVisible(false);
		fMsg3.setText("NewPractices.txt");
		getContentPane().add(fMsg3);
		fMsg3.setForeground(java.awt.Color.black);
		fMsg3.setFont(new Font("Dialog", Font.BOLD, 12));
		fMsg3.setBounds(116,24,104,18);
		fMsg3.setVisible(false);
		//}}
		
		//{{REGISTER_LISTENERS
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		beginMM.addKeyListener(aSymKey);
		endMM.addKeyListener(aSymKey);
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		//}}
	}

	public void setVisible(boolean b)
	{
		if (b) setLocation(50,50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new PracticesAddedDialog()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted) return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JTextField beginMM = new javax.swing.JTextField();
	javax.swing.JTextField endMM = new javax.swing.JTextField();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
	Square F1sq = new Square();
	javax.swing.JLabel F1lbl = new javax.swing.JLabel();
	Square F2sq = new Square();
	javax.swing.JLabel F2lbl = new javax.swing.JLabel();
	javax.swing.JLabel F2action = new javax.swing.JLabel();
	javax.swing.JLabel F1action = new javax.swing.JLabel();
	javax.swing.JLabel fMsg1 = new javax.swing.JLabel();
	javax.swing.JLabel fMsg2 = new javax.swing.JLabel();
	javax.swing.JLabel fMsg3 = new javax.swing.JLabel();
	//}}


	void viewReport()
	{
	    if (Utils.isNull(beginMM.getText())) {
	        Utils.createErrMsg("No Data Entered");
        }
        else {
            String[] list = new String[data.size()];
            for (int i=0; i<data.size(); i++) {
                list[i]=(String)data.elementAt(i);
            }
            (new PickList(
                "Practices Summary",20,20,730,400,data.size(),list)).setVisible(true);
        }
	}
	

	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyTyped(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == beginMM)
				beginMM_keyTyped(event);
			else if (object == endMM)
				endMM_keyTyped(event);
			
		}

		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == PracticesAddedDialog.this)
				PracticesAddedDialog_keyPressed(event);
			else if (object == beginMM)
				beginMM_keyPressed(event);
			else if (object == endMM)
				endMM_keyPressed(event);
			
		}
	}

	void PracticesAddedDialog_keyPressed(java.awt.event.KeyEvent event)
	{
	    if (event.getKeyCode()==event.VK_F9) this.dispose();
	    else if (event.getKeyCode()==event.VK_F4) {
	        if (Utils.isNull(beginMM.getText())) {
	            Utils.createErrMsg("Must have BEGIN date!");
	            beginMM.setText(null);
	            endMM.setText(null);
	            beginMM.requestFocus();
	            return;
	        }
	        else createFile();
	    }
	    else if (event.getKeyCode()==event.VK_ESCAPE) {
	        fMsg1.setVisible(false);
	        fMsg2.setVisible(false);
	        fMsg3.setVisible(false);
	        beginMM.setText(null);
	        endMM.setText(null);
	        beginMM.requestFocus();
	    }
	}

	void beginMM_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (Utils.required(beginMM,"Beginning Month/Year"))
		        beginMM.transferFocus();
		}
	}

	void beginMM_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,7);
	}

	void endMM_keyPressed(java.awt.event.KeyEvent event)
	{
		if (event.getKeyCode()==event.VK_ENTER) {
		    if (getData()) viewReport();
		    this.dispose();
		}
	}

	void endMM_keyTyped(java.awt.event.KeyEvent event)
	{
		Utils.forceUpper(event,7);
	}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowOpened(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == PracticesAddedDialog.this)
				PracticesAddedDialog_windowOpened(event);
		}
	}

	void PracticesAddedDialog_windowOpened(java.awt.event.WindowEvent event)
	{
		beginMM.requestFocus();
	}
	
	boolean getData()
	{
	    boolean exitStatus = true;
        try  {

            data = new Vector();
            String rp = "REPORTING PERIOD: "+beginMM.getText();
            if (!Utils.isNull(endMM.getText())) rp = rp + " to "+endMM.getText();
            data.addElement(rp);
            data.addElement("     ");
            data.addElement("PRACTICES ADDED");
            data.addElement("-------------------------------------------------"+
                "---------------------------------------------------------------");
            data.addElement(
                " ACCOUNT:                                           ADDRESS:"+
                "                            PHONE:      ADDED:");
            data.addElement("-------------------------------------------------"+
                "---------------------------------------------------------------");
            
            String SQL =
                "SELECT TO_CHAR(practice,'009')||'  '|| \n"+
                "   RPAD(SUBSTR(name,1,34),46)|| \n"+
                "   RPAD(SUBSTR(city||', '||state||'  '||zip,1,34),36)|| \n"+
                "   phone||'  '||TO_CHAR(date_added,'MM/DD/YYYY') \n"+
                "FROM pcs.practices \n"+
                "WHERE date_added>=TO_DATE(?,'MM/YYYY') \n"+
                "AND date_added<LAST_DAY(TO_DATE(?,'MM/YYYY')+1) \n";
                
            PreparedStatement pstmt;
	        pstmt=dbConnection.process().prepareStatement(SQL);
            pstmt.setString(1,beginMM.getText());
            if (!Utils.isNull(endMM.getText()))
                pstmt.setString(2,endMM.getText());
            else 
                pstmt.setString(2,beginMM.getText());
            ResultSet rs = pstmt.executeQuery(SQL);
            while (rs.next()) { data.addElement(rs.getString(1)); }
            pstmt.close(); rs.close();

            data.addElement("     ");
            data.addElement("     ");
            data.addElement("NEW ACCOUNTS - CHARGES FOR THIS PERIOD");
            data.addElement("-------------------------------------------------");
            data.addElement(
                " ACCOUNT:"+"    CHARGES:");
            data.addElement("-------------------------------------------------");
           
            SQL = 
                "SELECT TO_CHAR(a.practice,'009'),TO_CHAR(SUM(b.item_amount),'99,990.99') \n"+
                "FROM pcs.practices a, pcs.lab_billing_items b, \n"+
                "   pcs.lab_requisitions c, pcs.lab_results d \n"+
                "WHERE c.practice=a.practice \n"+
                "AND c.lab_number=b.lab_number \n"+
                "AND b.lab_number=d.lab_number \n"+
                "AND d.datestamp>=TO_DATE(?,'MM/YYYY') \n"+
                "AND d.datestamp<LAST_DAY(TO_DATE(?,'MM/YYYY')+1) \n"+
                "AND a.date_added>=TO_DATE(?,'MM/YYYY') \n"+
                "AND a.date_added<LAST_DAY(TO_DATE(?,'MM/YYYY')+1) \n"+
                "GROUP BY a.practice \n";
           
	        pstmt=dbConnection.process().prepareStatement(SQL);
            pstmt.setString(1,beginMM.getText());
            if (!Utils.isNull(endMM.getText()))
                pstmt.setString(2,endMM.getText());
            else 
                pstmt.setString(2,beginMM.getText());
            pstmt.setString(3,beginMM.getText());
            if (!Utils.isNull(endMM.getText()))
                pstmt.setString(4,endMM.getText());
            else 
                pstmt.setString(4,beginMM.getText());
                
            rs = pstmt.executeQuery(SQL);
            while (rs.next()) { 
                data.addElement(rs.getString(1)+"        "+rs.getString(2)); 
            }
            pstmt.close(); rs.close();
            
            data.addElement("     ");
            data.addElement("     ");
            data.addElement("ADJUSTMENTS FOR THIS PERIOD");
            data.addElement("-------------------------------------------------"+
                "---------------------------------------------------------------");
            data.addElement(
                "DESCRIPTION:                   ACCOUNT:"+
                "     CHARGE:             TYPE:                   DATE:");
            data.addElement("-------------------------------------------------"+
                "---------------------------------------------------------------");
           
            /*
            SQL=
                "select rpad(substr(adjust_reason,1,32),34)|| \n"+
                "rpad(to_char(account_id,'009'),10)|| \n"+
                "rpad(to_char(payment_amount,'990.00'),20)|| \n"+
                "rpad(payment_type,24)|| \n"+
                "to_char(payment_date,'MM/DD/YYYY') \n"+
                "from pcs.payments a, pcs.payment_adjust_reasons b \n"+
                "where billing_choice=122 \n"+
                "and payment_date >=TO_DATE(?,'MM/YYYY') \n"+
                "AND payment_date<LAST_DAY(TO_DATE(?,'MM/YYYY')+1) \n"+
                "and a.payment_id=b.payment_id(+) \n"+
                "and a.payment_type in ('PLUS ADJUST','MINUS ADJUST') \n";
            */
            SQL=
                "select rpad(substr(adjust_reason,1,32),34)|| \n"+
                "ltrim(rtrim(to_char(account_id,'009')))||'  '|| \n"+
                "rpad(substr(name,1,34),36)|| \n"+ 
                "rpad(to_char(payment_amount,'990.00'),9)|| \n"+ 
                "rpad(payment_type,16)|| \n"+ 
                "lpad(to_char(payment_date,'MM/DD/YYYY'),12) \n"+
                "from pcs.payments a, pcs.payment_adjust_reasons b, pcs.practices c \n"+
                "where a.billing_choice=122 \n"+ 
                "and a.account_id=c.practice \n"+
                "and payment_date >=TO_DATE(?,'MM/YYYY') \n"+
                "AND payment_date<LAST_DAY(TO_DATE(?,'MM/YYYY')+1) \n"+ 
                "and a.payment_id=b.payment_id(+) \n"+ 
                "and a.payment_type in ('PLUS ADJUST','MINUS ADJUST') \n";
            
	        pstmt=dbConnection.process().prepareStatement(SQL);
            pstmt.setString(1,beginMM.getText());
            if (!Utils.isNull(endMM.getText()))
                pstmt.setString(2,endMM.getText());
            else 
                pstmt.setString(2,beginMM.getText());
            rs = pstmt.executeQuery(SQL);
            while (rs.next()) { data.addElement(rs.getString(1)); }
            pstmt.close(); rs.close();
                
        }
        catch(SQLException e) { Utils.createErrMsg(e.toString()); exitStatus=false; }
        catch(Exception e) { Utils.createErrMsg(e.toString()); exitStatus=false; }
        return(exitStatus);
	}
	
	public void createFile()
	{
        String fileName = "NewPractices.txt";
        String filePath = Utils.ROOT_DIR + "LabInfoSystem\\";
        try {
            PrintWriter fOUT = new PrintWriter(
                                new BufferedOutputStream(
                                    new FileOutputStream(
                                        filePath.trim()+fileName,false)),true);
            String SQL =
                "SELECT TO_CHAR(practice,'009')||' '|| \n"+
                "   RPAD(SUBSTR(name,1,46),48)|| \n"+
                "   RPAD(SUBSTR(address1,1,38),40)|| \n"+
                "   RPAD(SUBSTR(NVL(address2,' '),1,30),32)|| \n"+
                "   RPAD(SUBSTR(city||', '||state||'  '||zip,1,34),36) \n"+
                "FROM pcs.practices \n"+
                "WHERE date_added>=TO_DATE(?,'MM/YYYY') \n"+
                "AND date_added<LAST_DAY(TO_DATE(?,'MM/YYYY')+1) \n";
                
            PreparedStatement pstmt;
	        pstmt=dbConnection.process().prepareStatement(SQL);
            pstmt.setString(1,beginMM.getText());
            if (!Utils.isNull(endMM.getText()))
                pstmt.setString(2,endMM.getText());
            else 
                pstmt.setString(2,beginMM.getText());
            ResultSet rs = pstmt.executeQuery(SQL);
            while (rs.next()) { 
                String s = rs.getString(1);
                fOUT.write(s+"\n");
            }
            pstmt.close(); rs.close();
            fOUT.close();
            fMsg1.setVisible(true);
            fMsg2.setVisible(true);
            fMsg3.setVisible(true);
        }
        catch(SQLException e) { Utils.createErrMsg(e.toString()); }
        catch (Exception e) { System.out.println(e); }
	}
	
}
