package com.pacytology.pcs;/*    PENNSYLVANIA CYTOLOGY SERVICES    LABORATORY INFORMATION SYSTEM V1.0    Copyright (C) 2001 by John Cardella    All Rights Reserved        File:       PatientDbOps.java    Created By: John Cardella, Software Engineer        Function:   Database operations for patient lookup screen.        MODIFICATIONS ----------------------------------    Date/Staff      Description:    09/17           Changed db access in all methods                    to use dbConnection class                    connection rather than having                    separate one within this method*/import java.lang.*;import java.sql.*;import java.util.Vector;import java.awt.Cursor;public class PatientDbOps implements Runnable{    PatientForm parent;    private int rowsReturned;    private int currRow;     Thread dbThread;        public PatientDbOps(PatientForm p) { this.parent=p; }    public synchronized void run()     {        boolean b = query();        parent.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));        parent.parent.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));        if (b) {            parent.updatePatientTable();            parent.PatientTable.addRowSelectionInterval(0,0);            parent.PatientTable.repaint();            parent.PatientTable.revalidate();            parent.fillForm(0);        }    }    public void queryPatients()    {        dbThread = new Thread(this);        dbThread.setPriority(Thread.MAX_PRIORITY);        dbThread.start();    }    public boolean query()     {        boolean exitStatus=true;        int rowsReturned = 0;        Vector pVect = new Vector();        String SQL=null;        try  {            SQL =                 "SELECT \n"+                "   a.patient,a.lname,a.fname,a.mi,a.ssn, \n"+                "   a.address1,a.address2,a.city,a.state, \n"+                "   a.zip,a.phone,TO_CHAR(a.dob,'MMDDYYYY'), \n"+                "   null, \n"+                "   a.last_lab,d.practice,pr.active_status \n"+                "FROM \n"+                "   pcs.patients a, \n"+                "   pcs.lab_requisitions d, \n"+                "   pcs.practices pr \n"+                "WHERE \n"+                "   d.practice=pr.practice and \n"+                "   a.patient=d.patient";                            if (parent.autoQuery==true)                SQL=SQL.concat(" and \n   a.patient = "+                    parent.parent.labRec.pat.patient+" \n");            else  {                            if (Utils.length(parent.queryRec.lname)>0)                SQL=SQL.concat(" and \n   a.lname like '"+                 parent.queryRec.lname + "%' ");            if (Utils.length(parent.queryRec.fname)>0)                SQL=SQL.concat(" and \n   a.fname like '"+                 parent.queryRec.fname + "%' ");            if (Utils.length(parent.queryRec.mi)>0)                SQL=SQL.concat(" and \n   a.mi = '"+                 parent.queryRec.mi + "' ");            if (Utils.length(parent.queryRec.address1)>0)                SQL=SQL.concat(" and \n   SOUNDEX(a.address1) = SOUNDEX('"+                 parent.queryRec.address1 + "') ");            if (Utils.length(parent.queryRec.state)>0)                SQL=SQL.concat(" and \n   a.state = '"+                 parent.queryRec.state + "' ");            if (Utils.length(parent.queryRec.city)>0)                SQL=SQL.concat(" and \n   SOUNDEX(a.city) = SOUNDEX('"+                 parent.queryRec.city + "') ");            if (Utils.length(parent.queryRec.zip)>0)                SQL=SQL.concat(" and \n   a.zip = '"+                 parent.queryRec.zip + "' ");            if (Utils.length(parent.queryRec.phone)>0)                SQL=SQL.concat(" and \n   a.phone = '"+                 parent.queryRec.phone + "' ");            if (Utils.length(parent.queryRec.ssn)>0)                SQL=SQL.concat(" and \n   a.ssn = '"+                 parent.queryRec.ssn + "' ");            if (Utils.length(parent.queryRec.dob)>0)                SQL=SQL.concat(" and \n   a.dob = TO_DATE('"+                 parent.queryRec.dob + "','MMDDYYYY')");            if (parent.queryRec.last_lab>0) {                SQL=SQL.concat(" and \n   "+                    "mod(d.lab_number,1000000)="+parent.queryRec.last_lab+" ");            }            if (parent.queryRec.practice>0)                SQL=SQL.concat(" and \n   d.practice = "+                 parent.queryRec.practice)+" ";            }                            SQL=SQL+"\nORDER by a.lname,a.fname,a.address1 \n";            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(SQL);            rowsReturned=0;            int currRow=0;            while (rs.next()) {                Integer p = new Integer(rs.getInt(1));                if (!pVect.contains(p)) {                rowsReturned++;                if (rowsReturned==parent.paMaxRecs) break;                parent.paRec[currRow].patient=rs.getInt(1);                parent.paRec[currRow].lname=rs.getString(2);                parent.paRec[currRow].fname=rs.getString(3);                parent.paRec[currRow].pNameFmt =                    rs.getString(2)+", "+rs.getString(3);                parent.paRec[currRow].mi=rs.getString(4);                parent.paRec[currRow].ssn=rs.getString(5);                parent.paRec[currRow].address1=rs.getString(6);                if (rs.wasNull()==true) parent.paRec[currRow].pAddrFmt=" ";                else parent.paRec[currRow].pAddrFmt=rs.getString(6);                parent.paRec[currRow].city=rs.getString(8);                if (rs.wasNull()==false)                    parent.paRec[currRow].pAddrFmt =                        parent.paRec[currRow].pAddrFmt+", "+rs.getString(8);                parent.paRec[currRow].state=rs.getString(9);                if (rs.wasNull()==false)                    parent.paRec[currRow].pAddrFmt =                        parent.paRec[currRow].pAddrFmt+", "+rs.getString(9);                parent.paRec[currRow].zip=rs.getString(10);                if (rs.wasNull()==false)                    parent.paRec[currRow].pAddrFmt =                        parent.paRec[currRow].pAddrFmt+"  "+Utils.addZipMask(rs.getString(10));                parent.paRec[currRow].phone=rs.getString(11);                parent.paRec[currRow].dob=rs.getString(12);                parent.paRec[currRow].comment_text=rs.getString(13);                parent.paRec[currRow].last_lab=rs.getInt(14);                parent.paRec[currRow].practice=rs.getInt(15);                parent.paRec[currRow].prac_status=rs.getString(16);                currRow++;                pVect.addElement(p);                }            }                   parent.patQuerySize=rowsReturned;            if (rowsReturned>0) { parent.msgLabel.setText("Operation Succeeded"); }            else { exitStatus=false; }            try { rs.close(); stmt.close(); }            catch (SQLException e) {                exitStatus=false;                parent.log.write(e.toString());                Utils.createErrMsg("FATAL ERROR");            }                  }        catch( Exception e ) {            parent.log.write(e);            parent.log.write(SQL);            exitStatus=false;            Utils.createErrMsg("FATAL ERROR");        }        if (rowsReturned<1) {            Utils.createErrMsg("Patient not found");	        parent.noDataFound();	    }        return(exitStatus);                }    public boolean queryPatientLabs(int pat, Vector resultList)     {        boolean exitStatus=true;        int lab = 0;        int previousLab = 0;        try  {            String SQL =                 "SELECT MAX(lab_number) \n"+                "FROM pcs.lab_requisitions "+                "WHERE patient="+pat+" \n";            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(SQL);            while (rs.next()) { previousLab=rs.getInt(1); }            try { rs.close(); stmt.close(); }            catch (SQLException e) {                 parent.log.write(e.toString());                exitStatus=false;             }                            catch (Exception e) {                parent.log.write(e.toString());                exitStatus=false;             }            while (previousLab!=0 && previousLab!=lab) {                SQL =                     "SELECT lab_number,practice, \n"+                    "   TO_CHAR(date_collected,'MM/DD/YYYY'), \n"+                    "   TO_CHAR(datestamp,'MM/DD/YYYY'), \n"+                    "   finished,previous_lab \n"+                    "FROM pcs.lab_requisitions "+                    "WHERE lab_number="+previousLab+" \n";                stmt=DbConnection.process().createStatement();                rs=stmt.executeQuery(SQL);                while (rs.next()) {                    lab = rs.getInt(1);                    int practice = rs.getInt(2);                    String dc = rs.getString(3);                    String ds = rs.getString(4);                     int f = rs.getInt(5);                    previousLab=rs.getInt(6);                    String state=" ";                    if (f==1) state="SCREENING";                    else if (f==2) state="RESULTS";                    else if (f==3) state="BILLED";                    else if (f>3) state="PAID";                    String p_txt = Integer.toString(practice);                    if (practice<100) p_txt="0"+p_txt;                    resultList.addElement(lab+"  "+p_txt+"  "+dc+"  "+ds+"  "+state);                }                try { rs.close(); stmt.close(); }                catch (SQLException e) {                     parent.log.write(e.toString());                    exitStatus=false;                 }                                catch (Exception e) {                    parent.log.write(e);                    exitStatus=false;                }            }            try { rs.close(); stmt.close(); }            catch (SQLException e) {                 parent.log.write(e.toString());                exitStatus=false;             }                        }        catch (Exception e) {            parent.log.write(e);            exitStatus=false;            parent.msgLabel.setText("Operation Failed");        }        return(exitStatus);                }}
