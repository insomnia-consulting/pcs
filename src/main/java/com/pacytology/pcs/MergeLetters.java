import java.lang.*;import java.awt.*;import java.sql.*;import javax.swing.*;import java.awt.Toolkit;import java.awt.Window;import java.util.Properties;import java.util.Vector;import java.awt.PrintJob;public class MergeLetters{    PrintJob pjob;    public Login dbLogin;    public int maxY=0;    public String todaysDate;    public static final int LETTERS = 100;    public static final int ENVELOPES = 500;    private int currMode = 0;    private int counter = 0;    private int increment = 10;    public MergeLetters() { }    	public MergeLetters(Login dbLogin, PrintJob pjob, int mode)	{	    this();	    if (mode<ENVELOPES) this.currMode=LETTERS;	    else this.currMode=ENVELOPES;	    counter=mode-currMode;	    this.pjob=pjob;		this.dbLogin=dbLogin;	}	static public void main(String args[])	{		new MergeLetters();	}    public void createLetters()     {        Vector addressVect = getAddresses();        if (addressVect.size()<1) {            Utils.createErrMsg("No data located");            return;        }        Graphics pgraphics;        if (pjob!=null) {            /*            // for getting font samples            addressVect = new Vector();            AddressRec x = new AddressRec();            x.name="name";            x.addr1="addr1";            x.addr2="addr2";            x.csz="csz";            addressVect.addElement(x);            */            for (int i=0;i<addressVect.size();i++) {                pgraphics=pjob.getGraphics();                if (pgraphics!=null) {                    AddressRec a = (AddressRec)addressVect.elementAt(i);                    if (currMode==LETTERS)                        buildLetter(pgraphics,a);                    else if (currMode==ENVELOPES)                        buildEnvelope(pgraphics,a);                    else                        fontSamples(pgraphics);                    pgraphics.dispose();                }            }            pjob.end();        }    }        private void buildEnvelope(Graphics pgraphics, AddressRec a)    {	    int xStart=270, yStart=120, margin=30;	    int x=xStart, y=yStart;	    int line=14;	    	    Font pFont = new Font("SansSerif",Font.PLAIN,12); 	    Font bFont = new Font("SansSerif",Font.BOLD,12);         pgraphics.setFont(pFont);                x=xStart; y+=(line*2);        pgraphics.drawString(a.name,x,y);        y+=line;        pgraphics.drawString(a.addr1,x,y);        if (!Utils.isNull(a.addr2)) {            y+=line;            pgraphics.drawString(a.addr2,x,y);        }        y+=line;        pgraphics.drawString(a.csz,x,y);        y+=(line*2);        pgraphics.drawString("ATTN: Cytology Laboratory Manager",x,y);    }	/*	private void buildLetter(Graphics pgraphics, AddressRec a) 	{	    int xStart=90, yStart=170, margin=30;	    int x=xStart, y=yStart;	    int line=14;	    	    Font pFont = new Font("SansSerif",Font.PLAIN,12); 	    Font bFont = new Font("SansSerif",Font.BOLD,12);            pgraphics.setFont(pFont);        x=400;        pgraphics.drawString(todaysDate,x,y);        x=xStart; y+=(line*2);        pgraphics.drawString(a.name,x,y);        y+=line;        pgraphics.drawString(a.addr1,x,y);        if (!Utils.isNull(a.addr2)) {            y+=line;            pgraphics.drawString(a.addr2,x,y);        }        y+=line;        pgraphics.drawString(a.csz,x,y);                y+=(3*line);        pgraphics.drawString("ATTN: Cytology Manager",x,y);                x=230; y+=(2*line);        pgraphics.setFont(bFont);        pgraphics.drawString("PAP SMEAR BACK LOG?",x,y);                pgraphics.setFont(pFont);        x=xStart+margin; y+=(2*line);        pgraphics.drawString("Are your clients complaining about slow Pap smear turnaround time?  If so,",x,y);        x=xStart; y+=line;        pgraphics.drawString("Pennsylvania Cytology Services can help.",x,y);                x+=margin; y+=(2*line);        pgraphics.drawString("Pennsylvania Cytology Services is an independent laboratory specializing",x,y);        x=xStart; y+=line;        pgraphics.drawString("in Gyn-cytology for the past 28 years.  We are a large laboratory screening over",x,y);        y+=line;        pgraphics.drawString("300,000 cases per year.",x,y);                x+=margin; y+=(2*line);        pgraphics.drawString("We are directed by a board certified cytopathologist.  Our staff includes 2",x,y);        x=xStart; y+=line;        pgraphics.drawString("additional board certified cytopathologists and 32 board certified cytotechnologists.",x,y);        y+=line;        pgraphics.drawString("More than half our cytotechnologists have greater than ten years experience.",x,y);                x+=margin; y+=(2*line);        pgraphics.drawString("Pennsylvania Cytology Services is certified by The College of American",x,y);        x=xStart; y+=line;        pgraphics.drawString("Pathologists.  Our laboratory licenses include: Florida, Pennsylvania, Maryland,",x,y);        y+=line;        pgraphics.drawString("California and CLIA#39D0656968.",x,y);                x+=margin; y+=(2*line);        pgraphics.drawString("We have the capability of screening large volumes of both Conventional",x,y);        x=xStart; y+=line;        pgraphics.drawString("and ThinPrep (CYTYC) Paps.",x,y);                x=190; y+=(2*line);        pgraphics.setFont(bFont);        pgraphics.drawString("CONTACT US TODAY AT 1-800-344-1026",x,y);        	}	*/	private Vector getAddresses()	{	    Vector v = new Vector();        try {            Class.forName(dbLogin.driver);             Connection dbProc=DriverManager.getConnection                                (dbLogin.URL,                                 dbLogin.userName,                                 dbLogin.userPassword);            String SQL = "select name, \n"+            "   address1,address2, \n"+            "   city,state,zip, \n"+            "   to_char(SysDate+1,'fmMonth fmDD, YYYY') from pcs.mailer \n"+            "   order by name, address1, address2 \n";            Statement stmt = dbProc.createStatement();            ResultSet rs = stmt.executeQuery(SQL);            int ndx = 0;            while (rs.next()) {                ndx++;                if (ndx<=counter) continue;                if (ndx>counter+increment) break;                // size == n is just a temporary statement                // for testing purposes; get rid of this when                // printing the whole batch                //if (v.size()==1) break;                AddressRec a = new AddressRec();                a.name = rs.getString(1);                a.addr1 = rs.getString(2);                a.addr2 = rs.getString(3);                String city = rs.getString(4);                String state = rs.getString(5);                String zip = rs.getString(6);                a.csz = city+", "+state+"  "+zip;                if (Utils.isNull(todaysDate))                    todaysDate = rs.getString(7);                // get rid of conditional after testing                //if (counter%45==0) v.addElement(a);                v.addElement(a);            }            dbProc.close();                        }        catch (SQLException e) { System.out.println(e); }        catch (Exception e) { System.out.println(e); }        return (v);    }    private class AddressRec    {        String name;        String addr1;        String addr2;        String csz;        public AddressRec() { }    }     	public void fontSamples(Graphics pgraphics)     {	    int x=30, y=30;	    	    String[] fontNames = new String[3];	    fontNames[0]="SansSerif";	    fontNames[1]="Serif";	    fontNames[2]="Monospaced";	    	    String[] fontStyles = new String[3];	    fontStyles[0]="PLAIN";	    fontStyles[1]="BOLD";	    fontStyles[2]="ITALIC";	    	    int[] fontConstants = new int[3];	    fontConstants[0]=Font.PLAIN;	    fontConstants[1]=Font.BOLD;	    fontConstants[2]=Font.ITALIC;	    	    boolean messageFlag = true;	    for (int name = 0; name<3; name++) {	        for (int style = 0; style<3; style++) {	            for (int size = 10; size<19; size+=2) {                    pgraphics.setFont(new Font(                        fontNames[name],fontConstants[style],size));	                                    if (messageFlag) {                        messageFlag=false;                        int a = 370;                        int b = 30;                        pgraphics.drawString("FONT SAMPLES",a,b);                        b+=40;                        pgraphics.drawString("N O T E :",a,b);                        pgraphics.drawString("The sample letters were done using",a,b+12);                        pgraphics.drawString("the SansSerif font, plain style,",a,b+24);                        pgraphics.drawString("point size 12",a,b+36);                    }                    pgraphics.drawString(                        fontNames[name]+" "+fontStyles[style]+" "+size,x,y);                    y+=size+2;	            }	        }	    }    }    	private void buildLetter(Graphics pgraphics, AddressRec a) 	{	    int xStart=90, yStart=170, margin=30;	    int x=xStart, y=yStart;	    int line=14;	    	    Font pFont = new Font("SansSerif",Font.PLAIN,12); 	    Font bFont = new Font("SansSerif",Font.BOLD,12);            pgraphics.setFont(pFont);        x=400;        pgraphics.drawString(todaysDate,x,y);        x=xStart; y+=(line*2);        pgraphics.drawString(a.name,x,y);        y+=line;        pgraphics.drawString(a.addr1,x,y);        if (!Utils.isNull(a.addr2)) {            y+=line;            pgraphics.drawString(a.addr2,x,y);        }        y+=line;        pgraphics.drawString(a.csz,x,y);                y+=(3*line);        pgraphics.drawString("ATTN: Cytology Laboratory Manager",x,y);                x=xStart+margin; y+=(2*line);        pgraphics.drawString("We are Pennsylvania Cytology Services, an Independent Laboratory.",x,y);        x=xStart; y+=line;        pgraphics.drawString("specializing in gyn-cytology for the past 28 years.",x,y);                x=xStart+margin; y+=(2*line);        pgraphics.setFont(bFont);        pgraphics.drawString("PAP SMEAR BACK LOG? - WE CAN HELP!",x,y);                y+=(2*line);        pgraphics.drawString("WANT TO GET STARTED DOING THINPREP (CYTYC)? WE CAN",x,y);        y+=line;        pgraphics.drawString("TEMPORARILY DO THINPREPS UNTIL YOUR VOLUME CAN",x,y);        y+=line;        pgraphics.drawString("JUSTIFY A THINPREP PROCESSOR.",x,y);                y+=(2*line);        pgraphics.drawString("WE HAVE THE CAPACITY TO SCREEN LARGE DAILY VOLUMES OF",x,y);        y+=line;        pgraphics.drawString("BOTH CONVENTIONAL AND THINPREP (CYTYC) PAP SMEARS.",x,y);                pgraphics.setFont(pFont);        x=xStart+margin; y+=(2*line);        pgraphics.drawString("We are directed by a Board Certified Cytopathologist, our 28 ASCP",x,y);        x=xStart; y+=line;        pgraphics.drawString("Certified Cytotechnologists average greater than 10 years of experience.",x,y);        y+=line;        pgraphics.drawString("We are accredited by the College of American Pathologists",x,y);                x=xStart+margin; y+=(2*line);        pgraphics.drawString("We would like to provide our service to you.  For more information, call us",x,y);        x=xStart; y+=line;        pgraphics.drawString("at  ",x,y);        pgraphics.setFont(bFont);        pgraphics.drawString("    1-800-344-1026",x,y);        pgraphics.setFont(pFont);        pgraphics.drawString("                              , or fill out and return the enclosed Business Reply Card.",x,y);        	}    }
