package com.pacytology.pcs;/*    PENNSYLVANIA CYTOLOGY SERVICES    LABORATORY INFORMATION SYSTEM V1.0    Copyright (C) 2001 by John Cardella    All Rights Reserved        File:       DoctorListing.java    Created By: John Cardella, Software Engineer        Function:   Asks user for sort order, and then queries    for all doctors in the data base.        MODIFICATIONS ----------------------------------    Date/Staff      Description:*/import java.util.Vector;import java.sql.*;import javax.swing.JOptionPane;import javax.swing.JTextField;public class DoctorListing{    public Login dbLogin;    public Vector doctorVect;    Vector tVector;	String orderByClause;	String title;    public DoctorListing() {         doctorVect = new Vector();     }    /*    public DoctorListing(Login dbLogin)    {        this();        this.dbLogin=dbLogin;        Object[] possibleValues = {"Doctor", "Account#", "Practice"};         Object selectedValue = sortOrderConfirm.showInputDialog(null, "Select Sort Order", "Doctors", sortOrderConfirm.INFORMATION_MESSAGE, null, possibleValues, possibleValues[0]);         if (possibleValues[0].equals(selectedValue)) {            orderByClause="ORDER BY d.lname, d.fname ";            title="Physicians - Last Name";        }        else if (possibleValues[2].equals(selectedValue)) {            orderByClause="ORDER BY p.name, d.lname, d.fname ";            title="Physicians - Practice Name";        }        else {            orderByClause="ORDER BY d.practice, d.lname, d.fname ";            title="Physicians - Account Number";        }        boolean rv=this.query();        if (rv) displayList();    }     */    public DoctorListing(Login dbLogin)    {        this();        this.dbLogin=dbLogin;        Vector buttonVector = new Vector();        Vector sortOrderVector = new Vector();        tVector = new Vector();        buttonVector.addElement("Doctor ID#");        sortOrderVector.addElement("ORDER BY d.doctor ");        buttonVector.addElement("Account #");        sortOrderVector.addElement("ORDER BY d.practice, d.lname, d.fname ");        buttonVector.addElement("Account Name");        sortOrderVector.addElement("ORDER BY p.name, d.lname, d.fname ");        buttonVector.addElement("Doctor Name");        sortOrderVector.addElement("ORDER BY d.lname, d.fname ");        buttonVector.addElement("Active Status");        sortOrderVector.addElement("ORDER BY d.active_status, d.lname, d.fname ");        title="Physician Listing";        tVector.addElement(title+" - Sort Order");        tVector.addElement("RUN");        SortByDialog d = new SortByDialog(buttonVector,sortOrderVector,tVector);        d.setVisible(true);        for (;;) {            int x = tVector.size();            if (x>2) break;        }        orderByClause=(String)tVector.elementAt(1);        if (!orderByClause.equals("NULL")) {            if (this.query()) displayList();        }    }        	static public void main(String args[])	{		new DoctorListing();	}    public boolean query()  {        boolean exitStatus=true;        try  {            String query =                 "SELECT \n"+                "   d.doctor,d.practice,p.name, \n"+                "   d.lname,d.fname,d.mi,d.upin,d.license, \n"+                "   d.active_status,d.title,d.alt_license, \n"+                "   d.alt_state,d.bs_provider \n"+                "FROM pcs.doctors d, pcs.practices p \n"+                "WHERE d.practice=p.practice \n"+                 orderByClause+" \n";                            Statement stmt = DbConnection.process().createStatement();            ResultSet rs = stmt.executeQuery(query);            while (rs.next()) {                DoctorRec dRec = new DoctorRec();                dRec.doctor=rs.getInt(1);                dRec.practice=rs.getInt(2);                dRec.practice_name=rs.getString(3);                dRec.lname=rs.getString(4);                dRec.fname=rs.getString(5);                dRec.mi=rs.getString(6);                dRec.upin=rs.getString(7);                dRec.license=rs.getString(8);                dRec.active_status=rs.getString(9);                dRec.title=rs.getString(10);                dRec.alt_license=rs.getString(11);                dRec.alt_state=rs.getString(12);                dRec.bs_provider=rs.getString(13);                doctorVect.addElement(dRec);                            }               }        catch( Exception e ) {            exitStatus=false;        }        return(exitStatus);                }    public void displayList() {        String[] s = new String[doctorVect.size()];        for (int i=0; i<doctorVect.size(); i++) {            DoctorRec dRec = (DoctorRec)doctorVect.elementAt(i);            String t = Utils.lpad(                Integer.toString(dRec.doctor),6,"0");            String currLine = t+"-"+dRec.active_status+" ";            t=Utils.lpad(                Integer.toString(dRec.practice),3,"0");            currLine+=t+" ";            t=Utils.rpad(dRec.practice_name,30);            currLine+=t+" ";            t=Utils.rpad(Utils.doctorName(dRec,true),30);            currLine+=t+" ";            t=Utils.rpad(dRec.upin,10);            currLine+=t+" ";            t=Utils.rpad(dRec.license,10);            currLine+=t+" ";            t=Utils.rpad(dRec.bs_provider,10);            currLine+=t+" ";            t=Utils.rpad(dRec.alt_state,3);            currLine+=t;            t=Utils.rpad(dRec.alt_license,10);            currLine+=t;            s[i]=currLine;        }        (new PickList((String)tVector.elementAt(0),0,0,800,550,            doctorVect.size(),s)).setVisible(true);    }    } 
